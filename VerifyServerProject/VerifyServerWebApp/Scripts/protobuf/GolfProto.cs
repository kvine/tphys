// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.golf.proto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GolfProto {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static GolfProto() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCHeartbeatRequest : pb::GeneratedMessageLite<CCHeartbeatRequest, CCHeartbeatRequest.Builder> {
    private CCHeartbeatRequest() { }
    private static readonly CCHeartbeatRequest defaultInstance = new CCHeartbeatRequest().MakeReadOnly();
    private static readonly string[] _cCHeartbeatRequestFieldNames = new string[] { "request_time" };
    private static readonly uint[] _cCHeartbeatRequestFieldTags = new uint[] { 8 };
    public static CCHeartbeatRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCHeartbeatRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCHeartbeatRequest ThisMessage {
      get { return this; }
    }
    
    public const int RequestTimeFieldNumber = 1;
    private bool hasRequestTime;
    private long requestTime_;
    public bool HasRequestTime {
      get { return hasRequestTime; }
    }
    public long RequestTime {
      get { return requestTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRequestTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCHeartbeatRequestFieldNames;
      if (hasRequestTime) {
        output.WriteInt64(1, field_names[0], RequestTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, RequestTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequestTime) hash ^= requestTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCHeartbeatRequest other = obj as CCHeartbeatRequest;
      if (other == null) return false;
      if (hasRequestTime != other.hasRequestTime || (hasRequestTime && !requestTime_.Equals(other.requestTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request_time", hasRequestTime, requestTime_, writer);
    }
    #endregion
    
    public static CCHeartbeatRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHeartbeatRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHeartbeatRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHeartbeatRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHeartbeatRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHeartbeatRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCHeartbeatRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCHeartbeatRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCHeartbeatRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHeartbeatRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCHeartbeatRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCHeartbeatRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCHeartbeatRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCHeartbeatRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCHeartbeatRequest result;
      
      private CCHeartbeatRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCHeartbeatRequest original = result;
          result = new CCHeartbeatRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCHeartbeatRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCHeartbeatRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCHeartbeatRequest.DefaultInstance; }
      }
      
      public override CCHeartbeatRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCHeartbeatRequest) {
          return MergeFrom((CCHeartbeatRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCHeartbeatRequest other) {
        if (other == global::com.golf.proto.CCHeartbeatRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequestTime) {
          RequestTime = other.RequestTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCHeartbeatRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCHeartbeatRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRequestTime = input.ReadInt64(ref result.requestTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequestTime {
        get { return result.hasRequestTime; }
      }
      public long RequestTime {
        get { return result.RequestTime; }
        set { SetRequestTime(value); }
      }
      public Builder SetRequestTime(long value) {
        PrepareBuilder();
        result.hasRequestTime = true;
        result.requestTime_ = value;
        return this;
      }
      public Builder ClearRequestTime() {
        PrepareBuilder();
        result.hasRequestTime = false;
        result.requestTime_ = 0L;
        return this;
      }
    }
    static CCHeartbeatRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCHeartbeatResponse : pb::GeneratedMessageLite<CCHeartbeatResponse, CCHeartbeatResponse.Builder> {
    private CCHeartbeatResponse() { }
    private static readonly CCHeartbeatResponse defaultInstance = new CCHeartbeatResponse().MakeReadOnly();
    private static readonly string[] _cCHeartbeatResponseFieldNames = new string[] { "request_time" };
    private static readonly uint[] _cCHeartbeatResponseFieldTags = new uint[] { 8 };
    public static CCHeartbeatResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCHeartbeatResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCHeartbeatResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestTimeFieldNumber = 1;
    private bool hasRequestTime;
    private long requestTime_;
    public bool HasRequestTime {
      get { return hasRequestTime; }
    }
    public long RequestTime {
      get { return requestTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRequestTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCHeartbeatResponseFieldNames;
      if (hasRequestTime) {
        output.WriteInt64(1, field_names[0], RequestTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, RequestTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequestTime) hash ^= requestTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCHeartbeatResponse other = obj as CCHeartbeatResponse;
      if (other == null) return false;
      if (hasRequestTime != other.hasRequestTime || (hasRequestTime && !requestTime_.Equals(other.requestTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request_time", hasRequestTime, requestTime_, writer);
    }
    #endregion
    
    public static CCHeartbeatResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHeartbeatResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHeartbeatResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHeartbeatResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHeartbeatResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHeartbeatResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCHeartbeatResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCHeartbeatResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCHeartbeatResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHeartbeatResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCHeartbeatResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCHeartbeatResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCHeartbeatResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCHeartbeatResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCHeartbeatResponse result;
      
      private CCHeartbeatResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCHeartbeatResponse original = result;
          result = new CCHeartbeatResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCHeartbeatResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCHeartbeatResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCHeartbeatResponse.DefaultInstance; }
      }
      
      public override CCHeartbeatResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCHeartbeatResponse) {
          return MergeFrom((CCHeartbeatResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCHeartbeatResponse other) {
        if (other == global::com.golf.proto.CCHeartbeatResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequestTime) {
          RequestTime = other.RequestTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCHeartbeatResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCHeartbeatResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRequestTime = input.ReadInt64(ref result.requestTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequestTime {
        get { return result.hasRequestTime; }
      }
      public long RequestTime {
        get { return result.RequestTime; }
        set { SetRequestTime(value); }
      }
      public Builder SetRequestTime(long value) {
        PrepareBuilder();
        result.hasRequestTime = true;
        result.requestTime_ = value;
        return this;
      }
      public Builder ClearRequestTime() {
        PrepareBuilder();
        result.hasRequestTime = false;
        result.requestTime_ = 0L;
        return this;
      }
    }
    static CCHeartbeatResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUserAccount : pb::GeneratedMessageLite<CCUserAccount, CCUserAccount.Builder> {
    private CCUserAccount() { }
    private static readonly CCUserAccount defaultInstance = new CCUserAccount().MakeReadOnly();
    private static readonly string[] _cCUserAccountFieldNames = new string[] { "id", "third_account", "token" };
    private static readonly uint[] _cCUserAccountFieldTags = new uint[] { 10, 26, 18 };
    public static CCUserAccount DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUserAccount DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUserAccount ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TokenFieldNumber = 2;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public const int ThirdAccountFieldNumber = 3;
    private bool hasThirdAccount;
    private global::com.golf.proto.CCThirdAccount thirdAccount_;
    public bool HasThirdAccount {
      get { return hasThirdAccount; }
    }
    public global::com.golf.proto.CCThirdAccount ThirdAccount {
      get { return thirdAccount_ ?? global::com.golf.proto.CCThirdAccount.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasToken) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUserAccountFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasToken) {
        output.WriteString(2, field_names[2], Token);
      }
      if (hasThirdAccount) {
        output.WriteMessage(3, field_names[1], ThirdAccount);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Token);
      }
      if (hasThirdAccount) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, ThirdAccount);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasToken) hash ^= token_.GetHashCode();
      if (hasThirdAccount) hash ^= thirdAccount_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUserAccount other = obj as CCUserAccount;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasToken != other.hasToken || (hasToken && !token_.Equals(other.token_))) return false;
      if (hasThirdAccount != other.hasThirdAccount || (hasThirdAccount && !thirdAccount_.Equals(other.thirdAccount_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("token", hasToken, token_, writer);
      PrintField("third_account", hasThirdAccount, thirdAccount_, writer);
    }
    #endregion
    
    public static CCUserAccount ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUserAccount ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUserAccount ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUserAccount ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUserAccount ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUserAccount ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUserAccount ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUserAccount ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUserAccount ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUserAccount ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUserAccount MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUserAccount prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUserAccount, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUserAccount cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUserAccount result;
      
      private CCUserAccount PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUserAccount original = result;
          result = new CCUserAccount();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUserAccount MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUserAccount DefaultInstanceForType {
        get { return global::com.golf.proto.CCUserAccount.DefaultInstance; }
      }
      
      public override CCUserAccount BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUserAccount) {
          return MergeFrom((CCUserAccount) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUserAccount other) {
        if (other == global::com.golf.proto.CCUserAccount.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.HasThirdAccount) {
          MergeThirdAccount(other.ThirdAccount);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUserAccountFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUserAccountFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
            case 26: {
              global::com.golf.proto.CCThirdAccount.Builder subBuilder = global::com.golf.proto.CCThirdAccount.CreateBuilder();
              if (result.hasThirdAccount) {
                subBuilder.MergeFrom(ThirdAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ThirdAccount = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
      
      public bool HasThirdAccount {
       get { return result.hasThirdAccount; }
      }
      public global::com.golf.proto.CCThirdAccount ThirdAccount {
        get { return result.ThirdAccount; }
        set { SetThirdAccount(value); }
      }
      public Builder SetThirdAccount(global::com.golf.proto.CCThirdAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThirdAccount = true;
        result.thirdAccount_ = value;
        return this;
      }
      public Builder SetThirdAccount(global::com.golf.proto.CCThirdAccount.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasThirdAccount = true;
        result.thirdAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeThirdAccount(global::com.golf.proto.CCThirdAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasThirdAccount &&
            result.thirdAccount_ != global::com.golf.proto.CCThirdAccount.DefaultInstance) {
            result.thirdAccount_ = global::com.golf.proto.CCThirdAccount.CreateBuilder(result.thirdAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.thirdAccount_ = value;
        }
        result.hasThirdAccount = true;
        return this;
      }
      public Builder ClearThirdAccount() {
        PrepareBuilder();
        result.hasThirdAccount = false;
        result.thirdAccount_ = null;
        return this;
      }
    }
    static CCUserAccount() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCThirdAccount : pb::GeneratedMessageLite<CCThirdAccount, CCThirdAccount.Builder> {
    private CCThirdAccount() { }
    private static readonly CCThirdAccount defaultInstance = new CCThirdAccount().MakeReadOnly();
    private static readonly string[] _cCThirdAccountFieldNames = new string[] { "mail_addr", "phone_no", "social_id" };
    private static readonly uint[] _cCThirdAccountFieldTags = new uint[] { 18, 26, 10 };
    public static CCThirdAccount DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCThirdAccount DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCThirdAccount ThisMessage {
      get { return this; }
    }
    
    public const int SocialIdFieldNumber = 1;
    private bool hasSocialId;
    private string socialId_ = "";
    public bool HasSocialId {
      get { return hasSocialId; }
    }
    public string SocialId {
      get { return socialId_; }
    }
    
    public const int MailAddrFieldNumber = 2;
    private bool hasMailAddr;
    private string mailAddr_ = "";
    public bool HasMailAddr {
      get { return hasMailAddr; }
    }
    public string MailAddr {
      get { return mailAddr_; }
    }
    
    public const int PhoneNoFieldNumber = 3;
    private bool hasPhoneNo;
    private string phoneNo_ = "";
    public bool HasPhoneNo {
      get { return hasPhoneNo; }
    }
    public string PhoneNo {
      get { return phoneNo_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCThirdAccountFieldNames;
      if (hasSocialId) {
        output.WriteString(1, field_names[2], SocialId);
      }
      if (hasMailAddr) {
        output.WriteString(2, field_names[0], MailAddr);
      }
      if (hasPhoneNo) {
        output.WriteString(3, field_names[1], PhoneNo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSocialId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, SocialId);
      }
      if (hasMailAddr) {
        size += pb::CodedOutputStream.ComputeStringSize(2, MailAddr);
      }
      if (hasPhoneNo) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PhoneNo);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSocialId) hash ^= socialId_.GetHashCode();
      if (hasMailAddr) hash ^= mailAddr_.GetHashCode();
      if (hasPhoneNo) hash ^= phoneNo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCThirdAccount other = obj as CCThirdAccount;
      if (other == null) return false;
      if (hasSocialId != other.hasSocialId || (hasSocialId && !socialId_.Equals(other.socialId_))) return false;
      if (hasMailAddr != other.hasMailAddr || (hasMailAddr && !mailAddr_.Equals(other.mailAddr_))) return false;
      if (hasPhoneNo != other.hasPhoneNo || (hasPhoneNo && !phoneNo_.Equals(other.phoneNo_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("social_id", hasSocialId, socialId_, writer);
      PrintField("mail_addr", hasMailAddr, mailAddr_, writer);
      PrintField("phone_no", hasPhoneNo, phoneNo_, writer);
    }
    #endregion
    
    public static CCThirdAccount ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCThirdAccount ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCThirdAccount ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCThirdAccount ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCThirdAccount ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCThirdAccount ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCThirdAccount ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCThirdAccount ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCThirdAccount ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCThirdAccount ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCThirdAccount MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCThirdAccount prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCThirdAccount, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCThirdAccount cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCThirdAccount result;
      
      private CCThirdAccount PrepareBuilder() {
        if (resultIsReadOnly) {
          CCThirdAccount original = result;
          result = new CCThirdAccount();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCThirdAccount MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCThirdAccount DefaultInstanceForType {
        get { return global::com.golf.proto.CCThirdAccount.DefaultInstance; }
      }
      
      public override CCThirdAccount BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCThirdAccount) {
          return MergeFrom((CCThirdAccount) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCThirdAccount other) {
        if (other == global::com.golf.proto.CCThirdAccount.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSocialId) {
          SocialId = other.SocialId;
        }
        if (other.HasMailAddr) {
          MailAddr = other.MailAddr;
        }
        if (other.HasPhoneNo) {
          PhoneNo = other.PhoneNo;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCThirdAccountFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCThirdAccountFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSocialId = input.ReadString(ref result.socialId_);
              break;
            }
            case 18: {
              result.hasMailAddr = input.ReadString(ref result.mailAddr_);
              break;
            }
            case 26: {
              result.hasPhoneNo = input.ReadString(ref result.phoneNo_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSocialId {
        get { return result.hasSocialId; }
      }
      public string SocialId {
        get { return result.SocialId; }
        set { SetSocialId(value); }
      }
      public Builder SetSocialId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSocialId = true;
        result.socialId_ = value;
        return this;
      }
      public Builder ClearSocialId() {
        PrepareBuilder();
        result.hasSocialId = false;
        result.socialId_ = "";
        return this;
      }
      
      public bool HasMailAddr {
        get { return result.hasMailAddr; }
      }
      public string MailAddr {
        get { return result.MailAddr; }
        set { SetMailAddr(value); }
      }
      public Builder SetMailAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMailAddr = true;
        result.mailAddr_ = value;
        return this;
      }
      public Builder ClearMailAddr() {
        PrepareBuilder();
        result.hasMailAddr = false;
        result.mailAddr_ = "";
        return this;
      }
      
      public bool HasPhoneNo {
        get { return result.hasPhoneNo; }
      }
      public string PhoneNo {
        get { return result.PhoneNo; }
        set { SetPhoneNo(value); }
      }
      public Builder SetPhoneNo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPhoneNo = true;
        result.phoneNo_ = value;
        return this;
      }
      public Builder ClearPhoneNo() {
        PrepareBuilder();
        result.hasPhoneNo = false;
        result.phoneNo_ = "";
        return this;
      }
    }
    static CCThirdAccount() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCThirdAccountItem : pb::GeneratedMessageLite<CCThirdAccountItem, CCThirdAccountItem.Builder> {
    private CCThirdAccountItem() { }
    private static readonly CCThirdAccountItem defaultInstance = new CCThirdAccountItem().MakeReadOnly();
    private static readonly string[] _cCThirdAccountItemFieldNames = new string[] { "id", "sub_type", "token", "type" };
    private static readonly uint[] _cCThirdAccountItemFieldTags = new uint[] { 26, 16, 34, 8 };
    public static CCThirdAccountItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCThirdAccountItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCThirdAccountItem ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int SubTypeFieldNumber = 2;
    private bool hasSubType;
    private int subType_;
    public bool HasSubType {
      get { return hasSubType; }
    }
    public int SubType {
      get { return subType_; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TokenFieldNumber = 4;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCThirdAccountItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[3], Type);
      }
      if (hasSubType) {
        output.WriteInt32(2, field_names[1], SubType);
      }
      if (hasId) {
        output.WriteString(3, field_names[0], Id);
      }
      if (hasToken) {
        output.WriteString(4, field_names[2], Token);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasSubType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SubType);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Id);
      }
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Token);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasSubType) hash ^= subType_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasToken) hash ^= token_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCThirdAccountItem other = obj as CCThirdAccountItem;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasSubType != other.hasSubType || (hasSubType && !subType_.Equals(other.subType_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasToken != other.hasToken || (hasToken && !token_.Equals(other.token_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("sub_type", hasSubType, subType_, writer);
      PrintField("id", hasId, id_, writer);
      PrintField("token", hasToken, token_, writer);
    }
    #endregion
    
    public static CCThirdAccountItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCThirdAccountItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCThirdAccountItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCThirdAccountItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCThirdAccountItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCThirdAccountItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCThirdAccountItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCThirdAccountItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCThirdAccountItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCThirdAccountItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCThirdAccountItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCThirdAccountItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCThirdAccountItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCThirdAccountItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCThirdAccountItem result;
      
      private CCThirdAccountItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCThirdAccountItem original = result;
          result = new CCThirdAccountItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCThirdAccountItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCThirdAccountItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCThirdAccountItem.DefaultInstance; }
      }
      
      public override CCThirdAccountItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCThirdAccountItem) {
          return MergeFrom((CCThirdAccountItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCThirdAccountItem other) {
        if (other == global::com.golf.proto.CCThirdAccountItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasSubType) {
          SubType = other.SubType;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCThirdAccountItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCThirdAccountItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasSubType = input.ReadInt32(ref result.subType_);
              break;
            }
            case 26: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 34: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasSubType {
        get { return result.hasSubType; }
      }
      public int SubType {
        get { return result.SubType; }
        set { SetSubType(value); }
      }
      public Builder SetSubType(int value) {
        PrepareBuilder();
        result.hasSubType = true;
        result.subType_ = value;
        return this;
      }
      public Builder ClearSubType() {
        PrepareBuilder();
        result.hasSubType = false;
        result.subType_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
    }
    static CCThirdAccountItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLinkThirdAccountRequest : pb::GeneratedMessageLite<CCLinkThirdAccountRequest, CCLinkThirdAccountRequest.Builder> {
    private CCLinkThirdAccountRequest() { }
    private static readonly CCLinkThirdAccountRequest defaultInstance = new CCLinkThirdAccountRequest().MakeReadOnly();
    private static readonly string[] _cCLinkThirdAccountRequestFieldNames = new string[] { "id", "item" };
    private static readonly uint[] _cCLinkThirdAccountRequestFieldTags = new uint[] { 10, 18 };
    public static CCLinkThirdAccountRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLinkThirdAccountRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLinkThirdAccountRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCThirdAccountItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCThirdAccountItem Item {
      get { return item_ ?? global::com.golf.proto.CCThirdAccountItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLinkThirdAccountRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[1], Item);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLinkThirdAccountRequest other = obj as CCLinkThirdAccountRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item", hasItem, item_, writer);
    }
    #endregion
    
    public static CCLinkThirdAccountRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLinkThirdAccountRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLinkThirdAccountRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLinkThirdAccountRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLinkThirdAccountRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLinkThirdAccountRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLinkThirdAccountRequest result;
      
      private CCLinkThirdAccountRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLinkThirdAccountRequest original = result;
          result = new CCLinkThirdAccountRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLinkThirdAccountRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLinkThirdAccountRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCLinkThirdAccountRequest.DefaultInstance; }
      }
      
      public override CCLinkThirdAccountRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLinkThirdAccountRequest) {
          return MergeFrom((CCLinkThirdAccountRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLinkThirdAccountRequest other) {
        if (other == global::com.golf.proto.CCLinkThirdAccountRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLinkThirdAccountRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLinkThirdAccountRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCThirdAccountItem.Builder subBuilder = global::com.golf.proto.CCThirdAccountItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCThirdAccountItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCThirdAccountItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCThirdAccountItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
    }
    static CCLinkThirdAccountRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLinkThirdAccountResponse : pb::GeneratedMessageLite<CCLinkThirdAccountResponse, CCLinkThirdAccountResponse.Builder> {
    private CCLinkThirdAccountResponse() { }
    private static readonly CCLinkThirdAccountResponse defaultInstance = new CCLinkThirdAccountResponse().MakeReadOnly();
    private static readonly string[] _cCLinkThirdAccountResponseFieldNames = new string[] { "item", "result", "user_account" };
    private static readonly uint[] _cCLinkThirdAccountResponseFieldTags = new uint[] { 18, 8, 26 };
    public static CCLinkThirdAccountResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLinkThirdAccountResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLinkThirdAccountResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCThirdAccountItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCThirdAccountItem Item {
      get { return item_ ?? global::com.golf.proto.CCThirdAccountItem.DefaultInstance; }
    }
    
    public const int UserAccountFieldNumber = 3;
    private bool hasUserAccount;
    private global::com.golf.proto.CCUserAccount userAccount_;
    public bool HasUserAccount {
      get { return hasUserAccount; }
    }
    public global::com.golf.proto.CCUserAccount UserAccount {
      get { return userAccount_ ?? global::com.golf.proto.CCUserAccount.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasUserAccount) {
          if (!UserAccount.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLinkThirdAccountResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[0], Item);
      }
      if (hasUserAccount) {
        output.WriteMessage(3, field_names[2], UserAccount);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasUserAccount) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, UserAccount);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasUserAccount) hash ^= userAccount_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLinkThirdAccountResponse other = obj as CCLinkThirdAccountResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasUserAccount != other.hasUserAccount || (hasUserAccount && !userAccount_.Equals(other.userAccount_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("item", hasItem, item_, writer);
      PrintField("user_account", hasUserAccount, userAccount_, writer);
    }
    #endregion
    
    public static CCLinkThirdAccountResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLinkThirdAccountResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLinkThirdAccountResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLinkThirdAccountResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLinkThirdAccountResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLinkThirdAccountResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLinkThirdAccountResponse result;
      
      private CCLinkThirdAccountResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLinkThirdAccountResponse original = result;
          result = new CCLinkThirdAccountResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLinkThirdAccountResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLinkThirdAccountResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCLinkThirdAccountResponse.DefaultInstance; }
      }
      
      public override CCLinkThirdAccountResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLinkThirdAccountResponse) {
          return MergeFrom((CCLinkThirdAccountResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLinkThirdAccountResponse other) {
        if (other == global::com.golf.proto.CCLinkThirdAccountResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasUserAccount) {
          MergeUserAccount(other.UserAccount);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLinkThirdAccountResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLinkThirdAccountResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCThirdAccountItem.Builder subBuilder = global::com.golf.proto.CCThirdAccountItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCUserAccount.Builder subBuilder = global::com.golf.proto.CCUserAccount.CreateBuilder();
              if (result.hasUserAccount) {
                subBuilder.MergeFrom(UserAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserAccount = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCThirdAccountItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCThirdAccountItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCThirdAccountItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasUserAccount {
       get { return result.hasUserAccount; }
      }
      public global::com.golf.proto.CCUserAccount UserAccount {
        get { return result.UserAccount; }
        set { SetUserAccount(value); }
      }
      public Builder SetUserAccount(global::com.golf.proto.CCUserAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserAccount = true;
        result.userAccount_ = value;
        return this;
      }
      public Builder SetUserAccount(global::com.golf.proto.CCUserAccount.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserAccount = true;
        result.userAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserAccount(global::com.golf.proto.CCUserAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserAccount &&
            result.userAccount_ != global::com.golf.proto.CCUserAccount.DefaultInstance) {
            result.userAccount_ = global::com.golf.proto.CCUserAccount.CreateBuilder(result.userAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.userAccount_ = value;
        }
        result.hasUserAccount = true;
        return this;
      }
      public Builder ClearUserAccount() {
        PrepareBuilder();
        result.hasUserAccount = false;
        result.userAccount_ = null;
        return this;
      }
    }
    static CCLinkThirdAccountResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRestoreAccountRequest : pb::GeneratedMessageLite<CCRestoreAccountRequest, CCRestoreAccountRequest.Builder> {
    private CCRestoreAccountRequest() { }
    private static readonly CCRestoreAccountRequest defaultInstance = new CCRestoreAccountRequest().MakeReadOnly();
    private static readonly string[] _cCRestoreAccountRequestFieldNames = new string[] { "id", "item" };
    private static readonly uint[] _cCRestoreAccountRequestFieldTags = new uint[] { 10, 18 };
    public static CCRestoreAccountRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRestoreAccountRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRestoreAccountRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCThirdAccountItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCThirdAccountItem Item {
      get { return item_ ?? global::com.golf.proto.CCThirdAccountItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRestoreAccountRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[1], Item);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRestoreAccountRequest other = obj as CCRestoreAccountRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item", hasItem, item_, writer);
    }
    #endregion
    
    public static CCRestoreAccountRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRestoreAccountRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRestoreAccountRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRestoreAccountRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRestoreAccountRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRestoreAccountRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRestoreAccountRequest result;
      
      private CCRestoreAccountRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRestoreAccountRequest original = result;
          result = new CCRestoreAccountRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRestoreAccountRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRestoreAccountRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCRestoreAccountRequest.DefaultInstance; }
      }
      
      public override CCRestoreAccountRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRestoreAccountRequest) {
          return MergeFrom((CCRestoreAccountRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRestoreAccountRequest other) {
        if (other == global::com.golf.proto.CCRestoreAccountRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRestoreAccountRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRestoreAccountRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCThirdAccountItem.Builder subBuilder = global::com.golf.proto.CCThirdAccountItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCThirdAccountItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCThirdAccountItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCThirdAccountItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
    }
    static CCRestoreAccountRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRestoreAccountResponse : pb::GeneratedMessageLite<CCRestoreAccountResponse, CCRestoreAccountResponse.Builder> {
    private CCRestoreAccountResponse() { }
    private static readonly CCRestoreAccountResponse defaultInstance = new CCRestoreAccountResponse().MakeReadOnly();
    private static readonly string[] _cCRestoreAccountResponseFieldNames = new string[] { "item", "result", "s_user_data", "user_account" };
    private static readonly uint[] _cCRestoreAccountResponseFieldTags = new uint[] { 18, 8, 34, 26 };
    public static CCRestoreAccountResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRestoreAccountResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRestoreAccountResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCThirdAccountItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCThirdAccountItem Item {
      get { return item_ ?? global::com.golf.proto.CCThirdAccountItem.DefaultInstance; }
    }
    
    public const int UserAccountFieldNumber = 3;
    private bool hasUserAccount;
    private global::com.golf.proto.CCUserAccount userAccount_;
    public bool HasUserAccount {
      get { return hasUserAccount; }
    }
    public global::com.golf.proto.CCUserAccount UserAccount {
      get { return userAccount_ ?? global::com.golf.proto.CCUserAccount.DefaultInstance; }
    }
    
    public const int SUserDataFieldNumber = 4;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasUserAccount) {
          if (!UserAccount.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRestoreAccountResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[0], Item);
      }
      if (hasUserAccount) {
        output.WriteMessage(3, field_names[3], UserAccount);
      }
      if (hasSUserData) {
        output.WriteMessage(4, field_names[2], SUserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasUserAccount) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, UserAccount);
      }
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, SUserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasUserAccount) hash ^= userAccount_.GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRestoreAccountResponse other = obj as CCRestoreAccountResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasUserAccount != other.hasUserAccount || (hasUserAccount && !userAccount_.Equals(other.userAccount_))) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("item", hasItem, item_, writer);
      PrintField("user_account", hasUserAccount, userAccount_, writer);
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
    }
    #endregion
    
    public static CCRestoreAccountResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRestoreAccountResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRestoreAccountResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRestoreAccountResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRestoreAccountResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRestoreAccountResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRestoreAccountResponse result;
      
      private CCRestoreAccountResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRestoreAccountResponse original = result;
          result = new CCRestoreAccountResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRestoreAccountResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRestoreAccountResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCRestoreAccountResponse.DefaultInstance; }
      }
      
      public override CCRestoreAccountResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRestoreAccountResponse) {
          return MergeFrom((CCRestoreAccountResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRestoreAccountResponse other) {
        if (other == global::com.golf.proto.CCRestoreAccountResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasUserAccount) {
          MergeUserAccount(other.UserAccount);
        }
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRestoreAccountResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRestoreAccountResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCThirdAccountItem.Builder subBuilder = global::com.golf.proto.CCThirdAccountItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCUserAccount.Builder subBuilder = global::com.golf.proto.CCUserAccount.CreateBuilder();
              if (result.hasUserAccount) {
                subBuilder.MergeFrom(UserAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserAccount = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCThirdAccountItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCThirdAccountItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCThirdAccountItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasUserAccount {
       get { return result.hasUserAccount; }
      }
      public global::com.golf.proto.CCUserAccount UserAccount {
        get { return result.UserAccount; }
        set { SetUserAccount(value); }
      }
      public Builder SetUserAccount(global::com.golf.proto.CCUserAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserAccount = true;
        result.userAccount_ = value;
        return this;
      }
      public Builder SetUserAccount(global::com.golf.proto.CCUserAccount.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserAccount = true;
        result.userAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserAccount(global::com.golf.proto.CCUserAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserAccount &&
            result.userAccount_ != global::com.golf.proto.CCUserAccount.DefaultInstance) {
            result.userAccount_ = global::com.golf.proto.CCUserAccount.CreateBuilder(result.userAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.userAccount_ = value;
        }
        result.hasUserAccount = true;
        return this;
      }
      public Builder ClearUserAccount() {
        PrepareBuilder();
        result.hasUserAccount = false;
        result.userAccount_ = null;
        return this;
      }
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
    }
    static CCRestoreAccountResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetThirdTokenRequest : pb::GeneratedMessageLite<CCGetThirdTokenRequest, CCGetThirdTokenRequest.Builder> {
    private CCGetThirdTokenRequest() { }
    private static readonly CCGetThirdTokenRequest defaultInstance = new CCGetThirdTokenRequest().MakeReadOnly();
    private static readonly string[] _cCGetThirdTokenRequestFieldNames = new string[] { "id", "is_link", "item" };
    private static readonly uint[] _cCGetThirdTokenRequestFieldTags = new uint[] { 10, 24, 18 };
    public static CCGetThirdTokenRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetThirdTokenRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetThirdTokenRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCThirdAccountItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCThirdAccountItem Item {
      get { return item_ ?? global::com.golf.proto.CCThirdAccountItem.DefaultInstance; }
    }
    
    public const int IsLinkFieldNumber = 3;
    private bool hasIsLink;
    private bool isLink_ = true;
    public bool HasIsLink {
      get { return hasIsLink; }
    }
    public bool IsLink {
      get { return isLink_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetThirdTokenRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[2], Item);
      }
      if (hasIsLink) {
        output.WriteBool(3, field_names[1], IsLink);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasIsLink) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, IsLink);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasIsLink) hash ^= isLink_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetThirdTokenRequest other = obj as CCGetThirdTokenRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasIsLink != other.hasIsLink || (hasIsLink && !isLink_.Equals(other.isLink_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item", hasItem, item_, writer);
      PrintField("is_link", hasIsLink, isLink_, writer);
    }
    #endregion
    
    public static CCGetThirdTokenRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetThirdTokenRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetThirdTokenRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetThirdTokenRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetThirdTokenRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetThirdTokenRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetThirdTokenRequest result;
      
      private CCGetThirdTokenRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetThirdTokenRequest original = result;
          result = new CCGetThirdTokenRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetThirdTokenRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetThirdTokenRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetThirdTokenRequest.DefaultInstance; }
      }
      
      public override CCGetThirdTokenRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetThirdTokenRequest) {
          return MergeFrom((CCGetThirdTokenRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetThirdTokenRequest other) {
        if (other == global::com.golf.proto.CCGetThirdTokenRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasIsLink) {
          IsLink = other.IsLink;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetThirdTokenRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetThirdTokenRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCThirdAccountItem.Builder subBuilder = global::com.golf.proto.CCThirdAccountItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasIsLink = input.ReadBool(ref result.isLink_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCThirdAccountItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCThirdAccountItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCThirdAccountItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasIsLink {
        get { return result.hasIsLink; }
      }
      public bool IsLink {
        get { return result.IsLink; }
        set { SetIsLink(value); }
      }
      public Builder SetIsLink(bool value) {
        PrepareBuilder();
        result.hasIsLink = true;
        result.isLink_ = value;
        return this;
      }
      public Builder ClearIsLink() {
        PrepareBuilder();
        result.hasIsLink = false;
        result.isLink_ = true;
        return this;
      }
    }
    static CCGetThirdTokenRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetThirdTokenResponse : pb::GeneratedMessageLite<CCGetThirdTokenResponse, CCGetThirdTokenResponse.Builder> {
    private CCGetThirdTokenResponse() { }
    private static readonly CCGetThirdTokenResponse defaultInstance = new CCGetThirdTokenResponse().MakeReadOnly();
    private static readonly string[] _cCGetThirdTokenResponseFieldNames = new string[] { "is_link", "item", "result", "s_user_data", "valid_et" };
    private static readonly uint[] _cCGetThirdTokenResponseFieldTags = new uint[] { 40, 18, 8, 34, 24 };
    public static CCGetThirdTokenResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetThirdTokenResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetThirdTokenResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCThirdAccountItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCThirdAccountItem Item {
      get { return item_ ?? global::com.golf.proto.CCThirdAccountItem.DefaultInstance; }
    }
    
    public const int ValidEtFieldNumber = 3;
    private bool hasValidEt;
    private long validEt_;
    public bool HasValidEt {
      get { return hasValidEt; }
    }
    public long ValidEt {
      get { return validEt_; }
    }
    
    public const int SUserDataFieldNumber = 4;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public const int IsLinkFieldNumber = 5;
    private bool hasIsLink;
    private bool isLink_;
    public bool HasIsLink {
      get { return hasIsLink; }
    }
    public bool IsLink {
      get { return isLink_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetThirdTokenResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[2], Result);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[1], Item);
      }
      if (hasValidEt) {
        output.WriteInt64(3, field_names[4], ValidEt);
      }
      if (hasSUserData) {
        output.WriteMessage(4, field_names[3], SUserData);
      }
      if (hasIsLink) {
        output.WriteBool(5, field_names[0], IsLink);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasValidEt) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, ValidEt);
      }
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, SUserData);
      }
      if (hasIsLink) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, IsLink);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasValidEt) hash ^= validEt_.GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      if (hasIsLink) hash ^= isLink_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetThirdTokenResponse other = obj as CCGetThirdTokenResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasValidEt != other.hasValidEt || (hasValidEt && !validEt_.Equals(other.validEt_))) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      if (hasIsLink != other.hasIsLink || (hasIsLink && !isLink_.Equals(other.isLink_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("item", hasItem, item_, writer);
      PrintField("valid_et", hasValidEt, validEt_, writer);
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
      PrintField("is_link", hasIsLink, isLink_, writer);
    }
    #endregion
    
    public static CCGetThirdTokenResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetThirdTokenResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetThirdTokenResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetThirdTokenResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetThirdTokenResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetThirdTokenResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetThirdTokenResponse result;
      
      private CCGetThirdTokenResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetThirdTokenResponse original = result;
          result = new CCGetThirdTokenResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetThirdTokenResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetThirdTokenResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetThirdTokenResponse.DefaultInstance; }
      }
      
      public override CCGetThirdTokenResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetThirdTokenResponse) {
          return MergeFrom((CCGetThirdTokenResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetThirdTokenResponse other) {
        if (other == global::com.golf.proto.CCGetThirdTokenResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasValidEt) {
          ValidEt = other.ValidEt;
        }
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        if (other.HasIsLink) {
          IsLink = other.IsLink;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetThirdTokenResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetThirdTokenResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCThirdAccountItem.Builder subBuilder = global::com.golf.proto.CCThirdAccountItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasValidEt = input.ReadInt64(ref result.validEt_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasIsLink = input.ReadBool(ref result.isLink_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCThirdAccountItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCThirdAccountItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCThirdAccountItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCThirdAccountItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCThirdAccountItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasValidEt {
        get { return result.hasValidEt; }
      }
      public long ValidEt {
        get { return result.ValidEt; }
        set { SetValidEt(value); }
      }
      public Builder SetValidEt(long value) {
        PrepareBuilder();
        result.hasValidEt = true;
        result.validEt_ = value;
        return this;
      }
      public Builder ClearValidEt() {
        PrepareBuilder();
        result.hasValidEt = false;
        result.validEt_ = 0L;
        return this;
      }
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
      
      public bool HasIsLink {
        get { return result.hasIsLink; }
      }
      public bool IsLink {
        get { return result.IsLink; }
        set { SetIsLink(value); }
      }
      public Builder SetIsLink(bool value) {
        PrepareBuilder();
        result.hasIsLink = true;
        result.isLink_ = value;
        return this;
      }
      public Builder ClearIsLink() {
        PrepareBuilder();
        result.hasIsLink = false;
        result.isLink_ = false;
        return this;
      }
    }
    static CCGetThirdTokenResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSyncUserAccountRequest : pb::GeneratedMessageLite<CCSyncUserAccountRequest, CCSyncUserAccountRequest.Builder> {
    private CCSyncUserAccountRequest() { }
    private static readonly CCSyncUserAccountRequest defaultInstance = new CCSyncUserAccountRequest().MakeReadOnly();
    private static readonly string[] _cCSyncUserAccountRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCSyncUserAccountRequestFieldTags = new uint[] { 10 };
    public static CCSyncUserAccountRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSyncUserAccountRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSyncUserAccountRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSyncUserAccountRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSyncUserAccountRequest other = obj as CCSyncUserAccountRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCSyncUserAccountRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSyncUserAccountRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSyncUserAccountRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSyncUserAccountRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSyncUserAccountRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSyncUserAccountRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSyncUserAccountRequest result;
      
      private CCSyncUserAccountRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSyncUserAccountRequest original = result;
          result = new CCSyncUserAccountRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSyncUserAccountRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSyncUserAccountRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSyncUserAccountRequest.DefaultInstance; }
      }
      
      public override CCSyncUserAccountRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSyncUserAccountRequest) {
          return MergeFrom((CCSyncUserAccountRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSyncUserAccountRequest other) {
        if (other == global::com.golf.proto.CCSyncUserAccountRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSyncUserAccountRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSyncUserAccountRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCSyncUserAccountRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSyncUserAccountResponse : pb::GeneratedMessageLite<CCSyncUserAccountResponse, CCSyncUserAccountResponse.Builder> {
    private CCSyncUserAccountResponse() { }
    private static readonly CCSyncUserAccountResponse defaultInstance = new CCSyncUserAccountResponse().MakeReadOnly();
    private static readonly string[] _cCSyncUserAccountResponseFieldNames = new string[] { "result", "user_account" };
    private static readonly uint[] _cCSyncUserAccountResponseFieldTags = new uint[] { 8, 18 };
    public static CCSyncUserAccountResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSyncUserAccountResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSyncUserAccountResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int UserAccountFieldNumber = 2;
    private bool hasUserAccount;
    private global::com.golf.proto.CCUserAccount userAccount_;
    public bool HasUserAccount {
      get { return hasUserAccount; }
    }
    public global::com.golf.proto.CCUserAccount UserAccount {
      get { return userAccount_ ?? global::com.golf.proto.CCUserAccount.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasUserAccount) {
          if (!UserAccount.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSyncUserAccountResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasUserAccount) {
        output.WriteMessage(2, field_names[1], UserAccount);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasUserAccount) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserAccount);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasUserAccount) hash ^= userAccount_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSyncUserAccountResponse other = obj as CCSyncUserAccountResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasUserAccount != other.hasUserAccount || (hasUserAccount && !userAccount_.Equals(other.userAccount_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("user_account", hasUserAccount, userAccount_, writer);
    }
    #endregion
    
    public static CCSyncUserAccountResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSyncUserAccountResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSyncUserAccountResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSyncUserAccountResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSyncUserAccountResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSyncUserAccountResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSyncUserAccountResponse result;
      
      private CCSyncUserAccountResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSyncUserAccountResponse original = result;
          result = new CCSyncUserAccountResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSyncUserAccountResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSyncUserAccountResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCSyncUserAccountResponse.DefaultInstance; }
      }
      
      public override CCSyncUserAccountResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSyncUserAccountResponse) {
          return MergeFrom((CCSyncUserAccountResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSyncUserAccountResponse other) {
        if (other == global::com.golf.proto.CCSyncUserAccountResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasUserAccount) {
          MergeUserAccount(other.UserAccount);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSyncUserAccountResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSyncUserAccountResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCUserAccount.Builder subBuilder = global::com.golf.proto.CCUserAccount.CreateBuilder();
              if (result.hasUserAccount) {
                subBuilder.MergeFrom(UserAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserAccount = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasUserAccount {
       get { return result.hasUserAccount; }
      }
      public global::com.golf.proto.CCUserAccount UserAccount {
        get { return result.UserAccount; }
        set { SetUserAccount(value); }
      }
      public Builder SetUserAccount(global::com.golf.proto.CCUserAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserAccount = true;
        result.userAccount_ = value;
        return this;
      }
      public Builder SetUserAccount(global::com.golf.proto.CCUserAccount.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserAccount = true;
        result.userAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserAccount(global::com.golf.proto.CCUserAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserAccount &&
            result.userAccount_ != global::com.golf.proto.CCUserAccount.DefaultInstance) {
            result.userAccount_ = global::com.golf.proto.CCUserAccount.CreateBuilder(result.userAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.userAccount_ = value;
        }
        result.hasUserAccount = true;
        return this;
      }
      public Builder ClearUserAccount() {
        PrepareBuilder();
        result.hasUserAccount = false;
        result.userAccount_ = null;
        return this;
      }
    }
    static CCSyncUserAccountResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUserData : pb::GeneratedMessageLite<CCUserData, CCUserData.Builder> {
    private CCUserData() { }
    private static readonly CCUserData defaultInstance = new CCUserData().MakeReadOnly();
    private static readonly string[] _cCUserDataFieldNames = new string[] { "asset_data", "base_data" };
    private static readonly uint[] _cCUserDataFieldTags = new uint[] { 18, 10 };
    public static CCUserData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUserData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUserData ThisMessage {
      get { return this; }
    }
    
    public const int BaseDataFieldNumber = 1;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public const int AssetDataFieldNumber = 2;
    private bool hasAssetData;
    private global::com.golf.proto.CCAssetData assetData_;
    public bool HasAssetData {
      get { return hasAssetData; }
    }
    public global::com.golf.proto.CCAssetData AssetData {
      get { return assetData_ ?? global::com.golf.proto.CCAssetData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUserDataFieldNames;
      if (hasBaseData) {
        output.WriteMessage(1, field_names[1], BaseData);
      }
      if (hasAssetData) {
        output.WriteMessage(2, field_names[0], AssetData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, BaseData);
      }
      if (hasAssetData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, AssetData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      if (hasAssetData) hash ^= assetData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUserData other = obj as CCUserData;
      if (other == null) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      if (hasAssetData != other.hasAssetData || (hasAssetData && !assetData_.Equals(other.assetData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("base_data", hasBaseData, baseData_, writer);
      PrintField("asset_data", hasAssetData, assetData_, writer);
    }
    #endregion
    
    public static CCUserData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUserData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUserData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUserData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUserData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUserData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUserData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUserData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUserData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUserData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUserData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUserData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUserData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUserData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUserData result;
      
      private CCUserData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUserData original = result;
          result = new CCUserData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUserData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUserData DefaultInstanceForType {
        get { return global::com.golf.proto.CCUserData.DefaultInstance; }
      }
      
      public override CCUserData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUserData) {
          return MergeFrom((CCUserData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUserData other) {
        if (other == global::com.golf.proto.CCUserData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        if (other.HasAssetData) {
          MergeAssetData(other.AssetData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUserDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUserDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCAssetData.Builder subBuilder = global::com.golf.proto.CCAssetData.CreateBuilder();
              if (result.hasAssetData) {
                subBuilder.MergeFrom(AssetData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AssetData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
      
      public bool HasAssetData {
       get { return result.hasAssetData; }
      }
      public global::com.golf.proto.CCAssetData AssetData {
        get { return result.AssetData; }
        set { SetAssetData(value); }
      }
      public Builder SetAssetData(global::com.golf.proto.CCAssetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAssetData = true;
        result.assetData_ = value;
        return this;
      }
      public Builder SetAssetData(global::com.golf.proto.CCAssetData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAssetData = true;
        result.assetData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAssetData(global::com.golf.proto.CCAssetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAssetData &&
            result.assetData_ != global::com.golf.proto.CCAssetData.DefaultInstance) {
            result.assetData_ = global::com.golf.proto.CCAssetData.CreateBuilder(result.assetData_).MergeFrom(value).BuildPartial();
        } else {
          result.assetData_ = value;
        }
        result.hasAssetData = true;
        return this;
      }
      public Builder ClearAssetData() {
        PrepareBuilder();
        result.hasAssetData = false;
        result.assetData_ = null;
        return this;
      }
    }
    static CCUserData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBaseData : pb::GeneratedMessageLite<CCBaseData, CCBaseData.Builder> {
    private CCBaseData() { }
    private static readonly CCBaseData defaultInstance = new CCBaseData().MakeReadOnly();
    private static readonly string[] _cCBaseDataFieldNames = new string[] { "acsry_id", "ava_frame_id", "avatar_id", "ball_id", "best_history_rank_status", "cloth_id", "club_id", "club_ids", "club_suit_data", "coin", "cup", "custom_ava_id", "exp", "first_bill_time", "gem", "hat_id", "id", "league_lv", "lv", "mmr", "name", "new_suit_data", "region_id", "social_id", "suit_data", "sync_account_flag" };
    private static readonly uint[] _cCBaseDataFieldTags = new uint[] { 120, 128, 64, 104, 186, 80, 72, 136, 194, 24, 40, 208, 56, 176, 32, 112, 10, 96, 48, 144, 18, 202, 88, 154, 162, 168 };
    public static CCBaseData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBaseData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBaseData ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int CoinFieldNumber = 3;
    private bool hasCoin;
    private long coin_;
    public bool HasCoin {
      get { return hasCoin; }
    }
    public long Coin {
      get { return coin_; }
    }
    
    public const int GemFieldNumber = 4;
    private bool hasGem;
    private long gem_;
    public bool HasGem {
      get { return hasGem; }
    }
    public long Gem {
      get { return gem_; }
    }
    
    public const int CupFieldNumber = 5;
    private bool hasCup;
    private long cup_;
    public bool HasCup {
      get { return hasCup; }
    }
    public long Cup {
      get { return cup_; }
    }
    
    public const int LvFieldNumber = 6;
    private bool hasLv;
    private int lv_;
    public bool HasLv {
      get { return hasLv; }
    }
    public int Lv {
      get { return lv_; }
    }
    
    public const int ExpFieldNumber = 7;
    private bool hasExp;
    private long exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public long Exp {
      get { return exp_; }
    }
    
    public const int AvatarIdFieldNumber = 8;
    private bool hasAvatarId;
    private int avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public int AvatarId {
      get { return avatarId_; }
    }
    
    public const int ClubIdFieldNumber = 9;
    private bool hasClubId;
    private int clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public int ClubId {
      get { return clubId_; }
    }
    
    public const int ClothIdFieldNumber = 10;
    private bool hasClothId;
    private int clothId_;
    public bool HasClothId {
      get { return hasClothId; }
    }
    public int ClothId {
      get { return clothId_; }
    }
    
    public const int RegionIdFieldNumber = 11;
    private bool hasRegionId;
    private int regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public int RegionId {
      get { return regionId_; }
    }
    
    public const int LeagueLvFieldNumber = 12;
    private bool hasLeagueLv;
    private int leagueLv_;
    public bool HasLeagueLv {
      get { return hasLeagueLv; }
    }
    public int LeagueLv {
      get { return leagueLv_; }
    }
    
    public const int BallIdFieldNumber = 13;
    private bool hasBallId;
    private int ballId_;
    public bool HasBallId {
      get { return hasBallId; }
    }
    public int BallId {
      get { return ballId_; }
    }
    
    public const int HatIdFieldNumber = 14;
    private bool hasHatId;
    private int hatId_;
    public bool HasHatId {
      get { return hasHatId; }
    }
    public int HatId {
      get { return hatId_; }
    }
    
    public const int AcsryIdFieldNumber = 15;
    private bool hasAcsryId;
    private int acsryId_;
    public bool HasAcsryId {
      get { return hasAcsryId; }
    }
    public int AcsryId {
      get { return acsryId_; }
    }
    
    public const int AvaFrameIdFieldNumber = 16;
    private bool hasAvaFrameId;
    private int avaFrameId_;
    public bool HasAvaFrameId {
      get { return hasAvaFrameId; }
    }
    public int AvaFrameId {
      get { return avaFrameId_; }
    }
    
    public const int ClubIdsFieldNumber = 17;
    private pbc::PopsicleList<int> clubIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ClubIdsList {
      get { return pbc::Lists.AsReadOnly(clubIds_); }
    }
    public int ClubIdsCount {
      get { return clubIds_.Count; }
    }
    public int GetClubIds(int index) {
      return clubIds_[index];
    }
    
    public const int MmrFieldNumber = 18;
    private bool hasMmr;
    private int mmr_;
    public bool HasMmr {
      get { return hasMmr; }
    }
    public int Mmr {
      get { return mmr_; }
    }
    
    public const int SocialIdFieldNumber = 19;
    private bool hasSocialId;
    private string socialId_ = "";
    public bool HasSocialId {
      get { return hasSocialId; }
    }
    public string SocialId {
      get { return socialId_; }
    }
    
    public const int SuitDataFieldNumber = 20;
    private bool hasSuitData;
    private global::com.golf.proto.CCSuitData suitData_;
    public bool HasSuitData {
      get { return hasSuitData; }
    }
    public global::com.golf.proto.CCSuitData SuitData {
      get { return suitData_ ?? global::com.golf.proto.CCSuitData.DefaultInstance; }
    }
    
    public const int SyncAccountFlagFieldNumber = 21;
    private bool hasSyncAccountFlag;
    private bool syncAccountFlag_;
    public bool HasSyncAccountFlag {
      get { return hasSyncAccountFlag; }
    }
    public bool SyncAccountFlag {
      get { return syncAccountFlag_; }
    }
    
    public const int FirstBillTimeFieldNumber = 22;
    private bool hasFirstBillTime;
    private long firstBillTime_;
    public bool HasFirstBillTime {
      get { return hasFirstBillTime; }
    }
    public long FirstBillTime {
      get { return firstBillTime_; }
    }
    
    public const int BestHistoryRankStatusFieldNumber = 23;
    private bool hasBestHistoryRankStatus;
    private global::com.golf.proto.CCBestHistoryRankStatus bestHistoryRankStatus_;
    public bool HasBestHistoryRankStatus {
      get { return hasBestHistoryRankStatus; }
    }
    public global::com.golf.proto.CCBestHistoryRankStatus BestHistoryRankStatus {
      get { return bestHistoryRankStatus_ ?? global::com.golf.proto.CCBestHistoryRankStatus.DefaultInstance; }
    }
    
    public const int ClubSuitDataFieldNumber = 24;
    private bool hasClubSuitData;
    private global::com.golf.proto.CCClubSuitData clubSuitData_;
    public bool HasClubSuitData {
      get { return hasClubSuitData; }
    }
    public global::com.golf.proto.CCClubSuitData ClubSuitData {
      get { return clubSuitData_ ?? global::com.golf.proto.CCClubSuitData.DefaultInstance; }
    }
    
    public const int NewSuitDataFieldNumber = 25;
    private bool hasNewSuitData;
    private global::com.golf.proto.CCSuitData newSuitData_;
    public bool HasNewSuitData {
      get { return hasNewSuitData; }
    }
    public global::com.golf.proto.CCSuitData NewSuitData {
      get { return newSuitData_ ?? global::com.golf.proto.CCSuitData.DefaultInstance; }
    }
    
    public const int CustomAvaIdFieldNumber = 26;
    private bool hasCustomAvaId;
    private int customAvaId_;
    public bool HasCustomAvaId {
      get { return hasCustomAvaId; }
    }
    public int CustomAvaId {
      get { return customAvaId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBaseDataFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[16], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[20], Name);
      }
      if (hasCoin) {
        output.WriteInt64(3, field_names[9], Coin);
      }
      if (hasGem) {
        output.WriteInt64(4, field_names[14], Gem);
      }
      if (hasCup) {
        output.WriteInt64(5, field_names[10], Cup);
      }
      if (hasLv) {
        output.WriteInt32(6, field_names[18], Lv);
      }
      if (hasExp) {
        output.WriteInt64(7, field_names[12], Exp);
      }
      if (hasAvatarId) {
        output.WriteInt32(8, field_names[2], AvatarId);
      }
      if (hasClubId) {
        output.WriteInt32(9, field_names[6], ClubId);
      }
      if (hasClothId) {
        output.WriteInt32(10, field_names[5], ClothId);
      }
      if (hasRegionId) {
        output.WriteInt32(11, field_names[22], RegionId);
      }
      if (hasLeagueLv) {
        output.WriteInt32(12, field_names[17], LeagueLv);
      }
      if (hasBallId) {
        output.WriteInt32(13, field_names[3], BallId);
      }
      if (hasHatId) {
        output.WriteInt32(14, field_names[15], HatId);
      }
      if (hasAcsryId) {
        output.WriteInt32(15, field_names[0], AcsryId);
      }
      if (hasAvaFrameId) {
        output.WriteInt32(16, field_names[1], AvaFrameId);
      }
      if (clubIds_.Count > 0) {
        output.WriteInt32Array(17, field_names[7], clubIds_);
      }
      if (hasMmr) {
        output.WriteInt32(18, field_names[19], Mmr);
      }
      if (hasSocialId) {
        output.WriteString(19, field_names[23], SocialId);
      }
      if (hasSuitData) {
        output.WriteMessage(20, field_names[24], SuitData);
      }
      if (hasSyncAccountFlag) {
        output.WriteBool(21, field_names[25], SyncAccountFlag);
      }
      if (hasFirstBillTime) {
        output.WriteInt64(22, field_names[13], FirstBillTime);
      }
      if (hasBestHistoryRankStatus) {
        output.WriteMessage(23, field_names[4], BestHistoryRankStatus);
      }
      if (hasClubSuitData) {
        output.WriteMessage(24, field_names[8], ClubSuitData);
      }
      if (hasNewSuitData) {
        output.WriteMessage(25, field_names[21], NewSuitData);
      }
      if (hasCustomAvaId) {
        output.WriteInt32(26, field_names[11], CustomAvaId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasCoin) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Coin);
      }
      if (hasGem) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, Gem);
      }
      if (hasCup) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, Cup);
      }
      if (hasLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Lv);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeInt64Size(7, Exp);
      }
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, AvatarId);
      }
      if (hasClubId) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, ClubId);
      }
      if (hasClothId) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, ClothId);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, RegionId);
      }
      if (hasLeagueLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, LeagueLv);
      }
      if (hasBallId) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, BallId);
      }
      if (hasHatId) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, HatId);
      }
      if (hasAcsryId) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, AcsryId);
      }
      if (hasAvaFrameId) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, AvaFrameId);
      }
      {
        int dataSize = 0;
        foreach (int element in ClubIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * clubIds_.Count;
      }
      if (hasMmr) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, Mmr);
      }
      if (hasSocialId) {
        size += pb::CodedOutputStream.ComputeStringSize(19, SocialId);
      }
      if (hasSuitData) {
        size += pb::CodedOutputStream.ComputeMessageSize(20, SuitData);
      }
      if (hasSyncAccountFlag) {
        size += pb::CodedOutputStream.ComputeBoolSize(21, SyncAccountFlag);
      }
      if (hasFirstBillTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(22, FirstBillTime);
      }
      if (hasBestHistoryRankStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(23, BestHistoryRankStatus);
      }
      if (hasClubSuitData) {
        size += pb::CodedOutputStream.ComputeMessageSize(24, ClubSuitData);
      }
      if (hasNewSuitData) {
        size += pb::CodedOutputStream.ComputeMessageSize(25, NewSuitData);
      }
      if (hasCustomAvaId) {
        size += pb::CodedOutputStream.ComputeInt32Size(26, CustomAvaId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasCoin) hash ^= coin_.GetHashCode();
      if (hasGem) hash ^= gem_.GetHashCode();
      if (hasCup) hash ^= cup_.GetHashCode();
      if (hasLv) hash ^= lv_.GetHashCode();
      if (hasExp) hash ^= exp_.GetHashCode();
      if (hasAvatarId) hash ^= avatarId_.GetHashCode();
      if (hasClubId) hash ^= clubId_.GetHashCode();
      if (hasClothId) hash ^= clothId_.GetHashCode();
      if (hasRegionId) hash ^= regionId_.GetHashCode();
      if (hasLeagueLv) hash ^= leagueLv_.GetHashCode();
      if (hasBallId) hash ^= ballId_.GetHashCode();
      if (hasHatId) hash ^= hatId_.GetHashCode();
      if (hasAcsryId) hash ^= acsryId_.GetHashCode();
      if (hasAvaFrameId) hash ^= avaFrameId_.GetHashCode();
      foreach(int i in clubIds_)
        hash ^= i.GetHashCode();
      if (hasMmr) hash ^= mmr_.GetHashCode();
      if (hasSocialId) hash ^= socialId_.GetHashCode();
      if (hasSuitData) hash ^= suitData_.GetHashCode();
      if (hasSyncAccountFlag) hash ^= syncAccountFlag_.GetHashCode();
      if (hasFirstBillTime) hash ^= firstBillTime_.GetHashCode();
      if (hasBestHistoryRankStatus) hash ^= bestHistoryRankStatus_.GetHashCode();
      if (hasClubSuitData) hash ^= clubSuitData_.GetHashCode();
      if (hasNewSuitData) hash ^= newSuitData_.GetHashCode();
      if (hasCustomAvaId) hash ^= customAvaId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBaseData other = obj as CCBaseData;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasCoin != other.hasCoin || (hasCoin && !coin_.Equals(other.coin_))) return false;
      if (hasGem != other.hasGem || (hasGem && !gem_.Equals(other.gem_))) return false;
      if (hasCup != other.hasCup || (hasCup && !cup_.Equals(other.cup_))) return false;
      if (hasLv != other.hasLv || (hasLv && !lv_.Equals(other.lv_))) return false;
      if (hasExp != other.hasExp || (hasExp && !exp_.Equals(other.exp_))) return false;
      if (hasAvatarId != other.hasAvatarId || (hasAvatarId && !avatarId_.Equals(other.avatarId_))) return false;
      if (hasClubId != other.hasClubId || (hasClubId && !clubId_.Equals(other.clubId_))) return false;
      if (hasClothId != other.hasClothId || (hasClothId && !clothId_.Equals(other.clothId_))) return false;
      if (hasRegionId != other.hasRegionId || (hasRegionId && !regionId_.Equals(other.regionId_))) return false;
      if (hasLeagueLv != other.hasLeagueLv || (hasLeagueLv && !leagueLv_.Equals(other.leagueLv_))) return false;
      if (hasBallId != other.hasBallId || (hasBallId && !ballId_.Equals(other.ballId_))) return false;
      if (hasHatId != other.hasHatId || (hasHatId && !hatId_.Equals(other.hatId_))) return false;
      if (hasAcsryId != other.hasAcsryId || (hasAcsryId && !acsryId_.Equals(other.acsryId_))) return false;
      if (hasAvaFrameId != other.hasAvaFrameId || (hasAvaFrameId && !avaFrameId_.Equals(other.avaFrameId_))) return false;
      if(clubIds_.Count != other.clubIds_.Count) return false;
      for(int ix=0; ix < clubIds_.Count; ix++)
        if(!clubIds_[ix].Equals(other.clubIds_[ix])) return false;
      if (hasMmr != other.hasMmr || (hasMmr && !mmr_.Equals(other.mmr_))) return false;
      if (hasSocialId != other.hasSocialId || (hasSocialId && !socialId_.Equals(other.socialId_))) return false;
      if (hasSuitData != other.hasSuitData || (hasSuitData && !suitData_.Equals(other.suitData_))) return false;
      if (hasSyncAccountFlag != other.hasSyncAccountFlag || (hasSyncAccountFlag && !syncAccountFlag_.Equals(other.syncAccountFlag_))) return false;
      if (hasFirstBillTime != other.hasFirstBillTime || (hasFirstBillTime && !firstBillTime_.Equals(other.firstBillTime_))) return false;
      if (hasBestHistoryRankStatus != other.hasBestHistoryRankStatus || (hasBestHistoryRankStatus && !bestHistoryRankStatus_.Equals(other.bestHistoryRankStatus_))) return false;
      if (hasClubSuitData != other.hasClubSuitData || (hasClubSuitData && !clubSuitData_.Equals(other.clubSuitData_))) return false;
      if (hasNewSuitData != other.hasNewSuitData || (hasNewSuitData && !newSuitData_.Equals(other.newSuitData_))) return false;
      if (hasCustomAvaId != other.hasCustomAvaId || (hasCustomAvaId && !customAvaId_.Equals(other.customAvaId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("name", hasName, name_, writer);
      PrintField("coin", hasCoin, coin_, writer);
      PrintField("gem", hasGem, gem_, writer);
      PrintField("cup", hasCup, cup_, writer);
      PrintField("lv", hasLv, lv_, writer);
      PrintField("exp", hasExp, exp_, writer);
      PrintField("avatar_id", hasAvatarId, avatarId_, writer);
      PrintField("club_id", hasClubId, clubId_, writer);
      PrintField("cloth_id", hasClothId, clothId_, writer);
      PrintField("region_id", hasRegionId, regionId_, writer);
      PrintField("league_lv", hasLeagueLv, leagueLv_, writer);
      PrintField("ball_id", hasBallId, ballId_, writer);
      PrintField("hat_id", hasHatId, hatId_, writer);
      PrintField("acsry_id", hasAcsryId, acsryId_, writer);
      PrintField("ava_frame_id", hasAvaFrameId, avaFrameId_, writer);
      PrintField("club_ids", clubIds_, writer);
      PrintField("mmr", hasMmr, mmr_, writer);
      PrintField("social_id", hasSocialId, socialId_, writer);
      PrintField("suit_data", hasSuitData, suitData_, writer);
      PrintField("sync_account_flag", hasSyncAccountFlag, syncAccountFlag_, writer);
      PrintField("first_bill_time", hasFirstBillTime, firstBillTime_, writer);
      PrintField("best_history_rank_status", hasBestHistoryRankStatus, bestHistoryRankStatus_, writer);
      PrintField("club_suit_data", hasClubSuitData, clubSuitData_, writer);
      PrintField("new_suit_data", hasNewSuitData, newSuitData_, writer);
      PrintField("custom_ava_id", hasCustomAvaId, customAvaId_, writer);
    }
    #endregion
    
    public static CCBaseData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBaseData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBaseData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBaseData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBaseData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBaseData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBaseData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBaseData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBaseData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBaseData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBaseData MakeReadOnly() {
      clubIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBaseData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBaseData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBaseData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBaseData result;
      
      private CCBaseData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBaseData original = result;
          result = new CCBaseData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBaseData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBaseData DefaultInstanceForType {
        get { return global::com.golf.proto.CCBaseData.DefaultInstance; }
      }
      
      public override CCBaseData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBaseData) {
          return MergeFrom((CCBaseData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBaseData other) {
        if (other == global::com.golf.proto.CCBaseData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasCoin) {
          Coin = other.Coin;
        }
        if (other.HasGem) {
          Gem = other.Gem;
        }
        if (other.HasCup) {
          Cup = other.Cup;
        }
        if (other.HasLv) {
          Lv = other.Lv;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        if (other.HasClothId) {
          ClothId = other.ClothId;
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        if (other.HasLeagueLv) {
          LeagueLv = other.LeagueLv;
        }
        if (other.HasBallId) {
          BallId = other.BallId;
        }
        if (other.HasHatId) {
          HatId = other.HatId;
        }
        if (other.HasAcsryId) {
          AcsryId = other.AcsryId;
        }
        if (other.HasAvaFrameId) {
          AvaFrameId = other.AvaFrameId;
        }
        if (other.clubIds_.Count != 0) {
          result.clubIds_.Add(other.clubIds_);
        }
        if (other.HasMmr) {
          Mmr = other.Mmr;
        }
        if (other.HasSocialId) {
          SocialId = other.SocialId;
        }
        if (other.HasSuitData) {
          MergeSuitData(other.SuitData);
        }
        if (other.HasSyncAccountFlag) {
          SyncAccountFlag = other.SyncAccountFlag;
        }
        if (other.HasFirstBillTime) {
          FirstBillTime = other.FirstBillTime;
        }
        if (other.HasBestHistoryRankStatus) {
          MergeBestHistoryRankStatus(other.BestHistoryRankStatus);
        }
        if (other.HasClubSuitData) {
          MergeClubSuitData(other.ClubSuitData);
        }
        if (other.HasNewSuitData) {
          MergeNewSuitData(other.NewSuitData);
        }
        if (other.HasCustomAvaId) {
          CustomAvaId = other.CustomAvaId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBaseDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBaseDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasCoin = input.ReadInt64(ref result.coin_);
              break;
            }
            case 32: {
              result.hasGem = input.ReadInt64(ref result.gem_);
              break;
            }
            case 40: {
              result.hasCup = input.ReadInt64(ref result.cup_);
              break;
            }
            case 48: {
              result.hasLv = input.ReadInt32(ref result.lv_);
              break;
            }
            case 56: {
              result.hasExp = input.ReadInt64(ref result.exp_);
              break;
            }
            case 64: {
              result.hasAvatarId = input.ReadInt32(ref result.avatarId_);
              break;
            }
            case 72: {
              result.hasClubId = input.ReadInt32(ref result.clubId_);
              break;
            }
            case 80: {
              result.hasClothId = input.ReadInt32(ref result.clothId_);
              break;
            }
            case 88: {
              result.hasRegionId = input.ReadInt32(ref result.regionId_);
              break;
            }
            case 96: {
              result.hasLeagueLv = input.ReadInt32(ref result.leagueLv_);
              break;
            }
            case 104: {
              result.hasBallId = input.ReadInt32(ref result.ballId_);
              break;
            }
            case 112: {
              result.hasHatId = input.ReadInt32(ref result.hatId_);
              break;
            }
            case 120: {
              result.hasAcsryId = input.ReadInt32(ref result.acsryId_);
              break;
            }
            case 128: {
              result.hasAvaFrameId = input.ReadInt32(ref result.avaFrameId_);
              break;
            }
            case 138:
            case 136: {
              input.ReadInt32Array(tag, field_name, result.clubIds_);
              break;
            }
            case 144: {
              result.hasMmr = input.ReadInt32(ref result.mmr_);
              break;
            }
            case 154: {
              result.hasSocialId = input.ReadString(ref result.socialId_);
              break;
            }
            case 162: {
              global::com.golf.proto.CCSuitData.Builder subBuilder = global::com.golf.proto.CCSuitData.CreateBuilder();
              if (result.hasSuitData) {
                subBuilder.MergeFrom(SuitData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SuitData = subBuilder.BuildPartial();
              break;
            }
            case 168: {
              result.hasSyncAccountFlag = input.ReadBool(ref result.syncAccountFlag_);
              break;
            }
            case 176: {
              result.hasFirstBillTime = input.ReadInt64(ref result.firstBillTime_);
              break;
            }
            case 186: {
              global::com.golf.proto.CCBestHistoryRankStatus.Builder subBuilder = global::com.golf.proto.CCBestHistoryRankStatus.CreateBuilder();
              if (result.hasBestHistoryRankStatus) {
                subBuilder.MergeFrom(BestHistoryRankStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BestHistoryRankStatus = subBuilder.BuildPartial();
              break;
            }
            case 194: {
              global::com.golf.proto.CCClubSuitData.Builder subBuilder = global::com.golf.proto.CCClubSuitData.CreateBuilder();
              if (result.hasClubSuitData) {
                subBuilder.MergeFrom(ClubSuitData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClubSuitData = subBuilder.BuildPartial();
              break;
            }
            case 202: {
              global::com.golf.proto.CCSuitData.Builder subBuilder = global::com.golf.proto.CCSuitData.CreateBuilder();
              if (result.hasNewSuitData) {
                subBuilder.MergeFrom(NewSuitData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewSuitData = subBuilder.BuildPartial();
              break;
            }
            case 208: {
              result.hasCustomAvaId = input.ReadInt32(ref result.customAvaId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasCoin {
        get { return result.hasCoin; }
      }
      public long Coin {
        get { return result.Coin; }
        set { SetCoin(value); }
      }
      public Builder SetCoin(long value) {
        PrepareBuilder();
        result.hasCoin = true;
        result.coin_ = value;
        return this;
      }
      public Builder ClearCoin() {
        PrepareBuilder();
        result.hasCoin = false;
        result.coin_ = 0L;
        return this;
      }
      
      public bool HasGem {
        get { return result.hasGem; }
      }
      public long Gem {
        get { return result.Gem; }
        set { SetGem(value); }
      }
      public Builder SetGem(long value) {
        PrepareBuilder();
        result.hasGem = true;
        result.gem_ = value;
        return this;
      }
      public Builder ClearGem() {
        PrepareBuilder();
        result.hasGem = false;
        result.gem_ = 0L;
        return this;
      }
      
      public bool HasCup {
        get { return result.hasCup; }
      }
      public long Cup {
        get { return result.Cup; }
        set { SetCup(value); }
      }
      public Builder SetCup(long value) {
        PrepareBuilder();
        result.hasCup = true;
        result.cup_ = value;
        return this;
      }
      public Builder ClearCup() {
        PrepareBuilder();
        result.hasCup = false;
        result.cup_ = 0L;
        return this;
      }
      
      public bool HasLv {
        get { return result.hasLv; }
      }
      public int Lv {
        get { return result.Lv; }
        set { SetLv(value); }
      }
      public Builder SetLv(int value) {
        PrepareBuilder();
        result.hasLv = true;
        result.lv_ = value;
        return this;
      }
      public Builder ClearLv() {
        PrepareBuilder();
        result.hasLv = false;
        result.lv_ = 0;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public long Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(long value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0L;
        return this;
      }
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public int AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(int value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0;
        return this;
      }
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public int ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(int value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0;
        return this;
      }
      
      public bool HasClothId {
        get { return result.hasClothId; }
      }
      public int ClothId {
        get { return result.ClothId; }
        set { SetClothId(value); }
      }
      public Builder SetClothId(int value) {
        PrepareBuilder();
        result.hasClothId = true;
        result.clothId_ = value;
        return this;
      }
      public Builder ClearClothId() {
        PrepareBuilder();
        result.hasClothId = false;
        result.clothId_ = 0;
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public int RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(int value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0;
        return this;
      }
      
      public bool HasLeagueLv {
        get { return result.hasLeagueLv; }
      }
      public int LeagueLv {
        get { return result.LeagueLv; }
        set { SetLeagueLv(value); }
      }
      public Builder SetLeagueLv(int value) {
        PrepareBuilder();
        result.hasLeagueLv = true;
        result.leagueLv_ = value;
        return this;
      }
      public Builder ClearLeagueLv() {
        PrepareBuilder();
        result.hasLeagueLv = false;
        result.leagueLv_ = 0;
        return this;
      }
      
      public bool HasBallId {
        get { return result.hasBallId; }
      }
      public int BallId {
        get { return result.BallId; }
        set { SetBallId(value); }
      }
      public Builder SetBallId(int value) {
        PrepareBuilder();
        result.hasBallId = true;
        result.ballId_ = value;
        return this;
      }
      public Builder ClearBallId() {
        PrepareBuilder();
        result.hasBallId = false;
        result.ballId_ = 0;
        return this;
      }
      
      public bool HasHatId {
        get { return result.hasHatId; }
      }
      public int HatId {
        get { return result.HatId; }
        set { SetHatId(value); }
      }
      public Builder SetHatId(int value) {
        PrepareBuilder();
        result.hasHatId = true;
        result.hatId_ = value;
        return this;
      }
      public Builder ClearHatId() {
        PrepareBuilder();
        result.hasHatId = false;
        result.hatId_ = 0;
        return this;
      }
      
      public bool HasAcsryId {
        get { return result.hasAcsryId; }
      }
      public int AcsryId {
        get { return result.AcsryId; }
        set { SetAcsryId(value); }
      }
      public Builder SetAcsryId(int value) {
        PrepareBuilder();
        result.hasAcsryId = true;
        result.acsryId_ = value;
        return this;
      }
      public Builder ClearAcsryId() {
        PrepareBuilder();
        result.hasAcsryId = false;
        result.acsryId_ = 0;
        return this;
      }
      
      public bool HasAvaFrameId {
        get { return result.hasAvaFrameId; }
      }
      public int AvaFrameId {
        get { return result.AvaFrameId; }
        set { SetAvaFrameId(value); }
      }
      public Builder SetAvaFrameId(int value) {
        PrepareBuilder();
        result.hasAvaFrameId = true;
        result.avaFrameId_ = value;
        return this;
      }
      public Builder ClearAvaFrameId() {
        PrepareBuilder();
        result.hasAvaFrameId = false;
        result.avaFrameId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ClubIdsList {
        get { return PrepareBuilder().clubIds_; }
      }
      public int ClubIdsCount {
        get { return result.ClubIdsCount; }
      }
      public int GetClubIds(int index) {
        return result.GetClubIds(index);
      }
      public Builder SetClubIds(int index, int value) {
        PrepareBuilder();
        result.clubIds_[index] = value;
        return this;
      }
      public Builder AddClubIds(int value) {
        PrepareBuilder();
        result.clubIds_.Add(value);
        return this;
      }
      public Builder AddRangeClubIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.clubIds_.Add(values);
        return this;
      }
      public Builder ClearClubIds() {
        PrepareBuilder();
        result.clubIds_.Clear();
        return this;
      }
      
      public bool HasMmr {
        get { return result.hasMmr; }
      }
      public int Mmr {
        get { return result.Mmr; }
        set { SetMmr(value); }
      }
      public Builder SetMmr(int value) {
        PrepareBuilder();
        result.hasMmr = true;
        result.mmr_ = value;
        return this;
      }
      public Builder ClearMmr() {
        PrepareBuilder();
        result.hasMmr = false;
        result.mmr_ = 0;
        return this;
      }
      
      public bool HasSocialId {
        get { return result.hasSocialId; }
      }
      public string SocialId {
        get { return result.SocialId; }
        set { SetSocialId(value); }
      }
      public Builder SetSocialId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSocialId = true;
        result.socialId_ = value;
        return this;
      }
      public Builder ClearSocialId() {
        PrepareBuilder();
        result.hasSocialId = false;
        result.socialId_ = "";
        return this;
      }
      
      public bool HasSuitData {
       get { return result.hasSuitData; }
      }
      public global::com.golf.proto.CCSuitData SuitData {
        get { return result.SuitData; }
        set { SetSuitData(value); }
      }
      public Builder SetSuitData(global::com.golf.proto.CCSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSuitData = true;
        result.suitData_ = value;
        return this;
      }
      public Builder SetSuitData(global::com.golf.proto.CCSuitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSuitData = true;
        result.suitData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSuitData(global::com.golf.proto.CCSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSuitData &&
            result.suitData_ != global::com.golf.proto.CCSuitData.DefaultInstance) {
            result.suitData_ = global::com.golf.proto.CCSuitData.CreateBuilder(result.suitData_).MergeFrom(value).BuildPartial();
        } else {
          result.suitData_ = value;
        }
        result.hasSuitData = true;
        return this;
      }
      public Builder ClearSuitData() {
        PrepareBuilder();
        result.hasSuitData = false;
        result.suitData_ = null;
        return this;
      }
      
      public bool HasSyncAccountFlag {
        get { return result.hasSyncAccountFlag; }
      }
      public bool SyncAccountFlag {
        get { return result.SyncAccountFlag; }
        set { SetSyncAccountFlag(value); }
      }
      public Builder SetSyncAccountFlag(bool value) {
        PrepareBuilder();
        result.hasSyncAccountFlag = true;
        result.syncAccountFlag_ = value;
        return this;
      }
      public Builder ClearSyncAccountFlag() {
        PrepareBuilder();
        result.hasSyncAccountFlag = false;
        result.syncAccountFlag_ = false;
        return this;
      }
      
      public bool HasFirstBillTime {
        get { return result.hasFirstBillTime; }
      }
      public long FirstBillTime {
        get { return result.FirstBillTime; }
        set { SetFirstBillTime(value); }
      }
      public Builder SetFirstBillTime(long value) {
        PrepareBuilder();
        result.hasFirstBillTime = true;
        result.firstBillTime_ = value;
        return this;
      }
      public Builder ClearFirstBillTime() {
        PrepareBuilder();
        result.hasFirstBillTime = false;
        result.firstBillTime_ = 0L;
        return this;
      }
      
      public bool HasBestHistoryRankStatus {
       get { return result.hasBestHistoryRankStatus; }
      }
      public global::com.golf.proto.CCBestHistoryRankStatus BestHistoryRankStatus {
        get { return result.BestHistoryRankStatus; }
        set { SetBestHistoryRankStatus(value); }
      }
      public Builder SetBestHistoryRankStatus(global::com.golf.proto.CCBestHistoryRankStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBestHistoryRankStatus = true;
        result.bestHistoryRankStatus_ = value;
        return this;
      }
      public Builder SetBestHistoryRankStatus(global::com.golf.proto.CCBestHistoryRankStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBestHistoryRankStatus = true;
        result.bestHistoryRankStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBestHistoryRankStatus(global::com.golf.proto.CCBestHistoryRankStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBestHistoryRankStatus &&
            result.bestHistoryRankStatus_ != global::com.golf.proto.CCBestHistoryRankStatus.DefaultInstance) {
            result.bestHistoryRankStatus_ = global::com.golf.proto.CCBestHistoryRankStatus.CreateBuilder(result.bestHistoryRankStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.bestHistoryRankStatus_ = value;
        }
        result.hasBestHistoryRankStatus = true;
        return this;
      }
      public Builder ClearBestHistoryRankStatus() {
        PrepareBuilder();
        result.hasBestHistoryRankStatus = false;
        result.bestHistoryRankStatus_ = null;
        return this;
      }
      
      public bool HasClubSuitData {
       get { return result.hasClubSuitData; }
      }
      public global::com.golf.proto.CCClubSuitData ClubSuitData {
        get { return result.ClubSuitData; }
        set { SetClubSuitData(value); }
      }
      public Builder SetClubSuitData(global::com.golf.proto.CCClubSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClubSuitData = true;
        result.clubSuitData_ = value;
        return this;
      }
      public Builder SetClubSuitData(global::com.golf.proto.CCClubSuitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClubSuitData = true;
        result.clubSuitData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClubSuitData(global::com.golf.proto.CCClubSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClubSuitData &&
            result.clubSuitData_ != global::com.golf.proto.CCClubSuitData.DefaultInstance) {
            result.clubSuitData_ = global::com.golf.proto.CCClubSuitData.CreateBuilder(result.clubSuitData_).MergeFrom(value).BuildPartial();
        } else {
          result.clubSuitData_ = value;
        }
        result.hasClubSuitData = true;
        return this;
      }
      public Builder ClearClubSuitData() {
        PrepareBuilder();
        result.hasClubSuitData = false;
        result.clubSuitData_ = null;
        return this;
      }
      
      public bool HasNewSuitData {
       get { return result.hasNewSuitData; }
      }
      public global::com.golf.proto.CCSuitData NewSuitData {
        get { return result.NewSuitData; }
        set { SetNewSuitData(value); }
      }
      public Builder SetNewSuitData(global::com.golf.proto.CCSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewSuitData = true;
        result.newSuitData_ = value;
        return this;
      }
      public Builder SetNewSuitData(global::com.golf.proto.CCSuitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewSuitData = true;
        result.newSuitData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewSuitData(global::com.golf.proto.CCSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewSuitData &&
            result.newSuitData_ != global::com.golf.proto.CCSuitData.DefaultInstance) {
            result.newSuitData_ = global::com.golf.proto.CCSuitData.CreateBuilder(result.newSuitData_).MergeFrom(value).BuildPartial();
        } else {
          result.newSuitData_ = value;
        }
        result.hasNewSuitData = true;
        return this;
      }
      public Builder ClearNewSuitData() {
        PrepareBuilder();
        result.hasNewSuitData = false;
        result.newSuitData_ = null;
        return this;
      }
      
      public bool HasCustomAvaId {
        get { return result.hasCustomAvaId; }
      }
      public int CustomAvaId {
        get { return result.CustomAvaId; }
        set { SetCustomAvaId(value); }
      }
      public Builder SetCustomAvaId(int value) {
        PrepareBuilder();
        result.hasCustomAvaId = true;
        result.customAvaId_ = value;
        return this;
      }
      public Builder ClearCustomAvaId() {
        PrepareBuilder();
        result.hasCustomAvaId = false;
        result.customAvaId_ = 0;
        return this;
      }
    }
    static CCBaseData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAssetData : pb::GeneratedMessageLite<CCAssetData, CCAssetData.Builder> {
    private CCAssetData() { }
    private static readonly CCAssetData defaultInstance = new CCAssetData().MakeReadOnly();
    private static readonly string[] _cCAssetDataFieldNames = new string[] { "ava_frames", "avatars", "balls", "change_name", "clubs", "com_boxes", "id", "new_suit_parts", "related_data", "suit_parts", "vs_boxes" };
    private static readonly uint[] _cCAssetDataFieldTags = new uint[] { 82, 26, 58, 106, 18, 34, 10, 114, 90, 98, 50 };
    public static CCAssetData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAssetData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAssetData ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ClubsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCClubItem> clubs_ = new pbc::PopsicleList<global::com.golf.proto.CCClubItem>();
    public scg::IList<global::com.golf.proto.CCClubItem> ClubsList {
      get { return clubs_; }
    }
    public int ClubsCount {
      get { return clubs_.Count; }
    }
    public global::com.golf.proto.CCClubItem GetClubs(int index) {
      return clubs_[index];
    }
    
    public const int AvatarsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCAvatarItem> avatars_ = new pbc::PopsicleList<global::com.golf.proto.CCAvatarItem>();
    public scg::IList<global::com.golf.proto.CCAvatarItem> AvatarsList {
      get { return avatars_; }
    }
    public int AvatarsCount {
      get { return avatars_.Count; }
    }
    public global::com.golf.proto.CCAvatarItem GetAvatars(int index) {
      return avatars_[index];
    }
    
    public const int ComBoxesFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCComBoxItem> comBoxes_ = new pbc::PopsicleList<global::com.golf.proto.CCComBoxItem>();
    public scg::IList<global::com.golf.proto.CCComBoxItem> ComBoxesList {
      get { return comBoxes_; }
    }
    public int ComBoxesCount {
      get { return comBoxes_.Count; }
    }
    public global::com.golf.proto.CCComBoxItem GetComBoxes(int index) {
      return comBoxes_[index];
    }
    
    public const int VsBoxesFieldNumber = 6;
    private pbc::PopsicleList<global::com.golf.proto.CCTimeBoxItem> vsBoxes_ = new pbc::PopsicleList<global::com.golf.proto.CCTimeBoxItem>();
    public scg::IList<global::com.golf.proto.CCTimeBoxItem> VsBoxesList {
      get { return vsBoxes_; }
    }
    public int VsBoxesCount {
      get { return vsBoxes_.Count; }
    }
    public global::com.golf.proto.CCTimeBoxItem GetVsBoxes(int index) {
      return vsBoxes_[index];
    }
    
    public const int BallsFieldNumber = 7;
    private pbc::PopsicleList<global::com.golf.proto.CCBallItem> balls_ = new pbc::PopsicleList<global::com.golf.proto.CCBallItem>();
    public scg::IList<global::com.golf.proto.CCBallItem> BallsList {
      get { return balls_; }
    }
    public int BallsCount {
      get { return balls_.Count; }
    }
    public global::com.golf.proto.CCBallItem GetBalls(int index) {
      return balls_[index];
    }
    
    public const int AvaFramesFieldNumber = 10;
    private pbc::PopsicleList<global::com.golf.proto.CCAvaFrameItem> avaFrames_ = new pbc::PopsicleList<global::com.golf.proto.CCAvaFrameItem>();
    public scg::IList<global::com.golf.proto.CCAvaFrameItem> AvaFramesList {
      get { return avaFrames_; }
    }
    public int AvaFramesCount {
      get { return avaFrames_.Count; }
    }
    public global::com.golf.proto.CCAvaFrameItem GetAvaFrames(int index) {
      return avaFrames_[index];
    }
    
    public const int RelatedDataFieldNumber = 11;
    private bool hasRelatedData;
    private global::com.golf.proto.CCAssetRelatedData relatedData_;
    public bool HasRelatedData {
      get { return hasRelatedData; }
    }
    public global::com.golf.proto.CCAssetRelatedData RelatedData {
      get { return relatedData_ ?? global::com.golf.proto.CCAssetRelatedData.DefaultInstance; }
    }
    
    public const int SuitPartsFieldNumber = 12;
    private pbc::PopsicleList<global::com.golf.proto.CCSuitPartItem> suitParts_ = new pbc::PopsicleList<global::com.golf.proto.CCSuitPartItem>();
    public scg::IList<global::com.golf.proto.CCSuitPartItem> SuitPartsList {
      get { return suitParts_; }
    }
    public int SuitPartsCount {
      get { return suitParts_.Count; }
    }
    public global::com.golf.proto.CCSuitPartItem GetSuitParts(int index) {
      return suitParts_[index];
    }
    
    public const int ChangeNameFieldNumber = 13;
    private bool hasChangeName;
    private global::com.golf.proto.CCChangeNameItem changeName_;
    public bool HasChangeName {
      get { return hasChangeName; }
    }
    public global::com.golf.proto.CCChangeNameItem ChangeName {
      get { return changeName_ ?? global::com.golf.proto.CCChangeNameItem.DefaultInstance; }
    }
    
    public const int NewSuitPartsFieldNumber = 14;
    private pbc::PopsicleList<global::com.golf.proto.CCSuitPartItem> newSuitParts_ = new pbc::PopsicleList<global::com.golf.proto.CCSuitPartItem>();
    public scg::IList<global::com.golf.proto.CCSuitPartItem> NewSuitPartsList {
      get { return newSuitParts_; }
    }
    public int NewSuitPartsCount {
      get { return newSuitParts_.Count; }
    }
    public global::com.golf.proto.CCSuitPartItem GetNewSuitParts(int index) {
      return newSuitParts_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAssetDataFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[6], Id);
      }
      if (clubs_.Count > 0) {
        output.WriteMessageArray(2, field_names[4], clubs_);
      }
      if (avatars_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], avatars_);
      }
      if (comBoxes_.Count > 0) {
        output.WriteMessageArray(4, field_names[5], comBoxes_);
      }
      if (vsBoxes_.Count > 0) {
        output.WriteMessageArray(6, field_names[10], vsBoxes_);
      }
      if (balls_.Count > 0) {
        output.WriteMessageArray(7, field_names[2], balls_);
      }
      if (avaFrames_.Count > 0) {
        output.WriteMessageArray(10, field_names[0], avaFrames_);
      }
      if (hasRelatedData) {
        output.WriteMessage(11, field_names[8], RelatedData);
      }
      if (suitParts_.Count > 0) {
        output.WriteMessageArray(12, field_names[9], suitParts_);
      }
      if (hasChangeName) {
        output.WriteMessage(13, field_names[3], ChangeName);
      }
      if (newSuitParts_.Count > 0) {
        output.WriteMessageArray(14, field_names[7], newSuitParts_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      foreach (global::com.golf.proto.CCClubItem element in ClubsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::com.golf.proto.CCAvatarItem element in AvatarsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::com.golf.proto.CCComBoxItem element in ComBoxesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      foreach (global::com.golf.proto.CCTimeBoxItem element in VsBoxesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      foreach (global::com.golf.proto.CCBallItem element in BallsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, element);
      }
      foreach (global::com.golf.proto.CCAvaFrameItem element in AvaFramesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      if (hasRelatedData) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, RelatedData);
      }
      foreach (global::com.golf.proto.CCSuitPartItem element in SuitPartsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, element);
      }
      if (hasChangeName) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, ChangeName);
      }
      foreach (global::com.golf.proto.CCSuitPartItem element in NewSuitPartsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      foreach(global::com.golf.proto.CCClubItem i in clubs_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCAvatarItem i in avatars_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCComBoxItem i in comBoxes_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCTimeBoxItem i in vsBoxes_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCBallItem i in balls_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCAvaFrameItem i in avaFrames_)
        hash ^= i.GetHashCode();
      if (hasRelatedData) hash ^= relatedData_.GetHashCode();
      foreach(global::com.golf.proto.CCSuitPartItem i in suitParts_)
        hash ^= i.GetHashCode();
      if (hasChangeName) hash ^= changeName_.GetHashCode();
      foreach(global::com.golf.proto.CCSuitPartItem i in newSuitParts_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAssetData other = obj as CCAssetData;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if(clubs_.Count != other.clubs_.Count) return false;
      for(int ix=0; ix < clubs_.Count; ix++)
        if(!clubs_[ix].Equals(other.clubs_[ix])) return false;
      if(avatars_.Count != other.avatars_.Count) return false;
      for(int ix=0; ix < avatars_.Count; ix++)
        if(!avatars_[ix].Equals(other.avatars_[ix])) return false;
      if(comBoxes_.Count != other.comBoxes_.Count) return false;
      for(int ix=0; ix < comBoxes_.Count; ix++)
        if(!comBoxes_[ix].Equals(other.comBoxes_[ix])) return false;
      if(vsBoxes_.Count != other.vsBoxes_.Count) return false;
      for(int ix=0; ix < vsBoxes_.Count; ix++)
        if(!vsBoxes_[ix].Equals(other.vsBoxes_[ix])) return false;
      if(balls_.Count != other.balls_.Count) return false;
      for(int ix=0; ix < balls_.Count; ix++)
        if(!balls_[ix].Equals(other.balls_[ix])) return false;
      if(avaFrames_.Count != other.avaFrames_.Count) return false;
      for(int ix=0; ix < avaFrames_.Count; ix++)
        if(!avaFrames_[ix].Equals(other.avaFrames_[ix])) return false;
      if (hasRelatedData != other.hasRelatedData || (hasRelatedData && !relatedData_.Equals(other.relatedData_))) return false;
      if(suitParts_.Count != other.suitParts_.Count) return false;
      for(int ix=0; ix < suitParts_.Count; ix++)
        if(!suitParts_[ix].Equals(other.suitParts_[ix])) return false;
      if (hasChangeName != other.hasChangeName || (hasChangeName && !changeName_.Equals(other.changeName_))) return false;
      if(newSuitParts_.Count != other.newSuitParts_.Count) return false;
      for(int ix=0; ix < newSuitParts_.Count; ix++)
        if(!newSuitParts_[ix].Equals(other.newSuitParts_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("clubs", clubs_, writer);
      PrintField("avatars", avatars_, writer);
      PrintField("com_boxes", comBoxes_, writer);
      PrintField("vs_boxes", vsBoxes_, writer);
      PrintField("balls", balls_, writer);
      PrintField("ava_frames", avaFrames_, writer);
      PrintField("related_data", hasRelatedData, relatedData_, writer);
      PrintField("suit_parts", suitParts_, writer);
      PrintField("change_name", hasChangeName, changeName_, writer);
      PrintField("new_suit_parts", newSuitParts_, writer);
    }
    #endregion
    
    public static CCAssetData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAssetData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAssetData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAssetData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAssetData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAssetData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAssetData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAssetData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAssetData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAssetData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAssetData MakeReadOnly() {
      clubs_.MakeReadOnly();
      avatars_.MakeReadOnly();
      comBoxes_.MakeReadOnly();
      vsBoxes_.MakeReadOnly();
      balls_.MakeReadOnly();
      avaFrames_.MakeReadOnly();
      suitParts_.MakeReadOnly();
      newSuitParts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAssetData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAssetData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAssetData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAssetData result;
      
      private CCAssetData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAssetData original = result;
          result = new CCAssetData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAssetData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAssetData DefaultInstanceForType {
        get { return global::com.golf.proto.CCAssetData.DefaultInstance; }
      }
      
      public override CCAssetData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAssetData) {
          return MergeFrom((CCAssetData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAssetData other) {
        if (other == global::com.golf.proto.CCAssetData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.clubs_.Count != 0) {
          result.clubs_.Add(other.clubs_);
        }
        if (other.avatars_.Count != 0) {
          result.avatars_.Add(other.avatars_);
        }
        if (other.comBoxes_.Count != 0) {
          result.comBoxes_.Add(other.comBoxes_);
        }
        if (other.vsBoxes_.Count != 0) {
          result.vsBoxes_.Add(other.vsBoxes_);
        }
        if (other.balls_.Count != 0) {
          result.balls_.Add(other.balls_);
        }
        if (other.avaFrames_.Count != 0) {
          result.avaFrames_.Add(other.avaFrames_);
        }
        if (other.HasRelatedData) {
          MergeRelatedData(other.RelatedData);
        }
        if (other.suitParts_.Count != 0) {
          result.suitParts_.Add(other.suitParts_);
        }
        if (other.HasChangeName) {
          MergeChangeName(other.ChangeName);
        }
        if (other.newSuitParts_.Count != 0) {
          result.newSuitParts_.Add(other.newSuitParts_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAssetDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAssetDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.clubs_, global::com.golf.proto.CCClubItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.avatars_, global::com.golf.proto.CCAvatarItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.comBoxes_, global::com.golf.proto.CCComBoxItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.vsBoxes_, global::com.golf.proto.CCTimeBoxItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.balls_, global::com.golf.proto.CCBallItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.avaFrames_, global::com.golf.proto.CCAvaFrameItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              global::com.golf.proto.CCAssetRelatedData.Builder subBuilder = global::com.golf.proto.CCAssetRelatedData.CreateBuilder();
              if (result.hasRelatedData) {
                subBuilder.MergeFrom(RelatedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RelatedData = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.suitParts_, global::com.golf.proto.CCSuitPartItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 106: {
              global::com.golf.proto.CCChangeNameItem.Builder subBuilder = global::com.golf.proto.CCChangeNameItem.CreateBuilder();
              if (result.hasChangeName) {
                subBuilder.MergeFrom(ChangeName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChangeName = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              input.ReadMessageArray(tag, field_name, result.newSuitParts_, global::com.golf.proto.CCSuitPartItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCClubItem> ClubsList {
        get { return PrepareBuilder().clubs_; }
      }
      public int ClubsCount {
        get { return result.ClubsCount; }
      }
      public global::com.golf.proto.CCClubItem GetClubs(int index) {
        return result.GetClubs(index);
      }
      public Builder SetClubs(int index, global::com.golf.proto.CCClubItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.clubs_[index] = value;
        return this;
      }
      public Builder SetClubs(int index, global::com.golf.proto.CCClubItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.clubs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddClubs(global::com.golf.proto.CCClubItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.clubs_.Add(value);
        return this;
      }
      public Builder AddClubs(global::com.golf.proto.CCClubItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.clubs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeClubs(scg::IEnumerable<global::com.golf.proto.CCClubItem> values) {
        PrepareBuilder();
        result.clubs_.Add(values);
        return this;
      }
      public Builder ClearClubs() {
        PrepareBuilder();
        result.clubs_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCAvatarItem> AvatarsList {
        get { return PrepareBuilder().avatars_; }
      }
      public int AvatarsCount {
        get { return result.AvatarsCount; }
      }
      public global::com.golf.proto.CCAvatarItem GetAvatars(int index) {
        return result.GetAvatars(index);
      }
      public Builder SetAvatars(int index, global::com.golf.proto.CCAvatarItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.avatars_[index] = value;
        return this;
      }
      public Builder SetAvatars(int index, global::com.golf.proto.CCAvatarItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.avatars_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAvatars(global::com.golf.proto.CCAvatarItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.avatars_.Add(value);
        return this;
      }
      public Builder AddAvatars(global::com.golf.proto.CCAvatarItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.avatars_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAvatars(scg::IEnumerable<global::com.golf.proto.CCAvatarItem> values) {
        PrepareBuilder();
        result.avatars_.Add(values);
        return this;
      }
      public Builder ClearAvatars() {
        PrepareBuilder();
        result.avatars_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCComBoxItem> ComBoxesList {
        get { return PrepareBuilder().comBoxes_; }
      }
      public int ComBoxesCount {
        get { return result.ComBoxesCount; }
      }
      public global::com.golf.proto.CCComBoxItem GetComBoxes(int index) {
        return result.GetComBoxes(index);
      }
      public Builder SetComBoxes(int index, global::com.golf.proto.CCComBoxItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.comBoxes_[index] = value;
        return this;
      }
      public Builder SetComBoxes(int index, global::com.golf.proto.CCComBoxItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.comBoxes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddComBoxes(global::com.golf.proto.CCComBoxItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.comBoxes_.Add(value);
        return this;
      }
      public Builder AddComBoxes(global::com.golf.proto.CCComBoxItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.comBoxes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeComBoxes(scg::IEnumerable<global::com.golf.proto.CCComBoxItem> values) {
        PrepareBuilder();
        result.comBoxes_.Add(values);
        return this;
      }
      public Builder ClearComBoxes() {
        PrepareBuilder();
        result.comBoxes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCTimeBoxItem> VsBoxesList {
        get { return PrepareBuilder().vsBoxes_; }
      }
      public int VsBoxesCount {
        get { return result.VsBoxesCount; }
      }
      public global::com.golf.proto.CCTimeBoxItem GetVsBoxes(int index) {
        return result.GetVsBoxes(index);
      }
      public Builder SetVsBoxes(int index, global::com.golf.proto.CCTimeBoxItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.vsBoxes_[index] = value;
        return this;
      }
      public Builder SetVsBoxes(int index, global::com.golf.proto.CCTimeBoxItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.vsBoxes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVsBoxes(global::com.golf.proto.CCTimeBoxItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.vsBoxes_.Add(value);
        return this;
      }
      public Builder AddVsBoxes(global::com.golf.proto.CCTimeBoxItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.vsBoxes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVsBoxes(scg::IEnumerable<global::com.golf.proto.CCTimeBoxItem> values) {
        PrepareBuilder();
        result.vsBoxes_.Add(values);
        return this;
      }
      public Builder ClearVsBoxes() {
        PrepareBuilder();
        result.vsBoxes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCBallItem> BallsList {
        get { return PrepareBuilder().balls_; }
      }
      public int BallsCount {
        get { return result.BallsCount; }
      }
      public global::com.golf.proto.CCBallItem GetBalls(int index) {
        return result.GetBalls(index);
      }
      public Builder SetBalls(int index, global::com.golf.proto.CCBallItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.balls_[index] = value;
        return this;
      }
      public Builder SetBalls(int index, global::com.golf.proto.CCBallItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.balls_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBalls(global::com.golf.proto.CCBallItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.balls_.Add(value);
        return this;
      }
      public Builder AddBalls(global::com.golf.proto.CCBallItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.balls_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBalls(scg::IEnumerable<global::com.golf.proto.CCBallItem> values) {
        PrepareBuilder();
        result.balls_.Add(values);
        return this;
      }
      public Builder ClearBalls() {
        PrepareBuilder();
        result.balls_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCAvaFrameItem> AvaFramesList {
        get { return PrepareBuilder().avaFrames_; }
      }
      public int AvaFramesCount {
        get { return result.AvaFramesCount; }
      }
      public global::com.golf.proto.CCAvaFrameItem GetAvaFrames(int index) {
        return result.GetAvaFrames(index);
      }
      public Builder SetAvaFrames(int index, global::com.golf.proto.CCAvaFrameItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.avaFrames_[index] = value;
        return this;
      }
      public Builder SetAvaFrames(int index, global::com.golf.proto.CCAvaFrameItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.avaFrames_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAvaFrames(global::com.golf.proto.CCAvaFrameItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.avaFrames_.Add(value);
        return this;
      }
      public Builder AddAvaFrames(global::com.golf.proto.CCAvaFrameItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.avaFrames_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAvaFrames(scg::IEnumerable<global::com.golf.proto.CCAvaFrameItem> values) {
        PrepareBuilder();
        result.avaFrames_.Add(values);
        return this;
      }
      public Builder ClearAvaFrames() {
        PrepareBuilder();
        result.avaFrames_.Clear();
        return this;
      }
      
      public bool HasRelatedData {
       get { return result.hasRelatedData; }
      }
      public global::com.golf.proto.CCAssetRelatedData RelatedData {
        get { return result.RelatedData; }
        set { SetRelatedData(value); }
      }
      public Builder SetRelatedData(global::com.golf.proto.CCAssetRelatedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRelatedData = true;
        result.relatedData_ = value;
        return this;
      }
      public Builder SetRelatedData(global::com.golf.proto.CCAssetRelatedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRelatedData = true;
        result.relatedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRelatedData(global::com.golf.proto.CCAssetRelatedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRelatedData &&
            result.relatedData_ != global::com.golf.proto.CCAssetRelatedData.DefaultInstance) {
            result.relatedData_ = global::com.golf.proto.CCAssetRelatedData.CreateBuilder(result.relatedData_).MergeFrom(value).BuildPartial();
        } else {
          result.relatedData_ = value;
        }
        result.hasRelatedData = true;
        return this;
      }
      public Builder ClearRelatedData() {
        PrepareBuilder();
        result.hasRelatedData = false;
        result.relatedData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCSuitPartItem> SuitPartsList {
        get { return PrepareBuilder().suitParts_; }
      }
      public int SuitPartsCount {
        get { return result.SuitPartsCount; }
      }
      public global::com.golf.proto.CCSuitPartItem GetSuitParts(int index) {
        return result.GetSuitParts(index);
      }
      public Builder SetSuitParts(int index, global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.suitParts_[index] = value;
        return this;
      }
      public Builder SetSuitParts(int index, global::com.golf.proto.CCSuitPartItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.suitParts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSuitParts(global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.suitParts_.Add(value);
        return this;
      }
      public Builder AddSuitParts(global::com.golf.proto.CCSuitPartItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.suitParts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSuitParts(scg::IEnumerable<global::com.golf.proto.CCSuitPartItem> values) {
        PrepareBuilder();
        result.suitParts_.Add(values);
        return this;
      }
      public Builder ClearSuitParts() {
        PrepareBuilder();
        result.suitParts_.Clear();
        return this;
      }
      
      public bool HasChangeName {
       get { return result.hasChangeName; }
      }
      public global::com.golf.proto.CCChangeNameItem ChangeName {
        get { return result.ChangeName; }
        set { SetChangeName(value); }
      }
      public Builder SetChangeName(global::com.golf.proto.CCChangeNameItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChangeName = true;
        result.changeName_ = value;
        return this;
      }
      public Builder SetChangeName(global::com.golf.proto.CCChangeNameItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChangeName = true;
        result.changeName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChangeName(global::com.golf.proto.CCChangeNameItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChangeName &&
            result.changeName_ != global::com.golf.proto.CCChangeNameItem.DefaultInstance) {
            result.changeName_ = global::com.golf.proto.CCChangeNameItem.CreateBuilder(result.changeName_).MergeFrom(value).BuildPartial();
        } else {
          result.changeName_ = value;
        }
        result.hasChangeName = true;
        return this;
      }
      public Builder ClearChangeName() {
        PrepareBuilder();
        result.hasChangeName = false;
        result.changeName_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCSuitPartItem> NewSuitPartsList {
        get { return PrepareBuilder().newSuitParts_; }
      }
      public int NewSuitPartsCount {
        get { return result.NewSuitPartsCount; }
      }
      public global::com.golf.proto.CCSuitPartItem GetNewSuitParts(int index) {
        return result.GetNewSuitParts(index);
      }
      public Builder SetNewSuitParts(int index, global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.newSuitParts_[index] = value;
        return this;
      }
      public Builder SetNewSuitParts(int index, global::com.golf.proto.CCSuitPartItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.newSuitParts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNewSuitParts(global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.newSuitParts_.Add(value);
        return this;
      }
      public Builder AddNewSuitParts(global::com.golf.proto.CCSuitPartItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.newSuitParts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNewSuitParts(scg::IEnumerable<global::com.golf.proto.CCSuitPartItem> values) {
        PrepareBuilder();
        result.newSuitParts_.Add(values);
        return this;
      }
      public Builder ClearNewSuitParts() {
        PrepareBuilder();
        result.newSuitParts_.Clear();
        return this;
      }
    }
    static CCAssetData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeNameItem : pb::GeneratedMessageLite<CCChangeNameItem, CCChangeNameItem.Builder> {
    private CCChangeNameItem() { }
    private static readonly CCChangeNameItem defaultInstance = new CCChangeNameItem().MakeReadOnly();
    private static readonly string[] _cCChangeNameItemFieldNames = new string[] { "cnt", "num" };
    private static readonly uint[] _cCChangeNameItemFieldTags = new uint[] { 16, 8 };
    public static CCChangeNameItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeNameItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeNameItem ThisMessage {
      get { return this; }
    }
    
    public const int NumFieldNumber = 1;
    private bool hasNum;
    private int num_;
    public bool HasNum {
      get { return hasNum; }
    }
    public int Num {
      get { return num_; }
    }
    
    public const int CntFieldNumber = 2;
    private bool hasCnt;
    private int cnt_;
    public bool HasCnt {
      get { return hasCnt; }
    }
    public int Cnt {
      get { return cnt_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeNameItemFieldNames;
      if (hasNum) {
        output.WriteInt32(1, field_names[1], Num);
      }
      if (hasCnt) {
        output.WriteInt32(2, field_names[0], Cnt);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Num);
      }
      if (hasCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Cnt);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasNum) hash ^= num_.GetHashCode();
      if (hasCnt) hash ^= cnt_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeNameItem other = obj as CCChangeNameItem;
      if (other == null) return false;
      if (hasNum != other.hasNum || (hasNum && !num_.Equals(other.num_))) return false;
      if (hasCnt != other.hasCnt || (hasCnt && !cnt_.Equals(other.cnt_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("num", hasNum, num_, writer);
      PrintField("cnt", hasCnt, cnt_, writer);
    }
    #endregion
    
    public static CCChangeNameItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeNameItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeNameItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeNameItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeNameItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeNameItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeNameItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeNameItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeNameItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeNameItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeNameItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeNameItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeNameItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeNameItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeNameItem result;
      
      private CCChangeNameItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeNameItem original = result;
          result = new CCChangeNameItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeNameItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeNameItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeNameItem.DefaultInstance; }
      }
      
      public override CCChangeNameItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeNameItem) {
          return MergeFrom((CCChangeNameItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeNameItem other) {
        if (other == global::com.golf.proto.CCChangeNameItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNum) {
          Num = other.Num;
        }
        if (other.HasCnt) {
          Cnt = other.Cnt;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeNameItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeNameItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNum = input.ReadInt32(ref result.num_);
              break;
            }
            case 16: {
              result.hasCnt = input.ReadInt32(ref result.cnt_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 0;
        return this;
      }
      
      public bool HasCnt {
        get { return result.hasCnt; }
      }
      public int Cnt {
        get { return result.Cnt; }
        set { SetCnt(value); }
      }
      public Builder SetCnt(int value) {
        PrepareBuilder();
        result.hasCnt = true;
        result.cnt_ = value;
        return this;
      }
      public Builder ClearCnt() {
        PrepareBuilder();
        result.hasCnt = false;
        result.cnt_ = 0;
        return this;
      }
    }
    static CCChangeNameItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOwnTypeItem : pb::GeneratedMessageLite<CCOwnTypeItem, CCOwnTypeItem.Builder> {
    private CCOwnTypeItem() { }
    private static readonly CCOwnTypeItem defaultInstance = new CCOwnTypeItem().MakeReadOnly();
    private static readonly string[] _cCOwnTypeItemFieldNames = new string[] { "et", "gt", "tp" };
    private static readonly uint[] _cCOwnTypeItemFieldTags = new uint[] { 24, 16, 8 };
    public static CCOwnTypeItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOwnTypeItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOwnTypeItem ThisMessage {
      get { return this; }
    }
    
    public const int TpFieldNumber = 1;
    private bool hasTp;
    private int tp_;
    public bool HasTp {
      get { return hasTp; }
    }
    public int Tp {
      get { return tp_; }
    }
    
    public const int GtFieldNumber = 2;
    private bool hasGt;
    private long gt_;
    public bool HasGt {
      get { return hasGt; }
    }
    public long Gt {
      get { return gt_; }
    }
    
    public const int EtFieldNumber = 3;
    private bool hasEt;
    private long et_;
    public bool HasEt {
      get { return hasEt; }
    }
    public long Et {
      get { return et_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOwnTypeItemFieldNames;
      if (hasTp) {
        output.WriteInt32(1, field_names[2], Tp);
      }
      if (hasGt) {
        output.WriteInt64(2, field_names[1], Gt);
      }
      if (hasEt) {
        output.WriteInt64(3, field_names[0], Et);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTp) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Tp);
      }
      if (hasGt) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Gt);
      }
      if (hasEt) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Et);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTp) hash ^= tp_.GetHashCode();
      if (hasGt) hash ^= gt_.GetHashCode();
      if (hasEt) hash ^= et_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOwnTypeItem other = obj as CCOwnTypeItem;
      if (other == null) return false;
      if (hasTp != other.hasTp || (hasTp && !tp_.Equals(other.tp_))) return false;
      if (hasGt != other.hasGt || (hasGt && !gt_.Equals(other.gt_))) return false;
      if (hasEt != other.hasEt || (hasEt && !et_.Equals(other.et_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("tp", hasTp, tp_, writer);
      PrintField("gt", hasGt, gt_, writer);
      PrintField("et", hasEt, et_, writer);
    }
    #endregion
    
    public static CCOwnTypeItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOwnTypeItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOwnTypeItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOwnTypeItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOwnTypeItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOwnTypeItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOwnTypeItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOwnTypeItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOwnTypeItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOwnTypeItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOwnTypeItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOwnTypeItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOwnTypeItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOwnTypeItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOwnTypeItem result;
      
      private CCOwnTypeItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOwnTypeItem original = result;
          result = new CCOwnTypeItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOwnTypeItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOwnTypeItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCOwnTypeItem.DefaultInstance; }
      }
      
      public override CCOwnTypeItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOwnTypeItem) {
          return MergeFrom((CCOwnTypeItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOwnTypeItem other) {
        if (other == global::com.golf.proto.CCOwnTypeItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTp) {
          Tp = other.Tp;
        }
        if (other.HasGt) {
          Gt = other.Gt;
        }
        if (other.HasEt) {
          Et = other.Et;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOwnTypeItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOwnTypeItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTp = input.ReadInt32(ref result.tp_);
              break;
            }
            case 16: {
              result.hasGt = input.ReadInt64(ref result.gt_);
              break;
            }
            case 24: {
              result.hasEt = input.ReadInt64(ref result.et_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasTp {
        get { return result.hasTp; }
      }
      public int Tp {
        get { return result.Tp; }
        set { SetTp(value); }
      }
      public Builder SetTp(int value) {
        PrepareBuilder();
        result.hasTp = true;
        result.tp_ = value;
        return this;
      }
      public Builder ClearTp() {
        PrepareBuilder();
        result.hasTp = false;
        result.tp_ = 0;
        return this;
      }
      
      public bool HasGt {
        get { return result.hasGt; }
      }
      public long Gt {
        get { return result.Gt; }
        set { SetGt(value); }
      }
      public Builder SetGt(long value) {
        PrepareBuilder();
        result.hasGt = true;
        result.gt_ = value;
        return this;
      }
      public Builder ClearGt() {
        PrepareBuilder();
        result.hasGt = false;
        result.gt_ = 0L;
        return this;
      }
      
      public bool HasEt {
        get { return result.hasEt; }
      }
      public long Et {
        get { return result.Et; }
        set { SetEt(value); }
      }
      public Builder SetEt(long value) {
        PrepareBuilder();
        result.hasEt = true;
        result.et_ = value;
        return this;
      }
      public Builder ClearEt() {
        PrepareBuilder();
        result.hasEt = false;
        result.et_ = 0L;
        return this;
      }
    }
    static CCOwnTypeItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCClubItem : pb::GeneratedMessageLite<CCClubItem, CCClubItem.Builder> {
    private CCClubItem() { }
    private static readonly CCClubItem defaultInstance = new CCClubItem().MakeReadOnly();
    private static readonly string[] _cCClubItemFieldNames = new string[] { "card_num", "id", "lv", "num", "oti", "state", "use_cnt", "win_cnt" };
    private static readonly uint[] _cCClubItemFieldTags = new uint[] { 56, 8, 48, 40, 34, 64, 16, 24 };
    public static CCClubItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCClubItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCClubItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int UseCntFieldNumber = 2;
    private bool hasUseCnt;
    private int useCnt_;
    public bool HasUseCnt {
      get { return hasUseCnt; }
    }
    public int UseCnt {
      get { return useCnt_; }
    }
    
    public const int WinCntFieldNumber = 3;
    private bool hasWinCnt;
    private int winCnt_;
    public bool HasWinCnt {
      get { return hasWinCnt; }
    }
    public int WinCnt {
      get { return winCnt_; }
    }
    
    public const int OtiFieldNumber = 4;
    private bool hasOti;
    private global::com.golf.proto.CCOwnTypeItem oti_;
    public bool HasOti {
      get { return hasOti; }
    }
    public global::com.golf.proto.CCOwnTypeItem Oti {
      get { return oti_ ?? global::com.golf.proto.CCOwnTypeItem.DefaultInstance; }
    }
    
    public const int NumFieldNumber = 5;
    private bool hasNum;
    private int num_;
    public bool HasNum {
      get { return hasNum; }
    }
    public int Num {
      get { return num_; }
    }
    
    public const int LvFieldNumber = 6;
    private bool hasLv;
    private int lv_;
    public bool HasLv {
      get { return hasLv; }
    }
    public int Lv {
      get { return lv_; }
    }
    
    public const int CardNumFieldNumber = 7;
    private bool hasCardNum;
    private int cardNum_;
    public bool HasCardNum {
      get { return hasCardNum; }
    }
    public int CardNum {
      get { return cardNum_; }
    }
    
    public const int StateFieldNumber = 8;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCClubItemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasUseCnt) {
        output.WriteInt32(2, field_names[6], UseCnt);
      }
      if (hasWinCnt) {
        output.WriteInt32(3, field_names[7], WinCnt);
      }
      if (hasOti) {
        output.WriteMessage(4, field_names[4], Oti);
      }
      if (hasNum) {
        output.WriteInt32(5, field_names[3], Num);
      }
      if (hasLv) {
        output.WriteInt32(6, field_names[2], Lv);
      }
      if (hasCardNum) {
        output.WriteInt32(7, field_names[0], CardNum);
      }
      if (hasState) {
        output.WriteInt32(8, field_names[5], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasUseCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, UseCnt);
      }
      if (hasWinCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, WinCnt);
      }
      if (hasOti) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Oti);
      }
      if (hasNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Num);
      }
      if (hasLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Lv);
      }
      if (hasCardNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, CardNum);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasUseCnt) hash ^= useCnt_.GetHashCode();
      if (hasWinCnt) hash ^= winCnt_.GetHashCode();
      if (hasOti) hash ^= oti_.GetHashCode();
      if (hasNum) hash ^= num_.GetHashCode();
      if (hasLv) hash ^= lv_.GetHashCode();
      if (hasCardNum) hash ^= cardNum_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCClubItem other = obj as CCClubItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasUseCnt != other.hasUseCnt || (hasUseCnt && !useCnt_.Equals(other.useCnt_))) return false;
      if (hasWinCnt != other.hasWinCnt || (hasWinCnt && !winCnt_.Equals(other.winCnt_))) return false;
      if (hasOti != other.hasOti || (hasOti && !oti_.Equals(other.oti_))) return false;
      if (hasNum != other.hasNum || (hasNum && !num_.Equals(other.num_))) return false;
      if (hasLv != other.hasLv || (hasLv && !lv_.Equals(other.lv_))) return false;
      if (hasCardNum != other.hasCardNum || (hasCardNum && !cardNum_.Equals(other.cardNum_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("use_cnt", hasUseCnt, useCnt_, writer);
      PrintField("win_cnt", hasWinCnt, winCnt_, writer);
      PrintField("oti", hasOti, oti_, writer);
      PrintField("num", hasNum, num_, writer);
      PrintField("lv", hasLv, lv_, writer);
      PrintField("card_num", hasCardNum, cardNum_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCClubItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClubItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClubItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClubItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClubItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClubItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCClubItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCClubItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCClubItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClubItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCClubItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCClubItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCClubItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCClubItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCClubItem result;
      
      private CCClubItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCClubItem original = result;
          result = new CCClubItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCClubItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCClubItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCClubItem.DefaultInstance; }
      }
      
      public override CCClubItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCClubItem) {
          return MergeFrom((CCClubItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCClubItem other) {
        if (other == global::com.golf.proto.CCClubItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasUseCnt) {
          UseCnt = other.UseCnt;
        }
        if (other.HasWinCnt) {
          WinCnt = other.WinCnt;
        }
        if (other.HasOti) {
          MergeOti(other.Oti);
        }
        if (other.HasNum) {
          Num = other.Num;
        }
        if (other.HasLv) {
          Lv = other.Lv;
        }
        if (other.HasCardNum) {
          CardNum = other.CardNum;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCClubItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCClubItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasUseCnt = input.ReadInt32(ref result.useCnt_);
              break;
            }
            case 24: {
              result.hasWinCnt = input.ReadInt32(ref result.winCnt_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCOwnTypeItem.Builder subBuilder = global::com.golf.proto.CCOwnTypeItem.CreateBuilder();
              if (result.hasOti) {
                subBuilder.MergeFrom(Oti);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Oti = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasNum = input.ReadInt32(ref result.num_);
              break;
            }
            case 48: {
              result.hasLv = input.ReadInt32(ref result.lv_);
              break;
            }
            case 56: {
              result.hasCardNum = input.ReadInt32(ref result.cardNum_);
              break;
            }
            case 64: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasUseCnt {
        get { return result.hasUseCnt; }
      }
      public int UseCnt {
        get { return result.UseCnt; }
        set { SetUseCnt(value); }
      }
      public Builder SetUseCnt(int value) {
        PrepareBuilder();
        result.hasUseCnt = true;
        result.useCnt_ = value;
        return this;
      }
      public Builder ClearUseCnt() {
        PrepareBuilder();
        result.hasUseCnt = false;
        result.useCnt_ = 0;
        return this;
      }
      
      public bool HasWinCnt {
        get { return result.hasWinCnt; }
      }
      public int WinCnt {
        get { return result.WinCnt; }
        set { SetWinCnt(value); }
      }
      public Builder SetWinCnt(int value) {
        PrepareBuilder();
        result.hasWinCnt = true;
        result.winCnt_ = value;
        return this;
      }
      public Builder ClearWinCnt() {
        PrepareBuilder();
        result.hasWinCnt = false;
        result.winCnt_ = 0;
        return this;
      }
      
      public bool HasOti {
       get { return result.hasOti; }
      }
      public global::com.golf.proto.CCOwnTypeItem Oti {
        get { return result.Oti; }
        set { SetOti(value); }
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = value;
        return this;
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOti &&
            result.oti_ != global::com.golf.proto.CCOwnTypeItem.DefaultInstance) {
            result.oti_ = global::com.golf.proto.CCOwnTypeItem.CreateBuilder(result.oti_).MergeFrom(value).BuildPartial();
        } else {
          result.oti_ = value;
        }
        result.hasOti = true;
        return this;
      }
      public Builder ClearOti() {
        PrepareBuilder();
        result.hasOti = false;
        result.oti_ = null;
        return this;
      }
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 0;
        return this;
      }
      
      public bool HasLv {
        get { return result.hasLv; }
      }
      public int Lv {
        get { return result.Lv; }
        set { SetLv(value); }
      }
      public Builder SetLv(int value) {
        PrepareBuilder();
        result.hasLv = true;
        result.lv_ = value;
        return this;
      }
      public Builder ClearLv() {
        PrepareBuilder();
        result.hasLv = false;
        result.lv_ = 0;
        return this;
      }
      
      public bool HasCardNum {
        get { return result.hasCardNum; }
      }
      public int CardNum {
        get { return result.CardNum; }
        set { SetCardNum(value); }
      }
      public Builder SetCardNum(int value) {
        PrepareBuilder();
        result.hasCardNum = true;
        result.cardNum_ = value;
        return this;
      }
      public Builder ClearCardNum() {
        PrepareBuilder();
        result.hasCardNum = false;
        result.cardNum_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCClubItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAvatarItem : pb::GeneratedMessageLite<CCAvatarItem, CCAvatarItem.Builder> {
    private CCAvatarItem() { }
    private static readonly CCAvatarItem defaultInstance = new CCAvatarItem().MakeReadOnly();
    private static readonly string[] _cCAvatarItemFieldNames = new string[] { "id", "oti" };
    private static readonly uint[] _cCAvatarItemFieldTags = new uint[] { 8, 18 };
    public static CCAvatarItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAvatarItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAvatarItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int OtiFieldNumber = 2;
    private bool hasOti;
    private global::com.golf.proto.CCOwnTypeItem oti_;
    public bool HasOti {
      get { return hasOti; }
    }
    public global::com.golf.proto.CCOwnTypeItem Oti {
      get { return oti_ ?? global::com.golf.proto.CCOwnTypeItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAvatarItemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasOti) {
        output.WriteMessage(2, field_names[1], Oti);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasOti) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Oti);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasOti) hash ^= oti_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAvatarItem other = obj as CCAvatarItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasOti != other.hasOti || (hasOti && !oti_.Equals(other.oti_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("oti", hasOti, oti_, writer);
    }
    #endregion
    
    public static CCAvatarItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAvatarItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAvatarItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAvatarItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAvatarItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAvatarItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAvatarItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAvatarItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAvatarItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAvatarItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAvatarItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAvatarItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAvatarItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAvatarItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAvatarItem result;
      
      private CCAvatarItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAvatarItem original = result;
          result = new CCAvatarItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAvatarItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAvatarItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCAvatarItem.DefaultInstance; }
      }
      
      public override CCAvatarItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAvatarItem) {
          return MergeFrom((CCAvatarItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAvatarItem other) {
        if (other == global::com.golf.proto.CCAvatarItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasOti) {
          MergeOti(other.Oti);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAvatarItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAvatarItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCOwnTypeItem.Builder subBuilder = global::com.golf.proto.CCOwnTypeItem.CreateBuilder();
              if (result.hasOti) {
                subBuilder.MergeFrom(Oti);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Oti = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasOti {
       get { return result.hasOti; }
      }
      public global::com.golf.proto.CCOwnTypeItem Oti {
        get { return result.Oti; }
        set { SetOti(value); }
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = value;
        return this;
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOti &&
            result.oti_ != global::com.golf.proto.CCOwnTypeItem.DefaultInstance) {
            result.oti_ = global::com.golf.proto.CCOwnTypeItem.CreateBuilder(result.oti_).MergeFrom(value).BuildPartial();
        } else {
          result.oti_ = value;
        }
        result.hasOti = true;
        return this;
      }
      public Builder ClearOti() {
        PrepareBuilder();
        result.hasOti = false;
        result.oti_ = null;
        return this;
      }
    }
    static CCAvatarItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCComBoxItem : pb::GeneratedMessageLite<CCComBoxItem, CCComBoxItem.Builder> {
    private CCComBoxItem() { }
    private static readonly CCComBoxItem defaultInstance = new CCComBoxItem().MakeReadOnly();
    private static readonly string[] _cCComBoxItemFieldNames = new string[] { "id", "num", "type" };
    private static readonly uint[] _cCComBoxItemFieldTags = new uint[] { 16, 24, 8 };
    public static CCComBoxItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCComBoxItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCComBoxItem ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NumFieldNumber = 3;
    private bool hasNum;
    private int num_;
    public bool HasNum {
      get { return hasNum; }
    }
    public int Num {
      get { return num_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCComBoxItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[2], Type);
      }
      if (hasId) {
        output.WriteInt32(2, field_names[0], Id);
      }
      if (hasNum) {
        output.WriteInt32(3, field_names[1], Num);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
      }
      if (hasNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Num);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasNum) hash ^= num_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCComBoxItem other = obj as CCComBoxItem;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasNum != other.hasNum || (hasNum && !num_.Equals(other.num_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("id", hasId, id_, writer);
      PrintField("num", hasNum, num_, writer);
    }
    #endregion
    
    public static CCComBoxItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCComBoxItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCComBoxItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCComBoxItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCComBoxItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCComBoxItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCComBoxItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCComBoxItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCComBoxItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCComBoxItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCComBoxItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCComBoxItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCComBoxItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCComBoxItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCComBoxItem result;
      
      private CCComBoxItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCComBoxItem original = result;
          result = new CCComBoxItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCComBoxItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCComBoxItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCComBoxItem.DefaultInstance; }
      }
      
      public override CCComBoxItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCComBoxItem) {
          return MergeFrom((CCComBoxItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCComBoxItem other) {
        if (other == global::com.golf.proto.CCComBoxItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasNum) {
          Num = other.Num;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCComBoxItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCComBoxItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 24: {
              result.hasNum = input.ReadInt32(ref result.num_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 0;
        return this;
      }
    }
    static CCComBoxItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCClothItem : pb::GeneratedMessageLite<CCClothItem, CCClothItem.Builder> {
    private CCClothItem() { }
    private static readonly CCClothItem defaultInstance = new CCClothItem().MakeReadOnly();
    private static readonly string[] _cCClothItemFieldNames = new string[] { "id", "oti" };
    private static readonly uint[] _cCClothItemFieldTags = new uint[] { 8, 18 };
    public static CCClothItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCClothItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCClothItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int OtiFieldNumber = 2;
    private bool hasOti;
    private global::com.golf.proto.CCOwnTypeItem oti_;
    public bool HasOti {
      get { return hasOti; }
    }
    public global::com.golf.proto.CCOwnTypeItem Oti {
      get { return oti_ ?? global::com.golf.proto.CCOwnTypeItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCClothItemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasOti) {
        output.WriteMessage(2, field_names[1], Oti);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasOti) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Oti);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasOti) hash ^= oti_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCClothItem other = obj as CCClothItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasOti != other.hasOti || (hasOti && !oti_.Equals(other.oti_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("oti", hasOti, oti_, writer);
    }
    #endregion
    
    public static CCClothItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClothItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClothItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClothItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClothItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClothItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCClothItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCClothItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCClothItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClothItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCClothItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCClothItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCClothItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCClothItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCClothItem result;
      
      private CCClothItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCClothItem original = result;
          result = new CCClothItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCClothItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCClothItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCClothItem.DefaultInstance; }
      }
      
      public override CCClothItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCClothItem) {
          return MergeFrom((CCClothItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCClothItem other) {
        if (other == global::com.golf.proto.CCClothItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasOti) {
          MergeOti(other.Oti);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCClothItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCClothItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCOwnTypeItem.Builder subBuilder = global::com.golf.proto.CCOwnTypeItem.CreateBuilder();
              if (result.hasOti) {
                subBuilder.MergeFrom(Oti);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Oti = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasOti {
       get { return result.hasOti; }
      }
      public global::com.golf.proto.CCOwnTypeItem Oti {
        get { return result.Oti; }
        set { SetOti(value); }
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = value;
        return this;
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOti &&
            result.oti_ != global::com.golf.proto.CCOwnTypeItem.DefaultInstance) {
            result.oti_ = global::com.golf.proto.CCOwnTypeItem.CreateBuilder(result.oti_).MergeFrom(value).BuildPartial();
        } else {
          result.oti_ = value;
        }
        result.hasOti = true;
        return this;
      }
      public Builder ClearOti() {
        PrepareBuilder();
        result.hasOti = false;
        result.oti_ = null;
        return this;
      }
    }
    static CCClothItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTimeBoxItem : pb::GeneratedMessageLite<CCTimeBoxItem, CCTimeBoxItem.Builder> {
    private CCTimeBoxItem() { }
    private static readonly CCTimeBoxItem defaultInstance = new CCTimeBoxItem().MakeReadOnly();
    private static readonly string[] _cCTimeBoxItemFieldNames = new string[] { "id", "loc_id", "ot", "state", "type" };
    private static readonly uint[] _cCTimeBoxItemFieldTags = new uint[] { 16, 40, 24, 32, 8 };
    public static CCTimeBoxItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTimeBoxItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTimeBoxItem ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int OtFieldNumber = 3;
    private bool hasOt;
    private long ot_;
    public bool HasOt {
      get { return hasOt; }
    }
    public long Ot {
      get { return ot_; }
    }
    
    public const int StateFieldNumber = 4;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int LocIdFieldNumber = 5;
    private bool hasLocId;
    private int locId_;
    public bool HasLocId {
      get { return hasLocId; }
    }
    public int LocId {
      get { return locId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTimeBoxItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[4], Type);
      }
      if (hasId) {
        output.WriteInt32(2, field_names[0], Id);
      }
      if (hasOt) {
        output.WriteInt64(3, field_names[2], Ot);
      }
      if (hasState) {
        output.WriteInt32(4, field_names[3], State);
      }
      if (hasLocId) {
        output.WriteInt32(5, field_names[1], LocId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
      }
      if (hasOt) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Ot);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, State);
      }
      if (hasLocId) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, LocId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasOt) hash ^= ot_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasLocId) hash ^= locId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTimeBoxItem other = obj as CCTimeBoxItem;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasOt != other.hasOt || (hasOt && !ot_.Equals(other.ot_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasLocId != other.hasLocId || (hasLocId && !locId_.Equals(other.locId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("id", hasId, id_, writer);
      PrintField("ot", hasOt, ot_, writer);
      PrintField("state", hasState, state_, writer);
      PrintField("loc_id", hasLocId, locId_, writer);
    }
    #endregion
    
    public static CCTimeBoxItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTimeBoxItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTimeBoxItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTimeBoxItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTimeBoxItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTimeBoxItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTimeBoxItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTimeBoxItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTimeBoxItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTimeBoxItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTimeBoxItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTimeBoxItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTimeBoxItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTimeBoxItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTimeBoxItem result;
      
      private CCTimeBoxItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTimeBoxItem original = result;
          result = new CCTimeBoxItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTimeBoxItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTimeBoxItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCTimeBoxItem.DefaultInstance; }
      }
      
      public override CCTimeBoxItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTimeBoxItem) {
          return MergeFrom((CCTimeBoxItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTimeBoxItem other) {
        if (other == global::com.golf.proto.CCTimeBoxItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasOt) {
          Ot = other.Ot;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasLocId) {
          LocId = other.LocId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTimeBoxItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTimeBoxItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 24: {
              result.hasOt = input.ReadInt64(ref result.ot_);
              break;
            }
            case 32: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 40: {
              result.hasLocId = input.ReadInt32(ref result.locId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasOt {
        get { return result.hasOt; }
      }
      public long Ot {
        get { return result.Ot; }
        set { SetOt(value); }
      }
      public Builder SetOt(long value) {
        PrepareBuilder();
        result.hasOt = true;
        result.ot_ = value;
        return this;
      }
      public Builder ClearOt() {
        PrepareBuilder();
        result.hasOt = false;
        result.ot_ = 0L;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasLocId {
        get { return result.hasLocId; }
      }
      public int LocId {
        get { return result.LocId; }
        set { SetLocId(value); }
      }
      public Builder SetLocId(int value) {
        PrepareBuilder();
        result.hasLocId = true;
        result.locId_ = value;
        return this;
      }
      public Builder ClearLocId() {
        PrepareBuilder();
        result.hasLocId = false;
        result.locId_ = 0;
        return this;
      }
    }
    static CCTimeBoxItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBallItem : pb::GeneratedMessageLite<CCBallItem, CCBallItem.Builder> {
    private CCBallItem() { }
    private static readonly CCBallItem defaultInstance = new CCBallItem().MakeReadOnly();
    private static readonly string[] _cCBallItemFieldNames = new string[] { "id", "num", "state" };
    private static readonly uint[] _cCBallItemFieldTags = new uint[] { 8, 16, 24 };
    public static CCBallItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBallItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBallItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NumFieldNumber = 2;
    private bool hasNum;
    private int num_;
    public bool HasNum {
      get { return hasNum; }
    }
    public int Num {
      get { return num_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBallItemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasNum) {
        output.WriteInt32(2, field_names[1], Num);
      }
      if (hasState) {
        output.WriteInt32(3, field_names[2], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasNum) hash ^= num_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBallItem other = obj as CCBallItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasNum != other.hasNum || (hasNum && !num_.Equals(other.num_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("num", hasNum, num_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCBallItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBallItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBallItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBallItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBallItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBallItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBallItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBallItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBallItem result;
      
      private CCBallItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBallItem original = result;
          result = new CCBallItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBallItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBallItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCBallItem.DefaultInstance; }
      }
      
      public override CCBallItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBallItem) {
          return MergeFrom((CCBallItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBallItem other) {
        if (other == global::com.golf.proto.CCBallItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasNum) {
          Num = other.Num;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBallItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBallItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasNum = input.ReadInt32(ref result.num_);
              break;
            }
            case 24: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCBallItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCHatItem : pb::GeneratedMessageLite<CCHatItem, CCHatItem.Builder> {
    private CCHatItem() { }
    private static readonly CCHatItem defaultInstance = new CCHatItem().MakeReadOnly();
    private static readonly string[] _cCHatItemFieldNames = new string[] { "id", "oti" };
    private static readonly uint[] _cCHatItemFieldTags = new uint[] { 8, 18 };
    public static CCHatItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCHatItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCHatItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int OtiFieldNumber = 2;
    private bool hasOti;
    private global::com.golf.proto.CCOwnTypeItem oti_;
    public bool HasOti {
      get { return hasOti; }
    }
    public global::com.golf.proto.CCOwnTypeItem Oti {
      get { return oti_ ?? global::com.golf.proto.CCOwnTypeItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCHatItemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasOti) {
        output.WriteMessage(2, field_names[1], Oti);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasOti) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Oti);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasOti) hash ^= oti_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCHatItem other = obj as CCHatItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasOti != other.hasOti || (hasOti && !oti_.Equals(other.oti_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("oti", hasOti, oti_, writer);
    }
    #endregion
    
    public static CCHatItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHatItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHatItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHatItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHatItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHatItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCHatItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCHatItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCHatItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHatItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCHatItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCHatItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCHatItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCHatItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCHatItem result;
      
      private CCHatItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCHatItem original = result;
          result = new CCHatItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCHatItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCHatItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCHatItem.DefaultInstance; }
      }
      
      public override CCHatItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCHatItem) {
          return MergeFrom((CCHatItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCHatItem other) {
        if (other == global::com.golf.proto.CCHatItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasOti) {
          MergeOti(other.Oti);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCHatItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCHatItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCOwnTypeItem.Builder subBuilder = global::com.golf.proto.CCOwnTypeItem.CreateBuilder();
              if (result.hasOti) {
                subBuilder.MergeFrom(Oti);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Oti = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasOti {
       get { return result.hasOti; }
      }
      public global::com.golf.proto.CCOwnTypeItem Oti {
        get { return result.Oti; }
        set { SetOti(value); }
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = value;
        return this;
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOti &&
            result.oti_ != global::com.golf.proto.CCOwnTypeItem.DefaultInstance) {
            result.oti_ = global::com.golf.proto.CCOwnTypeItem.CreateBuilder(result.oti_).MergeFrom(value).BuildPartial();
        } else {
          result.oti_ = value;
        }
        result.hasOti = true;
        return this;
      }
      public Builder ClearOti() {
        PrepareBuilder();
        result.hasOti = false;
        result.oti_ = null;
        return this;
      }
    }
    static CCHatItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAcsryItem : pb::GeneratedMessageLite<CCAcsryItem, CCAcsryItem.Builder> {
    private CCAcsryItem() { }
    private static readonly CCAcsryItem defaultInstance = new CCAcsryItem().MakeReadOnly();
    private static readonly string[] _cCAcsryItemFieldNames = new string[] { "id", "oti" };
    private static readonly uint[] _cCAcsryItemFieldTags = new uint[] { 8, 18 };
    public static CCAcsryItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAcsryItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAcsryItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int OtiFieldNumber = 2;
    private bool hasOti;
    private global::com.golf.proto.CCOwnTypeItem oti_;
    public bool HasOti {
      get { return hasOti; }
    }
    public global::com.golf.proto.CCOwnTypeItem Oti {
      get { return oti_ ?? global::com.golf.proto.CCOwnTypeItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAcsryItemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasOti) {
        output.WriteMessage(2, field_names[1], Oti);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasOti) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Oti);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasOti) hash ^= oti_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAcsryItem other = obj as CCAcsryItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasOti != other.hasOti || (hasOti && !oti_.Equals(other.oti_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("oti", hasOti, oti_, writer);
    }
    #endregion
    
    public static CCAcsryItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAcsryItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAcsryItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAcsryItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAcsryItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAcsryItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAcsryItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAcsryItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAcsryItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAcsryItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAcsryItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAcsryItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAcsryItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAcsryItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAcsryItem result;
      
      private CCAcsryItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAcsryItem original = result;
          result = new CCAcsryItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAcsryItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAcsryItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCAcsryItem.DefaultInstance; }
      }
      
      public override CCAcsryItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAcsryItem) {
          return MergeFrom((CCAcsryItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAcsryItem other) {
        if (other == global::com.golf.proto.CCAcsryItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasOti) {
          MergeOti(other.Oti);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAcsryItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAcsryItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCOwnTypeItem.Builder subBuilder = global::com.golf.proto.CCOwnTypeItem.CreateBuilder();
              if (result.hasOti) {
                subBuilder.MergeFrom(Oti);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Oti = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasOti {
       get { return result.hasOti; }
      }
      public global::com.golf.proto.CCOwnTypeItem Oti {
        get { return result.Oti; }
        set { SetOti(value); }
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = value;
        return this;
      }
      public Builder SetOti(global::com.golf.proto.CCOwnTypeItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOti = true;
        result.oti_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOti(global::com.golf.proto.CCOwnTypeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOti &&
            result.oti_ != global::com.golf.proto.CCOwnTypeItem.DefaultInstance) {
            result.oti_ = global::com.golf.proto.CCOwnTypeItem.CreateBuilder(result.oti_).MergeFrom(value).BuildPartial();
        } else {
          result.oti_ = value;
        }
        result.hasOti = true;
        return this;
      }
      public Builder ClearOti() {
        PrepareBuilder();
        result.hasOti = false;
        result.oti_ = null;
        return this;
      }
    }
    static CCAcsryItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAvaFrameItem : pb::GeneratedMessageLite<CCAvaFrameItem, CCAvaFrameItem.Builder> {
    private CCAvaFrameItem() { }
    private static readonly CCAvaFrameItem defaultInstance = new CCAvaFrameItem().MakeReadOnly();
    private static readonly string[] _cCAvaFrameItemFieldNames = new string[] { "id", "num" };
    private static readonly uint[] _cCAvaFrameItemFieldTags = new uint[] { 8, 16 };
    public static CCAvaFrameItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAvaFrameItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAvaFrameItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NumFieldNumber = 2;
    private bool hasNum;
    private int num_;
    public bool HasNum {
      get { return hasNum; }
    }
    public int Num {
      get { return num_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAvaFrameItemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasNum) {
        output.WriteInt32(2, field_names[1], Num);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasNum) hash ^= num_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAvaFrameItem other = obj as CCAvaFrameItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasNum != other.hasNum || (hasNum && !num_.Equals(other.num_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("num", hasNum, num_, writer);
    }
    #endregion
    
    public static CCAvaFrameItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAvaFrameItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAvaFrameItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAvaFrameItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAvaFrameItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAvaFrameItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAvaFrameItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAvaFrameItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAvaFrameItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAvaFrameItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAvaFrameItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAvaFrameItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAvaFrameItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAvaFrameItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAvaFrameItem result;
      
      private CCAvaFrameItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAvaFrameItem original = result;
          result = new CCAvaFrameItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAvaFrameItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAvaFrameItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCAvaFrameItem.DefaultInstance; }
      }
      
      public override CCAvaFrameItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAvaFrameItem) {
          return MergeFrom((CCAvaFrameItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAvaFrameItem other) {
        if (other == global::com.golf.proto.CCAvaFrameItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasNum) {
          Num = other.Num;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAvaFrameItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAvaFrameItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasNum = input.ReadInt32(ref result.num_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 0;
        return this;
      }
    }
    static CCAvaFrameItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAssetRelatedData : pb::GeneratedMessageLite<CCAssetRelatedData, CCAssetRelatedData.Builder> {
    private CCAssetRelatedData() { }
    private static readonly CCAssetRelatedData defaultInstance = new CCAssetRelatedData().MakeReadOnly();
    private static readonly string[] _cCAssetRelatedDataFieldNames = new string[] { "s_daily_special_status", "vs_box_state" };
    private static readonly uint[] _cCAssetRelatedDataFieldTags = new uint[] { 18, 10 };
    public static CCAssetRelatedData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAssetRelatedData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAssetRelatedData ThisMessage {
      get { return this; }
    }
    
    public const int VsBoxStateFieldNumber = 1;
    private bool hasVsBoxState;
    private global::com.golf.proto.CCVsBoxState vsBoxState_;
    public bool HasVsBoxState {
      get { return hasVsBoxState; }
    }
    public global::com.golf.proto.CCVsBoxState VsBoxState {
      get { return vsBoxState_ ?? global::com.golf.proto.CCVsBoxState.DefaultInstance; }
    }
    
    public const int SDailySpecialStatusFieldNumber = 2;
    private bool hasSDailySpecialStatus;
    private global::com.golf.proto.CCStoreDailySpecialStatus sDailySpecialStatus_;
    public bool HasSDailySpecialStatus {
      get { return hasSDailySpecialStatus; }
    }
    public global::com.golf.proto.CCStoreDailySpecialStatus SDailySpecialStatus {
      get { return sDailySpecialStatus_ ?? global::com.golf.proto.CCStoreDailySpecialStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAssetRelatedDataFieldNames;
      if (hasVsBoxState) {
        output.WriteMessage(1, field_names[1], VsBoxState);
      }
      if (hasSDailySpecialStatus) {
        output.WriteMessage(2, field_names[0], SDailySpecialStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVsBoxState) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, VsBoxState);
      }
      if (hasSDailySpecialStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SDailySpecialStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasVsBoxState) hash ^= vsBoxState_.GetHashCode();
      if (hasSDailySpecialStatus) hash ^= sDailySpecialStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAssetRelatedData other = obj as CCAssetRelatedData;
      if (other == null) return false;
      if (hasVsBoxState != other.hasVsBoxState || (hasVsBoxState && !vsBoxState_.Equals(other.vsBoxState_))) return false;
      if (hasSDailySpecialStatus != other.hasSDailySpecialStatus || (hasSDailySpecialStatus && !sDailySpecialStatus_.Equals(other.sDailySpecialStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("vs_box_state", hasVsBoxState, vsBoxState_, writer);
      PrintField("s_daily_special_status", hasSDailySpecialStatus, sDailySpecialStatus_, writer);
    }
    #endregion
    
    public static CCAssetRelatedData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAssetRelatedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAssetRelatedData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAssetRelatedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAssetRelatedData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAssetRelatedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAssetRelatedData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAssetRelatedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAssetRelatedData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAssetRelatedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAssetRelatedData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAssetRelatedData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAssetRelatedData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAssetRelatedData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAssetRelatedData result;
      
      private CCAssetRelatedData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAssetRelatedData original = result;
          result = new CCAssetRelatedData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAssetRelatedData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAssetRelatedData DefaultInstanceForType {
        get { return global::com.golf.proto.CCAssetRelatedData.DefaultInstance; }
      }
      
      public override CCAssetRelatedData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAssetRelatedData) {
          return MergeFrom((CCAssetRelatedData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAssetRelatedData other) {
        if (other == global::com.golf.proto.CCAssetRelatedData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVsBoxState) {
          MergeVsBoxState(other.VsBoxState);
        }
        if (other.HasSDailySpecialStatus) {
          MergeSDailySpecialStatus(other.SDailySpecialStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAssetRelatedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAssetRelatedDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCVsBoxState.Builder subBuilder = global::com.golf.proto.CCVsBoxState.CreateBuilder();
              if (result.hasVsBoxState) {
                subBuilder.MergeFrom(VsBoxState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VsBoxState = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCStoreDailySpecialStatus.Builder subBuilder = global::com.golf.proto.CCStoreDailySpecialStatus.CreateBuilder();
              if (result.hasSDailySpecialStatus) {
                subBuilder.MergeFrom(SDailySpecialStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SDailySpecialStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasVsBoxState {
       get { return result.hasVsBoxState; }
      }
      public global::com.golf.proto.CCVsBoxState VsBoxState {
        get { return result.VsBoxState; }
        set { SetVsBoxState(value); }
      }
      public Builder SetVsBoxState(global::com.golf.proto.CCVsBoxState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVsBoxState = true;
        result.vsBoxState_ = value;
        return this;
      }
      public Builder SetVsBoxState(global::com.golf.proto.CCVsBoxState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVsBoxState = true;
        result.vsBoxState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVsBoxState(global::com.golf.proto.CCVsBoxState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVsBoxState &&
            result.vsBoxState_ != global::com.golf.proto.CCVsBoxState.DefaultInstance) {
            result.vsBoxState_ = global::com.golf.proto.CCVsBoxState.CreateBuilder(result.vsBoxState_).MergeFrom(value).BuildPartial();
        } else {
          result.vsBoxState_ = value;
        }
        result.hasVsBoxState = true;
        return this;
      }
      public Builder ClearVsBoxState() {
        PrepareBuilder();
        result.hasVsBoxState = false;
        result.vsBoxState_ = null;
        return this;
      }
      
      public bool HasSDailySpecialStatus {
       get { return result.hasSDailySpecialStatus; }
      }
      public global::com.golf.proto.CCStoreDailySpecialStatus SDailySpecialStatus {
        get { return result.SDailySpecialStatus; }
        set { SetSDailySpecialStatus(value); }
      }
      public Builder SetSDailySpecialStatus(global::com.golf.proto.CCStoreDailySpecialStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSDailySpecialStatus = true;
        result.sDailySpecialStatus_ = value;
        return this;
      }
      public Builder SetSDailySpecialStatus(global::com.golf.proto.CCStoreDailySpecialStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSDailySpecialStatus = true;
        result.sDailySpecialStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSDailySpecialStatus(global::com.golf.proto.CCStoreDailySpecialStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSDailySpecialStatus &&
            result.sDailySpecialStatus_ != global::com.golf.proto.CCStoreDailySpecialStatus.DefaultInstance) {
            result.sDailySpecialStatus_ = global::com.golf.proto.CCStoreDailySpecialStatus.CreateBuilder(result.sDailySpecialStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.sDailySpecialStatus_ = value;
        }
        result.hasSDailySpecialStatus = true;
        return this;
      }
      public Builder ClearSDailySpecialStatus() {
        PrepareBuilder();
        result.hasSDailySpecialStatus = false;
        result.sDailySpecialStatus_ = null;
        return this;
      }
    }
    static CCAssetRelatedData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCVsBoxState : pb::GeneratedMessageLite<CCVsBoxState, CCVsBoxState.Builder> {
    private CCVsBoxState() { }
    private static readonly CCVsBoxState defaultInstance = new CCVsBoxState().MakeReadOnly();
    private static readonly string[] _cCVsBoxStateFieldNames = new string[] { "get_advanced_span", "get_chpn_span", "get_cnt", "get_ftstc_span", "open_cnt" };
    private static readonly uint[] _cCVsBoxStateFieldTags = new uint[] { 32, 24, 8, 16, 40 };
    public static CCVsBoxState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCVsBoxState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCVsBoxState ThisMessage {
      get { return this; }
    }
    
    public const int GetCntFieldNumber = 1;
    private bool hasGetCnt;
    private long getCnt_;
    public bool HasGetCnt {
      get { return hasGetCnt; }
    }
    public long GetCnt {
      get { return getCnt_; }
    }
    
    public const int GetFtstcSpanFieldNumber = 2;
    private bool hasGetFtstcSpan;
    private int getFtstcSpan_;
    public bool HasGetFtstcSpan {
      get { return hasGetFtstcSpan; }
    }
    public int GetFtstcSpan {
      get { return getFtstcSpan_; }
    }
    
    public const int GetChpnSpanFieldNumber = 3;
    private bool hasGetChpnSpan;
    private int getChpnSpan_;
    public bool HasGetChpnSpan {
      get { return hasGetChpnSpan; }
    }
    public int GetChpnSpan {
      get { return getChpnSpan_; }
    }
    
    public const int GetAdvancedSpanFieldNumber = 4;
    private bool hasGetAdvancedSpan;
    private int getAdvancedSpan_;
    public bool HasGetAdvancedSpan {
      get { return hasGetAdvancedSpan; }
    }
    public int GetAdvancedSpan {
      get { return getAdvancedSpan_; }
    }
    
    public const int OpenCntFieldNumber = 5;
    private bool hasOpenCnt;
    private long openCnt_;
    public bool HasOpenCnt {
      get { return hasOpenCnt; }
    }
    public long OpenCnt {
      get { return openCnt_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCVsBoxStateFieldNames;
      if (hasGetCnt) {
        output.WriteInt64(1, field_names[2], GetCnt);
      }
      if (hasGetFtstcSpan) {
        output.WriteInt32(2, field_names[3], GetFtstcSpan);
      }
      if (hasGetChpnSpan) {
        output.WriteInt32(3, field_names[1], GetChpnSpan);
      }
      if (hasGetAdvancedSpan) {
        output.WriteInt32(4, field_names[0], GetAdvancedSpan);
      }
      if (hasOpenCnt) {
        output.WriteInt64(5, field_names[4], OpenCnt);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGetCnt) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, GetCnt);
      }
      if (hasGetFtstcSpan) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, GetFtstcSpan);
      }
      if (hasGetChpnSpan) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, GetChpnSpan);
      }
      if (hasGetAdvancedSpan) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, GetAdvancedSpan);
      }
      if (hasOpenCnt) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, OpenCnt);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasGetCnt) hash ^= getCnt_.GetHashCode();
      if (hasGetFtstcSpan) hash ^= getFtstcSpan_.GetHashCode();
      if (hasGetChpnSpan) hash ^= getChpnSpan_.GetHashCode();
      if (hasGetAdvancedSpan) hash ^= getAdvancedSpan_.GetHashCode();
      if (hasOpenCnt) hash ^= openCnt_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCVsBoxState other = obj as CCVsBoxState;
      if (other == null) return false;
      if (hasGetCnt != other.hasGetCnt || (hasGetCnt && !getCnt_.Equals(other.getCnt_))) return false;
      if (hasGetFtstcSpan != other.hasGetFtstcSpan || (hasGetFtstcSpan && !getFtstcSpan_.Equals(other.getFtstcSpan_))) return false;
      if (hasGetChpnSpan != other.hasGetChpnSpan || (hasGetChpnSpan && !getChpnSpan_.Equals(other.getChpnSpan_))) return false;
      if (hasGetAdvancedSpan != other.hasGetAdvancedSpan || (hasGetAdvancedSpan && !getAdvancedSpan_.Equals(other.getAdvancedSpan_))) return false;
      if (hasOpenCnt != other.hasOpenCnt || (hasOpenCnt && !openCnt_.Equals(other.openCnt_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("get_cnt", hasGetCnt, getCnt_, writer);
      PrintField("get_ftstc_span", hasGetFtstcSpan, getFtstcSpan_, writer);
      PrintField("get_chpn_span", hasGetChpnSpan, getChpnSpan_, writer);
      PrintField("get_advanced_span", hasGetAdvancedSpan, getAdvancedSpan_, writer);
      PrintField("open_cnt", hasOpenCnt, openCnt_, writer);
    }
    #endregion
    
    public static CCVsBoxState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVsBoxState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVsBoxState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVsBoxState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVsBoxState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVsBoxState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCVsBoxState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCVsBoxState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCVsBoxState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVsBoxState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCVsBoxState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCVsBoxState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCVsBoxState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCVsBoxState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCVsBoxState result;
      
      private CCVsBoxState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCVsBoxState original = result;
          result = new CCVsBoxState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCVsBoxState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCVsBoxState DefaultInstanceForType {
        get { return global::com.golf.proto.CCVsBoxState.DefaultInstance; }
      }
      
      public override CCVsBoxState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCVsBoxState) {
          return MergeFrom((CCVsBoxState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCVsBoxState other) {
        if (other == global::com.golf.proto.CCVsBoxState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGetCnt) {
          GetCnt = other.GetCnt;
        }
        if (other.HasGetFtstcSpan) {
          GetFtstcSpan = other.GetFtstcSpan;
        }
        if (other.HasGetChpnSpan) {
          GetChpnSpan = other.GetChpnSpan;
        }
        if (other.HasGetAdvancedSpan) {
          GetAdvancedSpan = other.GetAdvancedSpan;
        }
        if (other.HasOpenCnt) {
          OpenCnt = other.OpenCnt;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCVsBoxStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCVsBoxStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGetCnt = input.ReadInt64(ref result.getCnt_);
              break;
            }
            case 16: {
              result.hasGetFtstcSpan = input.ReadInt32(ref result.getFtstcSpan_);
              break;
            }
            case 24: {
              result.hasGetChpnSpan = input.ReadInt32(ref result.getChpnSpan_);
              break;
            }
            case 32: {
              result.hasGetAdvancedSpan = input.ReadInt32(ref result.getAdvancedSpan_);
              break;
            }
            case 40: {
              result.hasOpenCnt = input.ReadInt64(ref result.openCnt_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasGetCnt {
        get { return result.hasGetCnt; }
      }
      public long GetCnt {
        get { return result.GetCnt; }
        set { SetGetCnt(value); }
      }
      public Builder SetGetCnt(long value) {
        PrepareBuilder();
        result.hasGetCnt = true;
        result.getCnt_ = value;
        return this;
      }
      public Builder ClearGetCnt() {
        PrepareBuilder();
        result.hasGetCnt = false;
        result.getCnt_ = 0L;
        return this;
      }
      
      public bool HasGetFtstcSpan {
        get { return result.hasGetFtstcSpan; }
      }
      public int GetFtstcSpan {
        get { return result.GetFtstcSpan; }
        set { SetGetFtstcSpan(value); }
      }
      public Builder SetGetFtstcSpan(int value) {
        PrepareBuilder();
        result.hasGetFtstcSpan = true;
        result.getFtstcSpan_ = value;
        return this;
      }
      public Builder ClearGetFtstcSpan() {
        PrepareBuilder();
        result.hasGetFtstcSpan = false;
        result.getFtstcSpan_ = 0;
        return this;
      }
      
      public bool HasGetChpnSpan {
        get { return result.hasGetChpnSpan; }
      }
      public int GetChpnSpan {
        get { return result.GetChpnSpan; }
        set { SetGetChpnSpan(value); }
      }
      public Builder SetGetChpnSpan(int value) {
        PrepareBuilder();
        result.hasGetChpnSpan = true;
        result.getChpnSpan_ = value;
        return this;
      }
      public Builder ClearGetChpnSpan() {
        PrepareBuilder();
        result.hasGetChpnSpan = false;
        result.getChpnSpan_ = 0;
        return this;
      }
      
      public bool HasGetAdvancedSpan {
        get { return result.hasGetAdvancedSpan; }
      }
      public int GetAdvancedSpan {
        get { return result.GetAdvancedSpan; }
        set { SetGetAdvancedSpan(value); }
      }
      public Builder SetGetAdvancedSpan(int value) {
        PrepareBuilder();
        result.hasGetAdvancedSpan = true;
        result.getAdvancedSpan_ = value;
        return this;
      }
      public Builder ClearGetAdvancedSpan() {
        PrepareBuilder();
        result.hasGetAdvancedSpan = false;
        result.getAdvancedSpan_ = 0;
        return this;
      }
      
      public bool HasOpenCnt {
        get { return result.hasOpenCnt; }
      }
      public long OpenCnt {
        get { return result.OpenCnt; }
        set { SetOpenCnt(value); }
      }
      public Builder SetOpenCnt(long value) {
        PrepareBuilder();
        result.hasOpenCnt = true;
        result.openCnt_ = value;
        return this;
      }
      public Builder ClearOpenCnt() {
        PrepareBuilder();
        result.hasOpenCnt = false;
        result.openCnt_ = 0L;
        return this;
      }
    }
    static CCVsBoxState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCStoreDailySpecialStatus : pb::GeneratedMessageLite<CCStoreDailySpecialStatus, CCStoreDailySpecialStatus.Builder> {
    private CCStoreDailySpecialStatus() { }
    private static readonly CCStoreDailySpecialStatus defaultInstance = new CCStoreDailySpecialStatus().MakeReadOnly();
    private static readonly string[] _cCStoreDailySpecialStatusFieldNames = new string[] { "refresh_time", "states" };
    private static readonly uint[] _cCStoreDailySpecialStatusFieldTags = new uint[] { 8, 18 };
    public static CCStoreDailySpecialStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCStoreDailySpecialStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCStoreDailySpecialStatus ThisMessage {
      get { return this; }
    }
    
    public const int RefreshTimeFieldNumber = 1;
    private bool hasRefreshTime;
    private long refreshTime_;
    public bool HasRefreshTime {
      get { return hasRefreshTime; }
    }
    public long RefreshTime {
      get { return refreshTime_; }
    }
    
    public const int StatesFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCStoreDailySpcecialState> states_ = new pbc::PopsicleList<global::com.golf.proto.CCStoreDailySpcecialState>();
    public scg::IList<global::com.golf.proto.CCStoreDailySpcecialState> StatesList {
      get { return states_; }
    }
    public int StatesCount {
      get { return states_.Count; }
    }
    public global::com.golf.proto.CCStoreDailySpcecialState GetStates(int index) {
      return states_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCStoreDailySpecialStatusFieldNames;
      if (hasRefreshTime) {
        output.WriteInt64(1, field_names[0], RefreshTime);
      }
      if (states_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], states_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRefreshTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, RefreshTime);
      }
      foreach (global::com.golf.proto.CCStoreDailySpcecialState element in StatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRefreshTime) hash ^= refreshTime_.GetHashCode();
      foreach(global::com.golf.proto.CCStoreDailySpcecialState i in states_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCStoreDailySpecialStatus other = obj as CCStoreDailySpecialStatus;
      if (other == null) return false;
      if (hasRefreshTime != other.hasRefreshTime || (hasRefreshTime && !refreshTime_.Equals(other.refreshTime_))) return false;
      if(states_.Count != other.states_.Count) return false;
      for(int ix=0; ix < states_.Count; ix++)
        if(!states_[ix].Equals(other.states_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("refresh_time", hasRefreshTime, refreshTime_, writer);
      PrintField("states", states_, writer);
    }
    #endregion
    
    public static CCStoreDailySpecialStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStoreDailySpecialStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCStoreDailySpecialStatus MakeReadOnly() {
      states_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCStoreDailySpecialStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCStoreDailySpecialStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCStoreDailySpecialStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCStoreDailySpecialStatus result;
      
      private CCStoreDailySpecialStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCStoreDailySpecialStatus original = result;
          result = new CCStoreDailySpecialStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCStoreDailySpecialStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCStoreDailySpecialStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCStoreDailySpecialStatus.DefaultInstance; }
      }
      
      public override CCStoreDailySpecialStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCStoreDailySpecialStatus) {
          return MergeFrom((CCStoreDailySpecialStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCStoreDailySpecialStatus other) {
        if (other == global::com.golf.proto.CCStoreDailySpecialStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRefreshTime) {
          RefreshTime = other.RefreshTime;
        }
        if (other.states_.Count != 0) {
          result.states_.Add(other.states_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCStoreDailySpecialStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCStoreDailySpecialStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRefreshTime = input.ReadInt64(ref result.refreshTime_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.states_, global::com.golf.proto.CCStoreDailySpcecialState.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRefreshTime {
        get { return result.hasRefreshTime; }
      }
      public long RefreshTime {
        get { return result.RefreshTime; }
        set { SetRefreshTime(value); }
      }
      public Builder SetRefreshTime(long value) {
        PrepareBuilder();
        result.hasRefreshTime = true;
        result.refreshTime_ = value;
        return this;
      }
      public Builder ClearRefreshTime() {
        PrepareBuilder();
        result.hasRefreshTime = false;
        result.refreshTime_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCStoreDailySpcecialState> StatesList {
        get { return PrepareBuilder().states_; }
      }
      public int StatesCount {
        get { return result.StatesCount; }
      }
      public global::com.golf.proto.CCStoreDailySpcecialState GetStates(int index) {
        return result.GetStates(index);
      }
      public Builder SetStates(int index, global::com.golf.proto.CCStoreDailySpcecialState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.states_[index] = value;
        return this;
      }
      public Builder SetStates(int index, global::com.golf.proto.CCStoreDailySpcecialState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.states_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStates(global::com.golf.proto.CCStoreDailySpcecialState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.states_.Add(value);
        return this;
      }
      public Builder AddStates(global::com.golf.proto.CCStoreDailySpcecialState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.states_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStates(scg::IEnumerable<global::com.golf.proto.CCStoreDailySpcecialState> values) {
        PrepareBuilder();
        result.states_.Add(values);
        return this;
      }
      public Builder ClearStates() {
        PrepareBuilder();
        result.states_.Clear();
        return this;
      }
    }
    static CCStoreDailySpecialStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCStoreDailySpcecialState : pb::GeneratedMessageLite<CCStoreDailySpcecialState, CCStoreDailySpcecialState.Builder> {
    private CCStoreDailySpcecialState() { }
    private static readonly CCStoreDailySpcecialState defaultInstance = new CCStoreDailySpcecialState().MakeReadOnly();
    private static readonly string[] _cCStoreDailySpcecialStateFieldNames = new string[] { "buy_cnt", "id", "item", "quality", "total_buy_cnt" };
    private static readonly uint[] _cCStoreDailySpcecialStateFieldTags = new uint[] { 32, 24, 10, 16, 40 };
    public static CCStoreDailySpcecialState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCStoreDailySpcecialState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCStoreDailySpcecialState ThisMessage {
      get { return this; }
    }
    
    public const int ItemFieldNumber = 1;
    private bool hasItem;
    private global::com.golf.proto.CCItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCItem Item {
      get { return item_ ?? global::com.golf.proto.CCItem.DefaultInstance; }
    }
    
    public const int QualityFieldNumber = 2;
    private bool hasQuality;
    private int quality_;
    public bool HasQuality {
      get { return hasQuality; }
    }
    public int Quality {
      get { return quality_; }
    }
    
    public const int IdFieldNumber = 3;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int BuyCntFieldNumber = 4;
    private bool hasBuyCnt;
    private int buyCnt_;
    public bool HasBuyCnt {
      get { return hasBuyCnt; }
    }
    public int BuyCnt {
      get { return buyCnt_; }
    }
    
    public const int TotalBuyCntFieldNumber = 5;
    private bool hasTotalBuyCnt;
    private int totalBuyCnt_;
    public bool HasTotalBuyCnt {
      get { return hasTotalBuyCnt; }
    }
    public int TotalBuyCnt {
      get { return totalBuyCnt_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCStoreDailySpcecialStateFieldNames;
      if (hasItem) {
        output.WriteMessage(1, field_names[2], Item);
      }
      if (hasQuality) {
        output.WriteInt32(2, field_names[3], Quality);
      }
      if (hasId) {
        output.WriteInt32(3, field_names[1], Id);
      }
      if (hasBuyCnt) {
        output.WriteInt32(4, field_names[0], BuyCnt);
      }
      if (hasTotalBuyCnt) {
        output.WriteInt32(5, field_names[4], TotalBuyCnt);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Item);
      }
      if (hasQuality) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Quality);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Id);
      }
      if (hasBuyCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, BuyCnt);
      }
      if (hasTotalBuyCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, TotalBuyCnt);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasQuality) hash ^= quality_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasBuyCnt) hash ^= buyCnt_.GetHashCode();
      if (hasTotalBuyCnt) hash ^= totalBuyCnt_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCStoreDailySpcecialState other = obj as CCStoreDailySpcecialState;
      if (other == null) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasQuality != other.hasQuality || (hasQuality && !quality_.Equals(other.quality_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasBuyCnt != other.hasBuyCnt || (hasBuyCnt && !buyCnt_.Equals(other.buyCnt_))) return false;
      if (hasTotalBuyCnt != other.hasTotalBuyCnt || (hasTotalBuyCnt && !totalBuyCnt_.Equals(other.totalBuyCnt_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("item", hasItem, item_, writer);
      PrintField("quality", hasQuality, quality_, writer);
      PrintField("id", hasId, id_, writer);
      PrintField("buy_cnt", hasBuyCnt, buyCnt_, writer);
      PrintField("total_buy_cnt", hasTotalBuyCnt, totalBuyCnt_, writer);
    }
    #endregion
    
    public static CCStoreDailySpcecialState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStoreDailySpcecialState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCStoreDailySpcecialState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCStoreDailySpcecialState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCStoreDailySpcecialState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCStoreDailySpcecialState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCStoreDailySpcecialState result;
      
      private CCStoreDailySpcecialState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCStoreDailySpcecialState original = result;
          result = new CCStoreDailySpcecialState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCStoreDailySpcecialState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCStoreDailySpcecialState DefaultInstanceForType {
        get { return global::com.golf.proto.CCStoreDailySpcecialState.DefaultInstance; }
      }
      
      public override CCStoreDailySpcecialState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCStoreDailySpcecialState) {
          return MergeFrom((CCStoreDailySpcecialState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCStoreDailySpcecialState other) {
        if (other == global::com.golf.proto.CCStoreDailySpcecialState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasQuality) {
          Quality = other.Quality;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasBuyCnt) {
          BuyCnt = other.BuyCnt;
        }
        if (other.HasTotalBuyCnt) {
          TotalBuyCnt = other.TotalBuyCnt;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCStoreDailySpcecialStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCStoreDailySpcecialStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCItem.Builder subBuilder = global::com.golf.proto.CCItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasQuality = input.ReadInt32(ref result.quality_);
              break;
            }
            case 24: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 32: {
              result.hasBuyCnt = input.ReadInt32(ref result.buyCnt_);
              break;
            }
            case 40: {
              result.hasTotalBuyCnt = input.ReadInt32(ref result.totalBuyCnt_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasQuality {
        get { return result.hasQuality; }
      }
      public int Quality {
        get { return result.Quality; }
        set { SetQuality(value); }
      }
      public Builder SetQuality(int value) {
        PrepareBuilder();
        result.hasQuality = true;
        result.quality_ = value;
        return this;
      }
      public Builder ClearQuality() {
        PrepareBuilder();
        result.hasQuality = false;
        result.quality_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasBuyCnt {
        get { return result.hasBuyCnt; }
      }
      public int BuyCnt {
        get { return result.BuyCnt; }
        set { SetBuyCnt(value); }
      }
      public Builder SetBuyCnt(int value) {
        PrepareBuilder();
        result.hasBuyCnt = true;
        result.buyCnt_ = value;
        return this;
      }
      public Builder ClearBuyCnt() {
        PrepareBuilder();
        result.hasBuyCnt = false;
        result.buyCnt_ = 0;
        return this;
      }
      
      public bool HasTotalBuyCnt {
        get { return result.hasTotalBuyCnt; }
      }
      public int TotalBuyCnt {
        get { return result.TotalBuyCnt; }
        set { SetTotalBuyCnt(value); }
      }
      public Builder SetTotalBuyCnt(int value) {
        PrepareBuilder();
        result.hasTotalBuyCnt = true;
        result.totalBuyCnt_ = value;
        return this;
      }
      public Builder ClearTotalBuyCnt() {
        PrepareBuilder();
        result.hasTotalBuyCnt = false;
        result.totalBuyCnt_ = 0;
        return this;
      }
    }
    static CCStoreDailySpcecialState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCFileItem : pb::GeneratedMessageLite<CCFileItem, CCFileItem.Builder> {
    private CCFileItem() { }
    private static readonly CCFileItem defaultInstance = new CCFileItem().MakeReadOnly();
    private static readonly string[] _cCFileItemFieldNames = new string[] { "ab_md5", "dl_priority", "md5", "name", "size", "type", "url" };
    private static readonly uint[] _cCFileItemFieldTags = new uint[] { 58, 40, 18, 10, 32, 48, 26 };
    public static CCFileItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCFileItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCFileItem ThisMessage {
      get { return this; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int Md5FieldNumber = 2;
    private bool hasMd5;
    private string md5_ = "";
    public bool HasMd5 {
      get { return hasMd5; }
    }
    public string Md5 {
      get { return md5_; }
    }
    
    public const int UrlFieldNumber = 3;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int SizeFieldNumber = 4;
    private bool hasSize;
    private int size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public int Size {
      get { return size_; }
    }
    
    public const int DlPriorityFieldNumber = 5;
    private bool hasDlPriority;
    private int dlPriority_;
    public bool HasDlPriority {
      get { return hasDlPriority; }
    }
    public int DlPriority {
      get { return dlPriority_; }
    }
    
    public const int TypeFieldNumber = 6;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int AbMd5FieldNumber = 7;
    private bool hasAbMd5;
    private string abMd5_ = "";
    public bool HasAbMd5 {
      get { return hasAbMd5; }
    }
    public string AbMd5 {
      get { return abMd5_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasMd5) return false;
        if (!hasUrl) return false;
        if (!hasSize) return false;
        if (!hasDlPriority) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCFileItemFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[3], Name);
      }
      if (hasMd5) {
        output.WriteString(2, field_names[2], Md5);
      }
      if (hasUrl) {
        output.WriteString(3, field_names[6], Url);
      }
      if (hasSize) {
        output.WriteInt32(4, field_names[4], Size);
      }
      if (hasDlPriority) {
        output.WriteInt32(5, field_names[1], DlPriority);
      }
      if (hasType) {
        output.WriteInt32(6, field_names[5], Type);
      }
      if (hasAbMd5) {
        output.WriteString(7, field_names[0], AbMd5);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasMd5) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Md5);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Url);
      }
      if (hasSize) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Size);
      }
      if (hasDlPriority) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, DlPriority);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Type);
      }
      if (hasAbMd5) {
        size += pb::CodedOutputStream.ComputeStringSize(7, AbMd5);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasMd5) hash ^= md5_.GetHashCode();
      if (hasUrl) hash ^= url_.GetHashCode();
      if (hasSize) hash ^= size_.GetHashCode();
      if (hasDlPriority) hash ^= dlPriority_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasAbMd5) hash ^= abMd5_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCFileItem other = obj as CCFileItem;
      if (other == null) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasMd5 != other.hasMd5 || (hasMd5 && !md5_.Equals(other.md5_))) return false;
      if (hasUrl != other.hasUrl || (hasUrl && !url_.Equals(other.url_))) return false;
      if (hasSize != other.hasSize || (hasSize && !size_.Equals(other.size_))) return false;
      if (hasDlPriority != other.hasDlPriority || (hasDlPriority && !dlPriority_.Equals(other.dlPriority_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasAbMd5 != other.hasAbMd5 || (hasAbMd5 && !abMd5_.Equals(other.abMd5_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("name", hasName, name_, writer);
      PrintField("md5", hasMd5, md5_, writer);
      PrintField("url", hasUrl, url_, writer);
      PrintField("size", hasSize, size_, writer);
      PrintField("dl_priority", hasDlPriority, dlPriority_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("ab_md5", hasAbMd5, abMd5_, writer);
    }
    #endregion
    
    public static CCFileItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFileItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFileItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFileItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFileItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFileItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCFileItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCFileItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCFileItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFileItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCFileItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCFileItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCFileItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCFileItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCFileItem result;
      
      private CCFileItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCFileItem original = result;
          result = new CCFileItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCFileItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCFileItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCFileItem.DefaultInstance; }
      }
      
      public override CCFileItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCFileItem) {
          return MergeFrom((CCFileItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCFileItem other) {
        if (other == global::com.golf.proto.CCFileItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasMd5) {
          Md5 = other.Md5;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasSize) {
          Size = other.Size;
        }
        if (other.HasDlPriority) {
          DlPriority = other.DlPriority;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasAbMd5) {
          AbMd5 = other.AbMd5;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCFileItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCFileItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasMd5 = input.ReadString(ref result.md5_);
              break;
            }
            case 26: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 32: {
              result.hasSize = input.ReadInt32(ref result.size_);
              break;
            }
            case 40: {
              result.hasDlPriority = input.ReadInt32(ref result.dlPriority_);
              break;
            }
            case 48: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 58: {
              result.hasAbMd5 = input.ReadString(ref result.abMd5_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasMd5 {
        get { return result.hasMd5; }
      }
      public string Md5 {
        get { return result.Md5; }
        set { SetMd5(value); }
      }
      public Builder SetMd5(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMd5 = true;
        result.md5_ = value;
        return this;
      }
      public Builder ClearMd5() {
        PrepareBuilder();
        result.hasMd5 = false;
        result.md5_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasSize {
        get { return result.hasSize; }
      }
      public int Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(int value) {
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = 0;
        return this;
      }
      
      public bool HasDlPriority {
        get { return result.hasDlPriority; }
      }
      public int DlPriority {
        get { return result.DlPriority; }
        set { SetDlPriority(value); }
      }
      public Builder SetDlPriority(int value) {
        PrepareBuilder();
        result.hasDlPriority = true;
        result.dlPriority_ = value;
        return this;
      }
      public Builder ClearDlPriority() {
        PrepareBuilder();
        result.hasDlPriority = false;
        result.dlPriority_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasAbMd5 {
        get { return result.hasAbMd5; }
      }
      public string AbMd5 {
        get { return result.AbMd5; }
        set { SetAbMd5(value); }
      }
      public Builder SetAbMd5(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAbMd5 = true;
        result.abMd5_ = value;
        return this;
      }
      public Builder ClearAbMd5() {
        PrepareBuilder();
        result.hasAbMd5 = false;
        result.abMd5_ = "";
        return this;
      }
    }
    static CCFileItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCCheckRsAndVersionRequest : pb::GeneratedMessageLite<CCCheckRsAndVersionRequest, CCCheckRsAndVersionRequest.Builder> {
    private CCCheckRsAndVersionRequest() { }
    private static readonly CCCheckRsAndVersionRequest defaultInstance = new CCCheckRsAndVersionRequest().MakeReadOnly();
    private static readonly string[] _cCCheckRsAndVersionRequestFieldNames = new string[] { "client_version", "os_type", "version_sdk_int" };
    private static readonly uint[] _cCCheckRsAndVersionRequestFieldTags = new uint[] { 10, 16, 24 };
    public static CCCheckRsAndVersionRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCCheckRsAndVersionRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCCheckRsAndVersionRequest ThisMessage {
      get { return this; }
    }
    
    public const int ClientVersionFieldNumber = 1;
    private bool hasClientVersion;
    private string clientVersion_ = "";
    public bool HasClientVersion {
      get { return hasClientVersion; }
    }
    public string ClientVersion {
      get { return clientVersion_; }
    }
    
    public const int OsTypeFieldNumber = 2;
    private bool hasOsType;
    private int osType_;
    public bool HasOsType {
      get { return hasOsType; }
    }
    public int OsType {
      get { return osType_; }
    }
    
    public const int VersionSdkIntFieldNumber = 3;
    private bool hasVersionSdkInt;
    private int versionSdkInt_;
    public bool HasVersionSdkInt {
      get { return hasVersionSdkInt; }
    }
    public int VersionSdkInt {
      get { return versionSdkInt_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClientVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCCheckRsAndVersionRequestFieldNames;
      if (hasClientVersion) {
        output.WriteString(1, field_names[0], ClientVersion);
      }
      if (hasOsType) {
        output.WriteInt32(2, field_names[1], OsType);
      }
      if (hasVersionSdkInt) {
        output.WriteInt32(3, field_names[2], VersionSdkInt);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClientVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ClientVersion);
      }
      if (hasOsType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, OsType);
      }
      if (hasVersionSdkInt) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, VersionSdkInt);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasClientVersion) hash ^= clientVersion_.GetHashCode();
      if (hasOsType) hash ^= osType_.GetHashCode();
      if (hasVersionSdkInt) hash ^= versionSdkInt_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCCheckRsAndVersionRequest other = obj as CCCheckRsAndVersionRequest;
      if (other == null) return false;
      if (hasClientVersion != other.hasClientVersion || (hasClientVersion && !clientVersion_.Equals(other.clientVersion_))) return false;
      if (hasOsType != other.hasOsType || (hasOsType && !osType_.Equals(other.osType_))) return false;
      if (hasVersionSdkInt != other.hasVersionSdkInt || (hasVersionSdkInt && !versionSdkInt_.Equals(other.versionSdkInt_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("client_version", hasClientVersion, clientVersion_, writer);
      PrintField("os_type", hasOsType, osType_, writer);
      PrintField("version_sdk_int", hasVersionSdkInt, versionSdkInt_, writer);
    }
    #endregion
    
    public static CCCheckRsAndVersionRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCheckRsAndVersionRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCCheckRsAndVersionRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCCheckRsAndVersionRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCCheckRsAndVersionRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCCheckRsAndVersionRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCCheckRsAndVersionRequest result;
      
      private CCCheckRsAndVersionRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCCheckRsAndVersionRequest original = result;
          result = new CCCheckRsAndVersionRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCCheckRsAndVersionRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCCheckRsAndVersionRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCCheckRsAndVersionRequest.DefaultInstance; }
      }
      
      public override CCCheckRsAndVersionRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCCheckRsAndVersionRequest) {
          return MergeFrom((CCCheckRsAndVersionRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCCheckRsAndVersionRequest other) {
        if (other == global::com.golf.proto.CCCheckRsAndVersionRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClientVersion) {
          ClientVersion = other.ClientVersion;
        }
        if (other.HasOsType) {
          OsType = other.OsType;
        }
        if (other.HasVersionSdkInt) {
          VersionSdkInt = other.VersionSdkInt;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCCheckRsAndVersionRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCCheckRsAndVersionRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasClientVersion = input.ReadString(ref result.clientVersion_);
              break;
            }
            case 16: {
              result.hasOsType = input.ReadInt32(ref result.osType_);
              break;
            }
            case 24: {
              result.hasVersionSdkInt = input.ReadInt32(ref result.versionSdkInt_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasClientVersion {
        get { return result.hasClientVersion; }
      }
      public string ClientVersion {
        get { return result.ClientVersion; }
        set { SetClientVersion(value); }
      }
      public Builder SetClientVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientVersion = true;
        result.clientVersion_ = value;
        return this;
      }
      public Builder ClearClientVersion() {
        PrepareBuilder();
        result.hasClientVersion = false;
        result.clientVersion_ = "";
        return this;
      }
      
      public bool HasOsType {
        get { return result.hasOsType; }
      }
      public int OsType {
        get { return result.OsType; }
        set { SetOsType(value); }
      }
      public Builder SetOsType(int value) {
        PrepareBuilder();
        result.hasOsType = true;
        result.osType_ = value;
        return this;
      }
      public Builder ClearOsType() {
        PrepareBuilder();
        result.hasOsType = false;
        result.osType_ = 0;
        return this;
      }
      
      public bool HasVersionSdkInt {
        get { return result.hasVersionSdkInt; }
      }
      public int VersionSdkInt {
        get { return result.VersionSdkInt; }
        set { SetVersionSdkInt(value); }
      }
      public Builder SetVersionSdkInt(int value) {
        PrepareBuilder();
        result.hasVersionSdkInt = true;
        result.versionSdkInt_ = value;
        return this;
      }
      public Builder ClearVersionSdkInt() {
        PrepareBuilder();
        result.hasVersionSdkInt = false;
        result.versionSdkInt_ = 0;
        return this;
      }
    }
    static CCCheckRsAndVersionRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCCheckRsAndVersionResponse : pb::GeneratedMessageLite<CCCheckRsAndVersionResponse, CCCheckRsAndVersionResponse.Builder> {
    private CCCheckRsAndVersionResponse() { }
    private static readonly CCCheckRsAndVersionResponse defaultInstance = new CCCheckRsAndVersionResponse().MakeReadOnly();
    private static readonly string[] _cCCheckRsAndVersionResponseFieldNames = new string[] { "login_success_max_time_interval", "override_file_items", "result", "rs_info_cfg_item", "upgrade_reward_item", "version_inf" };
    private static readonly uint[] _cCCheckRsAndVersionResponseFieldTags = new uint[] { 48, 34, 8, 18, 42, 26 };
    public static CCCheckRsAndVersionResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCCheckRsAndVersionResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCCheckRsAndVersionResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int RsInfoCfgItemFieldNumber = 2;
    private bool hasRsInfoCfgItem;
    private global::com.golf.proto.CCFileItem rsInfoCfgItem_;
    public bool HasRsInfoCfgItem {
      get { return hasRsInfoCfgItem; }
    }
    public global::com.golf.proto.CCFileItem RsInfoCfgItem {
      get { return rsInfoCfgItem_ ?? global::com.golf.proto.CCFileItem.DefaultInstance; }
    }
    
    public const int VersionInfFieldNumber = 3;
    private bool hasVersionInf;
    private global::com.golf.proto.CCVersionInf versionInf_;
    public bool HasVersionInf {
      get { return hasVersionInf; }
    }
    public global::com.golf.proto.CCVersionInf VersionInf {
      get { return versionInf_ ?? global::com.golf.proto.CCVersionInf.DefaultInstance; }
    }
    
    public const int OverrideFileItemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCFileItem> overrideFileItems_ = new pbc::PopsicleList<global::com.golf.proto.CCFileItem>();
    public scg::IList<global::com.golf.proto.CCFileItem> OverrideFileItemsList {
      get { return overrideFileItems_; }
    }
    public int OverrideFileItemsCount {
      get { return overrideFileItems_.Count; }
    }
    public global::com.golf.proto.CCFileItem GetOverrideFileItems(int index) {
      return overrideFileItems_[index];
    }
    
    public const int UpgradeRewardItemFieldNumber = 5;
    private bool hasUpgradeRewardItem;
    private global::com.golf.proto.CCRewardItem upgradeRewardItem_;
    public bool HasUpgradeRewardItem {
      get { return hasUpgradeRewardItem; }
    }
    public global::com.golf.proto.CCRewardItem UpgradeRewardItem {
      get { return upgradeRewardItem_ ?? global::com.golf.proto.CCRewardItem.DefaultInstance; }
    }
    
    public const int LoginSuccessMaxTimeIntervalFieldNumber = 6;
    private bool hasLoginSuccessMaxTimeInterval;
    private int loginSuccessMaxTimeInterval_;
    public bool HasLoginSuccessMaxTimeInterval {
      get { return hasLoginSuccessMaxTimeInterval; }
    }
    public int LoginSuccessMaxTimeInterval {
      get { return loginSuccessMaxTimeInterval_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasRsInfoCfgItem) {
          if (!RsInfoCfgItem.IsInitialized) return false;
        }
        foreach (global::com.golf.proto.CCFileItem element in OverrideFileItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCCheckRsAndVersionResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[2], Result);
      }
      if (hasRsInfoCfgItem) {
        output.WriteMessage(2, field_names[3], RsInfoCfgItem);
      }
      if (hasVersionInf) {
        output.WriteMessage(3, field_names[5], VersionInf);
      }
      if (overrideFileItems_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], overrideFileItems_);
      }
      if (hasUpgradeRewardItem) {
        output.WriteMessage(5, field_names[4], UpgradeRewardItem);
      }
      if (hasLoginSuccessMaxTimeInterval) {
        output.WriteInt32(6, field_names[0], LoginSuccessMaxTimeInterval);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasRsInfoCfgItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, RsInfoCfgItem);
      }
      if (hasVersionInf) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, VersionInf);
      }
      foreach (global::com.golf.proto.CCFileItem element in OverrideFileItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasUpgradeRewardItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, UpgradeRewardItem);
      }
      if (hasLoginSuccessMaxTimeInterval) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, LoginSuccessMaxTimeInterval);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasRsInfoCfgItem) hash ^= rsInfoCfgItem_.GetHashCode();
      if (hasVersionInf) hash ^= versionInf_.GetHashCode();
      foreach(global::com.golf.proto.CCFileItem i in overrideFileItems_)
        hash ^= i.GetHashCode();
      if (hasUpgradeRewardItem) hash ^= upgradeRewardItem_.GetHashCode();
      if (hasLoginSuccessMaxTimeInterval) hash ^= loginSuccessMaxTimeInterval_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCCheckRsAndVersionResponse other = obj as CCCheckRsAndVersionResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasRsInfoCfgItem != other.hasRsInfoCfgItem || (hasRsInfoCfgItem && !rsInfoCfgItem_.Equals(other.rsInfoCfgItem_))) return false;
      if (hasVersionInf != other.hasVersionInf || (hasVersionInf && !versionInf_.Equals(other.versionInf_))) return false;
      if(overrideFileItems_.Count != other.overrideFileItems_.Count) return false;
      for(int ix=0; ix < overrideFileItems_.Count; ix++)
        if(!overrideFileItems_[ix].Equals(other.overrideFileItems_[ix])) return false;
      if (hasUpgradeRewardItem != other.hasUpgradeRewardItem || (hasUpgradeRewardItem && !upgradeRewardItem_.Equals(other.upgradeRewardItem_))) return false;
      if (hasLoginSuccessMaxTimeInterval != other.hasLoginSuccessMaxTimeInterval || (hasLoginSuccessMaxTimeInterval && !loginSuccessMaxTimeInterval_.Equals(other.loginSuccessMaxTimeInterval_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("rs_info_cfg_item", hasRsInfoCfgItem, rsInfoCfgItem_, writer);
      PrintField("version_inf", hasVersionInf, versionInf_, writer);
      PrintField("override_file_items", overrideFileItems_, writer);
      PrintField("upgrade_reward_item", hasUpgradeRewardItem, upgradeRewardItem_, writer);
      PrintField("login_success_max_time_interval", hasLoginSuccessMaxTimeInterval, loginSuccessMaxTimeInterval_, writer);
    }
    #endregion
    
    public static CCCheckRsAndVersionResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCheckRsAndVersionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCCheckRsAndVersionResponse MakeReadOnly() {
      overrideFileItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCCheckRsAndVersionResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCCheckRsAndVersionResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCCheckRsAndVersionResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCCheckRsAndVersionResponse result;
      
      private CCCheckRsAndVersionResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCCheckRsAndVersionResponse original = result;
          result = new CCCheckRsAndVersionResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCCheckRsAndVersionResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCCheckRsAndVersionResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCCheckRsAndVersionResponse.DefaultInstance; }
      }
      
      public override CCCheckRsAndVersionResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCCheckRsAndVersionResponse) {
          return MergeFrom((CCCheckRsAndVersionResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCCheckRsAndVersionResponse other) {
        if (other == global::com.golf.proto.CCCheckRsAndVersionResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasRsInfoCfgItem) {
          MergeRsInfoCfgItem(other.RsInfoCfgItem);
        }
        if (other.HasVersionInf) {
          MergeVersionInf(other.VersionInf);
        }
        if (other.overrideFileItems_.Count != 0) {
          result.overrideFileItems_.Add(other.overrideFileItems_);
        }
        if (other.HasUpgradeRewardItem) {
          MergeUpgradeRewardItem(other.UpgradeRewardItem);
        }
        if (other.HasLoginSuccessMaxTimeInterval) {
          LoginSuccessMaxTimeInterval = other.LoginSuccessMaxTimeInterval;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCCheckRsAndVersionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCCheckRsAndVersionResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCFileItem.Builder subBuilder = global::com.golf.proto.CCFileItem.CreateBuilder();
              if (result.hasRsInfoCfgItem) {
                subBuilder.MergeFrom(RsInfoCfgItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RsInfoCfgItem = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCVersionInf.Builder subBuilder = global::com.golf.proto.CCVersionInf.CreateBuilder();
              if (result.hasVersionInf) {
                subBuilder.MergeFrom(VersionInf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VersionInf = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.overrideFileItems_, global::com.golf.proto.CCFileItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              global::com.golf.proto.CCRewardItem.Builder subBuilder = global::com.golf.proto.CCRewardItem.CreateBuilder();
              if (result.hasUpgradeRewardItem) {
                subBuilder.MergeFrom(UpgradeRewardItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UpgradeRewardItem = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasLoginSuccessMaxTimeInterval = input.ReadInt32(ref result.loginSuccessMaxTimeInterval_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasRsInfoCfgItem {
       get { return result.hasRsInfoCfgItem; }
      }
      public global::com.golf.proto.CCFileItem RsInfoCfgItem {
        get { return result.RsInfoCfgItem; }
        set { SetRsInfoCfgItem(value); }
      }
      public Builder SetRsInfoCfgItem(global::com.golf.proto.CCFileItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRsInfoCfgItem = true;
        result.rsInfoCfgItem_ = value;
        return this;
      }
      public Builder SetRsInfoCfgItem(global::com.golf.proto.CCFileItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRsInfoCfgItem = true;
        result.rsInfoCfgItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRsInfoCfgItem(global::com.golf.proto.CCFileItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRsInfoCfgItem &&
            result.rsInfoCfgItem_ != global::com.golf.proto.CCFileItem.DefaultInstance) {
            result.rsInfoCfgItem_ = global::com.golf.proto.CCFileItem.CreateBuilder(result.rsInfoCfgItem_).MergeFrom(value).BuildPartial();
        } else {
          result.rsInfoCfgItem_ = value;
        }
        result.hasRsInfoCfgItem = true;
        return this;
      }
      public Builder ClearRsInfoCfgItem() {
        PrepareBuilder();
        result.hasRsInfoCfgItem = false;
        result.rsInfoCfgItem_ = null;
        return this;
      }
      
      public bool HasVersionInf {
       get { return result.hasVersionInf; }
      }
      public global::com.golf.proto.CCVersionInf VersionInf {
        get { return result.VersionInf; }
        set { SetVersionInf(value); }
      }
      public Builder SetVersionInf(global::com.golf.proto.CCVersionInf value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVersionInf = true;
        result.versionInf_ = value;
        return this;
      }
      public Builder SetVersionInf(global::com.golf.proto.CCVersionInf.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVersionInf = true;
        result.versionInf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVersionInf(global::com.golf.proto.CCVersionInf value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVersionInf &&
            result.versionInf_ != global::com.golf.proto.CCVersionInf.DefaultInstance) {
            result.versionInf_ = global::com.golf.proto.CCVersionInf.CreateBuilder(result.versionInf_).MergeFrom(value).BuildPartial();
        } else {
          result.versionInf_ = value;
        }
        result.hasVersionInf = true;
        return this;
      }
      public Builder ClearVersionInf() {
        PrepareBuilder();
        result.hasVersionInf = false;
        result.versionInf_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCFileItem> OverrideFileItemsList {
        get { return PrepareBuilder().overrideFileItems_; }
      }
      public int OverrideFileItemsCount {
        get { return result.OverrideFileItemsCount; }
      }
      public global::com.golf.proto.CCFileItem GetOverrideFileItems(int index) {
        return result.GetOverrideFileItems(index);
      }
      public Builder SetOverrideFileItems(int index, global::com.golf.proto.CCFileItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.overrideFileItems_[index] = value;
        return this;
      }
      public Builder SetOverrideFileItems(int index, global::com.golf.proto.CCFileItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.overrideFileItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOverrideFileItems(global::com.golf.proto.CCFileItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.overrideFileItems_.Add(value);
        return this;
      }
      public Builder AddOverrideFileItems(global::com.golf.proto.CCFileItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.overrideFileItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOverrideFileItems(scg::IEnumerable<global::com.golf.proto.CCFileItem> values) {
        PrepareBuilder();
        result.overrideFileItems_.Add(values);
        return this;
      }
      public Builder ClearOverrideFileItems() {
        PrepareBuilder();
        result.overrideFileItems_.Clear();
        return this;
      }
      
      public bool HasUpgradeRewardItem {
       get { return result.hasUpgradeRewardItem; }
      }
      public global::com.golf.proto.CCRewardItem UpgradeRewardItem {
        get { return result.UpgradeRewardItem; }
        set { SetUpgradeRewardItem(value); }
      }
      public Builder SetUpgradeRewardItem(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpgradeRewardItem = true;
        result.upgradeRewardItem_ = value;
        return this;
      }
      public Builder SetUpgradeRewardItem(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUpgradeRewardItem = true;
        result.upgradeRewardItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUpgradeRewardItem(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUpgradeRewardItem &&
            result.upgradeRewardItem_ != global::com.golf.proto.CCRewardItem.DefaultInstance) {
            result.upgradeRewardItem_ = global::com.golf.proto.CCRewardItem.CreateBuilder(result.upgradeRewardItem_).MergeFrom(value).BuildPartial();
        } else {
          result.upgradeRewardItem_ = value;
        }
        result.hasUpgradeRewardItem = true;
        return this;
      }
      public Builder ClearUpgradeRewardItem() {
        PrepareBuilder();
        result.hasUpgradeRewardItem = false;
        result.upgradeRewardItem_ = null;
        return this;
      }
      
      public bool HasLoginSuccessMaxTimeInterval {
        get { return result.hasLoginSuccessMaxTimeInterval; }
      }
      public int LoginSuccessMaxTimeInterval {
        get { return result.LoginSuccessMaxTimeInterval; }
        set { SetLoginSuccessMaxTimeInterval(value); }
      }
      public Builder SetLoginSuccessMaxTimeInterval(int value) {
        PrepareBuilder();
        result.hasLoginSuccessMaxTimeInterval = true;
        result.loginSuccessMaxTimeInterval_ = value;
        return this;
      }
      public Builder ClearLoginSuccessMaxTimeInterval() {
        PrepareBuilder();
        result.hasLoginSuccessMaxTimeInterval = false;
        result.loginSuccessMaxTimeInterval_ = 0;
        return this;
      }
    }
    static CCCheckRsAndVersionResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCCreateAccountRequest : pb::GeneratedMessageLite<CCCreateAccountRequest, CCCreateAccountRequest.Builder> {
    private CCCreateAccountRequest() { }
    private static readonly CCCreateAccountRequest defaultInstance = new CCCreateAccountRequest().MakeReadOnly();
    private static readonly string[] _cCCreateAccountRequestFieldNames = new string[] { "type" };
    private static readonly uint[] _cCCreateAccountRequestFieldTags = new uint[] { 8 };
    public static CCCreateAccountRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCCreateAccountRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCCreateAccountRequest ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCCreateAccountRequestFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCCreateAccountRequest other = obj as CCCreateAccountRequest;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
    }
    #endregion
    
    public static CCCreateAccountRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCreateAccountRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCreateAccountRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCreateAccountRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCreateAccountRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCreateAccountRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCCreateAccountRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCCreateAccountRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCCreateAccountRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCreateAccountRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCCreateAccountRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCCreateAccountRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCCreateAccountRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCCreateAccountRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCCreateAccountRequest result;
      
      private CCCreateAccountRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCCreateAccountRequest original = result;
          result = new CCCreateAccountRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCCreateAccountRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCCreateAccountRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCCreateAccountRequest.DefaultInstance; }
      }
      
      public override CCCreateAccountRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCCreateAccountRequest) {
          return MergeFrom((CCCreateAccountRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCCreateAccountRequest other) {
        if (other == global::com.golf.proto.CCCreateAccountRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCCreateAccountRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCCreateAccountRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static CCCreateAccountRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCCreateAccountResponse : pb::GeneratedMessageLite<CCCreateAccountResponse, CCCreateAccountResponse.Builder> {
    private CCCreateAccountResponse() { }
    private static readonly CCCreateAccountResponse defaultInstance = new CCCreateAccountResponse().MakeReadOnly();
    private static readonly string[] _cCCreateAccountResponseFieldNames = new string[] { "result", "user_account" };
    private static readonly uint[] _cCCreateAccountResponseFieldTags = new uint[] { 8, 18 };
    public static CCCreateAccountResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCCreateAccountResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCCreateAccountResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int UserAccountFieldNumber = 2;
    private bool hasUserAccount;
    private global::com.golf.proto.CCUserAccount userAccount_;
    public bool HasUserAccount {
      get { return hasUserAccount; }
    }
    public global::com.golf.proto.CCUserAccount UserAccount {
      get { return userAccount_ ?? global::com.golf.proto.CCUserAccount.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasUserAccount) {
          if (!UserAccount.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCCreateAccountResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasUserAccount) {
        output.WriteMessage(2, field_names[1], UserAccount);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasUserAccount) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserAccount);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasUserAccount) hash ^= userAccount_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCCreateAccountResponse other = obj as CCCreateAccountResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasUserAccount != other.hasUserAccount || (hasUserAccount && !userAccount_.Equals(other.userAccount_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("user_account", hasUserAccount, userAccount_, writer);
    }
    #endregion
    
    public static CCCreateAccountResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCreateAccountResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCreateAccountResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCreateAccountResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCreateAccountResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCreateAccountResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCCreateAccountResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCCreateAccountResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCCreateAccountResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCreateAccountResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCCreateAccountResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCCreateAccountResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCCreateAccountResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCCreateAccountResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCCreateAccountResponse result;
      
      private CCCreateAccountResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCCreateAccountResponse original = result;
          result = new CCCreateAccountResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCCreateAccountResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCCreateAccountResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCCreateAccountResponse.DefaultInstance; }
      }
      
      public override CCCreateAccountResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCCreateAccountResponse) {
          return MergeFrom((CCCreateAccountResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCCreateAccountResponse other) {
        if (other == global::com.golf.proto.CCCreateAccountResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasUserAccount) {
          MergeUserAccount(other.UserAccount);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCCreateAccountResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCCreateAccountResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCUserAccount.Builder subBuilder = global::com.golf.proto.CCUserAccount.CreateBuilder();
              if (result.hasUserAccount) {
                subBuilder.MergeFrom(UserAccount);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserAccount = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasUserAccount {
       get { return result.hasUserAccount; }
      }
      public global::com.golf.proto.CCUserAccount UserAccount {
        get { return result.UserAccount; }
        set { SetUserAccount(value); }
      }
      public Builder SetUserAccount(global::com.golf.proto.CCUserAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserAccount = true;
        result.userAccount_ = value;
        return this;
      }
      public Builder SetUserAccount(global::com.golf.proto.CCUserAccount.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserAccount = true;
        result.userAccount_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserAccount(global::com.golf.proto.CCUserAccount value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserAccount &&
            result.userAccount_ != global::com.golf.proto.CCUserAccount.DefaultInstance) {
            result.userAccount_ = global::com.golf.proto.CCUserAccount.CreateBuilder(result.userAccount_).MergeFrom(value).BuildPartial();
        } else {
          result.userAccount_ = value;
        }
        result.hasUserAccount = true;
        return this;
      }
      public Builder ClearUserAccount() {
        PrepareBuilder();
        result.hasUserAccount = false;
        result.userAccount_ = null;
        return this;
      }
    }
    static CCCreateAccountResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLoginExtraData : pb::GeneratedMessageLite<CCLoginExtraData, CCLoginExtraData.Builder> {
    private CCLoginExtraData() { }
    private static readonly CCLoginExtraData defaultInstance = new CCLoginExtraData().MakeReadOnly();
    private static readonly string[] _cCLoginExtraDataFieldNames = new string[] { "ab_test", "ccc", "country", "cpu", "cy_type", "device_id", "did_type", "os_type", "phone_name", "version_sdk_int" };
    private static readonly uint[] _cCLoginExtraDataFieldTags = new uint[] { 56, 50, 26, 34, 82, 66, 74, 16, 42, 8 };
    public static CCLoginExtraData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLoginExtraData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLoginExtraData ThisMessage {
      get { return this; }
    }
    
    public const int VersionSdkIntFieldNumber = 1;
    private bool hasVersionSdkInt;
    private int versionSdkInt_;
    public bool HasVersionSdkInt {
      get { return hasVersionSdkInt; }
    }
    public int VersionSdkInt {
      get { return versionSdkInt_; }
    }
    
    public const int OsTypeFieldNumber = 2;
    private bool hasOsType;
    private int osType_;
    public bool HasOsType {
      get { return hasOsType; }
    }
    public int OsType {
      get { return osType_; }
    }
    
    public const int CountryFieldNumber = 3;
    private bool hasCountry;
    private string country_ = "";
    public bool HasCountry {
      get { return hasCountry; }
    }
    public string Country {
      get { return country_; }
    }
    
    public const int CpuFieldNumber = 4;
    private bool hasCpu;
    private string cpu_ = "";
    public bool HasCpu {
      get { return hasCpu; }
    }
    public string Cpu {
      get { return cpu_; }
    }
    
    public const int PhoneNameFieldNumber = 5;
    private bool hasPhoneName;
    private string phoneName_ = "";
    public bool HasPhoneName {
      get { return hasPhoneName; }
    }
    public string PhoneName {
      get { return phoneName_; }
    }
    
    public const int CccFieldNumber = 6;
    private bool hasCcc;
    private string ccc_ = "";
    public bool HasCcc {
      get { return hasCcc; }
    }
    public string Ccc {
      get { return ccc_; }
    }
    
    public const int AbTestFieldNumber = 7;
    private bool hasAbTest;
    private int abTest_;
    public bool HasAbTest {
      get { return hasAbTest; }
    }
    public int AbTest {
      get { return abTest_; }
    }
    
    public const int DeviceIdFieldNumber = 8;
    private bool hasDeviceId;
    private string deviceId_ = "";
    public bool HasDeviceId {
      get { return hasDeviceId; }
    }
    public string DeviceId {
      get { return deviceId_; }
    }
    
    public const int DidTypeFieldNumber = 9;
    private bool hasDidType;
    private string didType_ = "";
    public bool HasDidType {
      get { return hasDidType; }
    }
    public string DidType {
      get { return didType_; }
    }
    
    public const int CyTypeFieldNumber = 10;
    private bool hasCyType;
    private string cyType_ = "";
    public bool HasCyType {
      get { return hasCyType; }
    }
    public string CyType {
      get { return cyType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLoginExtraDataFieldNames;
      if (hasVersionSdkInt) {
        output.WriteInt32(1, field_names[9], VersionSdkInt);
      }
      if (hasOsType) {
        output.WriteInt32(2, field_names[7], OsType);
      }
      if (hasCountry) {
        output.WriteString(3, field_names[2], Country);
      }
      if (hasCpu) {
        output.WriteString(4, field_names[3], Cpu);
      }
      if (hasPhoneName) {
        output.WriteString(5, field_names[8], PhoneName);
      }
      if (hasCcc) {
        output.WriteString(6, field_names[1], Ccc);
      }
      if (hasAbTest) {
        output.WriteInt32(7, field_names[0], AbTest);
      }
      if (hasDeviceId) {
        output.WriteString(8, field_names[5], DeviceId);
      }
      if (hasDidType) {
        output.WriteString(9, field_names[6], DidType);
      }
      if (hasCyType) {
        output.WriteString(10, field_names[4], CyType);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVersionSdkInt) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, VersionSdkInt);
      }
      if (hasOsType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, OsType);
      }
      if (hasCountry) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Country);
      }
      if (hasCpu) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Cpu);
      }
      if (hasPhoneName) {
        size += pb::CodedOutputStream.ComputeStringSize(5, PhoneName);
      }
      if (hasCcc) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Ccc);
      }
      if (hasAbTest) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, AbTest);
      }
      if (hasDeviceId) {
        size += pb::CodedOutputStream.ComputeStringSize(8, DeviceId);
      }
      if (hasDidType) {
        size += pb::CodedOutputStream.ComputeStringSize(9, DidType);
      }
      if (hasCyType) {
        size += pb::CodedOutputStream.ComputeStringSize(10, CyType);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasVersionSdkInt) hash ^= versionSdkInt_.GetHashCode();
      if (hasOsType) hash ^= osType_.GetHashCode();
      if (hasCountry) hash ^= country_.GetHashCode();
      if (hasCpu) hash ^= cpu_.GetHashCode();
      if (hasPhoneName) hash ^= phoneName_.GetHashCode();
      if (hasCcc) hash ^= ccc_.GetHashCode();
      if (hasAbTest) hash ^= abTest_.GetHashCode();
      if (hasDeviceId) hash ^= deviceId_.GetHashCode();
      if (hasDidType) hash ^= didType_.GetHashCode();
      if (hasCyType) hash ^= cyType_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLoginExtraData other = obj as CCLoginExtraData;
      if (other == null) return false;
      if (hasVersionSdkInt != other.hasVersionSdkInt || (hasVersionSdkInt && !versionSdkInt_.Equals(other.versionSdkInt_))) return false;
      if (hasOsType != other.hasOsType || (hasOsType && !osType_.Equals(other.osType_))) return false;
      if (hasCountry != other.hasCountry || (hasCountry && !country_.Equals(other.country_))) return false;
      if (hasCpu != other.hasCpu || (hasCpu && !cpu_.Equals(other.cpu_))) return false;
      if (hasPhoneName != other.hasPhoneName || (hasPhoneName && !phoneName_.Equals(other.phoneName_))) return false;
      if (hasCcc != other.hasCcc || (hasCcc && !ccc_.Equals(other.ccc_))) return false;
      if (hasAbTest != other.hasAbTest || (hasAbTest && !abTest_.Equals(other.abTest_))) return false;
      if (hasDeviceId != other.hasDeviceId || (hasDeviceId && !deviceId_.Equals(other.deviceId_))) return false;
      if (hasDidType != other.hasDidType || (hasDidType && !didType_.Equals(other.didType_))) return false;
      if (hasCyType != other.hasCyType || (hasCyType && !cyType_.Equals(other.cyType_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("version_sdk_int", hasVersionSdkInt, versionSdkInt_, writer);
      PrintField("os_type", hasOsType, osType_, writer);
      PrintField("country", hasCountry, country_, writer);
      PrintField("cpu", hasCpu, cpu_, writer);
      PrintField("phone_name", hasPhoneName, phoneName_, writer);
      PrintField("ccc", hasCcc, ccc_, writer);
      PrintField("ab_test", hasAbTest, abTest_, writer);
      PrintField("device_id", hasDeviceId, deviceId_, writer);
      PrintField("did_type", hasDidType, didType_, writer);
      PrintField("cy_type", hasCyType, cyType_, writer);
    }
    #endregion
    
    public static CCLoginExtraData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLoginExtraData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLoginExtraData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLoginExtraData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLoginExtraData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLoginExtraData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLoginExtraData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLoginExtraData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLoginExtraData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLoginExtraData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLoginExtraData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLoginExtraData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLoginExtraData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLoginExtraData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLoginExtraData result;
      
      private CCLoginExtraData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLoginExtraData original = result;
          result = new CCLoginExtraData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLoginExtraData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLoginExtraData DefaultInstanceForType {
        get { return global::com.golf.proto.CCLoginExtraData.DefaultInstance; }
      }
      
      public override CCLoginExtraData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLoginExtraData) {
          return MergeFrom((CCLoginExtraData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLoginExtraData other) {
        if (other == global::com.golf.proto.CCLoginExtraData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersionSdkInt) {
          VersionSdkInt = other.VersionSdkInt;
        }
        if (other.HasOsType) {
          OsType = other.OsType;
        }
        if (other.HasCountry) {
          Country = other.Country;
        }
        if (other.HasCpu) {
          Cpu = other.Cpu;
        }
        if (other.HasPhoneName) {
          PhoneName = other.PhoneName;
        }
        if (other.HasCcc) {
          Ccc = other.Ccc;
        }
        if (other.HasAbTest) {
          AbTest = other.AbTest;
        }
        if (other.HasDeviceId) {
          DeviceId = other.DeviceId;
        }
        if (other.HasDidType) {
          DidType = other.DidType;
        }
        if (other.HasCyType) {
          CyType = other.CyType;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLoginExtraDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLoginExtraDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersionSdkInt = input.ReadInt32(ref result.versionSdkInt_);
              break;
            }
            case 16: {
              result.hasOsType = input.ReadInt32(ref result.osType_);
              break;
            }
            case 26: {
              result.hasCountry = input.ReadString(ref result.country_);
              break;
            }
            case 34: {
              result.hasCpu = input.ReadString(ref result.cpu_);
              break;
            }
            case 42: {
              result.hasPhoneName = input.ReadString(ref result.phoneName_);
              break;
            }
            case 50: {
              result.hasCcc = input.ReadString(ref result.ccc_);
              break;
            }
            case 56: {
              result.hasAbTest = input.ReadInt32(ref result.abTest_);
              break;
            }
            case 66: {
              result.hasDeviceId = input.ReadString(ref result.deviceId_);
              break;
            }
            case 74: {
              result.hasDidType = input.ReadString(ref result.didType_);
              break;
            }
            case 82: {
              result.hasCyType = input.ReadString(ref result.cyType_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasVersionSdkInt {
        get { return result.hasVersionSdkInt; }
      }
      public int VersionSdkInt {
        get { return result.VersionSdkInt; }
        set { SetVersionSdkInt(value); }
      }
      public Builder SetVersionSdkInt(int value) {
        PrepareBuilder();
        result.hasVersionSdkInt = true;
        result.versionSdkInt_ = value;
        return this;
      }
      public Builder ClearVersionSdkInt() {
        PrepareBuilder();
        result.hasVersionSdkInt = false;
        result.versionSdkInt_ = 0;
        return this;
      }
      
      public bool HasOsType {
        get { return result.hasOsType; }
      }
      public int OsType {
        get { return result.OsType; }
        set { SetOsType(value); }
      }
      public Builder SetOsType(int value) {
        PrepareBuilder();
        result.hasOsType = true;
        result.osType_ = value;
        return this;
      }
      public Builder ClearOsType() {
        PrepareBuilder();
        result.hasOsType = false;
        result.osType_ = 0;
        return this;
      }
      
      public bool HasCountry {
        get { return result.hasCountry; }
      }
      public string Country {
        get { return result.Country; }
        set { SetCountry(value); }
      }
      public Builder SetCountry(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCountry = true;
        result.country_ = value;
        return this;
      }
      public Builder ClearCountry() {
        PrepareBuilder();
        result.hasCountry = false;
        result.country_ = "";
        return this;
      }
      
      public bool HasCpu {
        get { return result.hasCpu; }
      }
      public string Cpu {
        get { return result.Cpu; }
        set { SetCpu(value); }
      }
      public Builder SetCpu(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCpu = true;
        result.cpu_ = value;
        return this;
      }
      public Builder ClearCpu() {
        PrepareBuilder();
        result.hasCpu = false;
        result.cpu_ = "";
        return this;
      }
      
      public bool HasPhoneName {
        get { return result.hasPhoneName; }
      }
      public string PhoneName {
        get { return result.PhoneName; }
        set { SetPhoneName(value); }
      }
      public Builder SetPhoneName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPhoneName = true;
        result.phoneName_ = value;
        return this;
      }
      public Builder ClearPhoneName() {
        PrepareBuilder();
        result.hasPhoneName = false;
        result.phoneName_ = "";
        return this;
      }
      
      public bool HasCcc {
        get { return result.hasCcc; }
      }
      public string Ccc {
        get { return result.Ccc; }
        set { SetCcc(value); }
      }
      public Builder SetCcc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCcc = true;
        result.ccc_ = value;
        return this;
      }
      public Builder ClearCcc() {
        PrepareBuilder();
        result.hasCcc = false;
        result.ccc_ = "";
        return this;
      }
      
      public bool HasAbTest {
        get { return result.hasAbTest; }
      }
      public int AbTest {
        get { return result.AbTest; }
        set { SetAbTest(value); }
      }
      public Builder SetAbTest(int value) {
        PrepareBuilder();
        result.hasAbTest = true;
        result.abTest_ = value;
        return this;
      }
      public Builder ClearAbTest() {
        PrepareBuilder();
        result.hasAbTest = false;
        result.abTest_ = 0;
        return this;
      }
      
      public bool HasDeviceId {
        get { return result.hasDeviceId; }
      }
      public string DeviceId {
        get { return result.DeviceId; }
        set { SetDeviceId(value); }
      }
      public Builder SetDeviceId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceId = true;
        result.deviceId_ = value;
        return this;
      }
      public Builder ClearDeviceId() {
        PrepareBuilder();
        result.hasDeviceId = false;
        result.deviceId_ = "";
        return this;
      }
      
      public bool HasDidType {
        get { return result.hasDidType; }
      }
      public string DidType {
        get { return result.DidType; }
        set { SetDidType(value); }
      }
      public Builder SetDidType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDidType = true;
        result.didType_ = value;
        return this;
      }
      public Builder ClearDidType() {
        PrepareBuilder();
        result.hasDidType = false;
        result.didType_ = "";
        return this;
      }
      
      public bool HasCyType {
        get { return result.hasCyType; }
      }
      public string CyType {
        get { return result.CyType; }
        set { SetCyType(value); }
      }
      public Builder SetCyType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCyType = true;
        result.cyType_ = value;
        return this;
      }
      public Builder ClearCyType() {
        PrepareBuilder();
        result.hasCyType = false;
        result.cyType_ = "";
        return this;
      }
    }
    static CCLoginExtraData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLoginRequest : pb::GeneratedMessageLite<CCLoginRequest, CCLoginRequest.Builder> {
    private CCLoginRequest() { }
    private static readonly CCLoginRequest defaultInstance = new CCLoginRequest().MakeReadOnly();
    private static readonly string[] _cCLoginRequestFieldNames = new string[] { "client_version", "extra_data", "id", "token" };
    private static readonly uint[] _cCLoginRequestFieldTags = new uint[] { 26, 34, 10, 18 };
    public static CCLoginRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLoginRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLoginRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TokenFieldNumber = 2;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public const int ClientVersionFieldNumber = 3;
    private bool hasClientVersion;
    private string clientVersion_ = "";
    public bool HasClientVersion {
      get { return hasClientVersion; }
    }
    public string ClientVersion {
      get { return clientVersion_; }
    }
    
    public const int ExtraDataFieldNumber = 4;
    private bool hasExtraData;
    private global::com.golf.proto.CCLoginExtraData extraData_;
    public bool HasExtraData {
      get { return hasExtraData; }
    }
    public global::com.golf.proto.CCLoginExtraData ExtraData {
      get { return extraData_ ?? global::com.golf.proto.CCLoginExtraData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasToken) return false;
        if (!hasClientVersion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLoginRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[2], Id);
      }
      if (hasToken) {
        output.WriteString(2, field_names[3], Token);
      }
      if (hasClientVersion) {
        output.WriteString(3, field_names[0], ClientVersion);
      }
      if (hasExtraData) {
        output.WriteMessage(4, field_names[1], ExtraData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Token);
      }
      if (hasClientVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(3, ClientVersion);
      }
      if (hasExtraData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, ExtraData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasToken) hash ^= token_.GetHashCode();
      if (hasClientVersion) hash ^= clientVersion_.GetHashCode();
      if (hasExtraData) hash ^= extraData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLoginRequest other = obj as CCLoginRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasToken != other.hasToken || (hasToken && !token_.Equals(other.token_))) return false;
      if (hasClientVersion != other.hasClientVersion || (hasClientVersion && !clientVersion_.Equals(other.clientVersion_))) return false;
      if (hasExtraData != other.hasExtraData || (hasExtraData && !extraData_.Equals(other.extraData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("token", hasToken, token_, writer);
      PrintField("client_version", hasClientVersion, clientVersion_, writer);
      PrintField("extra_data", hasExtraData, extraData_, writer);
    }
    #endregion
    
    public static CCLoginRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLoginRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLoginRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLoginRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLoginRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLoginRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLoginRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLoginRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLoginRequest result;
      
      private CCLoginRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLoginRequest original = result;
          result = new CCLoginRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLoginRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLoginRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCLoginRequest.DefaultInstance; }
      }
      
      public override CCLoginRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLoginRequest) {
          return MergeFrom((CCLoginRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLoginRequest other) {
        if (other == global::com.golf.proto.CCLoginRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.HasClientVersion) {
          ClientVersion = other.ClientVersion;
        }
        if (other.HasExtraData) {
          MergeExtraData(other.ExtraData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLoginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLoginRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
            case 26: {
              result.hasClientVersion = input.ReadString(ref result.clientVersion_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCLoginExtraData.Builder subBuilder = global::com.golf.proto.CCLoginExtraData.CreateBuilder();
              if (result.hasExtraData) {
                subBuilder.MergeFrom(ExtraData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExtraData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
      
      public bool HasClientVersion {
        get { return result.hasClientVersion; }
      }
      public string ClientVersion {
        get { return result.ClientVersion; }
        set { SetClientVersion(value); }
      }
      public Builder SetClientVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientVersion = true;
        result.clientVersion_ = value;
        return this;
      }
      public Builder ClearClientVersion() {
        PrepareBuilder();
        result.hasClientVersion = false;
        result.clientVersion_ = "";
        return this;
      }
      
      public bool HasExtraData {
       get { return result.hasExtraData; }
      }
      public global::com.golf.proto.CCLoginExtraData ExtraData {
        get { return result.ExtraData; }
        set { SetExtraData(value); }
      }
      public Builder SetExtraData(global::com.golf.proto.CCLoginExtraData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtraData = true;
        result.extraData_ = value;
        return this;
      }
      public Builder SetExtraData(global::com.golf.proto.CCLoginExtraData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExtraData = true;
        result.extraData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExtraData(global::com.golf.proto.CCLoginExtraData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExtraData &&
            result.extraData_ != global::com.golf.proto.CCLoginExtraData.DefaultInstance) {
            result.extraData_ = global::com.golf.proto.CCLoginExtraData.CreateBuilder(result.extraData_).MergeFrom(value).BuildPartial();
        } else {
          result.extraData_ = value;
        }
        result.hasExtraData = true;
        return this;
      }
      public Builder ClearExtraData() {
        PrepareBuilder();
        result.hasExtraData = false;
        result.extraData_ = null;
        return this;
      }
    }
    static CCLoginRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLoginResponse : pb::GeneratedMessageLite<CCLoginResponse, CCLoginResponse.Builder> {
    private CCLoginResponse() { }
    private static readonly CCLoginResponse defaultInstance = new CCLoginResponse().MakeReadOnly();
    private static readonly string[] _cCLoginResponseFieldNames = new string[] { "config", "cur_time", "free_bonus_status", "need_check_is_playing", "r_token", "result", "setting_status", "seven_hole_reward_status", "show_decoration", "user_data", "vs_mode_status" };
    private static readonly uint[] _cCLoginResponseFieldTags = new uint[] { 34, 24, 50, 88, 82, 8, 58, 66, 72, 18, 42 };
    public static CCLoginResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLoginResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLoginResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int UserDataFieldNumber = 2;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int CurTimeFieldNumber = 3;
    private bool hasCurTime;
    private long curTime_;
    public bool HasCurTime {
      get { return hasCurTime; }
    }
    public long CurTime {
      get { return curTime_; }
    }
    
    public const int ConfigFieldNumber = 4;
    private bool hasConfig;
    private global::com.golf.proto.CCConfig config_;
    public bool HasConfig {
      get { return hasConfig; }
    }
    public global::com.golf.proto.CCConfig Config {
      get { return config_ ?? global::com.golf.proto.CCConfig.DefaultInstance; }
    }
    
    public const int VsModeStatusFieldNumber = 5;
    private bool hasVsModeStatus;
    private global::com.golf.proto.CCVsModeStatus vsModeStatus_;
    public bool HasVsModeStatus {
      get { return hasVsModeStatus; }
    }
    public global::com.golf.proto.CCVsModeStatus VsModeStatus {
      get { return vsModeStatus_ ?? global::com.golf.proto.CCVsModeStatus.DefaultInstance; }
    }
    
    public const int FreeBonusStatusFieldNumber = 6;
    private bool hasFreeBonusStatus;
    private global::com.golf.proto.CCFreeBonusStatus freeBonusStatus_;
    public bool HasFreeBonusStatus {
      get { return hasFreeBonusStatus; }
    }
    public global::com.golf.proto.CCFreeBonusStatus FreeBonusStatus {
      get { return freeBonusStatus_ ?? global::com.golf.proto.CCFreeBonusStatus.DefaultInstance; }
    }
    
    public const int SettingStatusFieldNumber = 7;
    private bool hasSettingStatus;
    private global::com.golf.proto.CCSettingStatus settingStatus_;
    public bool HasSettingStatus {
      get { return hasSettingStatus; }
    }
    public global::com.golf.proto.CCSettingStatus SettingStatus {
      get { return settingStatus_ ?? global::com.golf.proto.CCSettingStatus.DefaultInstance; }
    }
    
    public const int SevenHoleRewardStatusFieldNumber = 8;
    private bool hasSevenHoleRewardStatus;
    private global::com.golf.proto.CCSevenHoleRewardStatus sevenHoleRewardStatus_;
    public bool HasSevenHoleRewardStatus {
      get { return hasSevenHoleRewardStatus; }
    }
    public global::com.golf.proto.CCSevenHoleRewardStatus SevenHoleRewardStatus {
      get { return sevenHoleRewardStatus_ ?? global::com.golf.proto.CCSevenHoleRewardStatus.DefaultInstance; }
    }
    
    public const int ShowDecorationFieldNumber = 9;
    private bool hasShowDecoration;
    private bool showDecoration_;
    public bool HasShowDecoration {
      get { return hasShowDecoration; }
    }
    public bool ShowDecoration {
      get { return showDecoration_; }
    }
    
    public const int RTokenFieldNumber = 10;
    private bool hasRToken;
    private string rToken_ = "";
    public bool HasRToken {
      get { return hasRToken; }
    }
    public string RToken {
      get { return rToken_; }
    }
    
    public const int NeedCheckIsPlayingFieldNumber = 11;
    private bool hasNeedCheckIsPlaying;
    private bool needCheckIsPlaying_;
    public bool HasNeedCheckIsPlaying {
      get { return hasNeedCheckIsPlaying; }
    }
    public bool NeedCheckIsPlaying {
      get { return needCheckIsPlaying_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLoginResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[5], Result);
      }
      if (hasUserData) {
        output.WriteMessage(2, field_names[9], UserData);
      }
      if (hasCurTime) {
        output.WriteInt64(3, field_names[1], CurTime);
      }
      if (hasConfig) {
        output.WriteMessage(4, field_names[0], Config);
      }
      if (hasVsModeStatus) {
        output.WriteMessage(5, field_names[10], VsModeStatus);
      }
      if (hasFreeBonusStatus) {
        output.WriteMessage(6, field_names[2], FreeBonusStatus);
      }
      if (hasSettingStatus) {
        output.WriteMessage(7, field_names[6], SettingStatus);
      }
      if (hasSevenHoleRewardStatus) {
        output.WriteMessage(8, field_names[7], SevenHoleRewardStatus);
      }
      if (hasShowDecoration) {
        output.WriteBool(9, field_names[8], ShowDecoration);
      }
      if (hasRToken) {
        output.WriteString(10, field_names[4], RToken);
      }
      if (hasNeedCheckIsPlaying) {
        output.WriteBool(11, field_names[3], NeedCheckIsPlaying);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserData);
      }
      if (hasCurTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, CurTime);
      }
      if (hasConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Config);
      }
      if (hasVsModeStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, VsModeStatus);
      }
      if (hasFreeBonusStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, FreeBonusStatus);
      }
      if (hasSettingStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, SettingStatus);
      }
      if (hasSevenHoleRewardStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, SevenHoleRewardStatus);
      }
      if (hasShowDecoration) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, ShowDecoration);
      }
      if (hasRToken) {
        size += pb::CodedOutputStream.ComputeStringSize(10, RToken);
      }
      if (hasNeedCheckIsPlaying) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, NeedCheckIsPlaying);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      if (hasCurTime) hash ^= curTime_.GetHashCode();
      if (hasConfig) hash ^= config_.GetHashCode();
      if (hasVsModeStatus) hash ^= vsModeStatus_.GetHashCode();
      if (hasFreeBonusStatus) hash ^= freeBonusStatus_.GetHashCode();
      if (hasSettingStatus) hash ^= settingStatus_.GetHashCode();
      if (hasSevenHoleRewardStatus) hash ^= sevenHoleRewardStatus_.GetHashCode();
      if (hasShowDecoration) hash ^= showDecoration_.GetHashCode();
      if (hasRToken) hash ^= rToken_.GetHashCode();
      if (hasNeedCheckIsPlaying) hash ^= needCheckIsPlaying_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLoginResponse other = obj as CCLoginResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if (hasCurTime != other.hasCurTime || (hasCurTime && !curTime_.Equals(other.curTime_))) return false;
      if (hasConfig != other.hasConfig || (hasConfig && !config_.Equals(other.config_))) return false;
      if (hasVsModeStatus != other.hasVsModeStatus || (hasVsModeStatus && !vsModeStatus_.Equals(other.vsModeStatus_))) return false;
      if (hasFreeBonusStatus != other.hasFreeBonusStatus || (hasFreeBonusStatus && !freeBonusStatus_.Equals(other.freeBonusStatus_))) return false;
      if (hasSettingStatus != other.hasSettingStatus || (hasSettingStatus && !settingStatus_.Equals(other.settingStatus_))) return false;
      if (hasSevenHoleRewardStatus != other.hasSevenHoleRewardStatus || (hasSevenHoleRewardStatus && !sevenHoleRewardStatus_.Equals(other.sevenHoleRewardStatus_))) return false;
      if (hasShowDecoration != other.hasShowDecoration || (hasShowDecoration && !showDecoration_.Equals(other.showDecoration_))) return false;
      if (hasRToken != other.hasRToken || (hasRToken && !rToken_.Equals(other.rToken_))) return false;
      if (hasNeedCheckIsPlaying != other.hasNeedCheckIsPlaying || (hasNeedCheckIsPlaying && !needCheckIsPlaying_.Equals(other.needCheckIsPlaying_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("cur_time", hasCurTime, curTime_, writer);
      PrintField("config", hasConfig, config_, writer);
      PrintField("vs_mode_status", hasVsModeStatus, vsModeStatus_, writer);
      PrintField("free_bonus_status", hasFreeBonusStatus, freeBonusStatus_, writer);
      PrintField("setting_status", hasSettingStatus, settingStatus_, writer);
      PrintField("seven_hole_reward_status", hasSevenHoleRewardStatus, sevenHoleRewardStatus_, writer);
      PrintField("show_decoration", hasShowDecoration, showDecoration_, writer);
      PrintField("r_token", hasRToken, rToken_, writer);
      PrintField("need_check_is_playing", hasNeedCheckIsPlaying, needCheckIsPlaying_, writer);
    }
    #endregion
    
    public static CCLoginResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLoginResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLoginResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLoginResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLoginResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLoginResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLoginResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLoginResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLoginResponse result;
      
      private CCLoginResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLoginResponse original = result;
          result = new CCLoginResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLoginResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLoginResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCLoginResponse.DefaultInstance; }
      }
      
      public override CCLoginResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLoginResponse) {
          return MergeFrom((CCLoginResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLoginResponse other) {
        if (other == global::com.golf.proto.CCLoginResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.HasCurTime) {
          CurTime = other.CurTime;
        }
        if (other.HasConfig) {
          MergeConfig(other.Config);
        }
        if (other.HasVsModeStatus) {
          MergeVsModeStatus(other.VsModeStatus);
        }
        if (other.HasFreeBonusStatus) {
          MergeFreeBonusStatus(other.FreeBonusStatus);
        }
        if (other.HasSettingStatus) {
          MergeSettingStatus(other.SettingStatus);
        }
        if (other.HasSevenHoleRewardStatus) {
          MergeSevenHoleRewardStatus(other.SevenHoleRewardStatus);
        }
        if (other.HasShowDecoration) {
          ShowDecoration = other.ShowDecoration;
        }
        if (other.HasRToken) {
          RToken = other.RToken;
        }
        if (other.HasNeedCheckIsPlaying) {
          NeedCheckIsPlaying = other.NeedCheckIsPlaying;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLoginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLoginResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasCurTime = input.ReadInt64(ref result.curTime_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCConfig.Builder subBuilder = global::com.golf.proto.CCConfig.CreateBuilder();
              if (result.hasConfig) {
                subBuilder.MergeFrom(Config);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Config = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::com.golf.proto.CCVsModeStatus.Builder subBuilder = global::com.golf.proto.CCVsModeStatus.CreateBuilder();
              if (result.hasVsModeStatus) {
                subBuilder.MergeFrom(VsModeStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VsModeStatus = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::com.golf.proto.CCFreeBonusStatus.Builder subBuilder = global::com.golf.proto.CCFreeBonusStatus.CreateBuilder();
              if (result.hasFreeBonusStatus) {
                subBuilder.MergeFrom(FreeBonusStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FreeBonusStatus = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::com.golf.proto.CCSettingStatus.Builder subBuilder = global::com.golf.proto.CCSettingStatus.CreateBuilder();
              if (result.hasSettingStatus) {
                subBuilder.MergeFrom(SettingStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SettingStatus = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::com.golf.proto.CCSevenHoleRewardStatus.Builder subBuilder = global::com.golf.proto.CCSevenHoleRewardStatus.CreateBuilder();
              if (result.hasSevenHoleRewardStatus) {
                subBuilder.MergeFrom(SevenHoleRewardStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SevenHoleRewardStatus = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasShowDecoration = input.ReadBool(ref result.showDecoration_);
              break;
            }
            case 82: {
              result.hasRToken = input.ReadString(ref result.rToken_);
              break;
            }
            case 88: {
              result.hasNeedCheckIsPlaying = input.ReadBool(ref result.needCheckIsPlaying_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public bool HasCurTime {
        get { return result.hasCurTime; }
      }
      public long CurTime {
        get { return result.CurTime; }
        set { SetCurTime(value); }
      }
      public Builder SetCurTime(long value) {
        PrepareBuilder();
        result.hasCurTime = true;
        result.curTime_ = value;
        return this;
      }
      public Builder ClearCurTime() {
        PrepareBuilder();
        result.hasCurTime = false;
        result.curTime_ = 0L;
        return this;
      }
      
      public bool HasConfig {
       get { return result.hasConfig; }
      }
      public global::com.golf.proto.CCConfig Config {
        get { return result.Config; }
        set { SetConfig(value); }
      }
      public Builder SetConfig(global::com.golf.proto.CCConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConfig = true;
        result.config_ = value;
        return this;
      }
      public Builder SetConfig(global::com.golf.proto.CCConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasConfig = true;
        result.config_ = builderForValue.Build();
        return this;
      }
      public Builder MergeConfig(global::com.golf.proto.CCConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasConfig &&
            result.config_ != global::com.golf.proto.CCConfig.DefaultInstance) {
            result.config_ = global::com.golf.proto.CCConfig.CreateBuilder(result.config_).MergeFrom(value).BuildPartial();
        } else {
          result.config_ = value;
        }
        result.hasConfig = true;
        return this;
      }
      public Builder ClearConfig() {
        PrepareBuilder();
        result.hasConfig = false;
        result.config_ = null;
        return this;
      }
      
      public bool HasVsModeStatus {
       get { return result.hasVsModeStatus; }
      }
      public global::com.golf.proto.CCVsModeStatus VsModeStatus {
        get { return result.VsModeStatus; }
        set { SetVsModeStatus(value); }
      }
      public Builder SetVsModeStatus(global::com.golf.proto.CCVsModeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVsModeStatus = true;
        result.vsModeStatus_ = value;
        return this;
      }
      public Builder SetVsModeStatus(global::com.golf.proto.CCVsModeStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVsModeStatus = true;
        result.vsModeStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVsModeStatus(global::com.golf.proto.CCVsModeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVsModeStatus &&
            result.vsModeStatus_ != global::com.golf.proto.CCVsModeStatus.DefaultInstance) {
            result.vsModeStatus_ = global::com.golf.proto.CCVsModeStatus.CreateBuilder(result.vsModeStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.vsModeStatus_ = value;
        }
        result.hasVsModeStatus = true;
        return this;
      }
      public Builder ClearVsModeStatus() {
        PrepareBuilder();
        result.hasVsModeStatus = false;
        result.vsModeStatus_ = null;
        return this;
      }
      
      public bool HasFreeBonusStatus {
       get { return result.hasFreeBonusStatus; }
      }
      public global::com.golf.proto.CCFreeBonusStatus FreeBonusStatus {
        get { return result.FreeBonusStatus; }
        set { SetFreeBonusStatus(value); }
      }
      public Builder SetFreeBonusStatus(global::com.golf.proto.CCFreeBonusStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFreeBonusStatus = true;
        result.freeBonusStatus_ = value;
        return this;
      }
      public Builder SetFreeBonusStatus(global::com.golf.proto.CCFreeBonusStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFreeBonusStatus = true;
        result.freeBonusStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFreeBonusStatus(global::com.golf.proto.CCFreeBonusStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFreeBonusStatus &&
            result.freeBonusStatus_ != global::com.golf.proto.CCFreeBonusStatus.DefaultInstance) {
            result.freeBonusStatus_ = global::com.golf.proto.CCFreeBonusStatus.CreateBuilder(result.freeBonusStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.freeBonusStatus_ = value;
        }
        result.hasFreeBonusStatus = true;
        return this;
      }
      public Builder ClearFreeBonusStatus() {
        PrepareBuilder();
        result.hasFreeBonusStatus = false;
        result.freeBonusStatus_ = null;
        return this;
      }
      
      public bool HasSettingStatus {
       get { return result.hasSettingStatus; }
      }
      public global::com.golf.proto.CCSettingStatus SettingStatus {
        get { return result.SettingStatus; }
        set { SetSettingStatus(value); }
      }
      public Builder SetSettingStatus(global::com.golf.proto.CCSettingStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSettingStatus = true;
        result.settingStatus_ = value;
        return this;
      }
      public Builder SetSettingStatus(global::com.golf.proto.CCSettingStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSettingStatus = true;
        result.settingStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSettingStatus(global::com.golf.proto.CCSettingStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSettingStatus &&
            result.settingStatus_ != global::com.golf.proto.CCSettingStatus.DefaultInstance) {
            result.settingStatus_ = global::com.golf.proto.CCSettingStatus.CreateBuilder(result.settingStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.settingStatus_ = value;
        }
        result.hasSettingStatus = true;
        return this;
      }
      public Builder ClearSettingStatus() {
        PrepareBuilder();
        result.hasSettingStatus = false;
        result.settingStatus_ = null;
        return this;
      }
      
      public bool HasSevenHoleRewardStatus {
       get { return result.hasSevenHoleRewardStatus; }
      }
      public global::com.golf.proto.CCSevenHoleRewardStatus SevenHoleRewardStatus {
        get { return result.SevenHoleRewardStatus; }
        set { SetSevenHoleRewardStatus(value); }
      }
      public Builder SetSevenHoleRewardStatus(global::com.golf.proto.CCSevenHoleRewardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSevenHoleRewardStatus = true;
        result.sevenHoleRewardStatus_ = value;
        return this;
      }
      public Builder SetSevenHoleRewardStatus(global::com.golf.proto.CCSevenHoleRewardStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSevenHoleRewardStatus = true;
        result.sevenHoleRewardStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSevenHoleRewardStatus(global::com.golf.proto.CCSevenHoleRewardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSevenHoleRewardStatus &&
            result.sevenHoleRewardStatus_ != global::com.golf.proto.CCSevenHoleRewardStatus.DefaultInstance) {
            result.sevenHoleRewardStatus_ = global::com.golf.proto.CCSevenHoleRewardStatus.CreateBuilder(result.sevenHoleRewardStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.sevenHoleRewardStatus_ = value;
        }
        result.hasSevenHoleRewardStatus = true;
        return this;
      }
      public Builder ClearSevenHoleRewardStatus() {
        PrepareBuilder();
        result.hasSevenHoleRewardStatus = false;
        result.sevenHoleRewardStatus_ = null;
        return this;
      }
      
      public bool HasShowDecoration {
        get { return result.hasShowDecoration; }
      }
      public bool ShowDecoration {
        get { return result.ShowDecoration; }
        set { SetShowDecoration(value); }
      }
      public Builder SetShowDecoration(bool value) {
        PrepareBuilder();
        result.hasShowDecoration = true;
        result.showDecoration_ = value;
        return this;
      }
      public Builder ClearShowDecoration() {
        PrepareBuilder();
        result.hasShowDecoration = false;
        result.showDecoration_ = false;
        return this;
      }
      
      public bool HasRToken {
        get { return result.hasRToken; }
      }
      public string RToken {
        get { return result.RToken; }
        set { SetRToken(value); }
      }
      public Builder SetRToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRToken = true;
        result.rToken_ = value;
        return this;
      }
      public Builder ClearRToken() {
        PrepareBuilder();
        result.hasRToken = false;
        result.rToken_ = "";
        return this;
      }
      
      public bool HasNeedCheckIsPlaying {
        get { return result.hasNeedCheckIsPlaying; }
      }
      public bool NeedCheckIsPlaying {
        get { return result.NeedCheckIsPlaying; }
        set { SetNeedCheckIsPlaying(value); }
      }
      public Builder SetNeedCheckIsPlaying(bool value) {
        PrepareBuilder();
        result.hasNeedCheckIsPlaying = true;
        result.needCheckIsPlaying_ = value;
        return this;
      }
      public Builder ClearNeedCheckIsPlaying() {
        PrepareBuilder();
        result.hasNeedCheckIsPlaying = false;
        result.needCheckIsPlaying_ = false;
        return this;
      }
    }
    static CCLoginResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCVersionInf : pb::GeneratedMessageLite<CCVersionInf, CCVersionInf.Builder> {
    private CCVersionInf() { }
    private static readonly CCVersionInf defaultInstance = new CCVersionInf().MakeReadOnly();
    private static readonly string[] _cCVersionInfFieldNames = new string[] { "client_upgrade_state", "rs_version", "server_version", "show_upgrade_type" };
    private static readonly uint[] _cCVersionInfFieldTags = new uint[] { 16, 34, 10, 24 };
    public static CCVersionInf DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCVersionInf DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCVersionInf ThisMessage {
      get { return this; }
    }
    
    public const int ServerVersionFieldNumber = 1;
    private bool hasServerVersion;
    private string serverVersion_ = "";
    public bool HasServerVersion {
      get { return hasServerVersion; }
    }
    public string ServerVersion {
      get { return serverVersion_; }
    }
    
    public const int ClientUpgradeStateFieldNumber = 2;
    private bool hasClientUpgradeState;
    private int clientUpgradeState_;
    public bool HasClientUpgradeState {
      get { return hasClientUpgradeState; }
    }
    public int ClientUpgradeState {
      get { return clientUpgradeState_; }
    }
    
    public const int ShowUpgradeTypeFieldNumber = 3;
    private bool hasShowUpgradeType;
    private int showUpgradeType_;
    public bool HasShowUpgradeType {
      get { return hasShowUpgradeType; }
    }
    public int ShowUpgradeType {
      get { return showUpgradeType_; }
    }
    
    public const int RsVersionFieldNumber = 4;
    private bool hasRsVersion;
    private string rsVersion_ = "";
    public bool HasRsVersion {
      get { return hasRsVersion; }
    }
    public string RsVersion {
      get { return rsVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCVersionInfFieldNames;
      if (hasServerVersion) {
        output.WriteString(1, field_names[2], ServerVersion);
      }
      if (hasClientUpgradeState) {
        output.WriteInt32(2, field_names[0], ClientUpgradeState);
      }
      if (hasShowUpgradeType) {
        output.WriteInt32(3, field_names[3], ShowUpgradeType);
      }
      if (hasRsVersion) {
        output.WriteString(4, field_names[1], RsVersion);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ServerVersion);
      }
      if (hasClientUpgradeState) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ClientUpgradeState);
      }
      if (hasShowUpgradeType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, ShowUpgradeType);
      }
      if (hasRsVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(4, RsVersion);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasServerVersion) hash ^= serverVersion_.GetHashCode();
      if (hasClientUpgradeState) hash ^= clientUpgradeState_.GetHashCode();
      if (hasShowUpgradeType) hash ^= showUpgradeType_.GetHashCode();
      if (hasRsVersion) hash ^= rsVersion_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCVersionInf other = obj as CCVersionInf;
      if (other == null) return false;
      if (hasServerVersion != other.hasServerVersion || (hasServerVersion && !serverVersion_.Equals(other.serverVersion_))) return false;
      if (hasClientUpgradeState != other.hasClientUpgradeState || (hasClientUpgradeState && !clientUpgradeState_.Equals(other.clientUpgradeState_))) return false;
      if (hasShowUpgradeType != other.hasShowUpgradeType || (hasShowUpgradeType && !showUpgradeType_.Equals(other.showUpgradeType_))) return false;
      if (hasRsVersion != other.hasRsVersion || (hasRsVersion && !rsVersion_.Equals(other.rsVersion_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("server_version", hasServerVersion, serverVersion_, writer);
      PrintField("client_upgrade_state", hasClientUpgradeState, clientUpgradeState_, writer);
      PrintField("show_upgrade_type", hasShowUpgradeType, showUpgradeType_, writer);
      PrintField("rs_version", hasRsVersion, rsVersion_, writer);
    }
    #endregion
    
    public static CCVersionInf ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVersionInf ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVersionInf ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVersionInf ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVersionInf ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVersionInf ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCVersionInf ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCVersionInf ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCVersionInf ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVersionInf ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCVersionInf MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCVersionInf prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCVersionInf, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCVersionInf cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCVersionInf result;
      
      private CCVersionInf PrepareBuilder() {
        if (resultIsReadOnly) {
          CCVersionInf original = result;
          result = new CCVersionInf();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCVersionInf MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCVersionInf DefaultInstanceForType {
        get { return global::com.golf.proto.CCVersionInf.DefaultInstance; }
      }
      
      public override CCVersionInf BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCVersionInf) {
          return MergeFrom((CCVersionInf) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCVersionInf other) {
        if (other == global::com.golf.proto.CCVersionInf.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerVersion) {
          ServerVersion = other.ServerVersion;
        }
        if (other.HasClientUpgradeState) {
          ClientUpgradeState = other.ClientUpgradeState;
        }
        if (other.HasShowUpgradeType) {
          ShowUpgradeType = other.ShowUpgradeType;
        }
        if (other.HasRsVersion) {
          RsVersion = other.RsVersion;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCVersionInfFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCVersionInfFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasServerVersion = input.ReadString(ref result.serverVersion_);
              break;
            }
            case 16: {
              result.hasClientUpgradeState = input.ReadInt32(ref result.clientUpgradeState_);
              break;
            }
            case 24: {
              result.hasShowUpgradeType = input.ReadInt32(ref result.showUpgradeType_);
              break;
            }
            case 34: {
              result.hasRsVersion = input.ReadString(ref result.rsVersion_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasServerVersion {
        get { return result.hasServerVersion; }
      }
      public string ServerVersion {
        get { return result.ServerVersion; }
        set { SetServerVersion(value); }
      }
      public Builder SetServerVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerVersion = true;
        result.serverVersion_ = value;
        return this;
      }
      public Builder ClearServerVersion() {
        PrepareBuilder();
        result.hasServerVersion = false;
        result.serverVersion_ = "";
        return this;
      }
      
      public bool HasClientUpgradeState {
        get { return result.hasClientUpgradeState; }
      }
      public int ClientUpgradeState {
        get { return result.ClientUpgradeState; }
        set { SetClientUpgradeState(value); }
      }
      public Builder SetClientUpgradeState(int value) {
        PrepareBuilder();
        result.hasClientUpgradeState = true;
        result.clientUpgradeState_ = value;
        return this;
      }
      public Builder ClearClientUpgradeState() {
        PrepareBuilder();
        result.hasClientUpgradeState = false;
        result.clientUpgradeState_ = 0;
        return this;
      }
      
      public bool HasShowUpgradeType {
        get { return result.hasShowUpgradeType; }
      }
      public int ShowUpgradeType {
        get { return result.ShowUpgradeType; }
        set { SetShowUpgradeType(value); }
      }
      public Builder SetShowUpgradeType(int value) {
        PrepareBuilder();
        result.hasShowUpgradeType = true;
        result.showUpgradeType_ = value;
        return this;
      }
      public Builder ClearShowUpgradeType() {
        PrepareBuilder();
        result.hasShowUpgradeType = false;
        result.showUpgradeType_ = 0;
        return this;
      }
      
      public bool HasRsVersion {
        get { return result.hasRsVersion; }
      }
      public string RsVersion {
        get { return result.RsVersion; }
        set { SetRsVersion(value); }
      }
      public Builder SetRsVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRsVersion = true;
        result.rsVersion_ = value;
        return this;
      }
      public Builder ClearRsVersion() {
        PrepareBuilder();
        result.hasRsVersion = false;
        result.rsVersion_ = "";
        return this;
      }
    }
    static CCVersionInf() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSimpleUserData : pb::GeneratedMessageLite<CCSimpleUserData, CCSimpleUserData.Builder> {
    private CCSimpleUserData() { }
    private static readonly CCSimpleUserData defaultInstance = new CCSimpleUserData().MakeReadOnly();
    private static readonly string[] _cCSimpleUserDataFieldNames = new string[] { "acsry_id", "ava_frame_id", "avatar_id", "ball_id", "best_history_rank_status", "cloth_id", "club_id", "club_ids", "club_lvs", "club_suit_data", "coin", "cup", "custom_ava_id", "exp", "gem", "hat_id", "id", "is_robot", "league_lv", "lv", "mmr", "name", "new_suit_data", "region_id", "social_id", "suit_data" };
    private static readonly uint[] _cCSimpleUserDataFieldTags = new uint[] { 128, 136, 32, 112, 186, 48, 40, 144, 160, 194, 64, 80, 208, 88, 72, 120, 10, 56, 104, 24, 152, 18, 202, 96, 170, 178 };
    public static CCSimpleUserData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSimpleUserData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSimpleUserData ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int LvFieldNumber = 3;
    private bool hasLv;
    private int lv_;
    public bool HasLv {
      get { return hasLv; }
    }
    public int Lv {
      get { return lv_; }
    }
    
    public const int AvatarIdFieldNumber = 4;
    private bool hasAvatarId;
    private int avatarId_;
    public bool HasAvatarId {
      get { return hasAvatarId; }
    }
    public int AvatarId {
      get { return avatarId_; }
    }
    
    public const int ClubIdFieldNumber = 5;
    private bool hasClubId;
    private int clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public int ClubId {
      get { return clubId_; }
    }
    
    public const int ClothIdFieldNumber = 6;
    private bool hasClothId;
    private int clothId_;
    public bool HasClothId {
      get { return hasClothId; }
    }
    public int ClothId {
      get { return clothId_; }
    }
    
    public const int IsRobotFieldNumber = 7;
    private bool hasIsRobot;
    private bool isRobot_;
    public bool HasIsRobot {
      get { return hasIsRobot; }
    }
    public bool IsRobot {
      get { return isRobot_; }
    }
    
    public const int CoinFieldNumber = 8;
    private bool hasCoin;
    private long coin_;
    public bool HasCoin {
      get { return hasCoin; }
    }
    public long Coin {
      get { return coin_; }
    }
    
    public const int GemFieldNumber = 9;
    private bool hasGem;
    private long gem_;
    public bool HasGem {
      get { return hasGem; }
    }
    public long Gem {
      get { return gem_; }
    }
    
    public const int CupFieldNumber = 10;
    private bool hasCup;
    private long cup_;
    public bool HasCup {
      get { return hasCup; }
    }
    public long Cup {
      get { return cup_; }
    }
    
    public const int ExpFieldNumber = 11;
    private bool hasExp;
    private long exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public long Exp {
      get { return exp_; }
    }
    
    public const int RegionIdFieldNumber = 12;
    private bool hasRegionId;
    private int regionId_;
    public bool HasRegionId {
      get { return hasRegionId; }
    }
    public int RegionId {
      get { return regionId_; }
    }
    
    public const int LeagueLvFieldNumber = 13;
    private bool hasLeagueLv;
    private int leagueLv_;
    public bool HasLeagueLv {
      get { return hasLeagueLv; }
    }
    public int LeagueLv {
      get { return leagueLv_; }
    }
    
    public const int BallIdFieldNumber = 14;
    private bool hasBallId;
    private int ballId_;
    public bool HasBallId {
      get { return hasBallId; }
    }
    public int BallId {
      get { return ballId_; }
    }
    
    public const int HatIdFieldNumber = 15;
    private bool hasHatId;
    private int hatId_;
    public bool HasHatId {
      get { return hasHatId; }
    }
    public int HatId {
      get { return hatId_; }
    }
    
    public const int AcsryIdFieldNumber = 16;
    private bool hasAcsryId;
    private int acsryId_;
    public bool HasAcsryId {
      get { return hasAcsryId; }
    }
    public int AcsryId {
      get { return acsryId_; }
    }
    
    public const int AvaFrameIdFieldNumber = 17;
    private bool hasAvaFrameId;
    private int avaFrameId_;
    public bool HasAvaFrameId {
      get { return hasAvaFrameId; }
    }
    public int AvaFrameId {
      get { return avaFrameId_; }
    }
    
    public const int ClubIdsFieldNumber = 18;
    private pbc::PopsicleList<int> clubIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ClubIdsList {
      get { return pbc::Lists.AsReadOnly(clubIds_); }
    }
    public int ClubIdsCount {
      get { return clubIds_.Count; }
    }
    public int GetClubIds(int index) {
      return clubIds_[index];
    }
    
    public const int MmrFieldNumber = 19;
    private bool hasMmr;
    private int mmr_;
    public bool HasMmr {
      get { return hasMmr; }
    }
    public int Mmr {
      get { return mmr_; }
    }
    
    public const int ClubLvsFieldNumber = 20;
    private pbc::PopsicleList<int> clubLvs_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ClubLvsList {
      get { return pbc::Lists.AsReadOnly(clubLvs_); }
    }
    public int ClubLvsCount {
      get { return clubLvs_.Count; }
    }
    public int GetClubLvs(int index) {
      return clubLvs_[index];
    }
    
    public const int SocialIdFieldNumber = 21;
    private bool hasSocialId;
    private string socialId_ = "";
    public bool HasSocialId {
      get { return hasSocialId; }
    }
    public string SocialId {
      get { return socialId_; }
    }
    
    public const int SuitDataFieldNumber = 22;
    private bool hasSuitData;
    private global::com.golf.proto.CCSuitData suitData_;
    public bool HasSuitData {
      get { return hasSuitData; }
    }
    public global::com.golf.proto.CCSuitData SuitData {
      get { return suitData_ ?? global::com.golf.proto.CCSuitData.DefaultInstance; }
    }
    
    public const int BestHistoryRankStatusFieldNumber = 23;
    private bool hasBestHistoryRankStatus;
    private global::com.golf.proto.CCBestHistoryRankStatus bestHistoryRankStatus_;
    public bool HasBestHistoryRankStatus {
      get { return hasBestHistoryRankStatus; }
    }
    public global::com.golf.proto.CCBestHistoryRankStatus BestHistoryRankStatus {
      get { return bestHistoryRankStatus_ ?? global::com.golf.proto.CCBestHistoryRankStatus.DefaultInstance; }
    }
    
    public const int ClubSuitDataFieldNumber = 24;
    private bool hasClubSuitData;
    private global::com.golf.proto.CCClubSuitData clubSuitData_;
    public bool HasClubSuitData {
      get { return hasClubSuitData; }
    }
    public global::com.golf.proto.CCClubSuitData ClubSuitData {
      get { return clubSuitData_ ?? global::com.golf.proto.CCClubSuitData.DefaultInstance; }
    }
    
    public const int NewSuitDataFieldNumber = 25;
    private bool hasNewSuitData;
    private global::com.golf.proto.CCSuitData newSuitData_;
    public bool HasNewSuitData {
      get { return hasNewSuitData; }
    }
    public global::com.golf.proto.CCSuitData NewSuitData {
      get { return newSuitData_ ?? global::com.golf.proto.CCSuitData.DefaultInstance; }
    }
    
    public const int CustomAvaIdFieldNumber = 26;
    private bool hasCustomAvaId;
    private int customAvaId_;
    public bool HasCustomAvaId {
      get { return hasCustomAvaId; }
    }
    public int CustomAvaId {
      get { return customAvaId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSimpleUserDataFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[16], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[21], Name);
      }
      if (hasLv) {
        output.WriteInt32(3, field_names[19], Lv);
      }
      if (hasAvatarId) {
        output.WriteInt32(4, field_names[2], AvatarId);
      }
      if (hasClubId) {
        output.WriteInt32(5, field_names[6], ClubId);
      }
      if (hasClothId) {
        output.WriteInt32(6, field_names[5], ClothId);
      }
      if (hasIsRobot) {
        output.WriteBool(7, field_names[17], IsRobot);
      }
      if (hasCoin) {
        output.WriteInt64(8, field_names[10], Coin);
      }
      if (hasGem) {
        output.WriteInt64(9, field_names[14], Gem);
      }
      if (hasCup) {
        output.WriteInt64(10, field_names[11], Cup);
      }
      if (hasExp) {
        output.WriteInt64(11, field_names[13], Exp);
      }
      if (hasRegionId) {
        output.WriteInt32(12, field_names[23], RegionId);
      }
      if (hasLeagueLv) {
        output.WriteInt32(13, field_names[18], LeagueLv);
      }
      if (hasBallId) {
        output.WriteInt32(14, field_names[3], BallId);
      }
      if (hasHatId) {
        output.WriteInt32(15, field_names[15], HatId);
      }
      if (hasAcsryId) {
        output.WriteInt32(16, field_names[0], AcsryId);
      }
      if (hasAvaFrameId) {
        output.WriteInt32(17, field_names[1], AvaFrameId);
      }
      if (clubIds_.Count > 0) {
        output.WriteInt32Array(18, field_names[7], clubIds_);
      }
      if (hasMmr) {
        output.WriteInt32(19, field_names[20], Mmr);
      }
      if (clubLvs_.Count > 0) {
        output.WriteInt32Array(20, field_names[8], clubLvs_);
      }
      if (hasSocialId) {
        output.WriteString(21, field_names[24], SocialId);
      }
      if (hasSuitData) {
        output.WriteMessage(22, field_names[25], SuitData);
      }
      if (hasBestHistoryRankStatus) {
        output.WriteMessage(23, field_names[4], BestHistoryRankStatus);
      }
      if (hasClubSuitData) {
        output.WriteMessage(24, field_names[9], ClubSuitData);
      }
      if (hasNewSuitData) {
        output.WriteMessage(25, field_names[22], NewSuitData);
      }
      if (hasCustomAvaId) {
        output.WriteInt32(26, field_names[12], CustomAvaId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Lv);
      }
      if (hasAvatarId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, AvatarId);
      }
      if (hasClubId) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ClubId);
      }
      if (hasClothId) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ClothId);
      }
      if (hasIsRobot) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, IsRobot);
      }
      if (hasCoin) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, Coin);
      }
      if (hasGem) {
        size += pb::CodedOutputStream.ComputeInt64Size(9, Gem);
      }
      if (hasCup) {
        size += pb::CodedOutputStream.ComputeInt64Size(10, Cup);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeInt64Size(11, Exp);
      }
      if (hasRegionId) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, RegionId);
      }
      if (hasLeagueLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, LeagueLv);
      }
      if (hasBallId) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, BallId);
      }
      if (hasHatId) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, HatId);
      }
      if (hasAcsryId) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, AcsryId);
      }
      if (hasAvaFrameId) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, AvaFrameId);
      }
      {
        int dataSize = 0;
        foreach (int element in ClubIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * clubIds_.Count;
      }
      if (hasMmr) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, Mmr);
      }
      {
        int dataSize = 0;
        foreach (int element in ClubLvsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * clubLvs_.Count;
      }
      if (hasSocialId) {
        size += pb::CodedOutputStream.ComputeStringSize(21, SocialId);
      }
      if (hasSuitData) {
        size += pb::CodedOutputStream.ComputeMessageSize(22, SuitData);
      }
      if (hasBestHistoryRankStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(23, BestHistoryRankStatus);
      }
      if (hasClubSuitData) {
        size += pb::CodedOutputStream.ComputeMessageSize(24, ClubSuitData);
      }
      if (hasNewSuitData) {
        size += pb::CodedOutputStream.ComputeMessageSize(25, NewSuitData);
      }
      if (hasCustomAvaId) {
        size += pb::CodedOutputStream.ComputeInt32Size(26, CustomAvaId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasLv) hash ^= lv_.GetHashCode();
      if (hasAvatarId) hash ^= avatarId_.GetHashCode();
      if (hasClubId) hash ^= clubId_.GetHashCode();
      if (hasClothId) hash ^= clothId_.GetHashCode();
      if (hasIsRobot) hash ^= isRobot_.GetHashCode();
      if (hasCoin) hash ^= coin_.GetHashCode();
      if (hasGem) hash ^= gem_.GetHashCode();
      if (hasCup) hash ^= cup_.GetHashCode();
      if (hasExp) hash ^= exp_.GetHashCode();
      if (hasRegionId) hash ^= regionId_.GetHashCode();
      if (hasLeagueLv) hash ^= leagueLv_.GetHashCode();
      if (hasBallId) hash ^= ballId_.GetHashCode();
      if (hasHatId) hash ^= hatId_.GetHashCode();
      if (hasAcsryId) hash ^= acsryId_.GetHashCode();
      if (hasAvaFrameId) hash ^= avaFrameId_.GetHashCode();
      foreach(int i in clubIds_)
        hash ^= i.GetHashCode();
      if (hasMmr) hash ^= mmr_.GetHashCode();
      foreach(int i in clubLvs_)
        hash ^= i.GetHashCode();
      if (hasSocialId) hash ^= socialId_.GetHashCode();
      if (hasSuitData) hash ^= suitData_.GetHashCode();
      if (hasBestHistoryRankStatus) hash ^= bestHistoryRankStatus_.GetHashCode();
      if (hasClubSuitData) hash ^= clubSuitData_.GetHashCode();
      if (hasNewSuitData) hash ^= newSuitData_.GetHashCode();
      if (hasCustomAvaId) hash ^= customAvaId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSimpleUserData other = obj as CCSimpleUserData;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasLv != other.hasLv || (hasLv && !lv_.Equals(other.lv_))) return false;
      if (hasAvatarId != other.hasAvatarId || (hasAvatarId && !avatarId_.Equals(other.avatarId_))) return false;
      if (hasClubId != other.hasClubId || (hasClubId && !clubId_.Equals(other.clubId_))) return false;
      if (hasClothId != other.hasClothId || (hasClothId && !clothId_.Equals(other.clothId_))) return false;
      if (hasIsRobot != other.hasIsRobot || (hasIsRobot && !isRobot_.Equals(other.isRobot_))) return false;
      if (hasCoin != other.hasCoin || (hasCoin && !coin_.Equals(other.coin_))) return false;
      if (hasGem != other.hasGem || (hasGem && !gem_.Equals(other.gem_))) return false;
      if (hasCup != other.hasCup || (hasCup && !cup_.Equals(other.cup_))) return false;
      if (hasExp != other.hasExp || (hasExp && !exp_.Equals(other.exp_))) return false;
      if (hasRegionId != other.hasRegionId || (hasRegionId && !regionId_.Equals(other.regionId_))) return false;
      if (hasLeagueLv != other.hasLeagueLv || (hasLeagueLv && !leagueLv_.Equals(other.leagueLv_))) return false;
      if (hasBallId != other.hasBallId || (hasBallId && !ballId_.Equals(other.ballId_))) return false;
      if (hasHatId != other.hasHatId || (hasHatId && !hatId_.Equals(other.hatId_))) return false;
      if (hasAcsryId != other.hasAcsryId || (hasAcsryId && !acsryId_.Equals(other.acsryId_))) return false;
      if (hasAvaFrameId != other.hasAvaFrameId || (hasAvaFrameId && !avaFrameId_.Equals(other.avaFrameId_))) return false;
      if(clubIds_.Count != other.clubIds_.Count) return false;
      for(int ix=0; ix < clubIds_.Count; ix++)
        if(!clubIds_[ix].Equals(other.clubIds_[ix])) return false;
      if (hasMmr != other.hasMmr || (hasMmr && !mmr_.Equals(other.mmr_))) return false;
      if(clubLvs_.Count != other.clubLvs_.Count) return false;
      for(int ix=0; ix < clubLvs_.Count; ix++)
        if(!clubLvs_[ix].Equals(other.clubLvs_[ix])) return false;
      if (hasSocialId != other.hasSocialId || (hasSocialId && !socialId_.Equals(other.socialId_))) return false;
      if (hasSuitData != other.hasSuitData || (hasSuitData && !suitData_.Equals(other.suitData_))) return false;
      if (hasBestHistoryRankStatus != other.hasBestHistoryRankStatus || (hasBestHistoryRankStatus && !bestHistoryRankStatus_.Equals(other.bestHistoryRankStatus_))) return false;
      if (hasClubSuitData != other.hasClubSuitData || (hasClubSuitData && !clubSuitData_.Equals(other.clubSuitData_))) return false;
      if (hasNewSuitData != other.hasNewSuitData || (hasNewSuitData && !newSuitData_.Equals(other.newSuitData_))) return false;
      if (hasCustomAvaId != other.hasCustomAvaId || (hasCustomAvaId && !customAvaId_.Equals(other.customAvaId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("name", hasName, name_, writer);
      PrintField("lv", hasLv, lv_, writer);
      PrintField("avatar_id", hasAvatarId, avatarId_, writer);
      PrintField("club_id", hasClubId, clubId_, writer);
      PrintField("cloth_id", hasClothId, clothId_, writer);
      PrintField("is_robot", hasIsRobot, isRobot_, writer);
      PrintField("coin", hasCoin, coin_, writer);
      PrintField("gem", hasGem, gem_, writer);
      PrintField("cup", hasCup, cup_, writer);
      PrintField("exp", hasExp, exp_, writer);
      PrintField("region_id", hasRegionId, regionId_, writer);
      PrintField("league_lv", hasLeagueLv, leagueLv_, writer);
      PrintField("ball_id", hasBallId, ballId_, writer);
      PrintField("hat_id", hasHatId, hatId_, writer);
      PrintField("acsry_id", hasAcsryId, acsryId_, writer);
      PrintField("ava_frame_id", hasAvaFrameId, avaFrameId_, writer);
      PrintField("club_ids", clubIds_, writer);
      PrintField("mmr", hasMmr, mmr_, writer);
      PrintField("club_lvs", clubLvs_, writer);
      PrintField("social_id", hasSocialId, socialId_, writer);
      PrintField("suit_data", hasSuitData, suitData_, writer);
      PrintField("best_history_rank_status", hasBestHistoryRankStatus, bestHistoryRankStatus_, writer);
      PrintField("club_suit_data", hasClubSuitData, clubSuitData_, writer);
      PrintField("new_suit_data", hasNewSuitData, newSuitData_, writer);
      PrintField("custom_ava_id", hasCustomAvaId, customAvaId_, writer);
    }
    #endregion
    
    public static CCSimpleUserData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSimpleUserData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSimpleUserData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSimpleUserData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSimpleUserData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSimpleUserData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSimpleUserData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSimpleUserData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSimpleUserData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSimpleUserData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSimpleUserData MakeReadOnly() {
      clubIds_.MakeReadOnly();
      clubLvs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSimpleUserData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSimpleUserData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSimpleUserData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSimpleUserData result;
      
      private CCSimpleUserData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSimpleUserData original = result;
          result = new CCSimpleUserData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSimpleUserData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSimpleUserData DefaultInstanceForType {
        get { return global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
      }
      
      public override CCSimpleUserData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSimpleUserData) {
          return MergeFrom((CCSimpleUserData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSimpleUserData other) {
        if (other == global::com.golf.proto.CCSimpleUserData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasLv) {
          Lv = other.Lv;
        }
        if (other.HasAvatarId) {
          AvatarId = other.AvatarId;
        }
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        if (other.HasClothId) {
          ClothId = other.ClothId;
        }
        if (other.HasIsRobot) {
          IsRobot = other.IsRobot;
        }
        if (other.HasCoin) {
          Coin = other.Coin;
        }
        if (other.HasGem) {
          Gem = other.Gem;
        }
        if (other.HasCup) {
          Cup = other.Cup;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasRegionId) {
          RegionId = other.RegionId;
        }
        if (other.HasLeagueLv) {
          LeagueLv = other.LeagueLv;
        }
        if (other.HasBallId) {
          BallId = other.BallId;
        }
        if (other.HasHatId) {
          HatId = other.HatId;
        }
        if (other.HasAcsryId) {
          AcsryId = other.AcsryId;
        }
        if (other.HasAvaFrameId) {
          AvaFrameId = other.AvaFrameId;
        }
        if (other.clubIds_.Count != 0) {
          result.clubIds_.Add(other.clubIds_);
        }
        if (other.HasMmr) {
          Mmr = other.Mmr;
        }
        if (other.clubLvs_.Count != 0) {
          result.clubLvs_.Add(other.clubLvs_);
        }
        if (other.HasSocialId) {
          SocialId = other.SocialId;
        }
        if (other.HasSuitData) {
          MergeSuitData(other.SuitData);
        }
        if (other.HasBestHistoryRankStatus) {
          MergeBestHistoryRankStatus(other.BestHistoryRankStatus);
        }
        if (other.HasClubSuitData) {
          MergeClubSuitData(other.ClubSuitData);
        }
        if (other.HasNewSuitData) {
          MergeNewSuitData(other.NewSuitData);
        }
        if (other.HasCustomAvaId) {
          CustomAvaId = other.CustomAvaId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSimpleUserDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSimpleUserDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasLv = input.ReadInt32(ref result.lv_);
              break;
            }
            case 32: {
              result.hasAvatarId = input.ReadInt32(ref result.avatarId_);
              break;
            }
            case 40: {
              result.hasClubId = input.ReadInt32(ref result.clubId_);
              break;
            }
            case 48: {
              result.hasClothId = input.ReadInt32(ref result.clothId_);
              break;
            }
            case 56: {
              result.hasIsRobot = input.ReadBool(ref result.isRobot_);
              break;
            }
            case 64: {
              result.hasCoin = input.ReadInt64(ref result.coin_);
              break;
            }
            case 72: {
              result.hasGem = input.ReadInt64(ref result.gem_);
              break;
            }
            case 80: {
              result.hasCup = input.ReadInt64(ref result.cup_);
              break;
            }
            case 88: {
              result.hasExp = input.ReadInt64(ref result.exp_);
              break;
            }
            case 96: {
              result.hasRegionId = input.ReadInt32(ref result.regionId_);
              break;
            }
            case 104: {
              result.hasLeagueLv = input.ReadInt32(ref result.leagueLv_);
              break;
            }
            case 112: {
              result.hasBallId = input.ReadInt32(ref result.ballId_);
              break;
            }
            case 120: {
              result.hasHatId = input.ReadInt32(ref result.hatId_);
              break;
            }
            case 128: {
              result.hasAcsryId = input.ReadInt32(ref result.acsryId_);
              break;
            }
            case 136: {
              result.hasAvaFrameId = input.ReadInt32(ref result.avaFrameId_);
              break;
            }
            case 146:
            case 144: {
              input.ReadInt32Array(tag, field_name, result.clubIds_);
              break;
            }
            case 152: {
              result.hasMmr = input.ReadInt32(ref result.mmr_);
              break;
            }
            case 162:
            case 160: {
              input.ReadInt32Array(tag, field_name, result.clubLvs_);
              break;
            }
            case 170: {
              result.hasSocialId = input.ReadString(ref result.socialId_);
              break;
            }
            case 178: {
              global::com.golf.proto.CCSuitData.Builder subBuilder = global::com.golf.proto.CCSuitData.CreateBuilder();
              if (result.hasSuitData) {
                subBuilder.MergeFrom(SuitData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SuitData = subBuilder.BuildPartial();
              break;
            }
            case 186: {
              global::com.golf.proto.CCBestHistoryRankStatus.Builder subBuilder = global::com.golf.proto.CCBestHistoryRankStatus.CreateBuilder();
              if (result.hasBestHistoryRankStatus) {
                subBuilder.MergeFrom(BestHistoryRankStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BestHistoryRankStatus = subBuilder.BuildPartial();
              break;
            }
            case 194: {
              global::com.golf.proto.CCClubSuitData.Builder subBuilder = global::com.golf.proto.CCClubSuitData.CreateBuilder();
              if (result.hasClubSuitData) {
                subBuilder.MergeFrom(ClubSuitData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClubSuitData = subBuilder.BuildPartial();
              break;
            }
            case 202: {
              global::com.golf.proto.CCSuitData.Builder subBuilder = global::com.golf.proto.CCSuitData.CreateBuilder();
              if (result.hasNewSuitData) {
                subBuilder.MergeFrom(NewSuitData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewSuitData = subBuilder.BuildPartial();
              break;
            }
            case 208: {
              result.hasCustomAvaId = input.ReadInt32(ref result.customAvaId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasLv {
        get { return result.hasLv; }
      }
      public int Lv {
        get { return result.Lv; }
        set { SetLv(value); }
      }
      public Builder SetLv(int value) {
        PrepareBuilder();
        result.hasLv = true;
        result.lv_ = value;
        return this;
      }
      public Builder ClearLv() {
        PrepareBuilder();
        result.hasLv = false;
        result.lv_ = 0;
        return this;
      }
      
      public bool HasAvatarId {
        get { return result.hasAvatarId; }
      }
      public int AvatarId {
        get { return result.AvatarId; }
        set { SetAvatarId(value); }
      }
      public Builder SetAvatarId(int value) {
        PrepareBuilder();
        result.hasAvatarId = true;
        result.avatarId_ = value;
        return this;
      }
      public Builder ClearAvatarId() {
        PrepareBuilder();
        result.hasAvatarId = false;
        result.avatarId_ = 0;
        return this;
      }
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public int ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(int value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0;
        return this;
      }
      
      public bool HasClothId {
        get { return result.hasClothId; }
      }
      public int ClothId {
        get { return result.ClothId; }
        set { SetClothId(value); }
      }
      public Builder SetClothId(int value) {
        PrepareBuilder();
        result.hasClothId = true;
        result.clothId_ = value;
        return this;
      }
      public Builder ClearClothId() {
        PrepareBuilder();
        result.hasClothId = false;
        result.clothId_ = 0;
        return this;
      }
      
      public bool HasIsRobot {
        get { return result.hasIsRobot; }
      }
      public bool IsRobot {
        get { return result.IsRobot; }
        set { SetIsRobot(value); }
      }
      public Builder SetIsRobot(bool value) {
        PrepareBuilder();
        result.hasIsRobot = true;
        result.isRobot_ = value;
        return this;
      }
      public Builder ClearIsRobot() {
        PrepareBuilder();
        result.hasIsRobot = false;
        result.isRobot_ = false;
        return this;
      }
      
      public bool HasCoin {
        get { return result.hasCoin; }
      }
      public long Coin {
        get { return result.Coin; }
        set { SetCoin(value); }
      }
      public Builder SetCoin(long value) {
        PrepareBuilder();
        result.hasCoin = true;
        result.coin_ = value;
        return this;
      }
      public Builder ClearCoin() {
        PrepareBuilder();
        result.hasCoin = false;
        result.coin_ = 0L;
        return this;
      }
      
      public bool HasGem {
        get { return result.hasGem; }
      }
      public long Gem {
        get { return result.Gem; }
        set { SetGem(value); }
      }
      public Builder SetGem(long value) {
        PrepareBuilder();
        result.hasGem = true;
        result.gem_ = value;
        return this;
      }
      public Builder ClearGem() {
        PrepareBuilder();
        result.hasGem = false;
        result.gem_ = 0L;
        return this;
      }
      
      public bool HasCup {
        get { return result.hasCup; }
      }
      public long Cup {
        get { return result.Cup; }
        set { SetCup(value); }
      }
      public Builder SetCup(long value) {
        PrepareBuilder();
        result.hasCup = true;
        result.cup_ = value;
        return this;
      }
      public Builder ClearCup() {
        PrepareBuilder();
        result.hasCup = false;
        result.cup_ = 0L;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public long Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(long value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0L;
        return this;
      }
      
      public bool HasRegionId {
        get { return result.hasRegionId; }
      }
      public int RegionId {
        get { return result.RegionId; }
        set { SetRegionId(value); }
      }
      public Builder SetRegionId(int value) {
        PrepareBuilder();
        result.hasRegionId = true;
        result.regionId_ = value;
        return this;
      }
      public Builder ClearRegionId() {
        PrepareBuilder();
        result.hasRegionId = false;
        result.regionId_ = 0;
        return this;
      }
      
      public bool HasLeagueLv {
        get { return result.hasLeagueLv; }
      }
      public int LeagueLv {
        get { return result.LeagueLv; }
        set { SetLeagueLv(value); }
      }
      public Builder SetLeagueLv(int value) {
        PrepareBuilder();
        result.hasLeagueLv = true;
        result.leagueLv_ = value;
        return this;
      }
      public Builder ClearLeagueLv() {
        PrepareBuilder();
        result.hasLeagueLv = false;
        result.leagueLv_ = 0;
        return this;
      }
      
      public bool HasBallId {
        get { return result.hasBallId; }
      }
      public int BallId {
        get { return result.BallId; }
        set { SetBallId(value); }
      }
      public Builder SetBallId(int value) {
        PrepareBuilder();
        result.hasBallId = true;
        result.ballId_ = value;
        return this;
      }
      public Builder ClearBallId() {
        PrepareBuilder();
        result.hasBallId = false;
        result.ballId_ = 0;
        return this;
      }
      
      public bool HasHatId {
        get { return result.hasHatId; }
      }
      public int HatId {
        get { return result.HatId; }
        set { SetHatId(value); }
      }
      public Builder SetHatId(int value) {
        PrepareBuilder();
        result.hasHatId = true;
        result.hatId_ = value;
        return this;
      }
      public Builder ClearHatId() {
        PrepareBuilder();
        result.hasHatId = false;
        result.hatId_ = 0;
        return this;
      }
      
      public bool HasAcsryId {
        get { return result.hasAcsryId; }
      }
      public int AcsryId {
        get { return result.AcsryId; }
        set { SetAcsryId(value); }
      }
      public Builder SetAcsryId(int value) {
        PrepareBuilder();
        result.hasAcsryId = true;
        result.acsryId_ = value;
        return this;
      }
      public Builder ClearAcsryId() {
        PrepareBuilder();
        result.hasAcsryId = false;
        result.acsryId_ = 0;
        return this;
      }
      
      public bool HasAvaFrameId {
        get { return result.hasAvaFrameId; }
      }
      public int AvaFrameId {
        get { return result.AvaFrameId; }
        set { SetAvaFrameId(value); }
      }
      public Builder SetAvaFrameId(int value) {
        PrepareBuilder();
        result.hasAvaFrameId = true;
        result.avaFrameId_ = value;
        return this;
      }
      public Builder ClearAvaFrameId() {
        PrepareBuilder();
        result.hasAvaFrameId = false;
        result.avaFrameId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ClubIdsList {
        get { return PrepareBuilder().clubIds_; }
      }
      public int ClubIdsCount {
        get { return result.ClubIdsCount; }
      }
      public int GetClubIds(int index) {
        return result.GetClubIds(index);
      }
      public Builder SetClubIds(int index, int value) {
        PrepareBuilder();
        result.clubIds_[index] = value;
        return this;
      }
      public Builder AddClubIds(int value) {
        PrepareBuilder();
        result.clubIds_.Add(value);
        return this;
      }
      public Builder AddRangeClubIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.clubIds_.Add(values);
        return this;
      }
      public Builder ClearClubIds() {
        PrepareBuilder();
        result.clubIds_.Clear();
        return this;
      }
      
      public bool HasMmr {
        get { return result.hasMmr; }
      }
      public int Mmr {
        get { return result.Mmr; }
        set { SetMmr(value); }
      }
      public Builder SetMmr(int value) {
        PrepareBuilder();
        result.hasMmr = true;
        result.mmr_ = value;
        return this;
      }
      public Builder ClearMmr() {
        PrepareBuilder();
        result.hasMmr = false;
        result.mmr_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ClubLvsList {
        get { return PrepareBuilder().clubLvs_; }
      }
      public int ClubLvsCount {
        get { return result.ClubLvsCount; }
      }
      public int GetClubLvs(int index) {
        return result.GetClubLvs(index);
      }
      public Builder SetClubLvs(int index, int value) {
        PrepareBuilder();
        result.clubLvs_[index] = value;
        return this;
      }
      public Builder AddClubLvs(int value) {
        PrepareBuilder();
        result.clubLvs_.Add(value);
        return this;
      }
      public Builder AddRangeClubLvs(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.clubLvs_.Add(values);
        return this;
      }
      public Builder ClearClubLvs() {
        PrepareBuilder();
        result.clubLvs_.Clear();
        return this;
      }
      
      public bool HasSocialId {
        get { return result.hasSocialId; }
      }
      public string SocialId {
        get { return result.SocialId; }
        set { SetSocialId(value); }
      }
      public Builder SetSocialId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSocialId = true;
        result.socialId_ = value;
        return this;
      }
      public Builder ClearSocialId() {
        PrepareBuilder();
        result.hasSocialId = false;
        result.socialId_ = "";
        return this;
      }
      
      public bool HasSuitData {
       get { return result.hasSuitData; }
      }
      public global::com.golf.proto.CCSuitData SuitData {
        get { return result.SuitData; }
        set { SetSuitData(value); }
      }
      public Builder SetSuitData(global::com.golf.proto.CCSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSuitData = true;
        result.suitData_ = value;
        return this;
      }
      public Builder SetSuitData(global::com.golf.proto.CCSuitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSuitData = true;
        result.suitData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSuitData(global::com.golf.proto.CCSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSuitData &&
            result.suitData_ != global::com.golf.proto.CCSuitData.DefaultInstance) {
            result.suitData_ = global::com.golf.proto.CCSuitData.CreateBuilder(result.suitData_).MergeFrom(value).BuildPartial();
        } else {
          result.suitData_ = value;
        }
        result.hasSuitData = true;
        return this;
      }
      public Builder ClearSuitData() {
        PrepareBuilder();
        result.hasSuitData = false;
        result.suitData_ = null;
        return this;
      }
      
      public bool HasBestHistoryRankStatus {
       get { return result.hasBestHistoryRankStatus; }
      }
      public global::com.golf.proto.CCBestHistoryRankStatus BestHistoryRankStatus {
        get { return result.BestHistoryRankStatus; }
        set { SetBestHistoryRankStatus(value); }
      }
      public Builder SetBestHistoryRankStatus(global::com.golf.proto.CCBestHistoryRankStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBestHistoryRankStatus = true;
        result.bestHistoryRankStatus_ = value;
        return this;
      }
      public Builder SetBestHistoryRankStatus(global::com.golf.proto.CCBestHistoryRankStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBestHistoryRankStatus = true;
        result.bestHistoryRankStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBestHistoryRankStatus(global::com.golf.proto.CCBestHistoryRankStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBestHistoryRankStatus &&
            result.bestHistoryRankStatus_ != global::com.golf.proto.CCBestHistoryRankStatus.DefaultInstance) {
            result.bestHistoryRankStatus_ = global::com.golf.proto.CCBestHistoryRankStatus.CreateBuilder(result.bestHistoryRankStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.bestHistoryRankStatus_ = value;
        }
        result.hasBestHistoryRankStatus = true;
        return this;
      }
      public Builder ClearBestHistoryRankStatus() {
        PrepareBuilder();
        result.hasBestHistoryRankStatus = false;
        result.bestHistoryRankStatus_ = null;
        return this;
      }
      
      public bool HasClubSuitData {
       get { return result.hasClubSuitData; }
      }
      public global::com.golf.proto.CCClubSuitData ClubSuitData {
        get { return result.ClubSuitData; }
        set { SetClubSuitData(value); }
      }
      public Builder SetClubSuitData(global::com.golf.proto.CCClubSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClubSuitData = true;
        result.clubSuitData_ = value;
        return this;
      }
      public Builder SetClubSuitData(global::com.golf.proto.CCClubSuitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClubSuitData = true;
        result.clubSuitData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClubSuitData(global::com.golf.proto.CCClubSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClubSuitData &&
            result.clubSuitData_ != global::com.golf.proto.CCClubSuitData.DefaultInstance) {
            result.clubSuitData_ = global::com.golf.proto.CCClubSuitData.CreateBuilder(result.clubSuitData_).MergeFrom(value).BuildPartial();
        } else {
          result.clubSuitData_ = value;
        }
        result.hasClubSuitData = true;
        return this;
      }
      public Builder ClearClubSuitData() {
        PrepareBuilder();
        result.hasClubSuitData = false;
        result.clubSuitData_ = null;
        return this;
      }
      
      public bool HasNewSuitData {
       get { return result.hasNewSuitData; }
      }
      public global::com.golf.proto.CCSuitData NewSuitData {
        get { return result.NewSuitData; }
        set { SetNewSuitData(value); }
      }
      public Builder SetNewSuitData(global::com.golf.proto.CCSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewSuitData = true;
        result.newSuitData_ = value;
        return this;
      }
      public Builder SetNewSuitData(global::com.golf.proto.CCSuitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewSuitData = true;
        result.newSuitData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewSuitData(global::com.golf.proto.CCSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewSuitData &&
            result.newSuitData_ != global::com.golf.proto.CCSuitData.DefaultInstance) {
            result.newSuitData_ = global::com.golf.proto.CCSuitData.CreateBuilder(result.newSuitData_).MergeFrom(value).BuildPartial();
        } else {
          result.newSuitData_ = value;
        }
        result.hasNewSuitData = true;
        return this;
      }
      public Builder ClearNewSuitData() {
        PrepareBuilder();
        result.hasNewSuitData = false;
        result.newSuitData_ = null;
        return this;
      }
      
      public bool HasCustomAvaId {
        get { return result.hasCustomAvaId; }
      }
      public int CustomAvaId {
        get { return result.CustomAvaId; }
        set { SetCustomAvaId(value); }
      }
      public Builder SetCustomAvaId(int value) {
        PrepareBuilder();
        result.hasCustomAvaId = true;
        result.customAvaId_ = value;
        return this;
      }
      public Builder ClearCustomAvaId() {
        PrepareBuilder();
        result.hasCustomAvaId = false;
        result.customAvaId_ = 0;
        return this;
      }
    }
    static CCSimpleUserData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCItem : pb::GeneratedMessageLite<CCItem, CCItem.Builder> {
    private CCItem() { }
    private static readonly CCItem defaultInstance = new CCItem().MakeReadOnly();
    private static readonly string[] _cCItemFieldNames = new string[] { "id", "num", "type" };
    private static readonly uint[] _cCItemFieldTags = new uint[] { 16, 24, 8 };
    public static CCItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCItem ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NumFieldNumber = 3;
    private bool hasNum;
    private long num_;
    public bool HasNum {
      get { return hasNum; }
    }
    public long Num {
      get { return num_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[2], Type);
      }
      if (hasId) {
        output.WriteInt32(2, field_names[0], Id);
      }
      if (hasNum) {
        output.WriteInt64(3, field_names[1], Num);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
      }
      if (hasNum) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Num);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasNum) hash ^= num_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCItem other = obj as CCItem;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasNum != other.hasNum || (hasNum && !num_.Equals(other.num_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("id", hasId, id_, writer);
      PrintField("num", hasNum, num_, writer);
    }
    #endregion
    
    public static CCItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCItem result;
      
      private CCItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCItem original = result;
          result = new CCItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCItem.DefaultInstance; }
      }
      
      public override CCItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCItem) {
          return MergeFrom((CCItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCItem other) {
        if (other == global::com.golf.proto.CCItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasNum) {
          Num = other.Num;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 24: {
              result.hasNum = input.ReadInt64(ref result.num_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public long Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(long value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 0L;
        return this;
      }
    }
    static CCItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRewardItem : pb::GeneratedMessageLite<CCRewardItem, CCRewardItem.Builder> {
    private CCRewardItem() { }
    private static readonly CCRewardItem defaultInstance = new CCRewardItem().MakeReadOnly();
    private static readonly string[] _cCRewardItemFieldNames = new string[] { "item", "rep_item", "state" };
    private static readonly uint[] _cCRewardItemFieldTags = new uint[] { 18, 26, 8 };
    public static CCRewardItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRewardItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRewardItem ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCItem Item {
      get { return item_ ?? global::com.golf.proto.CCItem.DefaultInstance; }
    }
    
    public const int RepItemFieldNumber = 3;
    private bool hasRepItem;
    private global::com.golf.proto.CCItem repItem_;
    public bool HasRepItem {
      get { return hasRepItem; }
    }
    public global::com.golf.proto.CCItem RepItem {
      get { return repItem_ ?? global::com.golf.proto.CCItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRewardItemFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[2], State);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[0], Item);
      }
      if (hasRepItem) {
        output.WriteMessage(3, field_names[1], RepItem);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasRepItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, RepItem);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasRepItem) hash ^= repItem_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRewardItem other = obj as CCRewardItem;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasRepItem != other.hasRepItem || (hasRepItem && !repItem_.Equals(other.repItem_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("item", hasItem, item_, writer);
      PrintField("rep_item", hasRepItem, repItem_, writer);
    }
    #endregion
    
    public static CCRewardItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRewardItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRewardItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRewardItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRewardItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRewardItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRewardItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRewardItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRewardItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRewardItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRewardItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRewardItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRewardItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRewardItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRewardItem result;
      
      private CCRewardItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRewardItem original = result;
          result = new CCRewardItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRewardItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRewardItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCRewardItem.DefaultInstance; }
      }
      
      public override CCRewardItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRewardItem) {
          return MergeFrom((CCRewardItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRewardItem other) {
        if (other == global::com.golf.proto.CCRewardItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasRepItem) {
          MergeRepItem(other.RepItem);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRewardItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRewardItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCItem.Builder subBuilder = global::com.golf.proto.CCItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCItem.Builder subBuilder = global::com.golf.proto.CCItem.CreateBuilder();
              if (result.hasRepItem) {
                subBuilder.MergeFrom(RepItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RepItem = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasRepItem {
       get { return result.hasRepItem; }
      }
      public global::com.golf.proto.CCItem RepItem {
        get { return result.RepItem; }
        set { SetRepItem(value); }
      }
      public Builder SetRepItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRepItem = true;
        result.repItem_ = value;
        return this;
      }
      public Builder SetRepItem(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRepItem = true;
        result.repItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRepItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRepItem &&
            result.repItem_ != global::com.golf.proto.CCItem.DefaultInstance) {
            result.repItem_ = global::com.golf.proto.CCItem.CreateBuilder(result.repItem_).MergeFrom(value).BuildPartial();
        } else {
          result.repItem_ = value;
        }
        result.hasRepItem = true;
        return this;
      }
      public Builder ClearRepItem() {
        PrepareBuilder();
        result.hasRepItem = false;
        result.repItem_ = null;
        return this;
      }
    }
    static CCRewardItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCVec3Int : pb::GeneratedMessageLite<CCVec3Int, CCVec3Int.Builder> {
    private CCVec3Int() { }
    private static readonly CCVec3Int defaultInstance = new CCVec3Int().MakeReadOnly();
    private static readonly string[] _cCVec3IntFieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _cCVec3IntFieldTags = new uint[] { 8, 16, 24 };
    public static CCVec3Int DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCVec3Int DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCVec3Int ThisMessage {
      get { return this; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private int z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public int Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCVec3IntFieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteInt32(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteInt32(3, field_names[2], Z);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Z);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasX) hash ^= x_.GetHashCode();
      if (hasY) hash ^= y_.GetHashCode();
      if (hasZ) hash ^= z_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCVec3Int other = obj as CCVec3Int;
      if (other == null) return false;
      if (hasX != other.hasX || (hasX && !x_.Equals(other.x_))) return false;
      if (hasY != other.hasY || (hasY && !y_.Equals(other.y_))) return false;
      if (hasZ != other.hasZ || (hasZ && !z_.Equals(other.z_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x", hasX, x_, writer);
      PrintField("y", hasY, y_, writer);
      PrintField("z", hasZ, z_, writer);
    }
    #endregion
    
    public static CCVec3Int ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVec3Int ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVec3Int ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVec3Int ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVec3Int ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVec3Int ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCVec3Int ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCVec3Int ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCVec3Int ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVec3Int ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCVec3Int MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCVec3Int prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCVec3Int, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCVec3Int cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCVec3Int result;
      
      private CCVec3Int PrepareBuilder() {
        if (resultIsReadOnly) {
          CCVec3Int original = result;
          result = new CCVec3Int();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCVec3Int MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCVec3Int DefaultInstanceForType {
        get { return global::com.golf.proto.CCVec3Int.DefaultInstance; }
      }
      
      public override CCVec3Int BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCVec3Int) {
          return MergeFrom((CCVec3Int) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCVec3Int other) {
        if (other == global::com.golf.proto.CCVec3Int.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCVec3IntFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCVec3IntFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
            case 24: {
              result.hasZ = input.ReadInt32(ref result.z_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public int Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(int value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0;
        return this;
      }
    }
    static CCVec3Int() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCVec3FloatToLong : pb::GeneratedMessageLite<CCVec3FloatToLong, CCVec3FloatToLong.Builder> {
    private CCVec3FloatToLong() { }
    private static readonly CCVec3FloatToLong defaultInstance = new CCVec3FloatToLong().MakeReadOnly();
    private static readonly string[] _cCVec3FloatToLongFieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _cCVec3FloatToLongFieldTags = new uint[] { 8, 16, 24 };
    public static CCVec3FloatToLong DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCVec3FloatToLong DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCVec3FloatToLong ThisMessage {
      get { return this; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private long x_;
    public bool HasX {
      get { return hasX; }
    }
    public long X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private long y_;
    public bool HasY {
      get { return hasY; }
    }
    public long Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private long z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public long Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCVec3FloatToLongFieldNames;
      if (hasX) {
        output.WriteInt64(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteInt64(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteInt64(3, field_names[2], Z);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Z);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasX) hash ^= x_.GetHashCode();
      if (hasY) hash ^= y_.GetHashCode();
      if (hasZ) hash ^= z_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCVec3FloatToLong other = obj as CCVec3FloatToLong;
      if (other == null) return false;
      if (hasX != other.hasX || (hasX && !x_.Equals(other.x_))) return false;
      if (hasY != other.hasY || (hasY && !y_.Equals(other.y_))) return false;
      if (hasZ != other.hasZ || (hasZ && !z_.Equals(other.z_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x", hasX, x_, writer);
      PrintField("y", hasY, y_, writer);
      PrintField("z", hasZ, z_, writer);
    }
    #endregion
    
    public static CCVec3FloatToLong ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVec3FloatToLong ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVec3FloatToLong ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVec3FloatToLong ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVec3FloatToLong ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVec3FloatToLong ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCVec3FloatToLong ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCVec3FloatToLong ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCVec3FloatToLong ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVec3FloatToLong ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCVec3FloatToLong MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCVec3FloatToLong prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCVec3FloatToLong, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCVec3FloatToLong cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCVec3FloatToLong result;
      
      private CCVec3FloatToLong PrepareBuilder() {
        if (resultIsReadOnly) {
          CCVec3FloatToLong original = result;
          result = new CCVec3FloatToLong();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCVec3FloatToLong MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCVec3FloatToLong DefaultInstanceForType {
        get { return global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
      }
      
      public override CCVec3FloatToLong BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCVec3FloatToLong) {
          return MergeFrom((CCVec3FloatToLong) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCVec3FloatToLong other) {
        if (other == global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCVec3FloatToLongFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCVec3FloatToLongFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt64(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt64(ref result.y_);
              break;
            }
            case 24: {
              result.hasZ = input.ReadInt64(ref result.z_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public long X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(long value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0L;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public long Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(long value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0L;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public long Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(long value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0L;
        return this;
      }
    }
    static CCVec3FloatToLong() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCVec4FloatToLong : pb::GeneratedMessageLite<CCVec4FloatToLong, CCVec4FloatToLong.Builder> {
    private CCVec4FloatToLong() { }
    private static readonly CCVec4FloatToLong defaultInstance = new CCVec4FloatToLong().MakeReadOnly();
    private static readonly string[] _cCVec4FloatToLongFieldNames = new string[] { "w", "x", "y", "z" };
    private static readonly uint[] _cCVec4FloatToLongFieldTags = new uint[] { 32, 8, 16, 24 };
    public static CCVec4FloatToLong DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCVec4FloatToLong DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCVec4FloatToLong ThisMessage {
      get { return this; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private long x_;
    public bool HasX {
      get { return hasX; }
    }
    public long X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private long y_;
    public bool HasY {
      get { return hasY; }
    }
    public long Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private long z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public long Z {
      get { return z_; }
    }
    
    public const int WFieldNumber = 4;
    private bool hasW;
    private long w_;
    public bool HasW {
      get { return hasW; }
    }
    public long W {
      get { return w_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCVec4FloatToLongFieldNames;
      if (hasX) {
        output.WriteInt64(1, field_names[1], X);
      }
      if (hasY) {
        output.WriteInt64(2, field_names[2], Y);
      }
      if (hasZ) {
        output.WriteInt64(3, field_names[3], Z);
      }
      if (hasW) {
        output.WriteInt64(4, field_names[0], W);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Z);
      }
      if (hasW) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, W);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasX) hash ^= x_.GetHashCode();
      if (hasY) hash ^= y_.GetHashCode();
      if (hasZ) hash ^= z_.GetHashCode();
      if (hasW) hash ^= w_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCVec4FloatToLong other = obj as CCVec4FloatToLong;
      if (other == null) return false;
      if (hasX != other.hasX || (hasX && !x_.Equals(other.x_))) return false;
      if (hasY != other.hasY || (hasY && !y_.Equals(other.y_))) return false;
      if (hasZ != other.hasZ || (hasZ && !z_.Equals(other.z_))) return false;
      if (hasW != other.hasW || (hasW && !w_.Equals(other.w_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x", hasX, x_, writer);
      PrintField("y", hasY, y_, writer);
      PrintField("z", hasZ, z_, writer);
      PrintField("w", hasW, w_, writer);
    }
    #endregion
    
    public static CCVec4FloatToLong ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVec4FloatToLong ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVec4FloatToLong ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVec4FloatToLong ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVec4FloatToLong ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVec4FloatToLong ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCVec4FloatToLong ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCVec4FloatToLong ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCVec4FloatToLong ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVec4FloatToLong ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCVec4FloatToLong MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCVec4FloatToLong prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCVec4FloatToLong, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCVec4FloatToLong cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCVec4FloatToLong result;
      
      private CCVec4FloatToLong PrepareBuilder() {
        if (resultIsReadOnly) {
          CCVec4FloatToLong original = result;
          result = new CCVec4FloatToLong();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCVec4FloatToLong MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCVec4FloatToLong DefaultInstanceForType {
        get { return global::com.golf.proto.CCVec4FloatToLong.DefaultInstance; }
      }
      
      public override CCVec4FloatToLong BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCVec4FloatToLong) {
          return MergeFrom((CCVec4FloatToLong) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCVec4FloatToLong other) {
        if (other == global::com.golf.proto.CCVec4FloatToLong.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        if (other.HasW) {
          W = other.W;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCVec4FloatToLongFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCVec4FloatToLongFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt64(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt64(ref result.y_);
              break;
            }
            case 24: {
              result.hasZ = input.ReadInt64(ref result.z_);
              break;
            }
            case 32: {
              result.hasW = input.ReadInt64(ref result.w_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public long X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(long value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0L;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public long Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(long value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0L;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public long Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(long value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0L;
        return this;
      }
      
      public bool HasW {
        get { return result.hasW; }
      }
      public long W {
        get { return result.W; }
        set { SetW(value); }
      }
      public Builder SetW(long value) {
        PrepareBuilder();
        result.hasW = true;
        result.w_ = value;
        return this;
      }
      public Builder ClearW() {
        PrepareBuilder();
        result.hasW = false;
        result.w_ = 0L;
        return this;
      }
    }
    static CCVec4FloatToLong() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCStrickData : pb::GeneratedMessageLite<CCStrickData, CCStrickData.Builder> {
    private CCStrickData() { }
    private static readonly CCStrickData defaultInstance = new CCStrickData().MakeReadOnly();
    private static readonly string[] _cCStrickDataFieldNames = new string[] { "angle", "ball_id", "ball_pos", "ball_rot", "ball_skills", "club_angle", "club_attributes", "club_id", "club_lv", "force", "hit_point", "landing_pos", "pointer_angle", "type", "wind" };
    private static readonly uint[] _cCStrickDataFieldTags = new uint[] { 24, 48, 82, 90, 114, 120, 104, 40, 96, 16, 58, 74, 32, 8, 66 };
    public static CCStrickData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCStrickData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCStrickData ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int ForceFieldNumber = 2;
    private bool hasForce;
    private long force_;
    public bool HasForce {
      get { return hasForce; }
    }
    public long Force {
      get { return force_; }
    }
    
    public const int AngleFieldNumber = 3;
    private bool hasAngle;
    private long angle_;
    public bool HasAngle {
      get { return hasAngle; }
    }
    public long Angle {
      get { return angle_; }
    }
    
    public const int PointerAngleFieldNumber = 4;
    private bool hasPointerAngle;
    private long pointerAngle_;
    public bool HasPointerAngle {
      get { return hasPointerAngle; }
    }
    public long PointerAngle {
      get { return pointerAngle_; }
    }
    
    public const int ClubIdFieldNumber = 5;
    private bool hasClubId;
    private int clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public int ClubId {
      get { return clubId_; }
    }
    
    public const int BallIdFieldNumber = 6;
    private bool hasBallId;
    private int ballId_;
    public bool HasBallId {
      get { return hasBallId; }
    }
    public int BallId {
      get { return ballId_; }
    }
    
    public const int HitPointFieldNumber = 7;
    private bool hasHitPoint;
    private global::com.golf.proto.CCVec3FloatToLong hitPoint_;
    public bool HasHitPoint {
      get { return hasHitPoint; }
    }
    public global::com.golf.proto.CCVec3FloatToLong HitPoint {
      get { return hitPoint_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int WindFieldNumber = 8;
    private bool hasWind;
    private global::com.golf.proto.CCVec3FloatToLong wind_;
    public bool HasWind {
      get { return hasWind; }
    }
    public global::com.golf.proto.CCVec3FloatToLong Wind {
      get { return wind_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int LandingPosFieldNumber = 9;
    private bool hasLandingPos;
    private global::com.golf.proto.CCVec3FloatToLong landingPos_;
    public bool HasLandingPos {
      get { return hasLandingPos; }
    }
    public global::com.golf.proto.CCVec3FloatToLong LandingPos {
      get { return landingPos_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int BallPosFieldNumber = 10;
    private bool hasBallPos;
    private global::com.golf.proto.CCVec3FloatToLong ballPos_;
    public bool HasBallPos {
      get { return hasBallPos; }
    }
    public global::com.golf.proto.CCVec3FloatToLong BallPos {
      get { return ballPos_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int BallRotFieldNumber = 11;
    private bool hasBallRot;
    private global::com.golf.proto.CCVec4FloatToLong ballRot_;
    public bool HasBallRot {
      get { return hasBallRot; }
    }
    public global::com.golf.proto.CCVec4FloatToLong BallRot {
      get { return ballRot_ ?? global::com.golf.proto.CCVec4FloatToLong.DefaultInstance; }
    }
    
    public const int ClubLvFieldNumber = 12;
    private bool hasClubLv;
    private int clubLv_;
    public bool HasClubLv {
      get { return hasClubLv; }
    }
    public int ClubLv {
      get { return clubLv_; }
    }
    
    public const int ClubAttributesFieldNumber = 13;
    private pbc::PopsicleList<int> clubAttributes_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ClubAttributesList {
      get { return pbc::Lists.AsReadOnly(clubAttributes_); }
    }
    public int ClubAttributesCount {
      get { return clubAttributes_.Count; }
    }
    public int GetClubAttributes(int index) {
      return clubAttributes_[index];
    }
    
    public const int BallSkillsFieldNumber = 14;
    private pbc::PopsicleList<global::com.golf.proto.CCItem> ballSkills_ = new pbc::PopsicleList<global::com.golf.proto.CCItem>();
    public scg::IList<global::com.golf.proto.CCItem> BallSkillsList {
      get { return ballSkills_; }
    }
    public int BallSkillsCount {
      get { return ballSkills_.Count; }
    }
    public global::com.golf.proto.CCItem GetBallSkills(int index) {
      return ballSkills_[index];
    }
    
    public const int ClubAngleFieldNumber = 15;
    private bool hasClubAngle;
    private int clubAngle_;
    public bool HasClubAngle {
      get { return hasClubAngle; }
    }
    public int ClubAngle {
      get { return clubAngle_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCStrickDataFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[13], Type);
      }
      if (hasForce) {
        output.WriteInt64(2, field_names[9], Force);
      }
      if (hasAngle) {
        output.WriteInt64(3, field_names[0], Angle);
      }
      if (hasPointerAngle) {
        output.WriteInt64(4, field_names[12], PointerAngle);
      }
      if (hasClubId) {
        output.WriteInt32(5, field_names[7], ClubId);
      }
      if (hasBallId) {
        output.WriteInt32(6, field_names[1], BallId);
      }
      if (hasHitPoint) {
        output.WriteMessage(7, field_names[10], HitPoint);
      }
      if (hasWind) {
        output.WriteMessage(8, field_names[14], Wind);
      }
      if (hasLandingPos) {
        output.WriteMessage(9, field_names[11], LandingPos);
      }
      if (hasBallPos) {
        output.WriteMessage(10, field_names[2], BallPos);
      }
      if (hasBallRot) {
        output.WriteMessage(11, field_names[3], BallRot);
      }
      if (hasClubLv) {
        output.WriteInt32(12, field_names[8], ClubLv);
      }
      if (clubAttributes_.Count > 0) {
        output.WriteInt32Array(13, field_names[6], clubAttributes_);
      }
      if (ballSkills_.Count > 0) {
        output.WriteMessageArray(14, field_names[4], ballSkills_);
      }
      if (hasClubAngle) {
        output.WriteInt32(15, field_names[5], ClubAngle);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasForce) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Force);
      }
      if (hasAngle) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Angle);
      }
      if (hasPointerAngle) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, PointerAngle);
      }
      if (hasClubId) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ClubId);
      }
      if (hasBallId) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, BallId);
      }
      if (hasHitPoint) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, HitPoint);
      }
      if (hasWind) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, Wind);
      }
      if (hasLandingPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, LandingPos);
      }
      if (hasBallPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, BallPos);
      }
      if (hasBallRot) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, BallRot);
      }
      if (hasClubLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, ClubLv);
      }
      {
        int dataSize = 0;
        foreach (int element in ClubAttributesList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * clubAttributes_.Count;
      }
      foreach (global::com.golf.proto.CCItem element in BallSkillsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(14, element);
      }
      if (hasClubAngle) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, ClubAngle);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasForce) hash ^= force_.GetHashCode();
      if (hasAngle) hash ^= angle_.GetHashCode();
      if (hasPointerAngle) hash ^= pointerAngle_.GetHashCode();
      if (hasClubId) hash ^= clubId_.GetHashCode();
      if (hasBallId) hash ^= ballId_.GetHashCode();
      if (hasHitPoint) hash ^= hitPoint_.GetHashCode();
      if (hasWind) hash ^= wind_.GetHashCode();
      if (hasLandingPos) hash ^= landingPos_.GetHashCode();
      if (hasBallPos) hash ^= ballPos_.GetHashCode();
      if (hasBallRot) hash ^= ballRot_.GetHashCode();
      if (hasClubLv) hash ^= clubLv_.GetHashCode();
      foreach(int i in clubAttributes_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCItem i in ballSkills_)
        hash ^= i.GetHashCode();
      if (hasClubAngle) hash ^= clubAngle_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCStrickData other = obj as CCStrickData;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasForce != other.hasForce || (hasForce && !force_.Equals(other.force_))) return false;
      if (hasAngle != other.hasAngle || (hasAngle && !angle_.Equals(other.angle_))) return false;
      if (hasPointerAngle != other.hasPointerAngle || (hasPointerAngle && !pointerAngle_.Equals(other.pointerAngle_))) return false;
      if (hasClubId != other.hasClubId || (hasClubId && !clubId_.Equals(other.clubId_))) return false;
      if (hasBallId != other.hasBallId || (hasBallId && !ballId_.Equals(other.ballId_))) return false;
      if (hasHitPoint != other.hasHitPoint || (hasHitPoint && !hitPoint_.Equals(other.hitPoint_))) return false;
      if (hasWind != other.hasWind || (hasWind && !wind_.Equals(other.wind_))) return false;
      if (hasLandingPos != other.hasLandingPos || (hasLandingPos && !landingPos_.Equals(other.landingPos_))) return false;
      if (hasBallPos != other.hasBallPos || (hasBallPos && !ballPos_.Equals(other.ballPos_))) return false;
      if (hasBallRot != other.hasBallRot || (hasBallRot && !ballRot_.Equals(other.ballRot_))) return false;
      if (hasClubLv != other.hasClubLv || (hasClubLv && !clubLv_.Equals(other.clubLv_))) return false;
      if(clubAttributes_.Count != other.clubAttributes_.Count) return false;
      for(int ix=0; ix < clubAttributes_.Count; ix++)
        if(!clubAttributes_[ix].Equals(other.clubAttributes_[ix])) return false;
      if(ballSkills_.Count != other.ballSkills_.Count) return false;
      for(int ix=0; ix < ballSkills_.Count; ix++)
        if(!ballSkills_[ix].Equals(other.ballSkills_[ix])) return false;
      if (hasClubAngle != other.hasClubAngle || (hasClubAngle && !clubAngle_.Equals(other.clubAngle_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("force", hasForce, force_, writer);
      PrintField("angle", hasAngle, angle_, writer);
      PrintField("pointer_angle", hasPointerAngle, pointerAngle_, writer);
      PrintField("club_id", hasClubId, clubId_, writer);
      PrintField("ball_id", hasBallId, ballId_, writer);
      PrintField("hit_point", hasHitPoint, hitPoint_, writer);
      PrintField("wind", hasWind, wind_, writer);
      PrintField("landing_pos", hasLandingPos, landingPos_, writer);
      PrintField("ball_pos", hasBallPos, ballPos_, writer);
      PrintField("ball_rot", hasBallRot, ballRot_, writer);
      PrintField("club_lv", hasClubLv, clubLv_, writer);
      PrintField("club_attributes", clubAttributes_, writer);
      PrintField("ball_skills", ballSkills_, writer);
      PrintField("club_angle", hasClubAngle, clubAngle_, writer);
    }
    #endregion
    
    public static CCStrickData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCStrickData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCStrickData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCStrickData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCStrickData MakeReadOnly() {
      clubAttributes_.MakeReadOnly();
      ballSkills_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCStrickData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCStrickData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCStrickData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCStrickData result;
      
      private CCStrickData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCStrickData original = result;
          result = new CCStrickData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCStrickData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCStrickData DefaultInstanceForType {
        get { return global::com.golf.proto.CCStrickData.DefaultInstance; }
      }
      
      public override CCStrickData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCStrickData) {
          return MergeFrom((CCStrickData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCStrickData other) {
        if (other == global::com.golf.proto.CCStrickData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasForce) {
          Force = other.Force;
        }
        if (other.HasAngle) {
          Angle = other.Angle;
        }
        if (other.HasPointerAngle) {
          PointerAngle = other.PointerAngle;
        }
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        if (other.HasBallId) {
          BallId = other.BallId;
        }
        if (other.HasHitPoint) {
          MergeHitPoint(other.HitPoint);
        }
        if (other.HasWind) {
          MergeWind(other.Wind);
        }
        if (other.HasLandingPos) {
          MergeLandingPos(other.LandingPos);
        }
        if (other.HasBallPos) {
          MergeBallPos(other.BallPos);
        }
        if (other.HasBallRot) {
          MergeBallRot(other.BallRot);
        }
        if (other.HasClubLv) {
          ClubLv = other.ClubLv;
        }
        if (other.clubAttributes_.Count != 0) {
          result.clubAttributes_.Add(other.clubAttributes_);
        }
        if (other.ballSkills_.Count != 0) {
          result.ballSkills_.Add(other.ballSkills_);
        }
        if (other.HasClubAngle) {
          ClubAngle = other.ClubAngle;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCStrickDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCStrickDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasForce = input.ReadInt64(ref result.force_);
              break;
            }
            case 24: {
              result.hasAngle = input.ReadInt64(ref result.angle_);
              break;
            }
            case 32: {
              result.hasPointerAngle = input.ReadInt64(ref result.pointerAngle_);
              break;
            }
            case 40: {
              result.hasClubId = input.ReadInt32(ref result.clubId_);
              break;
            }
            case 48: {
              result.hasBallId = input.ReadInt32(ref result.ballId_);
              break;
            }
            case 58: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasHitPoint) {
                subBuilder.MergeFrom(HitPoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HitPoint = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasWind) {
                subBuilder.MergeFrom(Wind);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Wind = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasLandingPos) {
                subBuilder.MergeFrom(LandingPos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LandingPos = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasBallPos) {
                subBuilder.MergeFrom(BallPos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallPos = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::com.golf.proto.CCVec4FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec4FloatToLong.CreateBuilder();
              if (result.hasBallRot) {
                subBuilder.MergeFrom(BallRot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallRot = subBuilder.BuildPartial();
              break;
            }
            case 96: {
              result.hasClubLv = input.ReadInt32(ref result.clubLv_);
              break;
            }
            case 106:
            case 104: {
              input.ReadInt32Array(tag, field_name, result.clubAttributes_);
              break;
            }
            case 114: {
              input.ReadMessageArray(tag, field_name, result.ballSkills_, global::com.golf.proto.CCItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 120: {
              result.hasClubAngle = input.ReadInt32(ref result.clubAngle_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasForce {
        get { return result.hasForce; }
      }
      public long Force {
        get { return result.Force; }
        set { SetForce(value); }
      }
      public Builder SetForce(long value) {
        PrepareBuilder();
        result.hasForce = true;
        result.force_ = value;
        return this;
      }
      public Builder ClearForce() {
        PrepareBuilder();
        result.hasForce = false;
        result.force_ = 0L;
        return this;
      }
      
      public bool HasAngle {
        get { return result.hasAngle; }
      }
      public long Angle {
        get { return result.Angle; }
        set { SetAngle(value); }
      }
      public Builder SetAngle(long value) {
        PrepareBuilder();
        result.hasAngle = true;
        result.angle_ = value;
        return this;
      }
      public Builder ClearAngle() {
        PrepareBuilder();
        result.hasAngle = false;
        result.angle_ = 0L;
        return this;
      }
      
      public bool HasPointerAngle {
        get { return result.hasPointerAngle; }
      }
      public long PointerAngle {
        get { return result.PointerAngle; }
        set { SetPointerAngle(value); }
      }
      public Builder SetPointerAngle(long value) {
        PrepareBuilder();
        result.hasPointerAngle = true;
        result.pointerAngle_ = value;
        return this;
      }
      public Builder ClearPointerAngle() {
        PrepareBuilder();
        result.hasPointerAngle = false;
        result.pointerAngle_ = 0L;
        return this;
      }
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public int ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(int value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0;
        return this;
      }
      
      public bool HasBallId {
        get { return result.hasBallId; }
      }
      public int BallId {
        get { return result.BallId; }
        set { SetBallId(value); }
      }
      public Builder SetBallId(int value) {
        PrepareBuilder();
        result.hasBallId = true;
        result.ballId_ = value;
        return this;
      }
      public Builder ClearBallId() {
        PrepareBuilder();
        result.hasBallId = false;
        result.ballId_ = 0;
        return this;
      }
      
      public bool HasHitPoint {
       get { return result.hasHitPoint; }
      }
      public global::com.golf.proto.CCVec3FloatToLong HitPoint {
        get { return result.HitPoint; }
        set { SetHitPoint(value); }
      }
      public Builder SetHitPoint(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHitPoint = true;
        result.hitPoint_ = value;
        return this;
      }
      public Builder SetHitPoint(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHitPoint = true;
        result.hitPoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHitPoint(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHitPoint &&
            result.hitPoint_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.hitPoint_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.hitPoint_).MergeFrom(value).BuildPartial();
        } else {
          result.hitPoint_ = value;
        }
        result.hasHitPoint = true;
        return this;
      }
      public Builder ClearHitPoint() {
        PrepareBuilder();
        result.hasHitPoint = false;
        result.hitPoint_ = null;
        return this;
      }
      
      public bool HasWind {
       get { return result.hasWind; }
      }
      public global::com.golf.proto.CCVec3FloatToLong Wind {
        get { return result.Wind; }
        set { SetWind(value); }
      }
      public Builder SetWind(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWind = true;
        result.wind_ = value;
        return this;
      }
      public Builder SetWind(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWind = true;
        result.wind_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWind(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWind &&
            result.wind_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.wind_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.wind_).MergeFrom(value).BuildPartial();
        } else {
          result.wind_ = value;
        }
        result.hasWind = true;
        return this;
      }
      public Builder ClearWind() {
        PrepareBuilder();
        result.hasWind = false;
        result.wind_ = null;
        return this;
      }
      
      public bool HasLandingPos {
       get { return result.hasLandingPos; }
      }
      public global::com.golf.proto.CCVec3FloatToLong LandingPos {
        get { return result.LandingPos; }
        set { SetLandingPos(value); }
      }
      public Builder SetLandingPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLandingPos = true;
        result.landingPos_ = value;
        return this;
      }
      public Builder SetLandingPos(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLandingPos = true;
        result.landingPos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLandingPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLandingPos &&
            result.landingPos_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.landingPos_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.landingPos_).MergeFrom(value).BuildPartial();
        } else {
          result.landingPos_ = value;
        }
        result.hasLandingPos = true;
        return this;
      }
      public Builder ClearLandingPos() {
        PrepareBuilder();
        result.hasLandingPos = false;
        result.landingPos_ = null;
        return this;
      }
      
      public bool HasBallPos {
       get { return result.hasBallPos; }
      }
      public global::com.golf.proto.CCVec3FloatToLong BallPos {
        get { return result.BallPos; }
        set { SetBallPos(value); }
      }
      public Builder SetBallPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallPos = true;
        result.ballPos_ = value;
        return this;
      }
      public Builder SetBallPos(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallPos = true;
        result.ballPos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallPos &&
            result.ballPos_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.ballPos_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.ballPos_).MergeFrom(value).BuildPartial();
        } else {
          result.ballPos_ = value;
        }
        result.hasBallPos = true;
        return this;
      }
      public Builder ClearBallPos() {
        PrepareBuilder();
        result.hasBallPos = false;
        result.ballPos_ = null;
        return this;
      }
      
      public bool HasBallRot {
       get { return result.hasBallRot; }
      }
      public global::com.golf.proto.CCVec4FloatToLong BallRot {
        get { return result.BallRot; }
        set { SetBallRot(value); }
      }
      public Builder SetBallRot(global::com.golf.proto.CCVec4FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallRot = true;
        result.ballRot_ = value;
        return this;
      }
      public Builder SetBallRot(global::com.golf.proto.CCVec4FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallRot = true;
        result.ballRot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallRot(global::com.golf.proto.CCVec4FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallRot &&
            result.ballRot_ != global::com.golf.proto.CCVec4FloatToLong.DefaultInstance) {
            result.ballRot_ = global::com.golf.proto.CCVec4FloatToLong.CreateBuilder(result.ballRot_).MergeFrom(value).BuildPartial();
        } else {
          result.ballRot_ = value;
        }
        result.hasBallRot = true;
        return this;
      }
      public Builder ClearBallRot() {
        PrepareBuilder();
        result.hasBallRot = false;
        result.ballRot_ = null;
        return this;
      }
      
      public bool HasClubLv {
        get { return result.hasClubLv; }
      }
      public int ClubLv {
        get { return result.ClubLv; }
        set { SetClubLv(value); }
      }
      public Builder SetClubLv(int value) {
        PrepareBuilder();
        result.hasClubLv = true;
        result.clubLv_ = value;
        return this;
      }
      public Builder ClearClubLv() {
        PrepareBuilder();
        result.hasClubLv = false;
        result.clubLv_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ClubAttributesList {
        get { return PrepareBuilder().clubAttributes_; }
      }
      public int ClubAttributesCount {
        get { return result.ClubAttributesCount; }
      }
      public int GetClubAttributes(int index) {
        return result.GetClubAttributes(index);
      }
      public Builder SetClubAttributes(int index, int value) {
        PrepareBuilder();
        result.clubAttributes_[index] = value;
        return this;
      }
      public Builder AddClubAttributes(int value) {
        PrepareBuilder();
        result.clubAttributes_.Add(value);
        return this;
      }
      public Builder AddRangeClubAttributes(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.clubAttributes_.Add(values);
        return this;
      }
      public Builder ClearClubAttributes() {
        PrepareBuilder();
        result.clubAttributes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCItem> BallSkillsList {
        get { return PrepareBuilder().ballSkills_; }
      }
      public int BallSkillsCount {
        get { return result.BallSkillsCount; }
      }
      public global::com.golf.proto.CCItem GetBallSkills(int index) {
        return result.GetBallSkills(index);
      }
      public Builder SetBallSkills(int index, global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ballSkills_[index] = value;
        return this;
      }
      public Builder SetBallSkills(int index, global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ballSkills_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBallSkills(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ballSkills_.Add(value);
        return this;
      }
      public Builder AddBallSkills(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ballSkills_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBallSkills(scg::IEnumerable<global::com.golf.proto.CCItem> values) {
        PrepareBuilder();
        result.ballSkills_.Add(values);
        return this;
      }
      public Builder ClearBallSkills() {
        PrepareBuilder();
        result.ballSkills_.Clear();
        return this;
      }
      
      public bool HasClubAngle {
        get { return result.hasClubAngle; }
      }
      public int ClubAngle {
        get { return result.ClubAngle; }
        set { SetClubAngle(value); }
      }
      public Builder SetClubAngle(int value) {
        PrepareBuilder();
        result.hasClubAngle = true;
        result.clubAngle_ = value;
        return this;
      }
      public Builder ClearClubAngle() {
        PrepareBuilder();
        result.hasClubAngle = false;
        result.clubAngle_ = 0;
        return this;
      }
    }
    static CCStrickData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBallStatus : pb::GeneratedMessageLite<CCBallStatus, CCBallStatus.Builder> {
    private CCBallStatus() { }
    private static readonly CCBallStatus defaultInstance = new CCBallStatus().MakeReadOnly();
    private static readonly string[] _cCBallStatusFieldNames = new string[] { "frame_id", "position", "rotation" };
    private static readonly uint[] _cCBallStatusFieldTags = new uint[] { 8, 18, 26 };
    public static CCBallStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBallStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBallStatus ThisMessage {
      get { return this; }
    }
    
    public const int FrameIdFieldNumber = 1;
    private bool hasFrameId;
    private long frameId_;
    public bool HasFrameId {
      get { return hasFrameId; }
    }
    public long FrameId {
      get { return frameId_; }
    }
    
    public const int PositionFieldNumber = 2;
    private bool hasPosition;
    private global::com.golf.proto.CCVec3FloatToLong position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::com.golf.proto.CCVec3FloatToLong Position {
      get { return position_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int RotationFieldNumber = 3;
    private bool hasRotation;
    private global::com.golf.proto.CCVec4FloatToLong rotation_;
    public bool HasRotation {
      get { return hasRotation; }
    }
    public global::com.golf.proto.CCVec4FloatToLong Rotation {
      get { return rotation_ ?? global::com.golf.proto.CCVec4FloatToLong.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBallStatusFieldNames;
      if (hasFrameId) {
        output.WriteInt64(1, field_names[0], FrameId);
      }
      if (hasPosition) {
        output.WriteMessage(2, field_names[1], Position);
      }
      if (hasRotation) {
        output.WriteMessage(3, field_names[2], Rotation);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasFrameId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, FrameId);
      }
      if (hasPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
      }
      if (hasRotation) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Rotation);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasFrameId) hash ^= frameId_.GetHashCode();
      if (hasPosition) hash ^= position_.GetHashCode();
      if (hasRotation) hash ^= rotation_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBallStatus other = obj as CCBallStatus;
      if (other == null) return false;
      if (hasFrameId != other.hasFrameId || (hasFrameId && !frameId_.Equals(other.frameId_))) return false;
      if (hasPosition != other.hasPosition || (hasPosition && !position_.Equals(other.position_))) return false;
      if (hasRotation != other.hasRotation || (hasRotation && !rotation_.Equals(other.rotation_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("frame_id", hasFrameId, frameId_, writer);
      PrintField("position", hasPosition, position_, writer);
      PrintField("rotation", hasRotation, rotation_, writer);
    }
    #endregion
    
    public static CCBallStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBallStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBallStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBallStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBallStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBallStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBallStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBallStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBallStatus result;
      
      private CCBallStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBallStatus original = result;
          result = new CCBallStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBallStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBallStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCBallStatus.DefaultInstance; }
      }
      
      public override CCBallStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBallStatus) {
          return MergeFrom((CCBallStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBallStatus other) {
        if (other == global::com.golf.proto.CCBallStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrameId) {
          FrameId = other.FrameId;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        if (other.HasRotation) {
          MergeRotation(other.Rotation);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBallStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBallStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFrameId = input.ReadInt64(ref result.frameId_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCVec4FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec4FloatToLong.CreateBuilder();
              if (result.hasRotation) {
                subBuilder.MergeFrom(Rotation);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rotation = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasFrameId {
        get { return result.hasFrameId; }
      }
      public long FrameId {
        get { return result.FrameId; }
        set { SetFrameId(value); }
      }
      public Builder SetFrameId(long value) {
        PrepareBuilder();
        result.hasFrameId = true;
        result.frameId_ = value;
        return this;
      }
      public Builder ClearFrameId() {
        PrepareBuilder();
        result.hasFrameId = false;
        result.frameId_ = 0L;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::com.golf.proto.CCVec3FloatToLong Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.position_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
      
      public bool HasRotation {
       get { return result.hasRotation; }
      }
      public global::com.golf.proto.CCVec4FloatToLong Rotation {
        get { return result.Rotation; }
        set { SetRotation(value); }
      }
      public Builder SetRotation(global::com.golf.proto.CCVec4FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRotation = true;
        result.rotation_ = value;
        return this;
      }
      public Builder SetRotation(global::com.golf.proto.CCVec4FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRotation = true;
        result.rotation_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRotation(global::com.golf.proto.CCVec4FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRotation &&
            result.rotation_ != global::com.golf.proto.CCVec4FloatToLong.DefaultInstance) {
            result.rotation_ = global::com.golf.proto.CCVec4FloatToLong.CreateBuilder(result.rotation_).MergeFrom(value).BuildPartial();
        } else {
          result.rotation_ = value;
        }
        result.hasRotation = true;
        return this;
      }
      public Builder ClearRotation() {
        PrepareBuilder();
        result.hasRotation = false;
        result.rotation_ = null;
        return this;
      }
    }
    static CCBallStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBallStatusEx : pb::GeneratedMessageLite<CCBallStatusEx, CCBallStatusEx.Builder> {
    private CCBallStatusEx() { }
    private static readonly CCBallStatusEx defaultInstance = new CCBallStatusEx().MakeReadOnly();
    private static readonly string[] _cCBallStatusExFieldNames = new string[] { "loc_state", "status" };
    private static readonly uint[] _cCBallStatusExFieldTags = new uint[] { 32, 10 };
    public static CCBallStatusEx DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBallStatusEx DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBallStatusEx ThisMessage {
      get { return this; }
    }
    
    public const int StatusFieldNumber = 1;
    private bool hasStatus;
    private global::com.golf.proto.CCBallStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCBallStatus Status {
      get { return status_ ?? global::com.golf.proto.CCBallStatus.DefaultInstance; }
    }
    
    public const int LocStateFieldNumber = 4;
    private bool hasLocState;
    private int locState_;
    public bool HasLocState {
      get { return hasLocState; }
    }
    public int LocState {
      get { return locState_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBallStatusExFieldNames;
      if (hasStatus) {
        output.WriteMessage(1, field_names[1], Status);
      }
      if (hasLocState) {
        output.WriteInt32(4, field_names[0], LocState);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
      }
      if (hasLocState) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, LocState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      if (hasLocState) hash ^= locState_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBallStatusEx other = obj as CCBallStatusEx;
      if (other == null) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      if (hasLocState != other.hasLocState || (hasLocState && !locState_.Equals(other.locState_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("status", hasStatus, status_, writer);
      PrintField("loc_state", hasLocState, locState_, writer);
    }
    #endregion
    
    public static CCBallStatusEx ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallStatusEx ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallStatusEx ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallStatusEx ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallStatusEx ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallStatusEx ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBallStatusEx ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBallStatusEx ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBallStatusEx ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallStatusEx ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBallStatusEx MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBallStatusEx prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBallStatusEx, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBallStatusEx cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBallStatusEx result;
      
      private CCBallStatusEx PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBallStatusEx original = result;
          result = new CCBallStatusEx();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBallStatusEx MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBallStatusEx DefaultInstanceForType {
        get { return global::com.golf.proto.CCBallStatusEx.DefaultInstance; }
      }
      
      public override CCBallStatusEx BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBallStatusEx) {
          return MergeFrom((CCBallStatusEx) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBallStatusEx other) {
        if (other == global::com.golf.proto.CCBallStatusEx.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        if (other.HasLocState) {
          LocState = other.LocState;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBallStatusExFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBallStatusExFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCBallStatus.Builder subBuilder = global::com.golf.proto.CCBallStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasLocState = input.ReadInt32(ref result.locState_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCBallStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCBallStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCBallStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCBallStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
      
      public bool HasLocState {
        get { return result.hasLocState; }
      }
      public int LocState {
        get { return result.LocState; }
        set { SetLocState(value); }
      }
      public Builder SetLocState(int value) {
        PrepareBuilder();
        result.hasLocState = true;
        result.locState_ = value;
        return this;
      }
      public Builder ClearLocState() {
        PrepareBuilder();
        result.hasLocState = false;
        result.locState_ = 0;
        return this;
      }
    }
    static CCBallStatusEx() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCVsModeStatus : pb::GeneratedMessageLite<CCVsModeStatus, CCVsModeStatus.Builder> {
    private CCVsModeStatus() { }
    private static readonly CCVsModeStatus defaultInstance = new CCVsModeStatus().MakeReadOnly();
    private static readonly string[] _cCVsModeStatusFieldNames = new string[] { "mstates" };
    private static readonly uint[] _cCVsModeStatusFieldTags = new uint[] { 10 };
    public static CCVsModeStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCVsModeStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCVsModeStatus ThisMessage {
      get { return this; }
    }
    
    public const int MstatesFieldNumber = 1;
    private pbc::PopsicleList<global::com.golf.proto.CCVsModeState> mstates_ = new pbc::PopsicleList<global::com.golf.proto.CCVsModeState>();
    public scg::IList<global::com.golf.proto.CCVsModeState> MstatesList {
      get { return mstates_; }
    }
    public int MstatesCount {
      get { return mstates_.Count; }
    }
    public global::com.golf.proto.CCVsModeState GetMstates(int index) {
      return mstates_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCVsModeStatusFieldNames;
      if (mstates_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], mstates_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::com.golf.proto.CCVsModeState element in MstatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.golf.proto.CCVsModeState i in mstates_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCVsModeStatus other = obj as CCVsModeStatus;
      if (other == null) return false;
      if(mstates_.Count != other.mstates_.Count) return false;
      for(int ix=0; ix < mstates_.Count; ix++)
        if(!mstates_[ix].Equals(other.mstates_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("mstates", mstates_, writer);
    }
    #endregion
    
    public static CCVsModeStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVsModeStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVsModeStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVsModeStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCVsModeStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCVsModeStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVsModeStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCVsModeStatus MakeReadOnly() {
      mstates_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCVsModeStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCVsModeStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCVsModeStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCVsModeStatus result;
      
      private CCVsModeStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCVsModeStatus original = result;
          result = new CCVsModeStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCVsModeStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCVsModeStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCVsModeStatus.DefaultInstance; }
      }
      
      public override CCVsModeStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCVsModeStatus) {
          return MergeFrom((CCVsModeStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCVsModeStatus other) {
        if (other == global::com.golf.proto.CCVsModeStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.mstates_.Count != 0) {
          result.mstates_.Add(other.mstates_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCVsModeStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCVsModeStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.mstates_, global::com.golf.proto.CCVsModeState.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.golf.proto.CCVsModeState> MstatesList {
        get { return PrepareBuilder().mstates_; }
      }
      public int MstatesCount {
        get { return result.MstatesCount; }
      }
      public global::com.golf.proto.CCVsModeState GetMstates(int index) {
        return result.GetMstates(index);
      }
      public Builder SetMstates(int index, global::com.golf.proto.CCVsModeState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mstates_[index] = value;
        return this;
      }
      public Builder SetMstates(int index, global::com.golf.proto.CCVsModeState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mstates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMstates(global::com.golf.proto.CCVsModeState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mstates_.Add(value);
        return this;
      }
      public Builder AddMstates(global::com.golf.proto.CCVsModeState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mstates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMstates(scg::IEnumerable<global::com.golf.proto.CCVsModeState> values) {
        PrepareBuilder();
        result.mstates_.Add(values);
        return this;
      }
      public Builder ClearMstates() {
        PrepareBuilder();
        result.mstates_.Clear();
        return this;
      }
    }
    static CCVsModeStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTournamentStatus : pb::GeneratedMessageLite<CCTournamentStatus, CCTournamentStatus.Builder> {
    private CCTournamentStatus() { }
    private static readonly CCTournamentStatus defaultInstance = new CCTournamentStatus().MakeReadOnly();
    private static readonly string[] _cCTournamentStatusFieldNames = new string[] { "grade", "period_id", "states" };
    private static readonly uint[] _cCTournamentStatusFieldTags = new uint[] { 16, 8, 26 };
    public static CCTournamentStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTournamentStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTournamentStatus ThisMessage {
      get { return this; }
    }
    
    public const int PeriodIdFieldNumber = 1;
    private bool hasPeriodId;
    private int periodId_;
    public bool HasPeriodId {
      get { return hasPeriodId; }
    }
    public int PeriodId {
      get { return periodId_; }
    }
    
    public const int GradeFieldNumber = 2;
    private bool hasGrade;
    private int grade_;
    public bool HasGrade {
      get { return hasGrade; }
    }
    public int Grade {
      get { return grade_; }
    }
    
    public const int StatesFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCTournamentState> states_ = new pbc::PopsicleList<global::com.golf.proto.CCTournamentState>();
    public scg::IList<global::com.golf.proto.CCTournamentState> StatesList {
      get { return states_; }
    }
    public int StatesCount {
      get { return states_.Count; }
    }
    public global::com.golf.proto.CCTournamentState GetStates(int index) {
      return states_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTournamentStatusFieldNames;
      if (hasPeriodId) {
        output.WriteInt32(1, field_names[1], PeriodId);
      }
      if (hasGrade) {
        output.WriteInt32(2, field_names[0], Grade);
      }
      if (states_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], states_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPeriodId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, PeriodId);
      }
      if (hasGrade) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Grade);
      }
      foreach (global::com.golf.proto.CCTournamentState element in StatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasPeriodId) hash ^= periodId_.GetHashCode();
      if (hasGrade) hash ^= grade_.GetHashCode();
      foreach(global::com.golf.proto.CCTournamentState i in states_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTournamentStatus other = obj as CCTournamentStatus;
      if (other == null) return false;
      if (hasPeriodId != other.hasPeriodId || (hasPeriodId && !periodId_.Equals(other.periodId_))) return false;
      if (hasGrade != other.hasGrade || (hasGrade && !grade_.Equals(other.grade_))) return false;
      if(states_.Count != other.states_.Count) return false;
      for(int ix=0; ix < states_.Count; ix++)
        if(!states_[ix].Equals(other.states_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("period_id", hasPeriodId, periodId_, writer);
      PrintField("grade", hasGrade, grade_, writer);
      PrintField("states", states_, writer);
    }
    #endregion
    
    public static CCTournamentStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTournamentStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTournamentStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTournamentStatus MakeReadOnly() {
      states_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTournamentStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTournamentStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTournamentStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTournamentStatus result;
      
      private CCTournamentStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTournamentStatus original = result;
          result = new CCTournamentStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTournamentStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTournamentStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCTournamentStatus.DefaultInstance; }
      }
      
      public override CCTournamentStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTournamentStatus) {
          return MergeFrom((CCTournamentStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTournamentStatus other) {
        if (other == global::com.golf.proto.CCTournamentStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPeriodId) {
          PeriodId = other.PeriodId;
        }
        if (other.HasGrade) {
          Grade = other.Grade;
        }
        if (other.states_.Count != 0) {
          result.states_.Add(other.states_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTournamentStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTournamentStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPeriodId = input.ReadInt32(ref result.periodId_);
              break;
            }
            case 16: {
              result.hasGrade = input.ReadInt32(ref result.grade_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.states_, global::com.golf.proto.CCTournamentState.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasPeriodId {
        get { return result.hasPeriodId; }
      }
      public int PeriodId {
        get { return result.PeriodId; }
        set { SetPeriodId(value); }
      }
      public Builder SetPeriodId(int value) {
        PrepareBuilder();
        result.hasPeriodId = true;
        result.periodId_ = value;
        return this;
      }
      public Builder ClearPeriodId() {
        PrepareBuilder();
        result.hasPeriodId = false;
        result.periodId_ = 0;
        return this;
      }
      
      public bool HasGrade {
        get { return result.hasGrade; }
      }
      public int Grade {
        get { return result.Grade; }
        set { SetGrade(value); }
      }
      public Builder SetGrade(int value) {
        PrepareBuilder();
        result.hasGrade = true;
        result.grade_ = value;
        return this;
      }
      public Builder ClearGrade() {
        PrepareBuilder();
        result.hasGrade = false;
        result.grade_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCTournamentState> StatesList {
        get { return PrepareBuilder().states_; }
      }
      public int StatesCount {
        get { return result.StatesCount; }
      }
      public global::com.golf.proto.CCTournamentState GetStates(int index) {
        return result.GetStates(index);
      }
      public Builder SetStates(int index, global::com.golf.proto.CCTournamentState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.states_[index] = value;
        return this;
      }
      public Builder SetStates(int index, global::com.golf.proto.CCTournamentState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.states_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStates(global::com.golf.proto.CCTournamentState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.states_.Add(value);
        return this;
      }
      public Builder AddStates(global::com.golf.proto.CCTournamentState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.states_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStates(scg::IEnumerable<global::com.golf.proto.CCTournamentState> values) {
        PrepareBuilder();
        result.states_.Add(values);
        return this;
      }
      public Builder ClearStates() {
        PrepareBuilder();
        result.states_.Clear();
        return this;
      }
    }
    static CCTournamentStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCVsModeState : pb::GeneratedMessageLite<CCVsModeState, CCVsModeState.Builder> {
    private CCVsModeState() { }
    private static readonly CCVsModeState defaultInstance = new CCVsModeState().MakeReadOnly();
    private static readonly string[] _cCVsModeStateFieldNames = new string[] { "all_cnt", "cup", "mode_id", "ulck", "win_cnt" };
    private static readonly uint[] _cCVsModeStateFieldTags = new uint[] { 24, 16, 8, 40, 32 };
    public static CCVsModeState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCVsModeState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCVsModeState ThisMessage {
      get { return this; }
    }
    
    public const int ModeIdFieldNumber = 1;
    private bool hasModeId;
    private int modeId_;
    public bool HasModeId {
      get { return hasModeId; }
    }
    public int ModeId {
      get { return modeId_; }
    }
    
    public const int CupFieldNumber = 2;
    private bool hasCup;
    private int cup_;
    public bool HasCup {
      get { return hasCup; }
    }
    public int Cup {
      get { return cup_; }
    }
    
    public const int AllCntFieldNumber = 3;
    private bool hasAllCnt;
    private int allCnt_;
    public bool HasAllCnt {
      get { return hasAllCnt; }
    }
    public int AllCnt {
      get { return allCnt_; }
    }
    
    public const int WinCntFieldNumber = 4;
    private bool hasWinCnt;
    private int winCnt_;
    public bool HasWinCnt {
      get { return hasWinCnt; }
    }
    public int WinCnt {
      get { return winCnt_; }
    }
    
    public const int UlckFieldNumber = 5;
    private bool hasUlck;
    private bool ulck_;
    public bool HasUlck {
      get { return hasUlck; }
    }
    public bool Ulck {
      get { return ulck_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCVsModeStateFieldNames;
      if (hasModeId) {
        output.WriteInt32(1, field_names[2], ModeId);
      }
      if (hasCup) {
        output.WriteInt32(2, field_names[1], Cup);
      }
      if (hasAllCnt) {
        output.WriteInt32(3, field_names[0], AllCnt);
      }
      if (hasWinCnt) {
        output.WriteInt32(4, field_names[4], WinCnt);
      }
      if (hasUlck) {
        output.WriteBool(5, field_names[3], Ulck);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, ModeId);
      }
      if (hasCup) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Cup);
      }
      if (hasAllCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, AllCnt);
      }
      if (hasWinCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, WinCnt);
      }
      if (hasUlck) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Ulck);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasModeId) hash ^= modeId_.GetHashCode();
      if (hasCup) hash ^= cup_.GetHashCode();
      if (hasAllCnt) hash ^= allCnt_.GetHashCode();
      if (hasWinCnt) hash ^= winCnt_.GetHashCode();
      if (hasUlck) hash ^= ulck_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCVsModeState other = obj as CCVsModeState;
      if (other == null) return false;
      if (hasModeId != other.hasModeId || (hasModeId && !modeId_.Equals(other.modeId_))) return false;
      if (hasCup != other.hasCup || (hasCup && !cup_.Equals(other.cup_))) return false;
      if (hasAllCnt != other.hasAllCnt || (hasAllCnt && !allCnt_.Equals(other.allCnt_))) return false;
      if (hasWinCnt != other.hasWinCnt || (hasWinCnt && !winCnt_.Equals(other.winCnt_))) return false;
      if (hasUlck != other.hasUlck || (hasUlck && !ulck_.Equals(other.ulck_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("mode_id", hasModeId, modeId_, writer);
      PrintField("cup", hasCup, cup_, writer);
      PrintField("all_cnt", hasAllCnt, allCnt_, writer);
      PrintField("win_cnt", hasWinCnt, winCnt_, writer);
      PrintField("ulck", hasUlck, ulck_, writer);
    }
    #endregion
    
    public static CCVsModeState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVsModeState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVsModeState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVsModeState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCVsModeState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCVsModeState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVsModeState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCVsModeState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCVsModeState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCVsModeState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCVsModeState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCVsModeState result;
      
      private CCVsModeState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCVsModeState original = result;
          result = new CCVsModeState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCVsModeState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCVsModeState DefaultInstanceForType {
        get { return global::com.golf.proto.CCVsModeState.DefaultInstance; }
      }
      
      public override CCVsModeState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCVsModeState) {
          return MergeFrom((CCVsModeState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCVsModeState other) {
        if (other == global::com.golf.proto.CCVsModeState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasModeId) {
          ModeId = other.ModeId;
        }
        if (other.HasCup) {
          Cup = other.Cup;
        }
        if (other.HasAllCnt) {
          AllCnt = other.AllCnt;
        }
        if (other.HasWinCnt) {
          WinCnt = other.WinCnt;
        }
        if (other.HasUlck) {
          Ulck = other.Ulck;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCVsModeStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCVsModeStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasModeId = input.ReadInt32(ref result.modeId_);
              break;
            }
            case 16: {
              result.hasCup = input.ReadInt32(ref result.cup_);
              break;
            }
            case 24: {
              result.hasAllCnt = input.ReadInt32(ref result.allCnt_);
              break;
            }
            case 32: {
              result.hasWinCnt = input.ReadInt32(ref result.winCnt_);
              break;
            }
            case 40: {
              result.hasUlck = input.ReadBool(ref result.ulck_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasModeId {
        get { return result.hasModeId; }
      }
      public int ModeId {
        get { return result.ModeId; }
        set { SetModeId(value); }
      }
      public Builder SetModeId(int value) {
        PrepareBuilder();
        result.hasModeId = true;
        result.modeId_ = value;
        return this;
      }
      public Builder ClearModeId() {
        PrepareBuilder();
        result.hasModeId = false;
        result.modeId_ = 0;
        return this;
      }
      
      public bool HasCup {
        get { return result.hasCup; }
      }
      public int Cup {
        get { return result.Cup; }
        set { SetCup(value); }
      }
      public Builder SetCup(int value) {
        PrepareBuilder();
        result.hasCup = true;
        result.cup_ = value;
        return this;
      }
      public Builder ClearCup() {
        PrepareBuilder();
        result.hasCup = false;
        result.cup_ = 0;
        return this;
      }
      
      public bool HasAllCnt {
        get { return result.hasAllCnt; }
      }
      public int AllCnt {
        get { return result.AllCnt; }
        set { SetAllCnt(value); }
      }
      public Builder SetAllCnt(int value) {
        PrepareBuilder();
        result.hasAllCnt = true;
        result.allCnt_ = value;
        return this;
      }
      public Builder ClearAllCnt() {
        PrepareBuilder();
        result.hasAllCnt = false;
        result.allCnt_ = 0;
        return this;
      }
      
      public bool HasWinCnt {
        get { return result.hasWinCnt; }
      }
      public int WinCnt {
        get { return result.WinCnt; }
        set { SetWinCnt(value); }
      }
      public Builder SetWinCnt(int value) {
        PrepareBuilder();
        result.hasWinCnt = true;
        result.winCnt_ = value;
        return this;
      }
      public Builder ClearWinCnt() {
        PrepareBuilder();
        result.hasWinCnt = false;
        result.winCnt_ = 0;
        return this;
      }
      
      public bool HasUlck {
        get { return result.hasUlck; }
      }
      public bool Ulck {
        get { return result.Ulck; }
        set { SetUlck(value); }
      }
      public Builder SetUlck(bool value) {
        PrepareBuilder();
        result.hasUlck = true;
        result.ulck_ = value;
        return this;
      }
      public Builder ClearUlck() {
        PrepareBuilder();
        result.hasUlck = false;
        result.ulck_ = false;
        return this;
      }
    }
    static CCVsModeState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMatchRequest : pb::GeneratedMessageLite<CCMatchRequest, CCMatchRequest.Builder> {
    private CCMatchRequest() { }
    private static readonly CCMatchRequest defaultInstance = new CCMatchRequest().MakeReadOnly();
    private static readonly string[] _cCMatchRequestFieldNames = new string[] { "id", "vs_mode_id" };
    private static readonly uint[] _cCMatchRequestFieldTags = new uint[] { 10, 16 };
    public static CCMatchRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMatchRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMatchRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int VsModeIdFieldNumber = 2;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMatchRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasVsModeId) {
        output.WriteInt32(2, field_names[1], VsModeId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, VsModeId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMatchRequest other = obj as CCMatchRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
    }
    #endregion
    
    public static CCMatchRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMatchRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMatchRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMatchRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMatchRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMatchRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMatchRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMatchRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMatchRequest result;
      
      private CCMatchRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMatchRequest original = result;
          result = new CCMatchRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMatchRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMatchRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCMatchRequest.DefaultInstance; }
      }
      
      public override CCMatchRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMatchRequest) {
          return MergeFrom((CCMatchRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMatchRequest other) {
        if (other == global::com.golf.proto.CCMatchRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMatchRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMatchRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
    }
    static CCMatchRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMatchResponse : pb::GeneratedMessageLite<CCMatchResponse, CCMatchResponse.Builder> {
    private CCMatchResponse() { }
    private static readonly CCMatchResponse defaultInstance = new CCMatchResponse().MakeReadOnly();
    private static readonly string[] _cCMatchResponseFieldNames = new string[] { "base_data", "result", "room_status" };
    private static readonly uint[] _cCMatchResponseFieldTags = new uint[] { 26, 8, 18 };
    public static CCMatchResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMatchResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMatchResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int RoomStatusFieldNumber = 2;
    private bool hasRoomStatus;
    private global::com.golf.proto.CCRoomStatus roomStatus_;
    public bool HasRoomStatus {
      get { return hasRoomStatus; }
    }
    public global::com.golf.proto.CCRoomStatus RoomStatus {
      get { return roomStatus_ ?? global::com.golf.proto.CCRoomStatus.DefaultInstance; }
    }
    
    public const int BaseDataFieldNumber = 3;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMatchResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasRoomStatus) {
        output.WriteMessage(2, field_names[2], RoomStatus);
      }
      if (hasBaseData) {
        output.WriteMessage(3, field_names[0], BaseData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasRoomStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, RoomStatus);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, BaseData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasRoomStatus) hash ^= roomStatus_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMatchResponse other = obj as CCMatchResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasRoomStatus != other.hasRoomStatus || (hasRoomStatus && !roomStatus_.Equals(other.roomStatus_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("room_status", hasRoomStatus, roomStatus_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
    }
    #endregion
    
    public static CCMatchResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMatchResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMatchResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMatchResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMatchResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMatchResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMatchResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMatchResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMatchResponse result;
      
      private CCMatchResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMatchResponse original = result;
          result = new CCMatchResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMatchResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMatchResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCMatchResponse.DefaultInstance; }
      }
      
      public override CCMatchResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMatchResponse) {
          return MergeFrom((CCMatchResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMatchResponse other) {
        if (other == global::com.golf.proto.CCMatchResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasRoomStatus) {
          MergeRoomStatus(other.RoomStatus);
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMatchResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMatchResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCRoomStatus.Builder subBuilder = global::com.golf.proto.CCRoomStatus.CreateBuilder();
              if (result.hasRoomStatus) {
                subBuilder.MergeFrom(RoomStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RoomStatus = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasRoomStatus {
       get { return result.hasRoomStatus; }
      }
      public global::com.golf.proto.CCRoomStatus RoomStatus {
        get { return result.RoomStatus; }
        set { SetRoomStatus(value); }
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = value;
        return this;
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRoomStatus &&
            result.roomStatus_ != global::com.golf.proto.CCRoomStatus.DefaultInstance) {
            result.roomStatus_ = global::com.golf.proto.CCRoomStatus.CreateBuilder(result.roomStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.roomStatus_ = value;
        }
        result.hasRoomStatus = true;
        return this;
      }
      public Builder ClearRoomStatus() {
        PrepareBuilder();
        result.hasRoomStatus = false;
        result.roomStatus_ = null;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
    }
    static CCMatchResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMatchConfirmRequest : pb::GeneratedMessageLite<CCMatchConfirmRequest, CCMatchConfirmRequest.Builder> {
    private CCMatchConfirmRequest() { }
    private static readonly CCMatchConfirmRequest defaultInstance = new CCMatchConfirmRequest().MakeReadOnly();
    private static readonly string[] _cCMatchConfirmRequestFieldNames = new string[] { "id", "vs_mode_id" };
    private static readonly uint[] _cCMatchConfirmRequestFieldTags = new uint[] { 10, 16 };
    public static CCMatchConfirmRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMatchConfirmRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMatchConfirmRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int VsModeIdFieldNumber = 2;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMatchConfirmRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasVsModeId) {
        output.WriteInt32(2, field_names[1], VsModeId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, VsModeId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMatchConfirmRequest other = obj as CCMatchConfirmRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
    }
    #endregion
    
    public static CCMatchConfirmRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchConfirmRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMatchConfirmRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMatchConfirmRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMatchConfirmRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMatchConfirmRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMatchConfirmRequest result;
      
      private CCMatchConfirmRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMatchConfirmRequest original = result;
          result = new CCMatchConfirmRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMatchConfirmRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMatchConfirmRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCMatchConfirmRequest.DefaultInstance; }
      }
      
      public override CCMatchConfirmRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMatchConfirmRequest) {
          return MergeFrom((CCMatchConfirmRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMatchConfirmRequest other) {
        if (other == global::com.golf.proto.CCMatchConfirmRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMatchConfirmRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMatchConfirmRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
    }
    static CCMatchConfirmRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMatchConfirmResponse : pb::GeneratedMessageLite<CCMatchConfirmResponse, CCMatchConfirmResponse.Builder> {
    private CCMatchConfirmResponse() { }
    private static readonly CCMatchConfirmResponse defaultInstance = new CCMatchConfirmResponse().MakeReadOnly();
    private static readonly string[] _cCMatchConfirmResponseFieldNames = new string[] { "result", "vs_mode_id" };
    private static readonly uint[] _cCMatchConfirmResponseFieldTags = new uint[] { 8, 16 };
    public static CCMatchConfirmResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMatchConfirmResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMatchConfirmResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int VsModeIdFieldNumber = 2;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMatchConfirmResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasVsModeId) {
        output.WriteInt32(2, field_names[1], VsModeId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, VsModeId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMatchConfirmResponse other = obj as CCMatchConfirmResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
    }
    #endregion
    
    public static CCMatchConfirmResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchConfirmResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMatchConfirmResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMatchConfirmResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMatchConfirmResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMatchConfirmResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMatchConfirmResponse result;
      
      private CCMatchConfirmResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMatchConfirmResponse original = result;
          result = new CCMatchConfirmResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMatchConfirmResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMatchConfirmResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCMatchConfirmResponse.DefaultInstance; }
      }
      
      public override CCMatchConfirmResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMatchConfirmResponse) {
          return MergeFrom((CCMatchConfirmResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMatchConfirmResponse other) {
        if (other == global::com.golf.proto.CCMatchConfirmResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMatchConfirmResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMatchConfirmResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
    }
    static CCMatchConfirmResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMatchCancleRequest : pb::GeneratedMessageLite<CCMatchCancleRequest, CCMatchCancleRequest.Builder> {
    private CCMatchCancleRequest() { }
    private static readonly CCMatchCancleRequest defaultInstance = new CCMatchCancleRequest().MakeReadOnly();
    private static readonly string[] _cCMatchCancleRequestFieldNames = new string[] { "id", "vs_mode_id" };
    private static readonly uint[] _cCMatchCancleRequestFieldTags = new uint[] { 10, 16 };
    public static CCMatchCancleRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMatchCancleRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMatchCancleRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int VsModeIdFieldNumber = 2;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMatchCancleRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasVsModeId) {
        output.WriteInt32(2, field_names[1], VsModeId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, VsModeId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMatchCancleRequest other = obj as CCMatchCancleRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
    }
    #endregion
    
    public static CCMatchCancleRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchCancleRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchCancleRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchCancleRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchCancleRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchCancleRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMatchCancleRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMatchCancleRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMatchCancleRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchCancleRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMatchCancleRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMatchCancleRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMatchCancleRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMatchCancleRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMatchCancleRequest result;
      
      private CCMatchCancleRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMatchCancleRequest original = result;
          result = new CCMatchCancleRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMatchCancleRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMatchCancleRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCMatchCancleRequest.DefaultInstance; }
      }
      
      public override CCMatchCancleRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMatchCancleRequest) {
          return MergeFrom((CCMatchCancleRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMatchCancleRequest other) {
        if (other == global::com.golf.proto.CCMatchCancleRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMatchCancleRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMatchCancleRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
    }
    static CCMatchCancleRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMatchCancleResponse : pb::GeneratedMessageLite<CCMatchCancleResponse, CCMatchCancleResponse.Builder> {
    private CCMatchCancleResponse() { }
    private static readonly CCMatchCancleResponse defaultInstance = new CCMatchCancleResponse().MakeReadOnly();
    private static readonly string[] _cCMatchCancleResponseFieldNames = new string[] { "result", "vs_mode_id" };
    private static readonly uint[] _cCMatchCancleResponseFieldTags = new uint[] { 8, 16 };
    public static CCMatchCancleResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMatchCancleResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMatchCancleResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int VsModeIdFieldNumber = 2;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMatchCancleResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasVsModeId) {
        output.WriteInt32(2, field_names[1], VsModeId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, VsModeId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMatchCancleResponse other = obj as CCMatchCancleResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
    }
    #endregion
    
    public static CCMatchCancleResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchCancleResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchCancleResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMatchCancleResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMatchCancleResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchCancleResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMatchCancleResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMatchCancleResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMatchCancleResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMatchCancleResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMatchCancleResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMatchCancleResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMatchCancleResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMatchCancleResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMatchCancleResponse result;
      
      private CCMatchCancleResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMatchCancleResponse original = result;
          result = new CCMatchCancleResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMatchCancleResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMatchCancleResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCMatchCancleResponse.DefaultInstance; }
      }
      
      public override CCMatchCancleResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMatchCancleResponse) {
          return MergeFrom((CCMatchCancleResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMatchCancleResponse other) {
        if (other == global::com.golf.proto.CCMatchCancleResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMatchCancleResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMatchCancleResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
    }
    static CCMatchCancleResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRematchRequest : pb::GeneratedMessageLite<CCRematchRequest, CCRematchRequest.Builder> {
    private CCRematchRequest() { }
    private static readonly CCRematchRequest defaultInstance = new CCRematchRequest().MakeReadOnly();
    private static readonly string[] _cCRematchRequestFieldNames = new string[] { "id", "state" };
    private static readonly uint[] _cCRematchRequestFieldTags = new uint[] { 10, 16 };
    public static CCRematchRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRematchRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRematchRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRematchRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasState) {
        output.WriteInt32(2, field_names[1], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRematchRequest other = obj as CCRematchRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCRematchRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRematchRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRematchRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRematchRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRematchRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRematchRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRematchRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRematchRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRematchRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRematchRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRematchRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRematchRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRematchRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRematchRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRematchRequest result;
      
      private CCRematchRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRematchRequest original = result;
          result = new CCRematchRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRematchRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRematchRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCRematchRequest.DefaultInstance; }
      }
      
      public override CCRematchRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRematchRequest) {
          return MergeFrom((CCRematchRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRematchRequest other) {
        if (other == global::com.golf.proto.CCRematchRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRematchRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRematchRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCRematchRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRematchResponse : pb::GeneratedMessageLite<CCRematchResponse, CCRematchResponse.Builder> {
    private CCRematchResponse() { }
    private static readonly CCRematchResponse defaultInstance = new CCRematchResponse().MakeReadOnly();
    private static readonly string[] _cCRematchResponseFieldNames = new string[] { "result", "state" };
    private static readonly uint[] _cCRematchResponseFieldTags = new uint[] { 8, 16 };
    public static CCRematchResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRematchResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRematchResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRematchResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasState) {
        output.WriteInt32(2, field_names[1], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRematchResponse other = obj as CCRematchResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCRematchResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRematchResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRematchResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRematchResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRematchResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRematchResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRematchResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRematchResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRematchResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRematchResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRematchResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRematchResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRematchResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRematchResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRematchResponse result;
      
      private CCRematchResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRematchResponse original = result;
          result = new CCRematchResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRematchResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRematchResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCRematchResponse.DefaultInstance; }
      }
      
      public override CCRematchResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRematchResponse) {
          return MergeFrom((CCRematchResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRematchResponse other) {
        if (other == global::com.golf.proto.CCRematchResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRematchResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRematchResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCRematchResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCCheckIsPlayingRequest : pb::GeneratedMessageLite<CCCheckIsPlayingRequest, CCCheckIsPlayingRequest.Builder> {
    private CCCheckIsPlayingRequest() { }
    private static readonly CCCheckIsPlayingRequest defaultInstance = new CCCheckIsPlayingRequest().MakeReadOnly();
    private static readonly string[] _cCCheckIsPlayingRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCCheckIsPlayingRequestFieldTags = new uint[] { 10 };
    public static CCCheckIsPlayingRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCCheckIsPlayingRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCCheckIsPlayingRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCCheckIsPlayingRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCCheckIsPlayingRequest other = obj as CCCheckIsPlayingRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCCheckIsPlayingRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCheckIsPlayingRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCCheckIsPlayingRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCCheckIsPlayingRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCCheckIsPlayingRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCCheckIsPlayingRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCCheckIsPlayingRequest result;
      
      private CCCheckIsPlayingRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCCheckIsPlayingRequest original = result;
          result = new CCCheckIsPlayingRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCCheckIsPlayingRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCCheckIsPlayingRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCCheckIsPlayingRequest.DefaultInstance; }
      }
      
      public override CCCheckIsPlayingRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCCheckIsPlayingRequest) {
          return MergeFrom((CCCheckIsPlayingRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCCheckIsPlayingRequest other) {
        if (other == global::com.golf.proto.CCCheckIsPlayingRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCCheckIsPlayingRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCCheckIsPlayingRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCCheckIsPlayingRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCCheckIsPlayingResponse : pb::GeneratedMessageLite<CCCheckIsPlayingResponse, CCCheckIsPlayingResponse.Builder> {
    private CCCheckIsPlayingResponse() { }
    private static readonly CCCheckIsPlayingResponse defaultInstance = new CCCheckIsPlayingResponse().MakeReadOnly();
    private static readonly string[] _cCCheckIsPlayingResponseFieldNames = new string[] { "game_status", "result" };
    private static readonly uint[] _cCCheckIsPlayingResponseFieldTags = new uint[] { 18, 8 };
    public static CCCheckIsPlayingResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCCheckIsPlayingResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCCheckIsPlayingResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int GameStatusFieldNumber = 2;
    private bool hasGameStatus;
    private global::com.golf.proto.CCGameStatus gameStatus_;
    public bool HasGameStatus {
      get { return hasGameStatus; }
    }
    public global::com.golf.proto.CCGameStatus GameStatus {
      get { return gameStatus_ ?? global::com.golf.proto.CCGameStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCCheckIsPlayingResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasGameStatus) {
        output.WriteMessage(2, field_names[0], GameStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasGameStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, GameStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasGameStatus) hash ^= gameStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCCheckIsPlayingResponse other = obj as CCCheckIsPlayingResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasGameStatus != other.hasGameStatus || (hasGameStatus && !gameStatus_.Equals(other.gameStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("game_status", hasGameStatus, gameStatus_, writer);
    }
    #endregion
    
    public static CCCheckIsPlayingResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCCheckIsPlayingResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCCheckIsPlayingResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCCheckIsPlayingResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCCheckIsPlayingResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCCheckIsPlayingResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCCheckIsPlayingResponse result;
      
      private CCCheckIsPlayingResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCCheckIsPlayingResponse original = result;
          result = new CCCheckIsPlayingResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCCheckIsPlayingResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCCheckIsPlayingResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCCheckIsPlayingResponse.DefaultInstance; }
      }
      
      public override CCCheckIsPlayingResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCCheckIsPlayingResponse) {
          return MergeFrom((CCCheckIsPlayingResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCCheckIsPlayingResponse other) {
        if (other == global::com.golf.proto.CCCheckIsPlayingResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasGameStatus) {
          MergeGameStatus(other.GameStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCCheckIsPlayingResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCCheckIsPlayingResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCGameStatus.Builder subBuilder = global::com.golf.proto.CCGameStatus.CreateBuilder();
              if (result.hasGameStatus) {
                subBuilder.MergeFrom(GameStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasGameStatus {
       get { return result.hasGameStatus; }
      }
      public global::com.golf.proto.CCGameStatus GameStatus {
        get { return result.GameStatus; }
        set { SetGameStatus(value); }
      }
      public Builder SetGameStatus(global::com.golf.proto.CCGameStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameStatus = true;
        result.gameStatus_ = value;
        return this;
      }
      public Builder SetGameStatus(global::com.golf.proto.CCGameStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameStatus = true;
        result.gameStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameStatus(global::com.golf.proto.CCGameStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameStatus &&
            result.gameStatus_ != global::com.golf.proto.CCGameStatus.DefaultInstance) {
            result.gameStatus_ = global::com.golf.proto.CCGameStatus.CreateBuilder(result.gameStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.gameStatus_ = value;
        }
        result.hasGameStatus = true;
        return this;
      }
      public Builder ClearGameStatus() {
        PrepareBuilder();
        result.hasGameStatus = false;
        result.gameStatus_ = null;
        return this;
      }
    }
    static CCCheckIsPlayingResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGameStatus : pb::GeneratedMessageLite<CCGameStatus, CCGameStatus.Builder> {
    private CCGameStatus() { }
    private static readonly CCGameStatus defaultInstance = new CCGameStatus().MakeReadOnly();
    private static readonly string[] _cCGameStatusFieldNames = new string[] { "entry_fees", "game_result_status", "operate_status", "room_status", "state", "vs_mode_id" };
    private static readonly uint[] _cCGameStatusFieldTags = new uint[] { 26, 42, 50, 34, 8, 16 };
    public static CCGameStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGameStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGameStatus ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int VsModeIdFieldNumber = 2;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public const int EntryFeesFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCItem> entryFees_ = new pbc::PopsicleList<global::com.golf.proto.CCItem>();
    public scg::IList<global::com.golf.proto.CCItem> EntryFeesList {
      get { return entryFees_; }
    }
    public int EntryFeesCount {
      get { return entryFees_.Count; }
    }
    public global::com.golf.proto.CCItem GetEntryFees(int index) {
      return entryFees_[index];
    }
    
    public const int RoomStatusFieldNumber = 4;
    private bool hasRoomStatus;
    private global::com.golf.proto.CCRoomStatus roomStatus_;
    public bool HasRoomStatus {
      get { return hasRoomStatus; }
    }
    public global::com.golf.proto.CCRoomStatus RoomStatus {
      get { return roomStatus_ ?? global::com.golf.proto.CCRoomStatus.DefaultInstance; }
    }
    
    public const int GameResultStatusFieldNumber = 5;
    private bool hasGameResultStatus;
    private global::com.golf.proto.CCGameResultStatus gameResultStatus_;
    public bool HasGameResultStatus {
      get { return hasGameResultStatus; }
    }
    public global::com.golf.proto.CCGameResultStatus GameResultStatus {
      get { return gameResultStatus_ ?? global::com.golf.proto.CCGameResultStatus.DefaultInstance; }
    }
    
    public const int OperateStatusFieldNumber = 6;
    private bool hasOperateStatus;
    private global::com.golf.proto.CCOperateStatus operateStatus_;
    public bool HasOperateStatus {
      get { return hasOperateStatus; }
    }
    public global::com.golf.proto.CCOperateStatus OperateStatus {
      get { return operateStatus_ ?? global::com.golf.proto.CCOperateStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGameStatusFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[4], State);
      }
      if (hasVsModeId) {
        output.WriteInt32(2, field_names[5], VsModeId);
      }
      if (entryFees_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], entryFees_);
      }
      if (hasRoomStatus) {
        output.WriteMessage(4, field_names[3], RoomStatus);
      }
      if (hasGameResultStatus) {
        output.WriteMessage(5, field_names[1], GameResultStatus);
      }
      if (hasOperateStatus) {
        output.WriteMessage(6, field_names[2], OperateStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, VsModeId);
      }
      foreach (global::com.golf.proto.CCItem element in EntryFeesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasRoomStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, RoomStatus);
      }
      if (hasGameResultStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, GameResultStatus);
      }
      if (hasOperateStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, OperateStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      foreach(global::com.golf.proto.CCItem i in entryFees_)
        hash ^= i.GetHashCode();
      if (hasRoomStatus) hash ^= roomStatus_.GetHashCode();
      if (hasGameResultStatus) hash ^= gameResultStatus_.GetHashCode();
      if (hasOperateStatus) hash ^= operateStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGameStatus other = obj as CCGameStatus;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      if(entryFees_.Count != other.entryFees_.Count) return false;
      for(int ix=0; ix < entryFees_.Count; ix++)
        if(!entryFees_[ix].Equals(other.entryFees_[ix])) return false;
      if (hasRoomStatus != other.hasRoomStatus || (hasRoomStatus && !roomStatus_.Equals(other.roomStatus_))) return false;
      if (hasGameResultStatus != other.hasGameResultStatus || (hasGameResultStatus && !gameResultStatus_.Equals(other.gameResultStatus_))) return false;
      if (hasOperateStatus != other.hasOperateStatus || (hasOperateStatus && !operateStatus_.Equals(other.operateStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
      PrintField("entry_fees", entryFees_, writer);
      PrintField("room_status", hasRoomStatus, roomStatus_, writer);
      PrintField("game_result_status", hasGameResultStatus, gameResultStatus_, writer);
      PrintField("operate_status", hasOperateStatus, operateStatus_, writer);
    }
    #endregion
    
    public static CCGameStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGameStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGameStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGameStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGameStatus MakeReadOnly() {
      entryFees_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGameStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGameStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGameStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGameStatus result;
      
      private CCGameStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGameStatus original = result;
          result = new CCGameStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGameStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGameStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCGameStatus.DefaultInstance; }
      }
      
      public override CCGameStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGameStatus) {
          return MergeFrom((CCGameStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGameStatus other) {
        if (other == global::com.golf.proto.CCGameStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        if (other.entryFees_.Count != 0) {
          result.entryFees_.Add(other.entryFees_);
        }
        if (other.HasRoomStatus) {
          MergeRoomStatus(other.RoomStatus);
        }
        if (other.HasGameResultStatus) {
          MergeGameResultStatus(other.GameResultStatus);
        }
        if (other.HasOperateStatus) {
          MergeOperateStatus(other.OperateStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGameStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGameStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 16: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.entryFees_, global::com.golf.proto.CCItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              global::com.golf.proto.CCRoomStatus.Builder subBuilder = global::com.golf.proto.CCRoomStatus.CreateBuilder();
              if (result.hasRoomStatus) {
                subBuilder.MergeFrom(RoomStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RoomStatus = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::com.golf.proto.CCGameResultStatus.Builder subBuilder = global::com.golf.proto.CCGameResultStatus.CreateBuilder();
              if (result.hasGameResultStatus) {
                subBuilder.MergeFrom(GameResultStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameResultStatus = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::com.golf.proto.CCOperateStatus.Builder subBuilder = global::com.golf.proto.CCOperateStatus.CreateBuilder();
              if (result.hasOperateStatus) {
                subBuilder.MergeFrom(OperateStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OperateStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCItem> EntryFeesList {
        get { return PrepareBuilder().entryFees_; }
      }
      public int EntryFeesCount {
        get { return result.EntryFeesCount; }
      }
      public global::com.golf.proto.CCItem GetEntryFees(int index) {
        return result.GetEntryFees(index);
      }
      public Builder SetEntryFees(int index, global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entryFees_[index] = value;
        return this;
      }
      public Builder SetEntryFees(int index, global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entryFees_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntryFees(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entryFees_.Add(value);
        return this;
      }
      public Builder AddEntryFees(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entryFees_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntryFees(scg::IEnumerable<global::com.golf.proto.CCItem> values) {
        PrepareBuilder();
        result.entryFees_.Add(values);
        return this;
      }
      public Builder ClearEntryFees() {
        PrepareBuilder();
        result.entryFees_.Clear();
        return this;
      }
      
      public bool HasRoomStatus {
       get { return result.hasRoomStatus; }
      }
      public global::com.golf.proto.CCRoomStatus RoomStatus {
        get { return result.RoomStatus; }
        set { SetRoomStatus(value); }
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = value;
        return this;
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRoomStatus &&
            result.roomStatus_ != global::com.golf.proto.CCRoomStatus.DefaultInstance) {
            result.roomStatus_ = global::com.golf.proto.CCRoomStatus.CreateBuilder(result.roomStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.roomStatus_ = value;
        }
        result.hasRoomStatus = true;
        return this;
      }
      public Builder ClearRoomStatus() {
        PrepareBuilder();
        result.hasRoomStatus = false;
        result.roomStatus_ = null;
        return this;
      }
      
      public bool HasGameResultStatus {
       get { return result.hasGameResultStatus; }
      }
      public global::com.golf.proto.CCGameResultStatus GameResultStatus {
        get { return result.GameResultStatus; }
        set { SetGameResultStatus(value); }
      }
      public Builder SetGameResultStatus(global::com.golf.proto.CCGameResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameResultStatus = true;
        result.gameResultStatus_ = value;
        return this;
      }
      public Builder SetGameResultStatus(global::com.golf.proto.CCGameResultStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameResultStatus = true;
        result.gameResultStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameResultStatus(global::com.golf.proto.CCGameResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameResultStatus &&
            result.gameResultStatus_ != global::com.golf.proto.CCGameResultStatus.DefaultInstance) {
            result.gameResultStatus_ = global::com.golf.proto.CCGameResultStatus.CreateBuilder(result.gameResultStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.gameResultStatus_ = value;
        }
        result.hasGameResultStatus = true;
        return this;
      }
      public Builder ClearGameResultStatus() {
        PrepareBuilder();
        result.hasGameResultStatus = false;
        result.gameResultStatus_ = null;
        return this;
      }
      
      public bool HasOperateStatus {
       get { return result.hasOperateStatus; }
      }
      public global::com.golf.proto.CCOperateStatus OperateStatus {
        get { return result.OperateStatus; }
        set { SetOperateStatus(value); }
      }
      public Builder SetOperateStatus(global::com.golf.proto.CCOperateStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOperateStatus = true;
        result.operateStatus_ = value;
        return this;
      }
      public Builder SetOperateStatus(global::com.golf.proto.CCOperateStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOperateStatus = true;
        result.operateStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOperateStatus(global::com.golf.proto.CCOperateStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOperateStatus &&
            result.operateStatus_ != global::com.golf.proto.CCOperateStatus.DefaultInstance) {
            result.operateStatus_ = global::com.golf.proto.CCOperateStatus.CreateBuilder(result.operateStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.operateStatus_ = value;
        }
        result.hasOperateStatus = true;
        return this;
      }
      public Builder ClearOperateStatus() {
        PrepareBuilder();
        result.hasOperateStatus = false;
        result.operateStatus_ = null;
        return this;
      }
    }
    static CCGameStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGameResultStatus : pb::GeneratedMessageLite<CCGameResultStatus, CCGameResultStatus.Builder> {
    private CCGameResultStatus() { }
    private static readonly CCGameResultStatus defaultInstance = new CCGameResultStatus().MakeReadOnly();
    private static readonly string[] _cCGameResultStatusFieldNames = new string[] { "is_client_shown", "reason", "reward_items", "state" };
    private static readonly uint[] _cCGameResultStatusFieldTags = new uint[] { 32, 24, 18, 8 };
    public static CCGameResultStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGameResultStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGameResultStatus ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int RewardItemsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> rewardItems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RewardItemsList {
      get { return rewardItems_; }
    }
    public int RewardItemsCount {
      get { return rewardItems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRewardItems(int index) {
      return rewardItems_[index];
    }
    
    public const int ReasonFieldNumber = 3;
    private bool hasReason;
    private int reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public int Reason {
      get { return reason_; }
    }
    
    public const int IsClientShownFieldNumber = 4;
    private bool hasIsClientShown;
    private bool isClientShown_;
    public bool HasIsClientShown {
      get { return hasIsClientShown; }
    }
    public bool IsClientShown {
      get { return isClientShown_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGameResultStatusFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[3], State);
      }
      if (rewardItems_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], rewardItems_);
      }
      if (hasReason) {
        output.WriteInt32(3, field_names[1], Reason);
      }
      if (hasIsClientShown) {
        output.WriteBool(4, field_names[0], IsClientShown);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RewardItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Reason);
      }
      if (hasIsClientShown) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, IsClientShown);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in rewardItems_)
        hash ^= i.GetHashCode();
      if (hasReason) hash ^= reason_.GetHashCode();
      if (hasIsClientShown) hash ^= isClientShown_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGameResultStatus other = obj as CCGameResultStatus;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if(rewardItems_.Count != other.rewardItems_.Count) return false;
      for(int ix=0; ix < rewardItems_.Count; ix++)
        if(!rewardItems_[ix].Equals(other.rewardItems_[ix])) return false;
      if (hasReason != other.hasReason || (hasReason && !reason_.Equals(other.reason_))) return false;
      if (hasIsClientShown != other.hasIsClientShown || (hasIsClientShown && !isClientShown_.Equals(other.isClientShown_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("reward_items", rewardItems_, writer);
      PrintField("reason", hasReason, reason_, writer);
      PrintField("is_client_shown", hasIsClientShown, isClientShown_, writer);
    }
    #endregion
    
    public static CCGameResultStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameResultStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameResultStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameResultStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGameResultStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGameResultStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameResultStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGameResultStatus MakeReadOnly() {
      rewardItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGameResultStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGameResultStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGameResultStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGameResultStatus result;
      
      private CCGameResultStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGameResultStatus original = result;
          result = new CCGameResultStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGameResultStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGameResultStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCGameResultStatus.DefaultInstance; }
      }
      
      public override CCGameResultStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGameResultStatus) {
          return MergeFrom((CCGameResultStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGameResultStatus other) {
        if (other == global::com.golf.proto.CCGameResultStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.rewardItems_.Count != 0) {
          result.rewardItems_.Add(other.rewardItems_);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasIsClientShown) {
          IsClientShown = other.IsClientShown;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGameResultStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGameResultStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.rewardItems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasReason = input.ReadInt32(ref result.reason_);
              break;
            }
            case 32: {
              result.hasIsClientShown = input.ReadBool(ref result.isClientShown_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RewardItemsList {
        get { return PrepareBuilder().rewardItems_; }
      }
      public int RewardItemsCount {
        get { return result.RewardItemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRewardItems(int index) {
        return result.GetRewardItems(index);
      }
      public Builder SetRewardItems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rewardItems_[index] = value;
        return this;
      }
      public Builder SetRewardItems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rewardItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRewardItems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rewardItems_.Add(value);
        return this;
      }
      public Builder AddRewardItems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rewardItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRewardItems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.rewardItems_.Add(values);
        return this;
      }
      public Builder ClearRewardItems() {
        PrepareBuilder();
        result.rewardItems_.Clear();
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public int Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(int value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasIsClientShown {
        get { return result.hasIsClientShown; }
      }
      public bool IsClientShown {
        get { return result.IsClientShown; }
        set { SetIsClientShown(value); }
      }
      public Builder SetIsClientShown(bool value) {
        PrepareBuilder();
        result.hasIsClientShown = true;
        result.isClientShown_ = value;
        return this;
      }
      public Builder ClearIsClientShown() {
        PrepareBuilder();
        result.hasIsClientShown = false;
        result.isClientShown_ = false;
        return this;
      }
    }
    static CCGameResultStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPayBackStatus : pb::GeneratedMessageLite<CCPayBackStatus, CCPayBackStatus.Builder> {
    private CCPayBackStatus() { }
    private static readonly CCPayBackStatus defaultInstance = new CCPayBackStatus().MakeReadOnly();
    private static readonly string[] _cCPayBackStatusFieldNames = new string[] { "entry_fees", "pay_backed", "state" };
    private static readonly uint[] _cCPayBackStatusFieldTags = new uint[] { 18, 24, 8 };
    public static CCPayBackStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPayBackStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPayBackStatus ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int EntryFeesFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCItem> entryFees_ = new pbc::PopsicleList<global::com.golf.proto.CCItem>();
    public scg::IList<global::com.golf.proto.CCItem> EntryFeesList {
      get { return entryFees_; }
    }
    public int EntryFeesCount {
      get { return entryFees_.Count; }
    }
    public global::com.golf.proto.CCItem GetEntryFees(int index) {
      return entryFees_[index];
    }
    
    public const int PayBackedFieldNumber = 3;
    private bool hasPayBacked;
    private bool payBacked_;
    public bool HasPayBacked {
      get { return hasPayBacked; }
    }
    public bool PayBacked {
      get { return payBacked_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPayBackStatusFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[2], State);
      }
      if (entryFees_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], entryFees_);
      }
      if (hasPayBacked) {
        output.WriteBool(3, field_names[1], PayBacked);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      foreach (global::com.golf.proto.CCItem element in EntryFeesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasPayBacked) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, PayBacked);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      foreach(global::com.golf.proto.CCItem i in entryFees_)
        hash ^= i.GetHashCode();
      if (hasPayBacked) hash ^= payBacked_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPayBackStatus other = obj as CCPayBackStatus;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if(entryFees_.Count != other.entryFees_.Count) return false;
      for(int ix=0; ix < entryFees_.Count; ix++)
        if(!entryFees_[ix].Equals(other.entryFees_[ix])) return false;
      if (hasPayBacked != other.hasPayBacked || (hasPayBacked && !payBacked_.Equals(other.payBacked_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("entry_fees", entryFees_, writer);
      PrintField("pay_backed", hasPayBacked, payBacked_, writer);
    }
    #endregion
    
    public static CCPayBackStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPayBackStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPayBackStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPayBackStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPayBackStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPayBackStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPayBackStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPayBackStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPayBackStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPayBackStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPayBackStatus MakeReadOnly() {
      entryFees_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPayBackStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPayBackStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPayBackStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPayBackStatus result;
      
      private CCPayBackStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPayBackStatus original = result;
          result = new CCPayBackStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPayBackStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPayBackStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCPayBackStatus.DefaultInstance; }
      }
      
      public override CCPayBackStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPayBackStatus) {
          return MergeFrom((CCPayBackStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPayBackStatus other) {
        if (other == global::com.golf.proto.CCPayBackStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.entryFees_.Count != 0) {
          result.entryFees_.Add(other.entryFees_);
        }
        if (other.HasPayBacked) {
          PayBacked = other.PayBacked;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPayBackStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPayBackStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.entryFees_, global::com.golf.proto.CCItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasPayBacked = input.ReadBool(ref result.payBacked_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCItem> EntryFeesList {
        get { return PrepareBuilder().entryFees_; }
      }
      public int EntryFeesCount {
        get { return result.EntryFeesCount; }
      }
      public global::com.golf.proto.CCItem GetEntryFees(int index) {
        return result.GetEntryFees(index);
      }
      public Builder SetEntryFees(int index, global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entryFees_[index] = value;
        return this;
      }
      public Builder SetEntryFees(int index, global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entryFees_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntryFees(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entryFees_.Add(value);
        return this;
      }
      public Builder AddEntryFees(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entryFees_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntryFees(scg::IEnumerable<global::com.golf.proto.CCItem> values) {
        PrepareBuilder();
        result.entryFees_.Add(values);
        return this;
      }
      public Builder ClearEntryFees() {
        PrepareBuilder();
        result.entryFees_.Clear();
        return this;
      }
      
      public bool HasPayBacked {
        get { return result.hasPayBacked; }
      }
      public bool PayBacked {
        get { return result.PayBacked; }
        set { SetPayBacked(value); }
      }
      public Builder SetPayBacked(bool value) {
        PrepareBuilder();
        result.hasPayBacked = true;
        result.payBacked_ = value;
        return this;
      }
      public Builder ClearPayBacked() {
        PrepareBuilder();
        result.hasPayBacked = false;
        result.payBacked_ = false;
        return this;
      }
    }
    static CCPayBackStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRoomStatus : pb::GeneratedMessageLite<CCRoomStatus, CCRoomStatus.Builder> {
    private CCRoomStatus() { }
    private static readonly CCRoomStatus defaultInstance = new CCRoomStatus().MakeReadOnly();
    private static readonly string[] _cCRoomStatusFieldNames = new string[] { "comb_contest_id", "ex_sskin_ids", "extra_game_cnt", "game_cancle_end_time", "init_turn", "last_op_trans_id", "last_winer", "normal_round_cnt", "p1_data", "p2_data", "robot_op_valid", "round_end_time", "round_op_end_time", "round_start_time", "rr_incfmt_cnt", "running_state", "sskin_id", "strick_status", "turn", "vs_exlevel_ids", "vs_level_id", "vs_mode_id", "wind", "with_robot" };
    private static readonly uint[] _cCRoomStatusFieldTags = new uint[] { 186, 200, 56, 216, 64, 208, 48, 168, 10, 18, 176, 32, 136, 128, 160, 40, 192, 154, 24, 88, 80, 72, 98, 144 };
    public static CCRoomStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRoomStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRoomStatus ThisMessage {
      get { return this; }
    }
    
    public const int P1DataFieldNumber = 1;
    private bool hasP1Data;
    private global::com.golf.proto.CCRoomUserData p1Data_;
    public bool HasP1Data {
      get { return hasP1Data; }
    }
    public global::com.golf.proto.CCRoomUserData P1Data {
      get { return p1Data_ ?? global::com.golf.proto.CCRoomUserData.DefaultInstance; }
    }
    
    public const int P2DataFieldNumber = 2;
    private bool hasP2Data;
    private global::com.golf.proto.CCRoomUserData p2Data_;
    public bool HasP2Data {
      get { return hasP2Data; }
    }
    public global::com.golf.proto.CCRoomUserData P2Data {
      get { return p2Data_ ?? global::com.golf.proto.CCRoomUserData.DefaultInstance; }
    }
    
    public const int TurnFieldNumber = 3;
    private bool hasTurn;
    private int turn_;
    public bool HasTurn {
      get { return hasTurn; }
    }
    public int Turn {
      get { return turn_; }
    }
    
    public const int RoundEndTimeFieldNumber = 4;
    private bool hasRoundEndTime;
    private long roundEndTime_;
    public bool HasRoundEndTime {
      get { return hasRoundEndTime; }
    }
    public long RoundEndTime {
      get { return roundEndTime_; }
    }
    
    public const int RunningStateFieldNumber = 5;
    private bool hasRunningState;
    private int runningState_;
    public bool HasRunningState {
      get { return hasRunningState; }
    }
    public int RunningState {
      get { return runningState_; }
    }
    
    public const int LastWinerFieldNumber = 6;
    private bool hasLastWiner;
    private int lastWiner_;
    public bool HasLastWiner {
      get { return hasLastWiner; }
    }
    public int LastWiner {
      get { return lastWiner_; }
    }
    
    public const int ExtraGameCntFieldNumber = 7;
    private bool hasExtraGameCnt;
    private int extraGameCnt_;
    public bool HasExtraGameCnt {
      get { return hasExtraGameCnt; }
    }
    public int ExtraGameCnt {
      get { return extraGameCnt_; }
    }
    
    public const int InitTurnFieldNumber = 8;
    private bool hasInitTurn;
    private int initTurn_;
    public bool HasInitTurn {
      get { return hasInitTurn; }
    }
    public int InitTurn {
      get { return initTurn_; }
    }
    
    public const int VsModeIdFieldNumber = 9;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public const int VsLevelIdFieldNumber = 10;
    private bool hasVsLevelId;
    private int vsLevelId_;
    public bool HasVsLevelId {
      get { return hasVsLevelId; }
    }
    public int VsLevelId {
      get { return vsLevelId_; }
    }
    
    public const int VsExlevelIdsFieldNumber = 11;
    private pbc::PopsicleList<int> vsExlevelIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> VsExlevelIdsList {
      get { return pbc::Lists.AsReadOnly(vsExlevelIds_); }
    }
    public int VsExlevelIdsCount {
      get { return vsExlevelIds_.Count; }
    }
    public int GetVsExlevelIds(int index) {
      return vsExlevelIds_[index];
    }
    
    public const int WindFieldNumber = 12;
    private bool hasWind;
    private global::com.golf.proto.CCVec3FloatToLong wind_;
    public bool HasWind {
      get { return hasWind; }
    }
    public global::com.golf.proto.CCVec3FloatToLong Wind {
      get { return wind_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int RoundStartTimeFieldNumber = 16;
    private bool hasRoundStartTime;
    private long roundStartTime_;
    public bool HasRoundStartTime {
      get { return hasRoundStartTime; }
    }
    public long RoundStartTime {
      get { return roundStartTime_; }
    }
    
    public const int RoundOpEndTimeFieldNumber = 17;
    private bool hasRoundOpEndTime;
    private long roundOpEndTime_;
    public bool HasRoundOpEndTime {
      get { return hasRoundOpEndTime; }
    }
    public long RoundOpEndTime {
      get { return roundOpEndTime_; }
    }
    
    public const int WithRobotFieldNumber = 18;
    private bool hasWithRobot;
    private bool withRobot_;
    public bool HasWithRobot {
      get { return hasWithRobot; }
    }
    public bool WithRobot {
      get { return withRobot_; }
    }
    
    public const int StrickStatusFieldNumber = 19;
    private bool hasStrickStatus;
    private global::com.golf.proto.CCStrickStatus strickStatus_;
    public bool HasStrickStatus {
      get { return hasStrickStatus; }
    }
    public global::com.golf.proto.CCStrickStatus StrickStatus {
      get { return strickStatus_ ?? global::com.golf.proto.CCStrickStatus.DefaultInstance; }
    }
    
    public const int RrIncfmtCntFieldNumber = 20;
    private bool hasRrIncfmtCnt;
    private int rrIncfmtCnt_;
    public bool HasRrIncfmtCnt {
      get { return hasRrIncfmtCnt; }
    }
    public int RrIncfmtCnt {
      get { return rrIncfmtCnt_; }
    }
    
    public const int NormalRoundCntFieldNumber = 21;
    private bool hasNormalRoundCnt;
    private int normalRoundCnt_;
    public bool HasNormalRoundCnt {
      get { return hasNormalRoundCnt; }
    }
    public int NormalRoundCnt {
      get { return normalRoundCnt_; }
    }
    
    public const int RobotOpValidFieldNumber = 22;
    private bool hasRobotOpValid;
    private bool robotOpValid_;
    public bool HasRobotOpValid {
      get { return hasRobotOpValid; }
    }
    public bool RobotOpValid {
      get { return robotOpValid_; }
    }
    
    public const int CombContestIdFieldNumber = 23;
    private bool hasCombContestId;
    private string combContestId_ = "";
    public bool HasCombContestId {
      get { return hasCombContestId; }
    }
    public string CombContestId {
      get { return combContestId_; }
    }
    
    public const int SskinIdFieldNumber = 24;
    private bool hasSskinId;
    private int sskinId_;
    public bool HasSskinId {
      get { return hasSskinId; }
    }
    public int SskinId {
      get { return sskinId_; }
    }
    
    public const int ExSskinIdsFieldNumber = 25;
    private pbc::PopsicleList<int> exSskinIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ExSskinIdsList {
      get { return pbc::Lists.AsReadOnly(exSskinIds_); }
    }
    public int ExSskinIdsCount {
      get { return exSskinIds_.Count; }
    }
    public int GetExSskinIds(int index) {
      return exSskinIds_[index];
    }
    
    public const int LastOpTransIdFieldNumber = 26;
    private bool hasLastOpTransId;
    private long lastOpTransId_;
    public bool HasLastOpTransId {
      get { return hasLastOpTransId; }
    }
    public long LastOpTransId {
      get { return lastOpTransId_; }
    }
    
    public const int GameCancleEndTimeFieldNumber = 27;
    private bool hasGameCancleEndTime;
    private long gameCancleEndTime_;
    public bool HasGameCancleEndTime {
      get { return hasGameCancleEndTime; }
    }
    public long GameCancleEndTime {
      get { return gameCancleEndTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRoomStatusFieldNames;
      if (hasP1Data) {
        output.WriteMessage(1, field_names[8], P1Data);
      }
      if (hasP2Data) {
        output.WriteMessage(2, field_names[9], P2Data);
      }
      if (hasTurn) {
        output.WriteInt32(3, field_names[18], Turn);
      }
      if (hasRoundEndTime) {
        output.WriteInt64(4, field_names[11], RoundEndTime);
      }
      if (hasRunningState) {
        output.WriteInt32(5, field_names[15], RunningState);
      }
      if (hasLastWiner) {
        output.WriteInt32(6, field_names[6], LastWiner);
      }
      if (hasExtraGameCnt) {
        output.WriteInt32(7, field_names[2], ExtraGameCnt);
      }
      if (hasInitTurn) {
        output.WriteInt32(8, field_names[4], InitTurn);
      }
      if (hasVsModeId) {
        output.WriteInt32(9, field_names[21], VsModeId);
      }
      if (hasVsLevelId) {
        output.WriteInt32(10, field_names[20], VsLevelId);
      }
      if (vsExlevelIds_.Count > 0) {
        output.WriteInt32Array(11, field_names[19], vsExlevelIds_);
      }
      if (hasWind) {
        output.WriteMessage(12, field_names[22], Wind);
      }
      if (hasRoundStartTime) {
        output.WriteInt64(16, field_names[13], RoundStartTime);
      }
      if (hasRoundOpEndTime) {
        output.WriteInt64(17, field_names[12], RoundOpEndTime);
      }
      if (hasWithRobot) {
        output.WriteBool(18, field_names[23], WithRobot);
      }
      if (hasStrickStatus) {
        output.WriteMessage(19, field_names[17], StrickStatus);
      }
      if (hasRrIncfmtCnt) {
        output.WriteInt32(20, field_names[14], RrIncfmtCnt);
      }
      if (hasNormalRoundCnt) {
        output.WriteInt32(21, field_names[7], NormalRoundCnt);
      }
      if (hasRobotOpValid) {
        output.WriteBool(22, field_names[10], RobotOpValid);
      }
      if (hasCombContestId) {
        output.WriteString(23, field_names[0], CombContestId);
      }
      if (hasSskinId) {
        output.WriteInt32(24, field_names[16], SskinId);
      }
      if (exSskinIds_.Count > 0) {
        output.WriteInt32Array(25, field_names[1], exSskinIds_);
      }
      if (hasLastOpTransId) {
        output.WriteInt64(26, field_names[5], LastOpTransId);
      }
      if (hasGameCancleEndTime) {
        output.WriteInt64(27, field_names[3], GameCancleEndTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasP1Data) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, P1Data);
      }
      if (hasP2Data) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, P2Data);
      }
      if (hasTurn) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Turn);
      }
      if (hasRoundEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, RoundEndTime);
      }
      if (hasRunningState) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, RunningState);
      }
      if (hasLastWiner) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, LastWiner);
      }
      if (hasExtraGameCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, ExtraGameCnt);
      }
      if (hasInitTurn) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, InitTurn);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, VsModeId);
      }
      if (hasVsLevelId) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, VsLevelId);
      }
      {
        int dataSize = 0;
        foreach (int element in VsExlevelIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * vsExlevelIds_.Count;
      }
      if (hasWind) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, Wind);
      }
      if (hasRoundStartTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(16, RoundStartTime);
      }
      if (hasRoundOpEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(17, RoundOpEndTime);
      }
      if (hasWithRobot) {
        size += pb::CodedOutputStream.ComputeBoolSize(18, WithRobot);
      }
      if (hasStrickStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(19, StrickStatus);
      }
      if (hasRrIncfmtCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, RrIncfmtCnt);
      }
      if (hasNormalRoundCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(21, NormalRoundCnt);
      }
      if (hasRobotOpValid) {
        size += pb::CodedOutputStream.ComputeBoolSize(22, RobotOpValid);
      }
      if (hasCombContestId) {
        size += pb::CodedOutputStream.ComputeStringSize(23, CombContestId);
      }
      if (hasSskinId) {
        size += pb::CodedOutputStream.ComputeInt32Size(24, SskinId);
      }
      {
        int dataSize = 0;
        foreach (int element in ExSskinIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * exSskinIds_.Count;
      }
      if (hasLastOpTransId) {
        size += pb::CodedOutputStream.ComputeInt64Size(26, LastOpTransId);
      }
      if (hasGameCancleEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(27, GameCancleEndTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasP1Data) hash ^= p1Data_.GetHashCode();
      if (hasP2Data) hash ^= p2Data_.GetHashCode();
      if (hasTurn) hash ^= turn_.GetHashCode();
      if (hasRoundEndTime) hash ^= roundEndTime_.GetHashCode();
      if (hasRunningState) hash ^= runningState_.GetHashCode();
      if (hasLastWiner) hash ^= lastWiner_.GetHashCode();
      if (hasExtraGameCnt) hash ^= extraGameCnt_.GetHashCode();
      if (hasInitTurn) hash ^= initTurn_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      if (hasVsLevelId) hash ^= vsLevelId_.GetHashCode();
      foreach(int i in vsExlevelIds_)
        hash ^= i.GetHashCode();
      if (hasWind) hash ^= wind_.GetHashCode();
      if (hasRoundStartTime) hash ^= roundStartTime_.GetHashCode();
      if (hasRoundOpEndTime) hash ^= roundOpEndTime_.GetHashCode();
      if (hasWithRobot) hash ^= withRobot_.GetHashCode();
      if (hasStrickStatus) hash ^= strickStatus_.GetHashCode();
      if (hasRrIncfmtCnt) hash ^= rrIncfmtCnt_.GetHashCode();
      if (hasNormalRoundCnt) hash ^= normalRoundCnt_.GetHashCode();
      if (hasRobotOpValid) hash ^= robotOpValid_.GetHashCode();
      if (hasCombContestId) hash ^= combContestId_.GetHashCode();
      if (hasSskinId) hash ^= sskinId_.GetHashCode();
      foreach(int i in exSskinIds_)
        hash ^= i.GetHashCode();
      if (hasLastOpTransId) hash ^= lastOpTransId_.GetHashCode();
      if (hasGameCancleEndTime) hash ^= gameCancleEndTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRoomStatus other = obj as CCRoomStatus;
      if (other == null) return false;
      if (hasP1Data != other.hasP1Data || (hasP1Data && !p1Data_.Equals(other.p1Data_))) return false;
      if (hasP2Data != other.hasP2Data || (hasP2Data && !p2Data_.Equals(other.p2Data_))) return false;
      if (hasTurn != other.hasTurn || (hasTurn && !turn_.Equals(other.turn_))) return false;
      if (hasRoundEndTime != other.hasRoundEndTime || (hasRoundEndTime && !roundEndTime_.Equals(other.roundEndTime_))) return false;
      if (hasRunningState != other.hasRunningState || (hasRunningState && !runningState_.Equals(other.runningState_))) return false;
      if (hasLastWiner != other.hasLastWiner || (hasLastWiner && !lastWiner_.Equals(other.lastWiner_))) return false;
      if (hasExtraGameCnt != other.hasExtraGameCnt || (hasExtraGameCnt && !extraGameCnt_.Equals(other.extraGameCnt_))) return false;
      if (hasInitTurn != other.hasInitTurn || (hasInitTurn && !initTurn_.Equals(other.initTurn_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      if (hasVsLevelId != other.hasVsLevelId || (hasVsLevelId && !vsLevelId_.Equals(other.vsLevelId_))) return false;
      if(vsExlevelIds_.Count != other.vsExlevelIds_.Count) return false;
      for(int ix=0; ix < vsExlevelIds_.Count; ix++)
        if(!vsExlevelIds_[ix].Equals(other.vsExlevelIds_[ix])) return false;
      if (hasWind != other.hasWind || (hasWind && !wind_.Equals(other.wind_))) return false;
      if (hasRoundStartTime != other.hasRoundStartTime || (hasRoundStartTime && !roundStartTime_.Equals(other.roundStartTime_))) return false;
      if (hasRoundOpEndTime != other.hasRoundOpEndTime || (hasRoundOpEndTime && !roundOpEndTime_.Equals(other.roundOpEndTime_))) return false;
      if (hasWithRobot != other.hasWithRobot || (hasWithRobot && !withRobot_.Equals(other.withRobot_))) return false;
      if (hasStrickStatus != other.hasStrickStatus || (hasStrickStatus && !strickStatus_.Equals(other.strickStatus_))) return false;
      if (hasRrIncfmtCnt != other.hasRrIncfmtCnt || (hasRrIncfmtCnt && !rrIncfmtCnt_.Equals(other.rrIncfmtCnt_))) return false;
      if (hasNormalRoundCnt != other.hasNormalRoundCnt || (hasNormalRoundCnt && !normalRoundCnt_.Equals(other.normalRoundCnt_))) return false;
      if (hasRobotOpValid != other.hasRobotOpValid || (hasRobotOpValid && !robotOpValid_.Equals(other.robotOpValid_))) return false;
      if (hasCombContestId != other.hasCombContestId || (hasCombContestId && !combContestId_.Equals(other.combContestId_))) return false;
      if (hasSskinId != other.hasSskinId || (hasSskinId && !sskinId_.Equals(other.sskinId_))) return false;
      if(exSskinIds_.Count != other.exSskinIds_.Count) return false;
      for(int ix=0; ix < exSskinIds_.Count; ix++)
        if(!exSskinIds_[ix].Equals(other.exSskinIds_[ix])) return false;
      if (hasLastOpTransId != other.hasLastOpTransId || (hasLastOpTransId && !lastOpTransId_.Equals(other.lastOpTransId_))) return false;
      if (hasGameCancleEndTime != other.hasGameCancleEndTime || (hasGameCancleEndTime && !gameCancleEndTime_.Equals(other.gameCancleEndTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("p1_data", hasP1Data, p1Data_, writer);
      PrintField("p2_data", hasP2Data, p2Data_, writer);
      PrintField("turn", hasTurn, turn_, writer);
      PrintField("round_end_time", hasRoundEndTime, roundEndTime_, writer);
      PrintField("running_state", hasRunningState, runningState_, writer);
      PrintField("last_winer", hasLastWiner, lastWiner_, writer);
      PrintField("extra_game_cnt", hasExtraGameCnt, extraGameCnt_, writer);
      PrintField("init_turn", hasInitTurn, initTurn_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
      PrintField("vs_level_id", hasVsLevelId, vsLevelId_, writer);
      PrintField("vs_exlevel_ids", vsExlevelIds_, writer);
      PrintField("wind", hasWind, wind_, writer);
      PrintField("round_start_time", hasRoundStartTime, roundStartTime_, writer);
      PrintField("round_op_end_time", hasRoundOpEndTime, roundOpEndTime_, writer);
      PrintField("with_robot", hasWithRobot, withRobot_, writer);
      PrintField("strick_status", hasStrickStatus, strickStatus_, writer);
      PrintField("rr_incfmt_cnt", hasRrIncfmtCnt, rrIncfmtCnt_, writer);
      PrintField("normal_round_cnt", hasNormalRoundCnt, normalRoundCnt_, writer);
      PrintField("robot_op_valid", hasRobotOpValid, robotOpValid_, writer);
      PrintField("comb_contest_id", hasCombContestId, combContestId_, writer);
      PrintField("sskin_id", hasSskinId, sskinId_, writer);
      PrintField("ex_sskin_ids", exSskinIds_, writer);
      PrintField("last_op_trans_id", hasLastOpTransId, lastOpTransId_, writer);
      PrintField("game_cancle_end_time", hasGameCancleEndTime, gameCancleEndTime_, writer);
    }
    #endregion
    
    public static CCRoomStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoomStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoomStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoomStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoomStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoomStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRoomStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRoomStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRoomStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoomStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRoomStatus MakeReadOnly() {
      vsExlevelIds_.MakeReadOnly();
      exSskinIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRoomStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRoomStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRoomStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRoomStatus result;
      
      private CCRoomStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRoomStatus original = result;
          result = new CCRoomStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRoomStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRoomStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCRoomStatus.DefaultInstance; }
      }
      
      public override CCRoomStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRoomStatus) {
          return MergeFrom((CCRoomStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRoomStatus other) {
        if (other == global::com.golf.proto.CCRoomStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasP1Data) {
          MergeP1Data(other.P1Data);
        }
        if (other.HasP2Data) {
          MergeP2Data(other.P2Data);
        }
        if (other.HasTurn) {
          Turn = other.Turn;
        }
        if (other.HasRoundEndTime) {
          RoundEndTime = other.RoundEndTime;
        }
        if (other.HasRunningState) {
          RunningState = other.RunningState;
        }
        if (other.HasLastWiner) {
          LastWiner = other.LastWiner;
        }
        if (other.HasExtraGameCnt) {
          ExtraGameCnt = other.ExtraGameCnt;
        }
        if (other.HasInitTurn) {
          InitTurn = other.InitTurn;
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        if (other.HasVsLevelId) {
          VsLevelId = other.VsLevelId;
        }
        if (other.vsExlevelIds_.Count != 0) {
          result.vsExlevelIds_.Add(other.vsExlevelIds_);
        }
        if (other.HasWind) {
          MergeWind(other.Wind);
        }
        if (other.HasRoundStartTime) {
          RoundStartTime = other.RoundStartTime;
        }
        if (other.HasRoundOpEndTime) {
          RoundOpEndTime = other.RoundOpEndTime;
        }
        if (other.HasWithRobot) {
          WithRobot = other.WithRobot;
        }
        if (other.HasStrickStatus) {
          MergeStrickStatus(other.StrickStatus);
        }
        if (other.HasRrIncfmtCnt) {
          RrIncfmtCnt = other.RrIncfmtCnt;
        }
        if (other.HasNormalRoundCnt) {
          NormalRoundCnt = other.NormalRoundCnt;
        }
        if (other.HasRobotOpValid) {
          RobotOpValid = other.RobotOpValid;
        }
        if (other.HasCombContestId) {
          CombContestId = other.CombContestId;
        }
        if (other.HasSskinId) {
          SskinId = other.SskinId;
        }
        if (other.exSskinIds_.Count != 0) {
          result.exSskinIds_.Add(other.exSskinIds_);
        }
        if (other.HasLastOpTransId) {
          LastOpTransId = other.LastOpTransId;
        }
        if (other.HasGameCancleEndTime) {
          GameCancleEndTime = other.GameCancleEndTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRoomStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRoomStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCRoomUserData.Builder subBuilder = global::com.golf.proto.CCRoomUserData.CreateBuilder();
              if (result.hasP1Data) {
                subBuilder.MergeFrom(P1Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              P1Data = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCRoomUserData.Builder subBuilder = global::com.golf.proto.CCRoomUserData.CreateBuilder();
              if (result.hasP2Data) {
                subBuilder.MergeFrom(P2Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              P2Data = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasTurn = input.ReadInt32(ref result.turn_);
              break;
            }
            case 32: {
              result.hasRoundEndTime = input.ReadInt64(ref result.roundEndTime_);
              break;
            }
            case 40: {
              result.hasRunningState = input.ReadInt32(ref result.runningState_);
              break;
            }
            case 48: {
              result.hasLastWiner = input.ReadInt32(ref result.lastWiner_);
              break;
            }
            case 56: {
              result.hasExtraGameCnt = input.ReadInt32(ref result.extraGameCnt_);
              break;
            }
            case 64: {
              result.hasInitTurn = input.ReadInt32(ref result.initTurn_);
              break;
            }
            case 72: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
            case 80: {
              result.hasVsLevelId = input.ReadInt32(ref result.vsLevelId_);
              break;
            }
            case 90:
            case 88: {
              input.ReadInt32Array(tag, field_name, result.vsExlevelIds_);
              break;
            }
            case 98: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasWind) {
                subBuilder.MergeFrom(Wind);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Wind = subBuilder.BuildPartial();
              break;
            }
            case 128: {
              result.hasRoundStartTime = input.ReadInt64(ref result.roundStartTime_);
              break;
            }
            case 136: {
              result.hasRoundOpEndTime = input.ReadInt64(ref result.roundOpEndTime_);
              break;
            }
            case 144: {
              result.hasWithRobot = input.ReadBool(ref result.withRobot_);
              break;
            }
            case 154: {
              global::com.golf.proto.CCStrickStatus.Builder subBuilder = global::com.golf.proto.CCStrickStatus.CreateBuilder();
              if (result.hasStrickStatus) {
                subBuilder.MergeFrom(StrickStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StrickStatus = subBuilder.BuildPartial();
              break;
            }
            case 160: {
              result.hasRrIncfmtCnt = input.ReadInt32(ref result.rrIncfmtCnt_);
              break;
            }
            case 168: {
              result.hasNormalRoundCnt = input.ReadInt32(ref result.normalRoundCnt_);
              break;
            }
            case 176: {
              result.hasRobotOpValid = input.ReadBool(ref result.robotOpValid_);
              break;
            }
            case 186: {
              result.hasCombContestId = input.ReadString(ref result.combContestId_);
              break;
            }
            case 192: {
              result.hasSskinId = input.ReadInt32(ref result.sskinId_);
              break;
            }
            case 202:
            case 200: {
              input.ReadInt32Array(tag, field_name, result.exSskinIds_);
              break;
            }
            case 208: {
              result.hasLastOpTransId = input.ReadInt64(ref result.lastOpTransId_);
              break;
            }
            case 216: {
              result.hasGameCancleEndTime = input.ReadInt64(ref result.gameCancleEndTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasP1Data {
       get { return result.hasP1Data; }
      }
      public global::com.golf.proto.CCRoomUserData P1Data {
        get { return result.P1Data; }
        set { SetP1Data(value); }
      }
      public Builder SetP1Data(global::com.golf.proto.CCRoomUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasP1Data = true;
        result.p1Data_ = value;
        return this;
      }
      public Builder SetP1Data(global::com.golf.proto.CCRoomUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasP1Data = true;
        result.p1Data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeP1Data(global::com.golf.proto.CCRoomUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasP1Data &&
            result.p1Data_ != global::com.golf.proto.CCRoomUserData.DefaultInstance) {
            result.p1Data_ = global::com.golf.proto.CCRoomUserData.CreateBuilder(result.p1Data_).MergeFrom(value).BuildPartial();
        } else {
          result.p1Data_ = value;
        }
        result.hasP1Data = true;
        return this;
      }
      public Builder ClearP1Data() {
        PrepareBuilder();
        result.hasP1Data = false;
        result.p1Data_ = null;
        return this;
      }
      
      public bool HasP2Data {
       get { return result.hasP2Data; }
      }
      public global::com.golf.proto.CCRoomUserData P2Data {
        get { return result.P2Data; }
        set { SetP2Data(value); }
      }
      public Builder SetP2Data(global::com.golf.proto.CCRoomUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasP2Data = true;
        result.p2Data_ = value;
        return this;
      }
      public Builder SetP2Data(global::com.golf.proto.CCRoomUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasP2Data = true;
        result.p2Data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeP2Data(global::com.golf.proto.CCRoomUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasP2Data &&
            result.p2Data_ != global::com.golf.proto.CCRoomUserData.DefaultInstance) {
            result.p2Data_ = global::com.golf.proto.CCRoomUserData.CreateBuilder(result.p2Data_).MergeFrom(value).BuildPartial();
        } else {
          result.p2Data_ = value;
        }
        result.hasP2Data = true;
        return this;
      }
      public Builder ClearP2Data() {
        PrepareBuilder();
        result.hasP2Data = false;
        result.p2Data_ = null;
        return this;
      }
      
      public bool HasTurn {
        get { return result.hasTurn; }
      }
      public int Turn {
        get { return result.Turn; }
        set { SetTurn(value); }
      }
      public Builder SetTurn(int value) {
        PrepareBuilder();
        result.hasTurn = true;
        result.turn_ = value;
        return this;
      }
      public Builder ClearTurn() {
        PrepareBuilder();
        result.hasTurn = false;
        result.turn_ = 0;
        return this;
      }
      
      public bool HasRoundEndTime {
        get { return result.hasRoundEndTime; }
      }
      public long RoundEndTime {
        get { return result.RoundEndTime; }
        set { SetRoundEndTime(value); }
      }
      public Builder SetRoundEndTime(long value) {
        PrepareBuilder();
        result.hasRoundEndTime = true;
        result.roundEndTime_ = value;
        return this;
      }
      public Builder ClearRoundEndTime() {
        PrepareBuilder();
        result.hasRoundEndTime = false;
        result.roundEndTime_ = 0L;
        return this;
      }
      
      public bool HasRunningState {
        get { return result.hasRunningState; }
      }
      public int RunningState {
        get { return result.RunningState; }
        set { SetRunningState(value); }
      }
      public Builder SetRunningState(int value) {
        PrepareBuilder();
        result.hasRunningState = true;
        result.runningState_ = value;
        return this;
      }
      public Builder ClearRunningState() {
        PrepareBuilder();
        result.hasRunningState = false;
        result.runningState_ = 0;
        return this;
      }
      
      public bool HasLastWiner {
        get { return result.hasLastWiner; }
      }
      public int LastWiner {
        get { return result.LastWiner; }
        set { SetLastWiner(value); }
      }
      public Builder SetLastWiner(int value) {
        PrepareBuilder();
        result.hasLastWiner = true;
        result.lastWiner_ = value;
        return this;
      }
      public Builder ClearLastWiner() {
        PrepareBuilder();
        result.hasLastWiner = false;
        result.lastWiner_ = 0;
        return this;
      }
      
      public bool HasExtraGameCnt {
        get { return result.hasExtraGameCnt; }
      }
      public int ExtraGameCnt {
        get { return result.ExtraGameCnt; }
        set { SetExtraGameCnt(value); }
      }
      public Builder SetExtraGameCnt(int value) {
        PrepareBuilder();
        result.hasExtraGameCnt = true;
        result.extraGameCnt_ = value;
        return this;
      }
      public Builder ClearExtraGameCnt() {
        PrepareBuilder();
        result.hasExtraGameCnt = false;
        result.extraGameCnt_ = 0;
        return this;
      }
      
      public bool HasInitTurn {
        get { return result.hasInitTurn; }
      }
      public int InitTurn {
        get { return result.InitTurn; }
        set { SetInitTurn(value); }
      }
      public Builder SetInitTurn(int value) {
        PrepareBuilder();
        result.hasInitTurn = true;
        result.initTurn_ = value;
        return this;
      }
      public Builder ClearInitTurn() {
        PrepareBuilder();
        result.hasInitTurn = false;
        result.initTurn_ = 0;
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
      
      public bool HasVsLevelId {
        get { return result.hasVsLevelId; }
      }
      public int VsLevelId {
        get { return result.VsLevelId; }
        set { SetVsLevelId(value); }
      }
      public Builder SetVsLevelId(int value) {
        PrepareBuilder();
        result.hasVsLevelId = true;
        result.vsLevelId_ = value;
        return this;
      }
      public Builder ClearVsLevelId() {
        PrepareBuilder();
        result.hasVsLevelId = false;
        result.vsLevelId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> VsExlevelIdsList {
        get { return PrepareBuilder().vsExlevelIds_; }
      }
      public int VsExlevelIdsCount {
        get { return result.VsExlevelIdsCount; }
      }
      public int GetVsExlevelIds(int index) {
        return result.GetVsExlevelIds(index);
      }
      public Builder SetVsExlevelIds(int index, int value) {
        PrepareBuilder();
        result.vsExlevelIds_[index] = value;
        return this;
      }
      public Builder AddVsExlevelIds(int value) {
        PrepareBuilder();
        result.vsExlevelIds_.Add(value);
        return this;
      }
      public Builder AddRangeVsExlevelIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.vsExlevelIds_.Add(values);
        return this;
      }
      public Builder ClearVsExlevelIds() {
        PrepareBuilder();
        result.vsExlevelIds_.Clear();
        return this;
      }
      
      public bool HasWind {
       get { return result.hasWind; }
      }
      public global::com.golf.proto.CCVec3FloatToLong Wind {
        get { return result.Wind; }
        set { SetWind(value); }
      }
      public Builder SetWind(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWind = true;
        result.wind_ = value;
        return this;
      }
      public Builder SetWind(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWind = true;
        result.wind_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWind(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWind &&
            result.wind_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.wind_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.wind_).MergeFrom(value).BuildPartial();
        } else {
          result.wind_ = value;
        }
        result.hasWind = true;
        return this;
      }
      public Builder ClearWind() {
        PrepareBuilder();
        result.hasWind = false;
        result.wind_ = null;
        return this;
      }
      
      public bool HasRoundStartTime {
        get { return result.hasRoundStartTime; }
      }
      public long RoundStartTime {
        get { return result.RoundStartTime; }
        set { SetRoundStartTime(value); }
      }
      public Builder SetRoundStartTime(long value) {
        PrepareBuilder();
        result.hasRoundStartTime = true;
        result.roundStartTime_ = value;
        return this;
      }
      public Builder ClearRoundStartTime() {
        PrepareBuilder();
        result.hasRoundStartTime = false;
        result.roundStartTime_ = 0L;
        return this;
      }
      
      public bool HasRoundOpEndTime {
        get { return result.hasRoundOpEndTime; }
      }
      public long RoundOpEndTime {
        get { return result.RoundOpEndTime; }
        set { SetRoundOpEndTime(value); }
      }
      public Builder SetRoundOpEndTime(long value) {
        PrepareBuilder();
        result.hasRoundOpEndTime = true;
        result.roundOpEndTime_ = value;
        return this;
      }
      public Builder ClearRoundOpEndTime() {
        PrepareBuilder();
        result.hasRoundOpEndTime = false;
        result.roundOpEndTime_ = 0L;
        return this;
      }
      
      public bool HasWithRobot {
        get { return result.hasWithRobot; }
      }
      public bool WithRobot {
        get { return result.WithRobot; }
        set { SetWithRobot(value); }
      }
      public Builder SetWithRobot(bool value) {
        PrepareBuilder();
        result.hasWithRobot = true;
        result.withRobot_ = value;
        return this;
      }
      public Builder ClearWithRobot() {
        PrepareBuilder();
        result.hasWithRobot = false;
        result.withRobot_ = false;
        return this;
      }
      
      public bool HasStrickStatus {
       get { return result.hasStrickStatus; }
      }
      public global::com.golf.proto.CCStrickStatus StrickStatus {
        get { return result.StrickStatus; }
        set { SetStrickStatus(value); }
      }
      public Builder SetStrickStatus(global::com.golf.proto.CCStrickStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrickStatus = true;
        result.strickStatus_ = value;
        return this;
      }
      public Builder SetStrickStatus(global::com.golf.proto.CCStrickStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStrickStatus = true;
        result.strickStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStrickStatus(global::com.golf.proto.CCStrickStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStrickStatus &&
            result.strickStatus_ != global::com.golf.proto.CCStrickStatus.DefaultInstance) {
            result.strickStatus_ = global::com.golf.proto.CCStrickStatus.CreateBuilder(result.strickStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.strickStatus_ = value;
        }
        result.hasStrickStatus = true;
        return this;
      }
      public Builder ClearStrickStatus() {
        PrepareBuilder();
        result.hasStrickStatus = false;
        result.strickStatus_ = null;
        return this;
      }
      
      public bool HasRrIncfmtCnt {
        get { return result.hasRrIncfmtCnt; }
      }
      public int RrIncfmtCnt {
        get { return result.RrIncfmtCnt; }
        set { SetRrIncfmtCnt(value); }
      }
      public Builder SetRrIncfmtCnt(int value) {
        PrepareBuilder();
        result.hasRrIncfmtCnt = true;
        result.rrIncfmtCnt_ = value;
        return this;
      }
      public Builder ClearRrIncfmtCnt() {
        PrepareBuilder();
        result.hasRrIncfmtCnt = false;
        result.rrIncfmtCnt_ = 0;
        return this;
      }
      
      public bool HasNormalRoundCnt {
        get { return result.hasNormalRoundCnt; }
      }
      public int NormalRoundCnt {
        get { return result.NormalRoundCnt; }
        set { SetNormalRoundCnt(value); }
      }
      public Builder SetNormalRoundCnt(int value) {
        PrepareBuilder();
        result.hasNormalRoundCnt = true;
        result.normalRoundCnt_ = value;
        return this;
      }
      public Builder ClearNormalRoundCnt() {
        PrepareBuilder();
        result.hasNormalRoundCnt = false;
        result.normalRoundCnt_ = 0;
        return this;
      }
      
      public bool HasRobotOpValid {
        get { return result.hasRobotOpValid; }
      }
      public bool RobotOpValid {
        get { return result.RobotOpValid; }
        set { SetRobotOpValid(value); }
      }
      public Builder SetRobotOpValid(bool value) {
        PrepareBuilder();
        result.hasRobotOpValid = true;
        result.robotOpValid_ = value;
        return this;
      }
      public Builder ClearRobotOpValid() {
        PrepareBuilder();
        result.hasRobotOpValid = false;
        result.robotOpValid_ = false;
        return this;
      }
      
      public bool HasCombContestId {
        get { return result.hasCombContestId; }
      }
      public string CombContestId {
        get { return result.CombContestId; }
        set { SetCombContestId(value); }
      }
      public Builder SetCombContestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombContestId = true;
        result.combContestId_ = value;
        return this;
      }
      public Builder ClearCombContestId() {
        PrepareBuilder();
        result.hasCombContestId = false;
        result.combContestId_ = "";
        return this;
      }
      
      public bool HasSskinId {
        get { return result.hasSskinId; }
      }
      public int SskinId {
        get { return result.SskinId; }
        set { SetSskinId(value); }
      }
      public Builder SetSskinId(int value) {
        PrepareBuilder();
        result.hasSskinId = true;
        result.sskinId_ = value;
        return this;
      }
      public Builder ClearSskinId() {
        PrepareBuilder();
        result.hasSskinId = false;
        result.sskinId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ExSskinIdsList {
        get { return PrepareBuilder().exSskinIds_; }
      }
      public int ExSskinIdsCount {
        get { return result.ExSskinIdsCount; }
      }
      public int GetExSskinIds(int index) {
        return result.GetExSskinIds(index);
      }
      public Builder SetExSskinIds(int index, int value) {
        PrepareBuilder();
        result.exSskinIds_[index] = value;
        return this;
      }
      public Builder AddExSskinIds(int value) {
        PrepareBuilder();
        result.exSskinIds_.Add(value);
        return this;
      }
      public Builder AddRangeExSskinIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.exSskinIds_.Add(values);
        return this;
      }
      public Builder ClearExSskinIds() {
        PrepareBuilder();
        result.exSskinIds_.Clear();
        return this;
      }
      
      public bool HasLastOpTransId {
        get { return result.hasLastOpTransId; }
      }
      public long LastOpTransId {
        get { return result.LastOpTransId; }
        set { SetLastOpTransId(value); }
      }
      public Builder SetLastOpTransId(long value) {
        PrepareBuilder();
        result.hasLastOpTransId = true;
        result.lastOpTransId_ = value;
        return this;
      }
      public Builder ClearLastOpTransId() {
        PrepareBuilder();
        result.hasLastOpTransId = false;
        result.lastOpTransId_ = 0L;
        return this;
      }
      
      public bool HasGameCancleEndTime {
        get { return result.hasGameCancleEndTime; }
      }
      public long GameCancleEndTime {
        get { return result.GameCancleEndTime; }
        set { SetGameCancleEndTime(value); }
      }
      public Builder SetGameCancleEndTime(long value) {
        PrepareBuilder();
        result.hasGameCancleEndTime = true;
        result.gameCancleEndTime_ = value;
        return this;
      }
      public Builder ClearGameCancleEndTime() {
        PrepareBuilder();
        result.hasGameCancleEndTime = false;
        result.gameCancleEndTime_ = 0L;
        return this;
      }
    }
    static CCRoomStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRoomUserData : pb::GeneratedMessageLite<CCRoomUserData, CCRoomUserData.Builder> {
    private CCRoomUserData() { }
    private static readonly CCRoomUserData defaultInstance = new CCRoomUserData().MakeReadOnly();
    private static readonly string[] _cCRoomUserDataFieldNames = new string[] { "ball_status_ex", "club_cnt", "club_suit_in_game_state", "cup_change", "draw_yard", "game_start_prepare_state", "offline_end_time", "offline_start_time", "offline_time", "round_cnt", "round_prepare_state", "rrs", "s_user_data", "score", "select_ball_state", "tnmt_total_club_cnt", "valid_ball_status", "view_state", "yard" };
    private static readonly uint[] _cCRoomUserDataFieldTags = new uint[] { 18, 144, 170, 136, 160, 176, 112, 120, 96, 40, 104, 130, 10, 24, 90, 152, 50, 32, 64 };
    public static CCRoomUserData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRoomUserData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRoomUserData ThisMessage {
      get { return this; }
    }
    
    public const int SUserDataFieldNumber = 1;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public const int BallStatusExFieldNumber = 2;
    private bool hasBallStatusEx;
    private global::com.golf.proto.CCBallStatusEx ballStatusEx_;
    public bool HasBallStatusEx {
      get { return hasBallStatusEx; }
    }
    public global::com.golf.proto.CCBallStatusEx BallStatusEx {
      get { return ballStatusEx_ ?? global::com.golf.proto.CCBallStatusEx.DefaultInstance; }
    }
    
    public const int ScoreFieldNumber = 3;
    private bool hasScore;
    private int score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public int Score {
      get { return score_; }
    }
    
    public const int ViewStateFieldNumber = 4;
    private bool hasViewState;
    private int viewState_;
    public bool HasViewState {
      get { return hasViewState; }
    }
    public int ViewState {
      get { return viewState_; }
    }
    
    public const int RoundCntFieldNumber = 5;
    private bool hasRoundCnt;
    private int roundCnt_;
    public bool HasRoundCnt {
      get { return hasRoundCnt; }
    }
    public int RoundCnt {
      get { return roundCnt_; }
    }
    
    public const int ValidBallStatusFieldNumber = 6;
    private bool hasValidBallStatus;
    private global::com.golf.proto.CCBallStatus validBallStatus_;
    public bool HasValidBallStatus {
      get { return hasValidBallStatus; }
    }
    public global::com.golf.proto.CCBallStatus ValidBallStatus {
      get { return validBallStatus_ ?? global::com.golf.proto.CCBallStatus.DefaultInstance; }
    }
    
    public const int YardFieldNumber = 8;
    private bool hasYard;
    private int yard_;
    public bool HasYard {
      get { return hasYard; }
    }
    public int Yard {
      get { return yard_; }
    }
    
    public const int SelectBallStateFieldNumber = 11;
    private bool hasSelectBallState;
    private global::com.golf.proto.CCSelectBallState selectBallState_;
    public bool HasSelectBallState {
      get { return hasSelectBallState; }
    }
    public global::com.golf.proto.CCSelectBallState SelectBallState {
      get { return selectBallState_ ?? global::com.golf.proto.CCSelectBallState.DefaultInstance; }
    }
    
    public const int OfflineTimeFieldNumber = 12;
    private bool hasOfflineTime;
    private int offlineTime_;
    public bool HasOfflineTime {
      get { return hasOfflineTime; }
    }
    public int OfflineTime {
      get { return offlineTime_; }
    }
    
    public const int RoundPrepareStateFieldNumber = 13;
    private bool hasRoundPrepareState;
    private int roundPrepareState_;
    public bool HasRoundPrepareState {
      get { return hasRoundPrepareState; }
    }
    public int RoundPrepareState {
      get { return roundPrepareState_; }
    }
    
    public const int OfflineEndTimeFieldNumber = 14;
    private bool hasOfflineEndTime;
    private long offlineEndTime_;
    public bool HasOfflineEndTime {
      get { return hasOfflineEndTime; }
    }
    public long OfflineEndTime {
      get { return offlineEndTime_; }
    }
    
    public const int OfflineStartTimeFieldNumber = 15;
    private bool hasOfflineStartTime;
    private long offlineStartTime_;
    public bool HasOfflineStartTime {
      get { return hasOfflineStartTime; }
    }
    public long OfflineStartTime {
      get { return offlineStartTime_; }
    }
    
    public const int RrsFieldNumber = 16;
    private bool hasRrs;
    private global::com.golf.proto.CCRoundResultStatus rrs_;
    public bool HasRrs {
      get { return hasRrs; }
    }
    public global::com.golf.proto.CCRoundResultStatus Rrs {
      get { return rrs_ ?? global::com.golf.proto.CCRoundResultStatus.DefaultInstance; }
    }
    
    public const int CupChangeFieldNumber = 17;
    private bool hasCupChange;
    private int cupChange_;
    public bool HasCupChange {
      get { return hasCupChange; }
    }
    public int CupChange {
      get { return cupChange_; }
    }
    
    public const int ClubCntFieldNumber = 18;
    private bool hasClubCnt;
    private int clubCnt_;
    public bool HasClubCnt {
      get { return hasClubCnt; }
    }
    public int ClubCnt {
      get { return clubCnt_; }
    }
    
    public const int TnmtTotalClubCntFieldNumber = 19;
    private bool hasTnmtTotalClubCnt;
    private int tnmtTotalClubCnt_;
    public bool HasTnmtTotalClubCnt {
      get { return hasTnmtTotalClubCnt; }
    }
    public int TnmtTotalClubCnt {
      get { return tnmtTotalClubCnt_; }
    }
    
    public const int DrawYardFieldNumber = 20;
    private bool hasDrawYard;
    private int drawYard_;
    public bool HasDrawYard {
      get { return hasDrawYard; }
    }
    public int DrawYard {
      get { return drawYard_; }
    }
    
    public const int ClubSuitInGameStateFieldNumber = 21;
    private bool hasClubSuitInGameState;
    private global::com.golf.proto.CCClubSuitInGameState clubSuitInGameState_;
    public bool HasClubSuitInGameState {
      get { return hasClubSuitInGameState; }
    }
    public global::com.golf.proto.CCClubSuitInGameState ClubSuitInGameState {
      get { return clubSuitInGameState_ ?? global::com.golf.proto.CCClubSuitInGameState.DefaultInstance; }
    }
    
    public const int GameStartPrepareStateFieldNumber = 22;
    private bool hasGameStartPrepareState;
    private int gameStartPrepareState_;
    public bool HasGameStartPrepareState {
      get { return hasGameStartPrepareState; }
    }
    public int GameStartPrepareState {
      get { return gameStartPrepareState_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRoomUserDataFieldNames;
      if (hasSUserData) {
        output.WriteMessage(1, field_names[12], SUserData);
      }
      if (hasBallStatusEx) {
        output.WriteMessage(2, field_names[0], BallStatusEx);
      }
      if (hasScore) {
        output.WriteInt32(3, field_names[13], Score);
      }
      if (hasViewState) {
        output.WriteInt32(4, field_names[17], ViewState);
      }
      if (hasRoundCnt) {
        output.WriteInt32(5, field_names[9], RoundCnt);
      }
      if (hasValidBallStatus) {
        output.WriteMessage(6, field_names[16], ValidBallStatus);
      }
      if (hasYard) {
        output.WriteInt32(8, field_names[18], Yard);
      }
      if (hasSelectBallState) {
        output.WriteMessage(11, field_names[14], SelectBallState);
      }
      if (hasOfflineTime) {
        output.WriteInt32(12, field_names[8], OfflineTime);
      }
      if (hasRoundPrepareState) {
        output.WriteInt32(13, field_names[10], RoundPrepareState);
      }
      if (hasOfflineEndTime) {
        output.WriteInt64(14, field_names[6], OfflineEndTime);
      }
      if (hasOfflineStartTime) {
        output.WriteInt64(15, field_names[7], OfflineStartTime);
      }
      if (hasRrs) {
        output.WriteMessage(16, field_names[11], Rrs);
      }
      if (hasCupChange) {
        output.WriteInt32(17, field_names[3], CupChange);
      }
      if (hasClubCnt) {
        output.WriteInt32(18, field_names[1], ClubCnt);
      }
      if (hasTnmtTotalClubCnt) {
        output.WriteInt32(19, field_names[15], TnmtTotalClubCnt);
      }
      if (hasDrawYard) {
        output.WriteInt32(20, field_names[4], DrawYard);
      }
      if (hasClubSuitInGameState) {
        output.WriteMessage(21, field_names[2], ClubSuitInGameState);
      }
      if (hasGameStartPrepareState) {
        output.WriteInt32(22, field_names[5], GameStartPrepareState);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, SUserData);
      }
      if (hasBallStatusEx) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BallStatusEx);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Score);
      }
      if (hasViewState) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, ViewState);
      }
      if (hasRoundCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, RoundCnt);
      }
      if (hasValidBallStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, ValidBallStatus);
      }
      if (hasYard) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Yard);
      }
      if (hasSelectBallState) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, SelectBallState);
      }
      if (hasOfflineTime) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, OfflineTime);
      }
      if (hasRoundPrepareState) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, RoundPrepareState);
      }
      if (hasOfflineEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(14, OfflineEndTime);
      }
      if (hasOfflineStartTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(15, OfflineStartTime);
      }
      if (hasRrs) {
        size += pb::CodedOutputStream.ComputeMessageSize(16, Rrs);
      }
      if (hasCupChange) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, CupChange);
      }
      if (hasClubCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, ClubCnt);
      }
      if (hasTnmtTotalClubCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, TnmtTotalClubCnt);
      }
      if (hasDrawYard) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, DrawYard);
      }
      if (hasClubSuitInGameState) {
        size += pb::CodedOutputStream.ComputeMessageSize(21, ClubSuitInGameState);
      }
      if (hasGameStartPrepareState) {
        size += pb::CodedOutputStream.ComputeInt32Size(22, GameStartPrepareState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      if (hasBallStatusEx) hash ^= ballStatusEx_.GetHashCode();
      if (hasScore) hash ^= score_.GetHashCode();
      if (hasViewState) hash ^= viewState_.GetHashCode();
      if (hasRoundCnt) hash ^= roundCnt_.GetHashCode();
      if (hasValidBallStatus) hash ^= validBallStatus_.GetHashCode();
      if (hasYard) hash ^= yard_.GetHashCode();
      if (hasSelectBallState) hash ^= selectBallState_.GetHashCode();
      if (hasOfflineTime) hash ^= offlineTime_.GetHashCode();
      if (hasRoundPrepareState) hash ^= roundPrepareState_.GetHashCode();
      if (hasOfflineEndTime) hash ^= offlineEndTime_.GetHashCode();
      if (hasOfflineStartTime) hash ^= offlineStartTime_.GetHashCode();
      if (hasRrs) hash ^= rrs_.GetHashCode();
      if (hasCupChange) hash ^= cupChange_.GetHashCode();
      if (hasClubCnt) hash ^= clubCnt_.GetHashCode();
      if (hasTnmtTotalClubCnt) hash ^= tnmtTotalClubCnt_.GetHashCode();
      if (hasDrawYard) hash ^= drawYard_.GetHashCode();
      if (hasClubSuitInGameState) hash ^= clubSuitInGameState_.GetHashCode();
      if (hasGameStartPrepareState) hash ^= gameStartPrepareState_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRoomUserData other = obj as CCRoomUserData;
      if (other == null) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      if (hasBallStatusEx != other.hasBallStatusEx || (hasBallStatusEx && !ballStatusEx_.Equals(other.ballStatusEx_))) return false;
      if (hasScore != other.hasScore || (hasScore && !score_.Equals(other.score_))) return false;
      if (hasViewState != other.hasViewState || (hasViewState && !viewState_.Equals(other.viewState_))) return false;
      if (hasRoundCnt != other.hasRoundCnt || (hasRoundCnt && !roundCnt_.Equals(other.roundCnt_))) return false;
      if (hasValidBallStatus != other.hasValidBallStatus || (hasValidBallStatus && !validBallStatus_.Equals(other.validBallStatus_))) return false;
      if (hasYard != other.hasYard || (hasYard && !yard_.Equals(other.yard_))) return false;
      if (hasSelectBallState != other.hasSelectBallState || (hasSelectBallState && !selectBallState_.Equals(other.selectBallState_))) return false;
      if (hasOfflineTime != other.hasOfflineTime || (hasOfflineTime && !offlineTime_.Equals(other.offlineTime_))) return false;
      if (hasRoundPrepareState != other.hasRoundPrepareState || (hasRoundPrepareState && !roundPrepareState_.Equals(other.roundPrepareState_))) return false;
      if (hasOfflineEndTime != other.hasOfflineEndTime || (hasOfflineEndTime && !offlineEndTime_.Equals(other.offlineEndTime_))) return false;
      if (hasOfflineStartTime != other.hasOfflineStartTime || (hasOfflineStartTime && !offlineStartTime_.Equals(other.offlineStartTime_))) return false;
      if (hasRrs != other.hasRrs || (hasRrs && !rrs_.Equals(other.rrs_))) return false;
      if (hasCupChange != other.hasCupChange || (hasCupChange && !cupChange_.Equals(other.cupChange_))) return false;
      if (hasClubCnt != other.hasClubCnt || (hasClubCnt && !clubCnt_.Equals(other.clubCnt_))) return false;
      if (hasTnmtTotalClubCnt != other.hasTnmtTotalClubCnt || (hasTnmtTotalClubCnt && !tnmtTotalClubCnt_.Equals(other.tnmtTotalClubCnt_))) return false;
      if (hasDrawYard != other.hasDrawYard || (hasDrawYard && !drawYard_.Equals(other.drawYard_))) return false;
      if (hasClubSuitInGameState != other.hasClubSuitInGameState || (hasClubSuitInGameState && !clubSuitInGameState_.Equals(other.clubSuitInGameState_))) return false;
      if (hasGameStartPrepareState != other.hasGameStartPrepareState || (hasGameStartPrepareState && !gameStartPrepareState_.Equals(other.gameStartPrepareState_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
      PrintField("ball_status_ex", hasBallStatusEx, ballStatusEx_, writer);
      PrintField("score", hasScore, score_, writer);
      PrintField("view_state", hasViewState, viewState_, writer);
      PrintField("round_cnt", hasRoundCnt, roundCnt_, writer);
      PrintField("valid_ball_status", hasValidBallStatus, validBallStatus_, writer);
      PrintField("yard", hasYard, yard_, writer);
      PrintField("select_ball_state", hasSelectBallState, selectBallState_, writer);
      PrintField("offline_time", hasOfflineTime, offlineTime_, writer);
      PrintField("round_prepare_state", hasRoundPrepareState, roundPrepareState_, writer);
      PrintField("offline_end_time", hasOfflineEndTime, offlineEndTime_, writer);
      PrintField("offline_start_time", hasOfflineStartTime, offlineStartTime_, writer);
      PrintField("rrs", hasRrs, rrs_, writer);
      PrintField("cup_change", hasCupChange, cupChange_, writer);
      PrintField("club_cnt", hasClubCnt, clubCnt_, writer);
      PrintField("tnmt_total_club_cnt", hasTnmtTotalClubCnt, tnmtTotalClubCnt_, writer);
      PrintField("draw_yard", hasDrawYard, drawYard_, writer);
      PrintField("club_suit_in_game_state", hasClubSuitInGameState, clubSuitInGameState_, writer);
      PrintField("game_start_prepare_state", hasGameStartPrepareState, gameStartPrepareState_, writer);
    }
    #endregion
    
    public static CCRoomUserData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoomUserData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoomUserData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoomUserData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoomUserData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoomUserData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRoomUserData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRoomUserData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRoomUserData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoomUserData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRoomUserData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRoomUserData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRoomUserData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRoomUserData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRoomUserData result;
      
      private CCRoomUserData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRoomUserData original = result;
          result = new CCRoomUserData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRoomUserData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRoomUserData DefaultInstanceForType {
        get { return global::com.golf.proto.CCRoomUserData.DefaultInstance; }
      }
      
      public override CCRoomUserData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRoomUserData) {
          return MergeFrom((CCRoomUserData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRoomUserData other) {
        if (other == global::com.golf.proto.CCRoomUserData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        if (other.HasBallStatusEx) {
          MergeBallStatusEx(other.BallStatusEx);
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasViewState) {
          ViewState = other.ViewState;
        }
        if (other.HasRoundCnt) {
          RoundCnt = other.RoundCnt;
        }
        if (other.HasValidBallStatus) {
          MergeValidBallStatus(other.ValidBallStatus);
        }
        if (other.HasYard) {
          Yard = other.Yard;
        }
        if (other.HasSelectBallState) {
          MergeSelectBallState(other.SelectBallState);
        }
        if (other.HasOfflineTime) {
          OfflineTime = other.OfflineTime;
        }
        if (other.HasRoundPrepareState) {
          RoundPrepareState = other.RoundPrepareState;
        }
        if (other.HasOfflineEndTime) {
          OfflineEndTime = other.OfflineEndTime;
        }
        if (other.HasOfflineStartTime) {
          OfflineStartTime = other.OfflineStartTime;
        }
        if (other.HasRrs) {
          MergeRrs(other.Rrs);
        }
        if (other.HasCupChange) {
          CupChange = other.CupChange;
        }
        if (other.HasClubCnt) {
          ClubCnt = other.ClubCnt;
        }
        if (other.HasTnmtTotalClubCnt) {
          TnmtTotalClubCnt = other.TnmtTotalClubCnt;
        }
        if (other.HasDrawYard) {
          DrawYard = other.DrawYard;
        }
        if (other.HasClubSuitInGameState) {
          MergeClubSuitInGameState(other.ClubSuitInGameState);
        }
        if (other.HasGameStartPrepareState) {
          GameStartPrepareState = other.GameStartPrepareState;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRoomUserDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRoomUserDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCBallStatusEx.Builder subBuilder = global::com.golf.proto.CCBallStatusEx.CreateBuilder();
              if (result.hasBallStatusEx) {
                subBuilder.MergeFrom(BallStatusEx);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallStatusEx = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasScore = input.ReadInt32(ref result.score_);
              break;
            }
            case 32: {
              result.hasViewState = input.ReadInt32(ref result.viewState_);
              break;
            }
            case 40: {
              result.hasRoundCnt = input.ReadInt32(ref result.roundCnt_);
              break;
            }
            case 50: {
              global::com.golf.proto.CCBallStatus.Builder subBuilder = global::com.golf.proto.CCBallStatus.CreateBuilder();
              if (result.hasValidBallStatus) {
                subBuilder.MergeFrom(ValidBallStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ValidBallStatus = subBuilder.BuildPartial();
              break;
            }
            case 64: {
              result.hasYard = input.ReadInt32(ref result.yard_);
              break;
            }
            case 90: {
              global::com.golf.proto.CCSelectBallState.Builder subBuilder = global::com.golf.proto.CCSelectBallState.CreateBuilder();
              if (result.hasSelectBallState) {
                subBuilder.MergeFrom(SelectBallState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SelectBallState = subBuilder.BuildPartial();
              break;
            }
            case 96: {
              result.hasOfflineTime = input.ReadInt32(ref result.offlineTime_);
              break;
            }
            case 104: {
              result.hasRoundPrepareState = input.ReadInt32(ref result.roundPrepareState_);
              break;
            }
            case 112: {
              result.hasOfflineEndTime = input.ReadInt64(ref result.offlineEndTime_);
              break;
            }
            case 120: {
              result.hasOfflineStartTime = input.ReadInt64(ref result.offlineStartTime_);
              break;
            }
            case 130: {
              global::com.golf.proto.CCRoundResultStatus.Builder subBuilder = global::com.golf.proto.CCRoundResultStatus.CreateBuilder();
              if (result.hasRrs) {
                subBuilder.MergeFrom(Rrs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rrs = subBuilder.BuildPartial();
              break;
            }
            case 136: {
              result.hasCupChange = input.ReadInt32(ref result.cupChange_);
              break;
            }
            case 144: {
              result.hasClubCnt = input.ReadInt32(ref result.clubCnt_);
              break;
            }
            case 152: {
              result.hasTnmtTotalClubCnt = input.ReadInt32(ref result.tnmtTotalClubCnt_);
              break;
            }
            case 160: {
              result.hasDrawYard = input.ReadInt32(ref result.drawYard_);
              break;
            }
            case 170: {
              global::com.golf.proto.CCClubSuitInGameState.Builder subBuilder = global::com.golf.proto.CCClubSuitInGameState.CreateBuilder();
              if (result.hasClubSuitInGameState) {
                subBuilder.MergeFrom(ClubSuitInGameState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClubSuitInGameState = subBuilder.BuildPartial();
              break;
            }
            case 176: {
              result.hasGameStartPrepareState = input.ReadInt32(ref result.gameStartPrepareState_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
      
      public bool HasBallStatusEx {
       get { return result.hasBallStatusEx; }
      }
      public global::com.golf.proto.CCBallStatusEx BallStatusEx {
        get { return result.BallStatusEx; }
        set { SetBallStatusEx(value); }
      }
      public Builder SetBallStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallStatusEx = true;
        result.ballStatusEx_ = value;
        return this;
      }
      public Builder SetBallStatusEx(global::com.golf.proto.CCBallStatusEx.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallStatusEx = true;
        result.ballStatusEx_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallStatusEx &&
            result.ballStatusEx_ != global::com.golf.proto.CCBallStatusEx.DefaultInstance) {
            result.ballStatusEx_ = global::com.golf.proto.CCBallStatusEx.CreateBuilder(result.ballStatusEx_).MergeFrom(value).BuildPartial();
        } else {
          result.ballStatusEx_ = value;
        }
        result.hasBallStatusEx = true;
        return this;
      }
      public Builder ClearBallStatusEx() {
        PrepareBuilder();
        result.hasBallStatusEx = false;
        result.ballStatusEx_ = null;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public int Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(int value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      public bool HasViewState {
        get { return result.hasViewState; }
      }
      public int ViewState {
        get { return result.ViewState; }
        set { SetViewState(value); }
      }
      public Builder SetViewState(int value) {
        PrepareBuilder();
        result.hasViewState = true;
        result.viewState_ = value;
        return this;
      }
      public Builder ClearViewState() {
        PrepareBuilder();
        result.hasViewState = false;
        result.viewState_ = 0;
        return this;
      }
      
      public bool HasRoundCnt {
        get { return result.hasRoundCnt; }
      }
      public int RoundCnt {
        get { return result.RoundCnt; }
        set { SetRoundCnt(value); }
      }
      public Builder SetRoundCnt(int value) {
        PrepareBuilder();
        result.hasRoundCnt = true;
        result.roundCnt_ = value;
        return this;
      }
      public Builder ClearRoundCnt() {
        PrepareBuilder();
        result.hasRoundCnt = false;
        result.roundCnt_ = 0;
        return this;
      }
      
      public bool HasValidBallStatus {
       get { return result.hasValidBallStatus; }
      }
      public global::com.golf.proto.CCBallStatus ValidBallStatus {
        get { return result.ValidBallStatus; }
        set { SetValidBallStatus(value); }
      }
      public Builder SetValidBallStatus(global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValidBallStatus = true;
        result.validBallStatus_ = value;
        return this;
      }
      public Builder SetValidBallStatus(global::com.golf.proto.CCBallStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasValidBallStatus = true;
        result.validBallStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeValidBallStatus(global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasValidBallStatus &&
            result.validBallStatus_ != global::com.golf.proto.CCBallStatus.DefaultInstance) {
            result.validBallStatus_ = global::com.golf.proto.CCBallStatus.CreateBuilder(result.validBallStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.validBallStatus_ = value;
        }
        result.hasValidBallStatus = true;
        return this;
      }
      public Builder ClearValidBallStatus() {
        PrepareBuilder();
        result.hasValidBallStatus = false;
        result.validBallStatus_ = null;
        return this;
      }
      
      public bool HasYard {
        get { return result.hasYard; }
      }
      public int Yard {
        get { return result.Yard; }
        set { SetYard(value); }
      }
      public Builder SetYard(int value) {
        PrepareBuilder();
        result.hasYard = true;
        result.yard_ = value;
        return this;
      }
      public Builder ClearYard() {
        PrepareBuilder();
        result.hasYard = false;
        result.yard_ = 0;
        return this;
      }
      
      public bool HasSelectBallState {
       get { return result.hasSelectBallState; }
      }
      public global::com.golf.proto.CCSelectBallState SelectBallState {
        get { return result.SelectBallState; }
        set { SetSelectBallState(value); }
      }
      public Builder SetSelectBallState(global::com.golf.proto.CCSelectBallState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSelectBallState = true;
        result.selectBallState_ = value;
        return this;
      }
      public Builder SetSelectBallState(global::com.golf.proto.CCSelectBallState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSelectBallState = true;
        result.selectBallState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSelectBallState(global::com.golf.proto.CCSelectBallState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSelectBallState &&
            result.selectBallState_ != global::com.golf.proto.CCSelectBallState.DefaultInstance) {
            result.selectBallState_ = global::com.golf.proto.CCSelectBallState.CreateBuilder(result.selectBallState_).MergeFrom(value).BuildPartial();
        } else {
          result.selectBallState_ = value;
        }
        result.hasSelectBallState = true;
        return this;
      }
      public Builder ClearSelectBallState() {
        PrepareBuilder();
        result.hasSelectBallState = false;
        result.selectBallState_ = null;
        return this;
      }
      
      public bool HasOfflineTime {
        get { return result.hasOfflineTime; }
      }
      public int OfflineTime {
        get { return result.OfflineTime; }
        set { SetOfflineTime(value); }
      }
      public Builder SetOfflineTime(int value) {
        PrepareBuilder();
        result.hasOfflineTime = true;
        result.offlineTime_ = value;
        return this;
      }
      public Builder ClearOfflineTime() {
        PrepareBuilder();
        result.hasOfflineTime = false;
        result.offlineTime_ = 0;
        return this;
      }
      
      public bool HasRoundPrepareState {
        get { return result.hasRoundPrepareState; }
      }
      public int RoundPrepareState {
        get { return result.RoundPrepareState; }
        set { SetRoundPrepareState(value); }
      }
      public Builder SetRoundPrepareState(int value) {
        PrepareBuilder();
        result.hasRoundPrepareState = true;
        result.roundPrepareState_ = value;
        return this;
      }
      public Builder ClearRoundPrepareState() {
        PrepareBuilder();
        result.hasRoundPrepareState = false;
        result.roundPrepareState_ = 0;
        return this;
      }
      
      public bool HasOfflineEndTime {
        get { return result.hasOfflineEndTime; }
      }
      public long OfflineEndTime {
        get { return result.OfflineEndTime; }
        set { SetOfflineEndTime(value); }
      }
      public Builder SetOfflineEndTime(long value) {
        PrepareBuilder();
        result.hasOfflineEndTime = true;
        result.offlineEndTime_ = value;
        return this;
      }
      public Builder ClearOfflineEndTime() {
        PrepareBuilder();
        result.hasOfflineEndTime = false;
        result.offlineEndTime_ = 0L;
        return this;
      }
      
      public bool HasOfflineStartTime {
        get { return result.hasOfflineStartTime; }
      }
      public long OfflineStartTime {
        get { return result.OfflineStartTime; }
        set { SetOfflineStartTime(value); }
      }
      public Builder SetOfflineStartTime(long value) {
        PrepareBuilder();
        result.hasOfflineStartTime = true;
        result.offlineStartTime_ = value;
        return this;
      }
      public Builder ClearOfflineStartTime() {
        PrepareBuilder();
        result.hasOfflineStartTime = false;
        result.offlineStartTime_ = 0L;
        return this;
      }
      
      public bool HasRrs {
       get { return result.hasRrs; }
      }
      public global::com.golf.proto.CCRoundResultStatus Rrs {
        get { return result.Rrs; }
        set { SetRrs(value); }
      }
      public Builder SetRrs(global::com.golf.proto.CCRoundResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRrs = true;
        result.rrs_ = value;
        return this;
      }
      public Builder SetRrs(global::com.golf.proto.CCRoundResultStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRrs = true;
        result.rrs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRrs(global::com.golf.proto.CCRoundResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRrs &&
            result.rrs_ != global::com.golf.proto.CCRoundResultStatus.DefaultInstance) {
            result.rrs_ = global::com.golf.proto.CCRoundResultStatus.CreateBuilder(result.rrs_).MergeFrom(value).BuildPartial();
        } else {
          result.rrs_ = value;
        }
        result.hasRrs = true;
        return this;
      }
      public Builder ClearRrs() {
        PrepareBuilder();
        result.hasRrs = false;
        result.rrs_ = null;
        return this;
      }
      
      public bool HasCupChange {
        get { return result.hasCupChange; }
      }
      public int CupChange {
        get { return result.CupChange; }
        set { SetCupChange(value); }
      }
      public Builder SetCupChange(int value) {
        PrepareBuilder();
        result.hasCupChange = true;
        result.cupChange_ = value;
        return this;
      }
      public Builder ClearCupChange() {
        PrepareBuilder();
        result.hasCupChange = false;
        result.cupChange_ = 0;
        return this;
      }
      
      public bool HasClubCnt {
        get { return result.hasClubCnt; }
      }
      public int ClubCnt {
        get { return result.ClubCnt; }
        set { SetClubCnt(value); }
      }
      public Builder SetClubCnt(int value) {
        PrepareBuilder();
        result.hasClubCnt = true;
        result.clubCnt_ = value;
        return this;
      }
      public Builder ClearClubCnt() {
        PrepareBuilder();
        result.hasClubCnt = false;
        result.clubCnt_ = 0;
        return this;
      }
      
      public bool HasTnmtTotalClubCnt {
        get { return result.hasTnmtTotalClubCnt; }
      }
      public int TnmtTotalClubCnt {
        get { return result.TnmtTotalClubCnt; }
        set { SetTnmtTotalClubCnt(value); }
      }
      public Builder SetTnmtTotalClubCnt(int value) {
        PrepareBuilder();
        result.hasTnmtTotalClubCnt = true;
        result.tnmtTotalClubCnt_ = value;
        return this;
      }
      public Builder ClearTnmtTotalClubCnt() {
        PrepareBuilder();
        result.hasTnmtTotalClubCnt = false;
        result.tnmtTotalClubCnt_ = 0;
        return this;
      }
      
      public bool HasDrawYard {
        get { return result.hasDrawYard; }
      }
      public int DrawYard {
        get { return result.DrawYard; }
        set { SetDrawYard(value); }
      }
      public Builder SetDrawYard(int value) {
        PrepareBuilder();
        result.hasDrawYard = true;
        result.drawYard_ = value;
        return this;
      }
      public Builder ClearDrawYard() {
        PrepareBuilder();
        result.hasDrawYard = false;
        result.drawYard_ = 0;
        return this;
      }
      
      public bool HasClubSuitInGameState {
       get { return result.hasClubSuitInGameState; }
      }
      public global::com.golf.proto.CCClubSuitInGameState ClubSuitInGameState {
        get { return result.ClubSuitInGameState; }
        set { SetClubSuitInGameState(value); }
      }
      public Builder SetClubSuitInGameState(global::com.golf.proto.CCClubSuitInGameState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClubSuitInGameState = true;
        result.clubSuitInGameState_ = value;
        return this;
      }
      public Builder SetClubSuitInGameState(global::com.golf.proto.CCClubSuitInGameState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClubSuitInGameState = true;
        result.clubSuitInGameState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClubSuitInGameState(global::com.golf.proto.CCClubSuitInGameState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClubSuitInGameState &&
            result.clubSuitInGameState_ != global::com.golf.proto.CCClubSuitInGameState.DefaultInstance) {
            result.clubSuitInGameState_ = global::com.golf.proto.CCClubSuitInGameState.CreateBuilder(result.clubSuitInGameState_).MergeFrom(value).BuildPartial();
        } else {
          result.clubSuitInGameState_ = value;
        }
        result.hasClubSuitInGameState = true;
        return this;
      }
      public Builder ClearClubSuitInGameState() {
        PrepareBuilder();
        result.hasClubSuitInGameState = false;
        result.clubSuitInGameState_ = null;
        return this;
      }
      
      public bool HasGameStartPrepareState {
        get { return result.hasGameStartPrepareState; }
      }
      public int GameStartPrepareState {
        get { return result.GameStartPrepareState; }
        set { SetGameStartPrepareState(value); }
      }
      public Builder SetGameStartPrepareState(int value) {
        PrepareBuilder();
        result.hasGameStartPrepareState = true;
        result.gameStartPrepareState_ = value;
        return this;
      }
      public Builder ClearGameStartPrepareState() {
        PrepareBuilder();
        result.hasGameStartPrepareState = false;
        result.gameStartPrepareState_ = 0;
        return this;
      }
    }
    static CCRoomUserData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateInf : pb::GeneratedMessageLite<CCOperateInf, CCOperateInf.Builder> {
    private CCOperateInf() { }
    private static readonly CCOperateInf defaultInstance = new CCOperateInf().MakeReadOnly();
    private static readonly string[] _cCOperateInfFieldNames = new string[] { "data", "status" };
    private static readonly uint[] _cCOperateInfFieldTags = new uint[] { 10, 18 };
    public static CCOperateInf DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateInf DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateInf ThisMessage {
      get { return this; }
    }
    
    public const int DataFieldNumber = 1;
    private bool hasData;
    private global::com.golf.proto.CCOperateData data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::com.golf.proto.CCOperateData Data {
      get { return data_ ?? global::com.golf.proto.CCOperateData.DefaultInstance; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCOperateStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCOperateStatus Status {
      get { return status_ ?? global::com.golf.proto.CCOperateStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateInfFieldNames;
      if (hasData) {
        output.WriteMessage(1, field_names[0], Data);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[1], Status);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Data);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasData) hash ^= data_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateInf other = obj as CCOperateInf;
      if (other == null) return false;
      if (hasData != other.hasData || (hasData && !data_.Equals(other.data_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("data", hasData, data_, writer);
      PrintField("status", hasStatus, status_, writer);
    }
    #endregion
    
    public static CCOperateInf ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateInf ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateInf ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateInf ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateInf ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateInf ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateInf ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateInf ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateInf ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateInf ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateInf MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateInf prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateInf, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateInf cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateInf result;
      
      private CCOperateInf PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateInf original = result;
          result = new CCOperateInf();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateInf MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateInf DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateInf.DefaultInstance; }
      }
      
      public override CCOperateInf BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateInf) {
          return MergeFrom((CCOperateInf) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateInf other) {
        if (other == global::com.golf.proto.CCOperateInf.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasData) {
          MergeData(other.Data);
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateInfFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateInfFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCOperateData.Builder subBuilder = global::com.golf.proto.CCOperateData.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCOperateStatus.Builder subBuilder = global::com.golf.proto.CCOperateStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::com.golf.proto.CCOperateData Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::com.golf.proto.CCOperateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::com.golf.proto.CCOperateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::com.golf.proto.CCOperateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::com.golf.proto.CCOperateData.DefaultInstance) {
            result.data_ = global::com.golf.proto.CCOperateData.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCOperateStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCOperateStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCOperateStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCOperateStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCOperateStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCOperateStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
    }
    static CCOperateInf() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateStatus : pb::GeneratedMessageLite<CCOperateStatus, CCOperateStatus.Builder> {
    private CCOperateStatus() { }
    private static readonly CCOperateStatus defaultInstance = new CCOperateStatus().MakeReadOnly();
    private static readonly string[] _cCOperateStatusFieldNames = new string[] { "adj_ball", "adj_lp", "adj_strick", "has_ld_pos_adjusted", "has_stricked", "hit_point", "is_ball_adjusting", "op_state", "run_state", "strick", "strick_id" };
    private static readonly uint[] _cCOperateStatusFieldTags = new uint[] { 82, 58, 90, 48, 24, 66, 72, 8, 16, 42, 32 };
    public static CCOperateStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateStatus ThisMessage {
      get { return this; }
    }
    
    public const int OpStateFieldNumber = 1;
    private bool hasOpState;
    private int opState_;
    public bool HasOpState {
      get { return hasOpState; }
    }
    public int OpState {
      get { return opState_; }
    }
    
    public const int RunStateFieldNumber = 2;
    private bool hasRunState;
    private int runState_;
    public bool HasRunState {
      get { return hasRunState; }
    }
    public int RunState {
      get { return runState_; }
    }
    
    public const int HasStrickedFieldNumber = 3;
    private bool hasHasStricked;
    private bool hasStricked_;
    public bool HasHasStricked {
      get { return hasHasStricked; }
    }
    public bool HasStricked {
      get { return hasStricked_; }
    }
    
    public const int StrickIdFieldNumber = 4;
    private bool hasStrickId;
    private int strickId_;
    public bool HasStrickId {
      get { return hasStrickId; }
    }
    public int StrickId {
      get { return strickId_; }
    }
    
    public const int StrickFieldNumber = 5;
    private bool hasStrick;
    private global::com.golf.proto.CCStrickRequest strick_;
    public bool HasStrick {
      get { return hasStrick; }
    }
    public global::com.golf.proto.CCStrickRequest Strick {
      get { return strick_ ?? global::com.golf.proto.CCStrickRequest.DefaultInstance; }
    }
    
    public const int HasLdPosAdjustedFieldNumber = 6;
    private bool hasHasLdPosAdjusted;
    private bool hasLdPosAdjusted_;
    public bool HasHasLdPosAdjusted {
      get { return hasHasLdPosAdjusted; }
    }
    public bool HasLdPosAdjusted {
      get { return hasLdPosAdjusted_; }
    }
    
    public const int AdjLpFieldNumber = 7;
    private bool hasAdjLp;
    private global::com.golf.proto.CCAdjustLandingPointRequest adjLp_;
    public bool HasAdjLp {
      get { return hasAdjLp; }
    }
    public global::com.golf.proto.CCAdjustLandingPointRequest AdjLp {
      get { return adjLp_ ?? global::com.golf.proto.CCAdjustLandingPointRequest.DefaultInstance; }
    }
    
    public const int HitPointFieldNumber = 8;
    private bool hasHitPoint;
    private global::com.golf.proto.CCVec3FloatToLong hitPoint_;
    public bool HasHitPoint {
      get { return hasHitPoint; }
    }
    public global::com.golf.proto.CCVec3FloatToLong HitPoint {
      get { return hitPoint_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int IsBallAdjustingFieldNumber = 9;
    private bool hasIsBallAdjusting;
    private bool isBallAdjusting_;
    public bool HasIsBallAdjusting {
      get { return hasIsBallAdjusting; }
    }
    public bool IsBallAdjusting {
      get { return isBallAdjusting_; }
    }
    
    public const int AdjBallFieldNumber = 10;
    private bool hasAdjBall;
    private global::com.golf.proto.CCAdjustBallRequest adjBall_;
    public bool HasAdjBall {
      get { return hasAdjBall; }
    }
    public global::com.golf.proto.CCAdjustBallRequest AdjBall {
      get { return adjBall_ ?? global::com.golf.proto.CCAdjustBallRequest.DefaultInstance; }
    }
    
    public const int AdjStrickFieldNumber = 11;
    private bool hasAdjStrick;
    private global::com.golf.proto.CCAdjustStrickRequest adjStrick_;
    public bool HasAdjStrick {
      get { return hasAdjStrick; }
    }
    public global::com.golf.proto.CCAdjustStrickRequest AdjStrick {
      get { return adjStrick_ ?? global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateStatusFieldNames;
      if (hasOpState) {
        output.WriteInt32(1, field_names[7], OpState);
      }
      if (hasRunState) {
        output.WriteInt32(2, field_names[8], RunState);
      }
      if (hasHasStricked) {
        output.WriteBool(3, field_names[4], HasStricked);
      }
      if (hasStrickId) {
        output.WriteInt32(4, field_names[10], StrickId);
      }
      if (hasStrick) {
        output.WriteMessage(5, field_names[9], Strick);
      }
      if (hasHasLdPosAdjusted) {
        output.WriteBool(6, field_names[3], HasLdPosAdjusted);
      }
      if (hasAdjLp) {
        output.WriteMessage(7, field_names[1], AdjLp);
      }
      if (hasHitPoint) {
        output.WriteMessage(8, field_names[5], HitPoint);
      }
      if (hasIsBallAdjusting) {
        output.WriteBool(9, field_names[6], IsBallAdjusting);
      }
      if (hasAdjBall) {
        output.WriteMessage(10, field_names[0], AdjBall);
      }
      if (hasAdjStrick) {
        output.WriteMessage(11, field_names[2], AdjStrick);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasOpState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, OpState);
      }
      if (hasRunState) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, RunState);
      }
      if (hasHasStricked) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, HasStricked);
      }
      if (hasStrickId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, StrickId);
      }
      if (hasStrick) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Strick);
      }
      if (hasHasLdPosAdjusted) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, HasLdPosAdjusted);
      }
      if (hasAdjLp) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, AdjLp);
      }
      if (hasHitPoint) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, HitPoint);
      }
      if (hasIsBallAdjusting) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, IsBallAdjusting);
      }
      if (hasAdjBall) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, AdjBall);
      }
      if (hasAdjStrick) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, AdjStrick);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasOpState) hash ^= opState_.GetHashCode();
      if (hasRunState) hash ^= runState_.GetHashCode();
      if (hasHasStricked) hash ^= hasStricked_.GetHashCode();
      if (hasStrickId) hash ^= strickId_.GetHashCode();
      if (hasStrick) hash ^= strick_.GetHashCode();
      if (hasHasLdPosAdjusted) hash ^= hasLdPosAdjusted_.GetHashCode();
      if (hasAdjLp) hash ^= adjLp_.GetHashCode();
      if (hasHitPoint) hash ^= hitPoint_.GetHashCode();
      if (hasIsBallAdjusting) hash ^= isBallAdjusting_.GetHashCode();
      if (hasAdjBall) hash ^= adjBall_.GetHashCode();
      if (hasAdjStrick) hash ^= adjStrick_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateStatus other = obj as CCOperateStatus;
      if (other == null) return false;
      if (hasOpState != other.hasOpState || (hasOpState && !opState_.Equals(other.opState_))) return false;
      if (hasRunState != other.hasRunState || (hasRunState && !runState_.Equals(other.runState_))) return false;
      if (hasHasStricked != other.hasHasStricked || (hasHasStricked && !hasStricked_.Equals(other.hasStricked_))) return false;
      if (hasStrickId != other.hasStrickId || (hasStrickId && !strickId_.Equals(other.strickId_))) return false;
      if (hasStrick != other.hasStrick || (hasStrick && !strick_.Equals(other.strick_))) return false;
      if (hasHasLdPosAdjusted != other.hasHasLdPosAdjusted || (hasHasLdPosAdjusted && !hasLdPosAdjusted_.Equals(other.hasLdPosAdjusted_))) return false;
      if (hasAdjLp != other.hasAdjLp || (hasAdjLp && !adjLp_.Equals(other.adjLp_))) return false;
      if (hasHitPoint != other.hasHitPoint || (hasHitPoint && !hitPoint_.Equals(other.hitPoint_))) return false;
      if (hasIsBallAdjusting != other.hasIsBallAdjusting || (hasIsBallAdjusting && !isBallAdjusting_.Equals(other.isBallAdjusting_))) return false;
      if (hasAdjBall != other.hasAdjBall || (hasAdjBall && !adjBall_.Equals(other.adjBall_))) return false;
      if (hasAdjStrick != other.hasAdjStrick || (hasAdjStrick && !adjStrick_.Equals(other.adjStrick_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("op_state", hasOpState, opState_, writer);
      PrintField("run_state", hasRunState, runState_, writer);
      PrintField("has_stricked", hasHasStricked, hasStricked_, writer);
      PrintField("strick_id", hasStrickId, strickId_, writer);
      PrintField("strick", hasStrick, strick_, writer);
      PrintField("has_ld_pos_adjusted", hasHasLdPosAdjusted, hasLdPosAdjusted_, writer);
      PrintField("adj_lp", hasAdjLp, adjLp_, writer);
      PrintField("hit_point", hasHitPoint, hitPoint_, writer);
      PrintField("is_ball_adjusting", hasIsBallAdjusting, isBallAdjusting_, writer);
      PrintField("adj_ball", hasAdjBall, adjBall_, writer);
      PrintField("adj_strick", hasAdjStrick, adjStrick_, writer);
    }
    #endregion
    
    public static CCOperateStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateStatus result;
      
      private CCOperateStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateStatus original = result;
          result = new CCOperateStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateStatus.DefaultInstance; }
      }
      
      public override CCOperateStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateStatus) {
          return MergeFrom((CCOperateStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateStatus other) {
        if (other == global::com.golf.proto.CCOperateStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpState) {
          OpState = other.OpState;
        }
        if (other.HasRunState) {
          RunState = other.RunState;
        }
        if (other.HasHasStricked) {
          HasStricked = other.HasStricked;
        }
        if (other.HasStrickId) {
          StrickId = other.StrickId;
        }
        if (other.HasStrick) {
          MergeStrick(other.Strick);
        }
        if (other.HasHasLdPosAdjusted) {
          HasLdPosAdjusted = other.HasLdPosAdjusted;
        }
        if (other.HasAdjLp) {
          MergeAdjLp(other.AdjLp);
        }
        if (other.HasHitPoint) {
          MergeHitPoint(other.HitPoint);
        }
        if (other.HasIsBallAdjusting) {
          IsBallAdjusting = other.IsBallAdjusting;
        }
        if (other.HasAdjBall) {
          MergeAdjBall(other.AdjBall);
        }
        if (other.HasAdjStrick) {
          MergeAdjStrick(other.AdjStrick);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasOpState = input.ReadInt32(ref result.opState_);
              break;
            }
            case 16: {
              result.hasRunState = input.ReadInt32(ref result.runState_);
              break;
            }
            case 24: {
              result.hasHasStricked = input.ReadBool(ref result.hasStricked_);
              break;
            }
            case 32: {
              result.hasStrickId = input.ReadInt32(ref result.strickId_);
              break;
            }
            case 42: {
              global::com.golf.proto.CCStrickRequest.Builder subBuilder = global::com.golf.proto.CCStrickRequest.CreateBuilder();
              if (result.hasStrick) {
                subBuilder.MergeFrom(Strick);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Strick = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasHasLdPosAdjusted = input.ReadBool(ref result.hasLdPosAdjusted_);
              break;
            }
            case 58: {
              global::com.golf.proto.CCAdjustLandingPointRequest.Builder subBuilder = global::com.golf.proto.CCAdjustLandingPointRequest.CreateBuilder();
              if (result.hasAdjLp) {
                subBuilder.MergeFrom(AdjLp);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AdjLp = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasHitPoint) {
                subBuilder.MergeFrom(HitPoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HitPoint = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasIsBallAdjusting = input.ReadBool(ref result.isBallAdjusting_);
              break;
            }
            case 82: {
              global::com.golf.proto.CCAdjustBallRequest.Builder subBuilder = global::com.golf.proto.CCAdjustBallRequest.CreateBuilder();
              if (result.hasAdjBall) {
                subBuilder.MergeFrom(AdjBall);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AdjBall = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::com.golf.proto.CCAdjustStrickRequest.Builder subBuilder = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder();
              if (result.hasAdjStrick) {
                subBuilder.MergeFrom(AdjStrick);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AdjStrick = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasOpState {
        get { return result.hasOpState; }
      }
      public int OpState {
        get { return result.OpState; }
        set { SetOpState(value); }
      }
      public Builder SetOpState(int value) {
        PrepareBuilder();
        result.hasOpState = true;
        result.opState_ = value;
        return this;
      }
      public Builder ClearOpState() {
        PrepareBuilder();
        result.hasOpState = false;
        result.opState_ = 0;
        return this;
      }
      
      public bool HasRunState {
        get { return result.hasRunState; }
      }
      public int RunState {
        get { return result.RunState; }
        set { SetRunState(value); }
      }
      public Builder SetRunState(int value) {
        PrepareBuilder();
        result.hasRunState = true;
        result.runState_ = value;
        return this;
      }
      public Builder ClearRunState() {
        PrepareBuilder();
        result.hasRunState = false;
        result.runState_ = 0;
        return this;
      }
      
      public bool HasHasStricked {
        get { return result.hasHasStricked; }
      }
      public bool HasStricked {
        get { return result.HasStricked; }
        set { SetHasStricked(value); }
      }
      public Builder SetHasStricked(bool value) {
        PrepareBuilder();
        result.hasHasStricked = true;
        result.hasStricked_ = value;
        return this;
      }
      public Builder ClearHasStricked() {
        PrepareBuilder();
        result.hasHasStricked = false;
        result.hasStricked_ = false;
        return this;
      }
      
      public bool HasStrickId {
        get { return result.hasStrickId; }
      }
      public int StrickId {
        get { return result.StrickId; }
        set { SetStrickId(value); }
      }
      public Builder SetStrickId(int value) {
        PrepareBuilder();
        result.hasStrickId = true;
        result.strickId_ = value;
        return this;
      }
      public Builder ClearStrickId() {
        PrepareBuilder();
        result.hasStrickId = false;
        result.strickId_ = 0;
        return this;
      }
      
      public bool HasStrick {
       get { return result.hasStrick; }
      }
      public global::com.golf.proto.CCStrickRequest Strick {
        get { return result.Strick; }
        set { SetStrick(value); }
      }
      public Builder SetStrick(global::com.golf.proto.CCStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrick = true;
        result.strick_ = value;
        return this;
      }
      public Builder SetStrick(global::com.golf.proto.CCStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStrick = true;
        result.strick_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStrick(global::com.golf.proto.CCStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStrick &&
            result.strick_ != global::com.golf.proto.CCStrickRequest.DefaultInstance) {
            result.strick_ = global::com.golf.proto.CCStrickRequest.CreateBuilder(result.strick_).MergeFrom(value).BuildPartial();
        } else {
          result.strick_ = value;
        }
        result.hasStrick = true;
        return this;
      }
      public Builder ClearStrick() {
        PrepareBuilder();
        result.hasStrick = false;
        result.strick_ = null;
        return this;
      }
      
      public bool HasHasLdPosAdjusted {
        get { return result.hasHasLdPosAdjusted; }
      }
      public bool HasLdPosAdjusted {
        get { return result.HasLdPosAdjusted; }
        set { SetHasLdPosAdjusted(value); }
      }
      public Builder SetHasLdPosAdjusted(bool value) {
        PrepareBuilder();
        result.hasHasLdPosAdjusted = true;
        result.hasLdPosAdjusted_ = value;
        return this;
      }
      public Builder ClearHasLdPosAdjusted() {
        PrepareBuilder();
        result.hasHasLdPosAdjusted = false;
        result.hasLdPosAdjusted_ = false;
        return this;
      }
      
      public bool HasAdjLp {
       get { return result.hasAdjLp; }
      }
      public global::com.golf.proto.CCAdjustLandingPointRequest AdjLp {
        get { return result.AdjLp; }
        set { SetAdjLp(value); }
      }
      public Builder SetAdjLp(global::com.golf.proto.CCAdjustLandingPointRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdjLp = true;
        result.adjLp_ = value;
        return this;
      }
      public Builder SetAdjLp(global::com.golf.proto.CCAdjustLandingPointRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAdjLp = true;
        result.adjLp_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAdjLp(global::com.golf.proto.CCAdjustLandingPointRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAdjLp &&
            result.adjLp_ != global::com.golf.proto.CCAdjustLandingPointRequest.DefaultInstance) {
            result.adjLp_ = global::com.golf.proto.CCAdjustLandingPointRequest.CreateBuilder(result.adjLp_).MergeFrom(value).BuildPartial();
        } else {
          result.adjLp_ = value;
        }
        result.hasAdjLp = true;
        return this;
      }
      public Builder ClearAdjLp() {
        PrepareBuilder();
        result.hasAdjLp = false;
        result.adjLp_ = null;
        return this;
      }
      
      public bool HasHitPoint {
       get { return result.hasHitPoint; }
      }
      public global::com.golf.proto.CCVec3FloatToLong HitPoint {
        get { return result.HitPoint; }
        set { SetHitPoint(value); }
      }
      public Builder SetHitPoint(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHitPoint = true;
        result.hitPoint_ = value;
        return this;
      }
      public Builder SetHitPoint(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHitPoint = true;
        result.hitPoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHitPoint(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHitPoint &&
            result.hitPoint_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.hitPoint_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.hitPoint_).MergeFrom(value).BuildPartial();
        } else {
          result.hitPoint_ = value;
        }
        result.hasHitPoint = true;
        return this;
      }
      public Builder ClearHitPoint() {
        PrepareBuilder();
        result.hasHitPoint = false;
        result.hitPoint_ = null;
        return this;
      }
      
      public bool HasIsBallAdjusting {
        get { return result.hasIsBallAdjusting; }
      }
      public bool IsBallAdjusting {
        get { return result.IsBallAdjusting; }
        set { SetIsBallAdjusting(value); }
      }
      public Builder SetIsBallAdjusting(bool value) {
        PrepareBuilder();
        result.hasIsBallAdjusting = true;
        result.isBallAdjusting_ = value;
        return this;
      }
      public Builder ClearIsBallAdjusting() {
        PrepareBuilder();
        result.hasIsBallAdjusting = false;
        result.isBallAdjusting_ = false;
        return this;
      }
      
      public bool HasAdjBall {
       get { return result.hasAdjBall; }
      }
      public global::com.golf.proto.CCAdjustBallRequest AdjBall {
        get { return result.AdjBall; }
        set { SetAdjBall(value); }
      }
      public Builder SetAdjBall(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdjBall = true;
        result.adjBall_ = value;
        return this;
      }
      public Builder SetAdjBall(global::com.golf.proto.CCAdjustBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAdjBall = true;
        result.adjBall_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAdjBall(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAdjBall &&
            result.adjBall_ != global::com.golf.proto.CCAdjustBallRequest.DefaultInstance) {
            result.adjBall_ = global::com.golf.proto.CCAdjustBallRequest.CreateBuilder(result.adjBall_).MergeFrom(value).BuildPartial();
        } else {
          result.adjBall_ = value;
        }
        result.hasAdjBall = true;
        return this;
      }
      public Builder ClearAdjBall() {
        PrepareBuilder();
        result.hasAdjBall = false;
        result.adjBall_ = null;
        return this;
      }
      
      public bool HasAdjStrick {
       get { return result.hasAdjStrick; }
      }
      public global::com.golf.proto.CCAdjustStrickRequest AdjStrick {
        get { return result.AdjStrick; }
        set { SetAdjStrick(value); }
      }
      public Builder SetAdjStrick(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdjStrick = true;
        result.adjStrick_ = value;
        return this;
      }
      public Builder SetAdjStrick(global::com.golf.proto.CCAdjustStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAdjStrick = true;
        result.adjStrick_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAdjStrick(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAdjStrick &&
            result.adjStrick_ != global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance) {
            result.adjStrick_ = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder(result.adjStrick_).MergeFrom(value).BuildPartial();
        } else {
          result.adjStrick_ = value;
        }
        result.hasAdjStrick = true;
        return this;
      }
      public Builder ClearAdjStrick() {
        PrepareBuilder();
        result.hasAdjStrick = false;
        result.adjStrick_ = null;
        return this;
      }
    }
    static CCOperateStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateData : pb::GeneratedMessageLite<CCOperateData, CCOperateData.Builder> {
    private CCOperateData() { }
    private static readonly CCOperateData defaultInstance = new CCOperateData().MakeReadOnly();
    private static readonly string[] _cCOperateDataFieldNames = new string[] { "adjusts", "ball_adjusts", "ball_move_stop", "ball_moves", "chats", "club_suit_selects", "end", "start", "state", "strick" };
    private static readonly uint[] _cCOperateDataFieldTags = new uint[] { 34, 66, 58, 50, 74, 82, 26, 18, 8, 42 };
    public static CCOperateData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateData ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int StartFieldNumber = 2;
    private bool hasStart;
    private global::com.golf.proto.CCOperateDataStart start_;
    public bool HasStart {
      get { return hasStart; }
    }
    public global::com.golf.proto.CCOperateDataStart Start {
      get { return start_ ?? global::com.golf.proto.CCOperateDataStart.DefaultInstance; }
    }
    
    public const int EndFieldNumber = 3;
    private bool hasEnd;
    private global::com.golf.proto.CCOperateDataEnd end_;
    public bool HasEnd {
      get { return hasEnd; }
    }
    public global::com.golf.proto.CCOperateDataEnd End {
      get { return end_ ?? global::com.golf.proto.CCOperateDataEnd.DefaultInstance; }
    }
    
    public const int AdjustsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCOperateDataAdjust> adjusts_ = new pbc::PopsicleList<global::com.golf.proto.CCOperateDataAdjust>();
    public scg::IList<global::com.golf.proto.CCOperateDataAdjust> AdjustsList {
      get { return adjusts_; }
    }
    public int AdjustsCount {
      get { return adjusts_.Count; }
    }
    public global::com.golf.proto.CCOperateDataAdjust GetAdjusts(int index) {
      return adjusts_[index];
    }
    
    public const int StrickFieldNumber = 5;
    private bool hasStrick;
    private global::com.golf.proto.CCOperateDataStrick strick_;
    public bool HasStrick {
      get { return hasStrick; }
    }
    public global::com.golf.proto.CCOperateDataStrick Strick {
      get { return strick_ ?? global::com.golf.proto.CCOperateDataStrick.DefaultInstance; }
    }
    
    public const int BallMovesFieldNumber = 6;
    private bool hasBallMoves;
    private global::com.golf.proto.CCOperateDataBallMoves ballMoves_;
    public bool HasBallMoves {
      get { return hasBallMoves; }
    }
    public global::com.golf.proto.CCOperateDataBallMoves BallMoves {
      get { return ballMoves_ ?? global::com.golf.proto.CCOperateDataBallMoves.DefaultInstance; }
    }
    
    public const int BallMoveStopFieldNumber = 7;
    private bool hasBallMoveStop;
    private global::com.golf.proto.CCOperateDataBallMoveStop ballMoveStop_;
    public bool HasBallMoveStop {
      get { return hasBallMoveStop; }
    }
    public global::com.golf.proto.CCOperateDataBallMoveStop BallMoveStop {
      get { return ballMoveStop_ ?? global::com.golf.proto.CCOperateDataBallMoveStop.DefaultInstance; }
    }
    
    public const int BallAdjustsFieldNumber = 8;
    private pbc::PopsicleList<global::com.golf.proto.CCOperateAdjustBall> ballAdjusts_ = new pbc::PopsicleList<global::com.golf.proto.CCOperateAdjustBall>();
    public scg::IList<global::com.golf.proto.CCOperateAdjustBall> BallAdjustsList {
      get { return ballAdjusts_; }
    }
    public int BallAdjustsCount {
      get { return ballAdjusts_.Count; }
    }
    public global::com.golf.proto.CCOperateAdjustBall GetBallAdjusts(int index) {
      return ballAdjusts_[index];
    }
    
    public const int ChatsFieldNumber = 9;
    private bool hasChats;
    private global::com.golf.proto.CCOpreateChat chats_;
    public bool HasChats {
      get { return hasChats; }
    }
    public global::com.golf.proto.CCOpreateChat Chats {
      get { return chats_ ?? global::com.golf.proto.CCOpreateChat.DefaultInstance; }
    }
    
    public const int ClubSuitSelectsFieldNumber = 10;
    private pbc::PopsicleList<global::com.golf.proto.CCSelectClubSuitInGameRequest> clubSuitSelects_ = new pbc::PopsicleList<global::com.golf.proto.CCSelectClubSuitInGameRequest>();
    public scg::IList<global::com.golf.proto.CCSelectClubSuitInGameRequest> ClubSuitSelectsList {
      get { return clubSuitSelects_; }
    }
    public int ClubSuitSelectsCount {
      get { return clubSuitSelects_.Count; }
    }
    public global::com.golf.proto.CCSelectClubSuitInGameRequest GetClubSuitSelects(int index) {
      return clubSuitSelects_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateDataFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[8], State);
      }
      if (hasStart) {
        output.WriteMessage(2, field_names[7], Start);
      }
      if (hasEnd) {
        output.WriteMessage(3, field_names[6], End);
      }
      if (adjusts_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], adjusts_);
      }
      if (hasStrick) {
        output.WriteMessage(5, field_names[9], Strick);
      }
      if (hasBallMoves) {
        output.WriteMessage(6, field_names[3], BallMoves);
      }
      if (hasBallMoveStop) {
        output.WriteMessage(7, field_names[2], BallMoveStop);
      }
      if (ballAdjusts_.Count > 0) {
        output.WriteMessageArray(8, field_names[1], ballAdjusts_);
      }
      if (hasChats) {
        output.WriteMessage(9, field_names[4], Chats);
      }
      if (clubSuitSelects_.Count > 0) {
        output.WriteMessageArray(10, field_names[5], clubSuitSelects_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasStart) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Start);
      }
      if (hasEnd) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, End);
      }
      foreach (global::com.golf.proto.CCOperateDataAdjust element in AdjustsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasStrick) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Strick);
      }
      if (hasBallMoves) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, BallMoves);
      }
      if (hasBallMoveStop) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, BallMoveStop);
      }
      foreach (global::com.golf.proto.CCOperateAdjustBall element in BallAdjustsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      if (hasChats) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, Chats);
      }
      foreach (global::com.golf.proto.CCSelectClubSuitInGameRequest element in ClubSuitSelectsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasStart) hash ^= start_.GetHashCode();
      if (hasEnd) hash ^= end_.GetHashCode();
      foreach(global::com.golf.proto.CCOperateDataAdjust i in adjusts_)
        hash ^= i.GetHashCode();
      if (hasStrick) hash ^= strick_.GetHashCode();
      if (hasBallMoves) hash ^= ballMoves_.GetHashCode();
      if (hasBallMoveStop) hash ^= ballMoveStop_.GetHashCode();
      foreach(global::com.golf.proto.CCOperateAdjustBall i in ballAdjusts_)
        hash ^= i.GetHashCode();
      if (hasChats) hash ^= chats_.GetHashCode();
      foreach(global::com.golf.proto.CCSelectClubSuitInGameRequest i in clubSuitSelects_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateData other = obj as CCOperateData;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasStart != other.hasStart || (hasStart && !start_.Equals(other.start_))) return false;
      if (hasEnd != other.hasEnd || (hasEnd && !end_.Equals(other.end_))) return false;
      if(adjusts_.Count != other.adjusts_.Count) return false;
      for(int ix=0; ix < adjusts_.Count; ix++)
        if(!adjusts_[ix].Equals(other.adjusts_[ix])) return false;
      if (hasStrick != other.hasStrick || (hasStrick && !strick_.Equals(other.strick_))) return false;
      if (hasBallMoves != other.hasBallMoves || (hasBallMoves && !ballMoves_.Equals(other.ballMoves_))) return false;
      if (hasBallMoveStop != other.hasBallMoveStop || (hasBallMoveStop && !ballMoveStop_.Equals(other.ballMoveStop_))) return false;
      if(ballAdjusts_.Count != other.ballAdjusts_.Count) return false;
      for(int ix=0; ix < ballAdjusts_.Count; ix++)
        if(!ballAdjusts_[ix].Equals(other.ballAdjusts_[ix])) return false;
      if (hasChats != other.hasChats || (hasChats && !chats_.Equals(other.chats_))) return false;
      if(clubSuitSelects_.Count != other.clubSuitSelects_.Count) return false;
      for(int ix=0; ix < clubSuitSelects_.Count; ix++)
        if(!clubSuitSelects_[ix].Equals(other.clubSuitSelects_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("start", hasStart, start_, writer);
      PrintField("end", hasEnd, end_, writer);
      PrintField("adjusts", adjusts_, writer);
      PrintField("strick", hasStrick, strick_, writer);
      PrintField("ball_moves", hasBallMoves, ballMoves_, writer);
      PrintField("ball_move_stop", hasBallMoveStop, ballMoveStop_, writer);
      PrintField("ball_adjusts", ballAdjusts_, writer);
      PrintField("chats", hasChats, chats_, writer);
      PrintField("club_suit_selects", clubSuitSelects_, writer);
    }
    #endregion
    
    public static CCOperateData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateData MakeReadOnly() {
      adjusts_.MakeReadOnly();
      ballAdjusts_.MakeReadOnly();
      clubSuitSelects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateData result;
      
      private CCOperateData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateData original = result;
          result = new CCOperateData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateData DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateData.DefaultInstance; }
      }
      
      public override CCOperateData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateData) {
          return MergeFrom((CCOperateData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateData other) {
        if (other == global::com.golf.proto.CCOperateData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasStart) {
          MergeStart(other.Start);
        }
        if (other.HasEnd) {
          MergeEnd(other.End);
        }
        if (other.adjusts_.Count != 0) {
          result.adjusts_.Add(other.adjusts_);
        }
        if (other.HasStrick) {
          MergeStrick(other.Strick);
        }
        if (other.HasBallMoves) {
          MergeBallMoves(other.BallMoves);
        }
        if (other.HasBallMoveStop) {
          MergeBallMoveStop(other.BallMoveStop);
        }
        if (other.ballAdjusts_.Count != 0) {
          result.ballAdjusts_.Add(other.ballAdjusts_);
        }
        if (other.HasChats) {
          MergeChats(other.Chats);
        }
        if (other.clubSuitSelects_.Count != 0) {
          result.clubSuitSelects_.Add(other.clubSuitSelects_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCOperateDataStart.Builder subBuilder = global::com.golf.proto.CCOperateDataStart.CreateBuilder();
              if (result.hasStart) {
                subBuilder.MergeFrom(Start);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Start = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCOperateDataEnd.Builder subBuilder = global::com.golf.proto.CCOperateDataEnd.CreateBuilder();
              if (result.hasEnd) {
                subBuilder.MergeFrom(End);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              End = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.adjusts_, global::com.golf.proto.CCOperateDataAdjust.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              global::com.golf.proto.CCOperateDataStrick.Builder subBuilder = global::com.golf.proto.CCOperateDataStrick.CreateBuilder();
              if (result.hasStrick) {
                subBuilder.MergeFrom(Strick);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Strick = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::com.golf.proto.CCOperateDataBallMoves.Builder subBuilder = global::com.golf.proto.CCOperateDataBallMoves.CreateBuilder();
              if (result.hasBallMoves) {
                subBuilder.MergeFrom(BallMoves);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallMoves = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::com.golf.proto.CCOperateDataBallMoveStop.Builder subBuilder = global::com.golf.proto.CCOperateDataBallMoveStop.CreateBuilder();
              if (result.hasBallMoveStop) {
                subBuilder.MergeFrom(BallMoveStop);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallMoveStop = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.ballAdjusts_, global::com.golf.proto.CCOperateAdjustBall.DefaultInstance, extensionRegistry);
              break;
            }
            case 74: {
              global::com.golf.proto.CCOpreateChat.Builder subBuilder = global::com.golf.proto.CCOpreateChat.CreateBuilder();
              if (result.hasChats) {
                subBuilder.MergeFrom(Chats);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Chats = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.clubSuitSelects_, global::com.golf.proto.CCSelectClubSuitInGameRequest.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasStart {
       get { return result.hasStart; }
      }
      public global::com.golf.proto.CCOperateDataStart Start {
        get { return result.Start; }
        set { SetStart(value); }
      }
      public Builder SetStart(global::com.golf.proto.CCOperateDataStart value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = value;
        return this;
      }
      public Builder SetStart(global::com.golf.proto.CCOperateDataStart.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStart(global::com.golf.proto.CCOperateDataStart value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStart &&
            result.start_ != global::com.golf.proto.CCOperateDataStart.DefaultInstance) {
            result.start_ = global::com.golf.proto.CCOperateDataStart.CreateBuilder(result.start_).MergeFrom(value).BuildPartial();
        } else {
          result.start_ = value;
        }
        result.hasStart = true;
        return this;
      }
      public Builder ClearStart() {
        PrepareBuilder();
        result.hasStart = false;
        result.start_ = null;
        return this;
      }
      
      public bool HasEnd {
       get { return result.hasEnd; }
      }
      public global::com.golf.proto.CCOperateDataEnd End {
        get { return result.End; }
        set { SetEnd(value); }
      }
      public Builder SetEnd(global::com.golf.proto.CCOperateDataEnd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = value;
        return this;
      }
      public Builder SetEnd(global::com.golf.proto.CCOperateDataEnd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEnd = true;
        result.end_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEnd(global::com.golf.proto.CCOperateDataEnd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEnd &&
            result.end_ != global::com.golf.proto.CCOperateDataEnd.DefaultInstance) {
            result.end_ = global::com.golf.proto.CCOperateDataEnd.CreateBuilder(result.end_).MergeFrom(value).BuildPartial();
        } else {
          result.end_ = value;
        }
        result.hasEnd = true;
        return this;
      }
      public Builder ClearEnd() {
        PrepareBuilder();
        result.hasEnd = false;
        result.end_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCOperateDataAdjust> AdjustsList {
        get { return PrepareBuilder().adjusts_; }
      }
      public int AdjustsCount {
        get { return result.AdjustsCount; }
      }
      public global::com.golf.proto.CCOperateDataAdjust GetAdjusts(int index) {
        return result.GetAdjusts(index);
      }
      public Builder SetAdjusts(int index, global::com.golf.proto.CCOperateDataAdjust value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adjusts_[index] = value;
        return this;
      }
      public Builder SetAdjusts(int index, global::com.golf.proto.CCOperateDataAdjust.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adjusts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAdjusts(global::com.golf.proto.CCOperateDataAdjust value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adjusts_.Add(value);
        return this;
      }
      public Builder AddAdjusts(global::com.golf.proto.CCOperateDataAdjust.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adjusts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAdjusts(scg::IEnumerable<global::com.golf.proto.CCOperateDataAdjust> values) {
        PrepareBuilder();
        result.adjusts_.Add(values);
        return this;
      }
      public Builder ClearAdjusts() {
        PrepareBuilder();
        result.adjusts_.Clear();
        return this;
      }
      
      public bool HasStrick {
       get { return result.hasStrick; }
      }
      public global::com.golf.proto.CCOperateDataStrick Strick {
        get { return result.Strick; }
        set { SetStrick(value); }
      }
      public Builder SetStrick(global::com.golf.proto.CCOperateDataStrick value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrick = true;
        result.strick_ = value;
        return this;
      }
      public Builder SetStrick(global::com.golf.proto.CCOperateDataStrick.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStrick = true;
        result.strick_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStrick(global::com.golf.proto.CCOperateDataStrick value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStrick &&
            result.strick_ != global::com.golf.proto.CCOperateDataStrick.DefaultInstance) {
            result.strick_ = global::com.golf.proto.CCOperateDataStrick.CreateBuilder(result.strick_).MergeFrom(value).BuildPartial();
        } else {
          result.strick_ = value;
        }
        result.hasStrick = true;
        return this;
      }
      public Builder ClearStrick() {
        PrepareBuilder();
        result.hasStrick = false;
        result.strick_ = null;
        return this;
      }
      
      public bool HasBallMoves {
       get { return result.hasBallMoves; }
      }
      public global::com.golf.proto.CCOperateDataBallMoves BallMoves {
        get { return result.BallMoves; }
        set { SetBallMoves(value); }
      }
      public Builder SetBallMoves(global::com.golf.proto.CCOperateDataBallMoves value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallMoves = true;
        result.ballMoves_ = value;
        return this;
      }
      public Builder SetBallMoves(global::com.golf.proto.CCOperateDataBallMoves.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallMoves = true;
        result.ballMoves_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallMoves(global::com.golf.proto.CCOperateDataBallMoves value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallMoves &&
            result.ballMoves_ != global::com.golf.proto.CCOperateDataBallMoves.DefaultInstance) {
            result.ballMoves_ = global::com.golf.proto.CCOperateDataBallMoves.CreateBuilder(result.ballMoves_).MergeFrom(value).BuildPartial();
        } else {
          result.ballMoves_ = value;
        }
        result.hasBallMoves = true;
        return this;
      }
      public Builder ClearBallMoves() {
        PrepareBuilder();
        result.hasBallMoves = false;
        result.ballMoves_ = null;
        return this;
      }
      
      public bool HasBallMoveStop {
       get { return result.hasBallMoveStop; }
      }
      public global::com.golf.proto.CCOperateDataBallMoveStop BallMoveStop {
        get { return result.BallMoveStop; }
        set { SetBallMoveStop(value); }
      }
      public Builder SetBallMoveStop(global::com.golf.proto.CCOperateDataBallMoveStop value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallMoveStop = true;
        result.ballMoveStop_ = value;
        return this;
      }
      public Builder SetBallMoveStop(global::com.golf.proto.CCOperateDataBallMoveStop.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallMoveStop = true;
        result.ballMoveStop_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallMoveStop(global::com.golf.proto.CCOperateDataBallMoveStop value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallMoveStop &&
            result.ballMoveStop_ != global::com.golf.proto.CCOperateDataBallMoveStop.DefaultInstance) {
            result.ballMoveStop_ = global::com.golf.proto.CCOperateDataBallMoveStop.CreateBuilder(result.ballMoveStop_).MergeFrom(value).BuildPartial();
        } else {
          result.ballMoveStop_ = value;
        }
        result.hasBallMoveStop = true;
        return this;
      }
      public Builder ClearBallMoveStop() {
        PrepareBuilder();
        result.hasBallMoveStop = false;
        result.ballMoveStop_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCOperateAdjustBall> BallAdjustsList {
        get { return PrepareBuilder().ballAdjusts_; }
      }
      public int BallAdjustsCount {
        get { return result.BallAdjustsCount; }
      }
      public global::com.golf.proto.CCOperateAdjustBall GetBallAdjusts(int index) {
        return result.GetBallAdjusts(index);
      }
      public Builder SetBallAdjusts(int index, global::com.golf.proto.CCOperateAdjustBall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ballAdjusts_[index] = value;
        return this;
      }
      public Builder SetBallAdjusts(int index, global::com.golf.proto.CCOperateAdjustBall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ballAdjusts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBallAdjusts(global::com.golf.proto.CCOperateAdjustBall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ballAdjusts_.Add(value);
        return this;
      }
      public Builder AddBallAdjusts(global::com.golf.proto.CCOperateAdjustBall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ballAdjusts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBallAdjusts(scg::IEnumerable<global::com.golf.proto.CCOperateAdjustBall> values) {
        PrepareBuilder();
        result.ballAdjusts_.Add(values);
        return this;
      }
      public Builder ClearBallAdjusts() {
        PrepareBuilder();
        result.ballAdjusts_.Clear();
        return this;
      }
      
      public bool HasChats {
       get { return result.hasChats; }
      }
      public global::com.golf.proto.CCOpreateChat Chats {
        get { return result.Chats; }
        set { SetChats(value); }
      }
      public Builder SetChats(global::com.golf.proto.CCOpreateChat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChats = true;
        result.chats_ = value;
        return this;
      }
      public Builder SetChats(global::com.golf.proto.CCOpreateChat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChats = true;
        result.chats_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChats(global::com.golf.proto.CCOpreateChat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChats &&
            result.chats_ != global::com.golf.proto.CCOpreateChat.DefaultInstance) {
            result.chats_ = global::com.golf.proto.CCOpreateChat.CreateBuilder(result.chats_).MergeFrom(value).BuildPartial();
        } else {
          result.chats_ = value;
        }
        result.hasChats = true;
        return this;
      }
      public Builder ClearChats() {
        PrepareBuilder();
        result.hasChats = false;
        result.chats_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCSelectClubSuitInGameRequest> ClubSuitSelectsList {
        get { return PrepareBuilder().clubSuitSelects_; }
      }
      public int ClubSuitSelectsCount {
        get { return result.ClubSuitSelectsCount; }
      }
      public global::com.golf.proto.CCSelectClubSuitInGameRequest GetClubSuitSelects(int index) {
        return result.GetClubSuitSelects(index);
      }
      public Builder SetClubSuitSelects(int index, global::com.golf.proto.CCSelectClubSuitInGameRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.clubSuitSelects_[index] = value;
        return this;
      }
      public Builder SetClubSuitSelects(int index, global::com.golf.proto.CCSelectClubSuitInGameRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.clubSuitSelects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddClubSuitSelects(global::com.golf.proto.CCSelectClubSuitInGameRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.clubSuitSelects_.Add(value);
        return this;
      }
      public Builder AddClubSuitSelects(global::com.golf.proto.CCSelectClubSuitInGameRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.clubSuitSelects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeClubSuitSelects(scg::IEnumerable<global::com.golf.proto.CCSelectClubSuitInGameRequest> values) {
        PrepareBuilder();
        result.clubSuitSelects_.Add(values);
        return this;
      }
      public Builder ClearClubSuitSelects() {
        PrepareBuilder();
        result.clubSuitSelects_.Clear();
        return this;
      }
    }
    static CCOperateData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOpreateChat : pb::GeneratedMessageLite<CCOpreateChat, CCOpreateChat.Builder> {
    private CCOpreateChat() { }
    private static readonly CCOpreateChat defaultInstance = new CCOpreateChat().MakeReadOnly();
    private static readonly string[] _cCOpreateChatFieldNames = new string[] { "oppo_chats", "self_chats", "state" };
    private static readonly uint[] _cCOpreateChatFieldTags = new uint[] { 26, 18, 8 };
    public static CCOpreateChat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOpreateChat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOpreateChat ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int SelfChatsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCChatRequest> selfChats_ = new pbc::PopsicleList<global::com.golf.proto.CCChatRequest>();
    public scg::IList<global::com.golf.proto.CCChatRequest> SelfChatsList {
      get { return selfChats_; }
    }
    public int SelfChatsCount {
      get { return selfChats_.Count; }
    }
    public global::com.golf.proto.CCChatRequest GetSelfChats(int index) {
      return selfChats_[index];
    }
    
    public const int OppoChatsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCChatRequest> oppoChats_ = new pbc::PopsicleList<global::com.golf.proto.CCChatRequest>();
    public scg::IList<global::com.golf.proto.CCChatRequest> OppoChatsList {
      get { return oppoChats_; }
    }
    public int OppoChatsCount {
      get { return oppoChats_.Count; }
    }
    public global::com.golf.proto.CCChatRequest GetOppoChats(int index) {
      return oppoChats_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOpreateChatFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[2], State);
      }
      if (selfChats_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], selfChats_);
      }
      if (oppoChats_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], oppoChats_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      foreach (global::com.golf.proto.CCChatRequest element in SelfChatsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::com.golf.proto.CCChatRequest element in OppoChatsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      foreach(global::com.golf.proto.CCChatRequest i in selfChats_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCChatRequest i in oppoChats_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOpreateChat other = obj as CCOpreateChat;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if(selfChats_.Count != other.selfChats_.Count) return false;
      for(int ix=0; ix < selfChats_.Count; ix++)
        if(!selfChats_[ix].Equals(other.selfChats_[ix])) return false;
      if(oppoChats_.Count != other.oppoChats_.Count) return false;
      for(int ix=0; ix < oppoChats_.Count; ix++)
        if(!oppoChats_[ix].Equals(other.oppoChats_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("self_chats", selfChats_, writer);
      PrintField("oppo_chats", oppoChats_, writer);
    }
    #endregion
    
    public static CCOpreateChat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOpreateChat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOpreateChat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOpreateChat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOpreateChat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOpreateChat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOpreateChat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOpreateChat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOpreateChat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOpreateChat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOpreateChat MakeReadOnly() {
      selfChats_.MakeReadOnly();
      oppoChats_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOpreateChat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOpreateChat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOpreateChat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOpreateChat result;
      
      private CCOpreateChat PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOpreateChat original = result;
          result = new CCOpreateChat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOpreateChat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOpreateChat DefaultInstanceForType {
        get { return global::com.golf.proto.CCOpreateChat.DefaultInstance; }
      }
      
      public override CCOpreateChat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOpreateChat) {
          return MergeFrom((CCOpreateChat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOpreateChat other) {
        if (other == global::com.golf.proto.CCOpreateChat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.selfChats_.Count != 0) {
          result.selfChats_.Add(other.selfChats_);
        }
        if (other.oppoChats_.Count != 0) {
          result.oppoChats_.Add(other.oppoChats_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOpreateChatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOpreateChatFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.selfChats_, global::com.golf.proto.CCChatRequest.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.oppoChats_, global::com.golf.proto.CCChatRequest.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCChatRequest> SelfChatsList {
        get { return PrepareBuilder().selfChats_; }
      }
      public int SelfChatsCount {
        get { return result.SelfChatsCount; }
      }
      public global::com.golf.proto.CCChatRequest GetSelfChats(int index) {
        return result.GetSelfChats(index);
      }
      public Builder SetSelfChats(int index, global::com.golf.proto.CCChatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.selfChats_[index] = value;
        return this;
      }
      public Builder SetSelfChats(int index, global::com.golf.proto.CCChatRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.selfChats_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSelfChats(global::com.golf.proto.CCChatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.selfChats_.Add(value);
        return this;
      }
      public Builder AddSelfChats(global::com.golf.proto.CCChatRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.selfChats_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSelfChats(scg::IEnumerable<global::com.golf.proto.CCChatRequest> values) {
        PrepareBuilder();
        result.selfChats_.Add(values);
        return this;
      }
      public Builder ClearSelfChats() {
        PrepareBuilder();
        result.selfChats_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCChatRequest> OppoChatsList {
        get { return PrepareBuilder().oppoChats_; }
      }
      public int OppoChatsCount {
        get { return result.OppoChatsCount; }
      }
      public global::com.golf.proto.CCChatRequest GetOppoChats(int index) {
        return result.GetOppoChats(index);
      }
      public Builder SetOppoChats(int index, global::com.golf.proto.CCChatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.oppoChats_[index] = value;
        return this;
      }
      public Builder SetOppoChats(int index, global::com.golf.proto.CCChatRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.oppoChats_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOppoChats(global::com.golf.proto.CCChatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.oppoChats_.Add(value);
        return this;
      }
      public Builder AddOppoChats(global::com.golf.proto.CCChatRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.oppoChats_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOppoChats(scg::IEnumerable<global::com.golf.proto.CCChatRequest> values) {
        PrepareBuilder();
        result.oppoChats_.Add(values);
        return this;
      }
      public Builder ClearOppoChats() {
        PrepareBuilder();
        result.oppoChats_.Clear();
        return this;
      }
    }
    static CCOpreateChat() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateAdjustBall : pb::GeneratedMessageLite<CCOperateAdjustBall, CCOperateAdjustBall.Builder> {
    private CCOperateAdjustBall() { }
    private static readonly CCOperateAdjustBall defaultInstance = new CCOperateAdjustBall().MakeReadOnly();
    private static readonly string[] _cCOperateAdjustBallFieldNames = new string[] { "adjs", "over", "selects", "start", "state" };
    private static readonly uint[] _cCOperateAdjustBallFieldTags = new uint[] { 26, 34, 42, 18, 8 };
    public static CCOperateAdjustBall DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateAdjustBall DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateAdjustBall ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int StartFieldNumber = 2;
    private bool hasStart;
    private global::com.golf.proto.CCAdjustBallRequest start_;
    public bool HasStart {
      get { return hasStart; }
    }
    public global::com.golf.proto.CCAdjustBallRequest Start {
      get { return start_ ?? global::com.golf.proto.CCAdjustBallRequest.DefaultInstance; }
    }
    
    public const int AdjsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCAdjustBallRequest> adjs_ = new pbc::PopsicleList<global::com.golf.proto.CCAdjustBallRequest>();
    public scg::IList<global::com.golf.proto.CCAdjustBallRequest> AdjsList {
      get { return adjs_; }
    }
    public int AdjsCount {
      get { return adjs_.Count; }
    }
    public global::com.golf.proto.CCAdjustBallRequest GetAdjs(int index) {
      return adjs_[index];
    }
    
    public const int OverFieldNumber = 4;
    private bool hasOver;
    private global::com.golf.proto.CCAdjustBallRequest over_;
    public bool HasOver {
      get { return hasOver; }
    }
    public global::com.golf.proto.CCAdjustBallRequest Over {
      get { return over_ ?? global::com.golf.proto.CCAdjustBallRequest.DefaultInstance; }
    }
    
    public const int SelectsFieldNumber = 5;
    private pbc::PopsicleList<global::com.golf.proto.CCSelectBallRequest> selects_ = new pbc::PopsicleList<global::com.golf.proto.CCSelectBallRequest>();
    public scg::IList<global::com.golf.proto.CCSelectBallRequest> SelectsList {
      get { return selects_; }
    }
    public int SelectsCount {
      get { return selects_.Count; }
    }
    public global::com.golf.proto.CCSelectBallRequest GetSelects(int index) {
      return selects_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateAdjustBallFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[4], State);
      }
      if (hasStart) {
        output.WriteMessage(2, field_names[3], Start);
      }
      if (adjs_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], adjs_);
      }
      if (hasOver) {
        output.WriteMessage(4, field_names[1], Over);
      }
      if (selects_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], selects_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasStart) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Start);
      }
      foreach (global::com.golf.proto.CCAdjustBallRequest element in AdjsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasOver) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Over);
      }
      foreach (global::com.golf.proto.CCSelectBallRequest element in SelectsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasStart) hash ^= start_.GetHashCode();
      foreach(global::com.golf.proto.CCAdjustBallRequest i in adjs_)
        hash ^= i.GetHashCode();
      if (hasOver) hash ^= over_.GetHashCode();
      foreach(global::com.golf.proto.CCSelectBallRequest i in selects_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateAdjustBall other = obj as CCOperateAdjustBall;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasStart != other.hasStart || (hasStart && !start_.Equals(other.start_))) return false;
      if(adjs_.Count != other.adjs_.Count) return false;
      for(int ix=0; ix < adjs_.Count; ix++)
        if(!adjs_[ix].Equals(other.adjs_[ix])) return false;
      if (hasOver != other.hasOver || (hasOver && !over_.Equals(other.over_))) return false;
      if(selects_.Count != other.selects_.Count) return false;
      for(int ix=0; ix < selects_.Count; ix++)
        if(!selects_[ix].Equals(other.selects_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("start", hasStart, start_, writer);
      PrintField("adjs", adjs_, writer);
      PrintField("over", hasOver, over_, writer);
      PrintField("selects", selects_, writer);
    }
    #endregion
    
    public static CCOperateAdjustBall ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateAdjustBall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateAdjustBall ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateAdjustBall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateAdjustBall ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateAdjustBall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateAdjustBall ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateAdjustBall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateAdjustBall ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateAdjustBall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateAdjustBall MakeReadOnly() {
      adjs_.MakeReadOnly();
      selects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateAdjustBall prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateAdjustBall, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateAdjustBall cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateAdjustBall result;
      
      private CCOperateAdjustBall PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateAdjustBall original = result;
          result = new CCOperateAdjustBall();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateAdjustBall MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateAdjustBall DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateAdjustBall.DefaultInstance; }
      }
      
      public override CCOperateAdjustBall BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateAdjustBall) {
          return MergeFrom((CCOperateAdjustBall) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateAdjustBall other) {
        if (other == global::com.golf.proto.CCOperateAdjustBall.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasStart) {
          MergeStart(other.Start);
        }
        if (other.adjs_.Count != 0) {
          result.adjs_.Add(other.adjs_);
        }
        if (other.HasOver) {
          MergeOver(other.Over);
        }
        if (other.selects_.Count != 0) {
          result.selects_.Add(other.selects_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateAdjustBallFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateAdjustBallFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCAdjustBallRequest.Builder subBuilder = global::com.golf.proto.CCAdjustBallRequest.CreateBuilder();
              if (result.hasStart) {
                subBuilder.MergeFrom(Start);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Start = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.adjs_, global::com.golf.proto.CCAdjustBallRequest.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              global::com.golf.proto.CCAdjustBallRequest.Builder subBuilder = global::com.golf.proto.CCAdjustBallRequest.CreateBuilder();
              if (result.hasOver) {
                subBuilder.MergeFrom(Over);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Over = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.selects_, global::com.golf.proto.CCSelectBallRequest.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasStart {
       get { return result.hasStart; }
      }
      public global::com.golf.proto.CCAdjustBallRequest Start {
        get { return result.Start; }
        set { SetStart(value); }
      }
      public Builder SetStart(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = value;
        return this;
      }
      public Builder SetStart(global::com.golf.proto.CCAdjustBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStart(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStart &&
            result.start_ != global::com.golf.proto.CCAdjustBallRequest.DefaultInstance) {
            result.start_ = global::com.golf.proto.CCAdjustBallRequest.CreateBuilder(result.start_).MergeFrom(value).BuildPartial();
        } else {
          result.start_ = value;
        }
        result.hasStart = true;
        return this;
      }
      public Builder ClearStart() {
        PrepareBuilder();
        result.hasStart = false;
        result.start_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCAdjustBallRequest> AdjsList {
        get { return PrepareBuilder().adjs_; }
      }
      public int AdjsCount {
        get { return result.AdjsCount; }
      }
      public global::com.golf.proto.CCAdjustBallRequest GetAdjs(int index) {
        return result.GetAdjs(index);
      }
      public Builder SetAdjs(int index, global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adjs_[index] = value;
        return this;
      }
      public Builder SetAdjs(int index, global::com.golf.proto.CCAdjustBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adjs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAdjs(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adjs_.Add(value);
        return this;
      }
      public Builder AddAdjs(global::com.golf.proto.CCAdjustBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adjs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAdjs(scg::IEnumerable<global::com.golf.proto.CCAdjustBallRequest> values) {
        PrepareBuilder();
        result.adjs_.Add(values);
        return this;
      }
      public Builder ClearAdjs() {
        PrepareBuilder();
        result.adjs_.Clear();
        return this;
      }
      
      public bool HasOver {
       get { return result.hasOver; }
      }
      public global::com.golf.proto.CCAdjustBallRequest Over {
        get { return result.Over; }
        set { SetOver(value); }
      }
      public Builder SetOver(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOver = true;
        result.over_ = value;
        return this;
      }
      public Builder SetOver(global::com.golf.proto.CCAdjustBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOver = true;
        result.over_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOver(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOver &&
            result.over_ != global::com.golf.proto.CCAdjustBallRequest.DefaultInstance) {
            result.over_ = global::com.golf.proto.CCAdjustBallRequest.CreateBuilder(result.over_).MergeFrom(value).BuildPartial();
        } else {
          result.over_ = value;
        }
        result.hasOver = true;
        return this;
      }
      public Builder ClearOver() {
        PrepareBuilder();
        result.hasOver = false;
        result.over_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCSelectBallRequest> SelectsList {
        get { return PrepareBuilder().selects_; }
      }
      public int SelectsCount {
        get { return result.SelectsCount; }
      }
      public global::com.golf.proto.CCSelectBallRequest GetSelects(int index) {
        return result.GetSelects(index);
      }
      public Builder SetSelects(int index, global::com.golf.proto.CCSelectBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.selects_[index] = value;
        return this;
      }
      public Builder SetSelects(int index, global::com.golf.proto.CCSelectBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.selects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSelects(global::com.golf.proto.CCSelectBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.selects_.Add(value);
        return this;
      }
      public Builder AddSelects(global::com.golf.proto.CCSelectBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.selects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSelects(scg::IEnumerable<global::com.golf.proto.CCSelectBallRequest> values) {
        PrepareBuilder();
        result.selects_.Add(values);
        return this;
      }
      public Builder ClearSelects() {
        PrepareBuilder();
        result.selects_.Clear();
        return this;
      }
    }
    static CCOperateAdjustBall() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateDataStart : pb::GeneratedMessageLite<CCOperateDataStart, CCOperateDataStart.Builder> {
    private CCOperateDataStart() { }
    private static readonly CCOperateDataStart defaultInstance = new CCOperateDataStart().MakeReadOnly();
    private static readonly string[] _cCOperateDataStartFieldNames = new string[] { "ball_id", "ball_status", "club_suit_data", "club_suit_id", "state" };
    private static readonly uint[] _cCOperateDataStartFieldTags = new uint[] { 24, 18, 34, 40, 8 };
    public static CCOperateDataStart DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateDataStart DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateDataStart ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int BallStatusFieldNumber = 2;
    private bool hasBallStatus;
    private global::com.golf.proto.CCBallStatus ballStatus_;
    public bool HasBallStatus {
      get { return hasBallStatus; }
    }
    public global::com.golf.proto.CCBallStatus BallStatus {
      get { return ballStatus_ ?? global::com.golf.proto.CCBallStatus.DefaultInstance; }
    }
    
    public const int BallIdFieldNumber = 3;
    private bool hasBallId;
    private int ballId_;
    public bool HasBallId {
      get { return hasBallId; }
    }
    public int BallId {
      get { return ballId_; }
    }
    
    public const int ClubSuitDataFieldNumber = 4;
    private bool hasClubSuitData;
    private global::com.golf.proto.CCClubSuitData clubSuitData_;
    public bool HasClubSuitData {
      get { return hasClubSuitData; }
    }
    public global::com.golf.proto.CCClubSuitData ClubSuitData {
      get { return clubSuitData_ ?? global::com.golf.proto.CCClubSuitData.DefaultInstance; }
    }
    
    public const int ClubSuitIdFieldNumber = 5;
    private bool hasClubSuitId;
    private int clubSuitId_;
    public bool HasClubSuitId {
      get { return hasClubSuitId; }
    }
    public int ClubSuitId {
      get { return clubSuitId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateDataStartFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[4], State);
      }
      if (hasBallStatus) {
        output.WriteMessage(2, field_names[1], BallStatus);
      }
      if (hasBallId) {
        output.WriteInt32(3, field_names[0], BallId);
      }
      if (hasClubSuitData) {
        output.WriteMessage(4, field_names[2], ClubSuitData);
      }
      if (hasClubSuitId) {
        output.WriteInt32(5, field_names[3], ClubSuitId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasBallStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BallStatus);
      }
      if (hasBallId) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, BallId);
      }
      if (hasClubSuitData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, ClubSuitData);
      }
      if (hasClubSuitId) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ClubSuitId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasBallStatus) hash ^= ballStatus_.GetHashCode();
      if (hasBallId) hash ^= ballId_.GetHashCode();
      if (hasClubSuitData) hash ^= clubSuitData_.GetHashCode();
      if (hasClubSuitId) hash ^= clubSuitId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateDataStart other = obj as CCOperateDataStart;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasBallStatus != other.hasBallStatus || (hasBallStatus && !ballStatus_.Equals(other.ballStatus_))) return false;
      if (hasBallId != other.hasBallId || (hasBallId && !ballId_.Equals(other.ballId_))) return false;
      if (hasClubSuitData != other.hasClubSuitData || (hasClubSuitData && !clubSuitData_.Equals(other.clubSuitData_))) return false;
      if (hasClubSuitId != other.hasClubSuitId || (hasClubSuitId && !clubSuitId_.Equals(other.clubSuitId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("ball_status", hasBallStatus, ballStatus_, writer);
      PrintField("ball_id", hasBallId, ballId_, writer);
      PrintField("club_suit_data", hasClubSuitData, clubSuitData_, writer);
      PrintField("club_suit_id", hasClubSuitId, clubSuitId_, writer);
    }
    #endregion
    
    public static CCOperateDataStart ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataStart ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataStart ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataStart ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateDataStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateDataStart ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateDataStart MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateDataStart prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateDataStart, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateDataStart cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateDataStart result;
      
      private CCOperateDataStart PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateDataStart original = result;
          result = new CCOperateDataStart();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateDataStart MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateDataStart DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateDataStart.DefaultInstance; }
      }
      
      public override CCOperateDataStart BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateDataStart) {
          return MergeFrom((CCOperateDataStart) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateDataStart other) {
        if (other == global::com.golf.proto.CCOperateDataStart.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasBallStatus) {
          MergeBallStatus(other.BallStatus);
        }
        if (other.HasBallId) {
          BallId = other.BallId;
        }
        if (other.HasClubSuitData) {
          MergeClubSuitData(other.ClubSuitData);
        }
        if (other.HasClubSuitId) {
          ClubSuitId = other.ClubSuitId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateDataStartFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateDataStartFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBallStatus.Builder subBuilder = global::com.golf.proto.CCBallStatus.CreateBuilder();
              if (result.hasBallStatus) {
                subBuilder.MergeFrom(BallStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallStatus = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasBallId = input.ReadInt32(ref result.ballId_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCClubSuitData.Builder subBuilder = global::com.golf.proto.CCClubSuitData.CreateBuilder();
              if (result.hasClubSuitData) {
                subBuilder.MergeFrom(ClubSuitData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClubSuitData = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasClubSuitId = input.ReadInt32(ref result.clubSuitId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasBallStatus {
       get { return result.hasBallStatus; }
      }
      public global::com.golf.proto.CCBallStatus BallStatus {
        get { return result.BallStatus; }
        set { SetBallStatus(value); }
      }
      public Builder SetBallStatus(global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallStatus = true;
        result.ballStatus_ = value;
        return this;
      }
      public Builder SetBallStatus(global::com.golf.proto.CCBallStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallStatus = true;
        result.ballStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallStatus(global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallStatus &&
            result.ballStatus_ != global::com.golf.proto.CCBallStatus.DefaultInstance) {
            result.ballStatus_ = global::com.golf.proto.CCBallStatus.CreateBuilder(result.ballStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.ballStatus_ = value;
        }
        result.hasBallStatus = true;
        return this;
      }
      public Builder ClearBallStatus() {
        PrepareBuilder();
        result.hasBallStatus = false;
        result.ballStatus_ = null;
        return this;
      }
      
      public bool HasBallId {
        get { return result.hasBallId; }
      }
      public int BallId {
        get { return result.BallId; }
        set { SetBallId(value); }
      }
      public Builder SetBallId(int value) {
        PrepareBuilder();
        result.hasBallId = true;
        result.ballId_ = value;
        return this;
      }
      public Builder ClearBallId() {
        PrepareBuilder();
        result.hasBallId = false;
        result.ballId_ = 0;
        return this;
      }
      
      public bool HasClubSuitData {
       get { return result.hasClubSuitData; }
      }
      public global::com.golf.proto.CCClubSuitData ClubSuitData {
        get { return result.ClubSuitData; }
        set { SetClubSuitData(value); }
      }
      public Builder SetClubSuitData(global::com.golf.proto.CCClubSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClubSuitData = true;
        result.clubSuitData_ = value;
        return this;
      }
      public Builder SetClubSuitData(global::com.golf.proto.CCClubSuitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClubSuitData = true;
        result.clubSuitData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClubSuitData(global::com.golf.proto.CCClubSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClubSuitData &&
            result.clubSuitData_ != global::com.golf.proto.CCClubSuitData.DefaultInstance) {
            result.clubSuitData_ = global::com.golf.proto.CCClubSuitData.CreateBuilder(result.clubSuitData_).MergeFrom(value).BuildPartial();
        } else {
          result.clubSuitData_ = value;
        }
        result.hasClubSuitData = true;
        return this;
      }
      public Builder ClearClubSuitData() {
        PrepareBuilder();
        result.hasClubSuitData = false;
        result.clubSuitData_ = null;
        return this;
      }
      
      public bool HasClubSuitId {
        get { return result.hasClubSuitId; }
      }
      public int ClubSuitId {
        get { return result.ClubSuitId; }
        set { SetClubSuitId(value); }
      }
      public Builder SetClubSuitId(int value) {
        PrepareBuilder();
        result.hasClubSuitId = true;
        result.clubSuitId_ = value;
        return this;
      }
      public Builder ClearClubSuitId() {
        PrepareBuilder();
        result.hasClubSuitId = false;
        result.clubSuitId_ = 0;
        return this;
      }
    }
    static CCOperateDataStart() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateDataEnd : pb::GeneratedMessageLite<CCOperateDataEnd, CCOperateDataEnd.Builder> {
    private CCOperateDataEnd() { }
    private static readonly CCOperateDataEnd defaultInstance = new CCOperateDataEnd().MakeReadOnly();
    private static readonly string[] _cCOperateDataEndFieldNames = new string[] { "is_actual_ball_stop", "state" };
    private static readonly uint[] _cCOperateDataEndFieldTags = new uint[] { 16, 8 };
    public static CCOperateDataEnd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateDataEnd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateDataEnd ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int IsActualBallStopFieldNumber = 2;
    private bool hasIsActualBallStop;
    private bool isActualBallStop_;
    public bool HasIsActualBallStop {
      get { return hasIsActualBallStop; }
    }
    public bool IsActualBallStop {
      get { return isActualBallStop_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateDataEndFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[1], State);
      }
      if (hasIsActualBallStop) {
        output.WriteBool(2, field_names[0], IsActualBallStop);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasIsActualBallStop) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, IsActualBallStop);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasIsActualBallStop) hash ^= isActualBallStop_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateDataEnd other = obj as CCOperateDataEnd;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasIsActualBallStop != other.hasIsActualBallStop || (hasIsActualBallStop && !isActualBallStop_.Equals(other.isActualBallStop_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("is_actual_ball_stop", hasIsActualBallStop, isActualBallStop_, writer);
    }
    #endregion
    
    public static CCOperateDataEnd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataEnd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataEnd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataEnd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateDataEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateDataEnd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateDataEnd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateDataEnd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateDataEnd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateDataEnd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateDataEnd result;
      
      private CCOperateDataEnd PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateDataEnd original = result;
          result = new CCOperateDataEnd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateDataEnd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateDataEnd DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateDataEnd.DefaultInstance; }
      }
      
      public override CCOperateDataEnd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateDataEnd) {
          return MergeFrom((CCOperateDataEnd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateDataEnd other) {
        if (other == global::com.golf.proto.CCOperateDataEnd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasIsActualBallStop) {
          IsActualBallStop = other.IsActualBallStop;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateDataEndFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateDataEndFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 16: {
              result.hasIsActualBallStop = input.ReadBool(ref result.isActualBallStop_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasIsActualBallStop {
        get { return result.hasIsActualBallStop; }
      }
      public bool IsActualBallStop {
        get { return result.IsActualBallStop; }
        set { SetIsActualBallStop(value); }
      }
      public Builder SetIsActualBallStop(bool value) {
        PrepareBuilder();
        result.hasIsActualBallStop = true;
        result.isActualBallStop_ = value;
        return this;
      }
      public Builder ClearIsActualBallStop() {
        PrepareBuilder();
        result.hasIsActualBallStop = false;
        result.isActualBallStop_ = false;
        return this;
      }
    }
    static CCOperateDataEnd() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateDataAdjust : pb::GeneratedMessageLite<CCOperateDataAdjust, CCOperateDataAdjust.Builder> {
    private CCOperateDataAdjust() { }
    private static readonly CCOperateDataAdjust defaultInstance = new CCOperateDataAdjust().MakeReadOnly();
    private static readonly string[] _cCOperateDataAdjustFieldNames = new string[] { "adj_lps", "adj_stricks", "ch_views", "state" };
    private static readonly uint[] _cCOperateDataAdjustFieldTags = new uint[] { 18, 34, 26, 8 };
    public static CCOperateDataAdjust DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateDataAdjust DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateDataAdjust ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int AdjLpsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCAdjustLandingPointRequest> adjLps_ = new pbc::PopsicleList<global::com.golf.proto.CCAdjustLandingPointRequest>();
    public scg::IList<global::com.golf.proto.CCAdjustLandingPointRequest> AdjLpsList {
      get { return adjLps_; }
    }
    public int AdjLpsCount {
      get { return adjLps_.Count; }
    }
    public global::com.golf.proto.CCAdjustLandingPointRequest GetAdjLps(int index) {
      return adjLps_[index];
    }
    
    public const int ChViewsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCChangeViewRequest> chViews_ = new pbc::PopsicleList<global::com.golf.proto.CCChangeViewRequest>();
    public scg::IList<global::com.golf.proto.CCChangeViewRequest> ChViewsList {
      get { return chViews_; }
    }
    public int ChViewsCount {
      get { return chViews_.Count; }
    }
    public global::com.golf.proto.CCChangeViewRequest GetChViews(int index) {
      return chViews_[index];
    }
    
    public const int AdjStricksFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCOperateDataAdjust_AdjStrick> adjStricks_ = new pbc::PopsicleList<global::com.golf.proto.CCOperateDataAdjust_AdjStrick>();
    public scg::IList<global::com.golf.proto.CCOperateDataAdjust_AdjStrick> AdjStricksList {
      get { return adjStricks_; }
    }
    public int AdjStricksCount {
      get { return adjStricks_.Count; }
    }
    public global::com.golf.proto.CCOperateDataAdjust_AdjStrick GetAdjStricks(int index) {
      return adjStricks_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateDataAdjustFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[3], State);
      }
      if (adjLps_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], adjLps_);
      }
      if (chViews_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], chViews_);
      }
      if (adjStricks_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], adjStricks_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      foreach (global::com.golf.proto.CCAdjustLandingPointRequest element in AdjLpsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::com.golf.proto.CCChangeViewRequest element in ChViewsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::com.golf.proto.CCOperateDataAdjust_AdjStrick element in AdjStricksList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      foreach(global::com.golf.proto.CCAdjustLandingPointRequest i in adjLps_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCChangeViewRequest i in chViews_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCOperateDataAdjust_AdjStrick i in adjStricks_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateDataAdjust other = obj as CCOperateDataAdjust;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if(adjLps_.Count != other.adjLps_.Count) return false;
      for(int ix=0; ix < adjLps_.Count; ix++)
        if(!adjLps_[ix].Equals(other.adjLps_[ix])) return false;
      if(chViews_.Count != other.chViews_.Count) return false;
      for(int ix=0; ix < chViews_.Count; ix++)
        if(!chViews_[ix].Equals(other.chViews_[ix])) return false;
      if(adjStricks_.Count != other.adjStricks_.Count) return false;
      for(int ix=0; ix < adjStricks_.Count; ix++)
        if(!adjStricks_[ix].Equals(other.adjStricks_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("adj_lps", adjLps_, writer);
      PrintField("ch_views", chViews_, writer);
      PrintField("adj_stricks", adjStricks_, writer);
    }
    #endregion
    
    public static CCOperateDataAdjust ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataAdjust ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataAdjust ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataAdjust ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataAdjust ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataAdjust ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataAdjust ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateDataAdjust ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateDataAdjust ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataAdjust ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateDataAdjust MakeReadOnly() {
      adjLps_.MakeReadOnly();
      chViews_.MakeReadOnly();
      adjStricks_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateDataAdjust prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateDataAdjust, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateDataAdjust cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateDataAdjust result;
      
      private CCOperateDataAdjust PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateDataAdjust original = result;
          result = new CCOperateDataAdjust();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateDataAdjust MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateDataAdjust DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateDataAdjust.DefaultInstance; }
      }
      
      public override CCOperateDataAdjust BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateDataAdjust) {
          return MergeFrom((CCOperateDataAdjust) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateDataAdjust other) {
        if (other == global::com.golf.proto.CCOperateDataAdjust.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.adjLps_.Count != 0) {
          result.adjLps_.Add(other.adjLps_);
        }
        if (other.chViews_.Count != 0) {
          result.chViews_.Add(other.chViews_);
        }
        if (other.adjStricks_.Count != 0) {
          result.adjStricks_.Add(other.adjStricks_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateDataAdjustFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateDataAdjustFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.adjLps_, global::com.golf.proto.CCAdjustLandingPointRequest.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.chViews_, global::com.golf.proto.CCChangeViewRequest.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.adjStricks_, global::com.golf.proto.CCOperateDataAdjust_AdjStrick.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCAdjustLandingPointRequest> AdjLpsList {
        get { return PrepareBuilder().adjLps_; }
      }
      public int AdjLpsCount {
        get { return result.AdjLpsCount; }
      }
      public global::com.golf.proto.CCAdjustLandingPointRequest GetAdjLps(int index) {
        return result.GetAdjLps(index);
      }
      public Builder SetAdjLps(int index, global::com.golf.proto.CCAdjustLandingPointRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adjLps_[index] = value;
        return this;
      }
      public Builder SetAdjLps(int index, global::com.golf.proto.CCAdjustLandingPointRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adjLps_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAdjLps(global::com.golf.proto.CCAdjustLandingPointRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adjLps_.Add(value);
        return this;
      }
      public Builder AddAdjLps(global::com.golf.proto.CCAdjustLandingPointRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adjLps_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAdjLps(scg::IEnumerable<global::com.golf.proto.CCAdjustLandingPointRequest> values) {
        PrepareBuilder();
        result.adjLps_.Add(values);
        return this;
      }
      public Builder ClearAdjLps() {
        PrepareBuilder();
        result.adjLps_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCChangeViewRequest> ChViewsList {
        get { return PrepareBuilder().chViews_; }
      }
      public int ChViewsCount {
        get { return result.ChViewsCount; }
      }
      public global::com.golf.proto.CCChangeViewRequest GetChViews(int index) {
        return result.GetChViews(index);
      }
      public Builder SetChViews(int index, global::com.golf.proto.CCChangeViewRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.chViews_[index] = value;
        return this;
      }
      public Builder SetChViews(int index, global::com.golf.proto.CCChangeViewRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.chViews_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddChViews(global::com.golf.proto.CCChangeViewRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.chViews_.Add(value);
        return this;
      }
      public Builder AddChViews(global::com.golf.proto.CCChangeViewRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.chViews_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeChViews(scg::IEnumerable<global::com.golf.proto.CCChangeViewRequest> values) {
        PrepareBuilder();
        result.chViews_.Add(values);
        return this;
      }
      public Builder ClearChViews() {
        PrepareBuilder();
        result.chViews_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCOperateDataAdjust_AdjStrick> AdjStricksList {
        get { return PrepareBuilder().adjStricks_; }
      }
      public int AdjStricksCount {
        get { return result.AdjStricksCount; }
      }
      public global::com.golf.proto.CCOperateDataAdjust_AdjStrick GetAdjStricks(int index) {
        return result.GetAdjStricks(index);
      }
      public Builder SetAdjStricks(int index, global::com.golf.proto.CCOperateDataAdjust_AdjStrick value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adjStricks_[index] = value;
        return this;
      }
      public Builder SetAdjStricks(int index, global::com.golf.proto.CCOperateDataAdjust_AdjStrick.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adjStricks_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAdjStricks(global::com.golf.proto.CCOperateDataAdjust_AdjStrick value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adjStricks_.Add(value);
        return this;
      }
      public Builder AddAdjStricks(global::com.golf.proto.CCOperateDataAdjust_AdjStrick.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adjStricks_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAdjStricks(scg::IEnumerable<global::com.golf.proto.CCOperateDataAdjust_AdjStrick> values) {
        PrepareBuilder();
        result.adjStricks_.Add(values);
        return this;
      }
      public Builder ClearAdjStricks() {
        PrepareBuilder();
        result.adjStricks_.Clear();
        return this;
      }
    }
    static CCOperateDataAdjust() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateDataAdjust_AdjStrick : pb::GeneratedMessageLite<CCOperateDataAdjust_AdjStrick, CCOperateDataAdjust_AdjStrick.Builder> {
    private CCOperateDataAdjust_AdjStrick() { }
    private static readonly CCOperateDataAdjust_AdjStrick defaultInstance = new CCOperateDataAdjust_AdjStrick().MakeReadOnly();
    private static readonly string[] _cCOperateDataAdjustAdjStrickFieldNames = new string[] { "down", "drag_over", "drags", "state", "up" };
    private static readonly uint[] _cCOperateDataAdjustAdjStrickFieldTags = new uint[] { 18, 42, 26, 8, 34 };
    public static CCOperateDataAdjust_AdjStrick DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateDataAdjust_AdjStrick DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateDataAdjust_AdjStrick ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int DownFieldNumber = 2;
    private bool hasDown;
    private global::com.golf.proto.CCAdjustStrickRequest down_;
    public bool HasDown {
      get { return hasDown; }
    }
    public global::com.golf.proto.CCAdjustStrickRequest Down {
      get { return down_ ?? global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance; }
    }
    
    public const int DragsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCAdjustStrickRequest> drags_ = new pbc::PopsicleList<global::com.golf.proto.CCAdjustStrickRequest>();
    public scg::IList<global::com.golf.proto.CCAdjustStrickRequest> DragsList {
      get { return drags_; }
    }
    public int DragsCount {
      get { return drags_.Count; }
    }
    public global::com.golf.proto.CCAdjustStrickRequest GetDrags(int index) {
      return drags_[index];
    }
    
    public const int UpFieldNumber = 4;
    private bool hasUp;
    private global::com.golf.proto.CCAdjustStrickRequest up_;
    public bool HasUp {
      get { return hasUp; }
    }
    public global::com.golf.proto.CCAdjustStrickRequest Up {
      get { return up_ ?? global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance; }
    }
    
    public const int DragOverFieldNumber = 5;
    private bool hasDragOver;
    private global::com.golf.proto.CCAdjustStrickRequest dragOver_;
    public bool HasDragOver {
      get { return hasDragOver; }
    }
    public global::com.golf.proto.CCAdjustStrickRequest DragOver {
      get { return dragOver_ ?? global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateDataAdjustAdjStrickFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[3], State);
      }
      if (hasDown) {
        output.WriteMessage(2, field_names[0], Down);
      }
      if (drags_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], drags_);
      }
      if (hasUp) {
        output.WriteMessage(4, field_names[4], Up);
      }
      if (hasDragOver) {
        output.WriteMessage(5, field_names[1], DragOver);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasDown) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Down);
      }
      foreach (global::com.golf.proto.CCAdjustStrickRequest element in DragsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasUp) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Up);
      }
      if (hasDragOver) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, DragOver);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasDown) hash ^= down_.GetHashCode();
      foreach(global::com.golf.proto.CCAdjustStrickRequest i in drags_)
        hash ^= i.GetHashCode();
      if (hasUp) hash ^= up_.GetHashCode();
      if (hasDragOver) hash ^= dragOver_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateDataAdjust_AdjStrick other = obj as CCOperateDataAdjust_AdjStrick;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasDown != other.hasDown || (hasDown && !down_.Equals(other.down_))) return false;
      if(drags_.Count != other.drags_.Count) return false;
      for(int ix=0; ix < drags_.Count; ix++)
        if(!drags_[ix].Equals(other.drags_[ix])) return false;
      if (hasUp != other.hasUp || (hasUp && !up_.Equals(other.up_))) return false;
      if (hasDragOver != other.hasDragOver || (hasDragOver && !dragOver_.Equals(other.dragOver_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("down", hasDown, down_, writer);
      PrintField("drags", drags_, writer);
      PrintField("up", hasUp, up_, writer);
      PrintField("drag_over", hasDragOver, dragOver_, writer);
    }
    #endregion
    
    public static CCOperateDataAdjust_AdjStrick ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataAdjust_AdjStrick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateDataAdjust_AdjStrick MakeReadOnly() {
      drags_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateDataAdjust_AdjStrick prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateDataAdjust_AdjStrick, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateDataAdjust_AdjStrick cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateDataAdjust_AdjStrick result;
      
      private CCOperateDataAdjust_AdjStrick PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateDataAdjust_AdjStrick original = result;
          result = new CCOperateDataAdjust_AdjStrick();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateDataAdjust_AdjStrick MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateDataAdjust_AdjStrick DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateDataAdjust_AdjStrick.DefaultInstance; }
      }
      
      public override CCOperateDataAdjust_AdjStrick BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateDataAdjust_AdjStrick) {
          return MergeFrom((CCOperateDataAdjust_AdjStrick) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateDataAdjust_AdjStrick other) {
        if (other == global::com.golf.proto.CCOperateDataAdjust_AdjStrick.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasDown) {
          MergeDown(other.Down);
        }
        if (other.drags_.Count != 0) {
          result.drags_.Add(other.drags_);
        }
        if (other.HasUp) {
          MergeUp(other.Up);
        }
        if (other.HasDragOver) {
          MergeDragOver(other.DragOver);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateDataAdjustAdjStrickFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateDataAdjustAdjStrickFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCAdjustStrickRequest.Builder subBuilder = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder();
              if (result.hasDown) {
                subBuilder.MergeFrom(Down);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Down = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.drags_, global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              global::com.golf.proto.CCAdjustStrickRequest.Builder subBuilder = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder();
              if (result.hasUp) {
                subBuilder.MergeFrom(Up);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Up = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::com.golf.proto.CCAdjustStrickRequest.Builder subBuilder = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder();
              if (result.hasDragOver) {
                subBuilder.MergeFrom(DragOver);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DragOver = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasDown {
       get { return result.hasDown; }
      }
      public global::com.golf.proto.CCAdjustStrickRequest Down {
        get { return result.Down; }
        set { SetDown(value); }
      }
      public Builder SetDown(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDown = true;
        result.down_ = value;
        return this;
      }
      public Builder SetDown(global::com.golf.proto.CCAdjustStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDown = true;
        result.down_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDown(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDown &&
            result.down_ != global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance) {
            result.down_ = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder(result.down_).MergeFrom(value).BuildPartial();
        } else {
          result.down_ = value;
        }
        result.hasDown = true;
        return this;
      }
      public Builder ClearDown() {
        PrepareBuilder();
        result.hasDown = false;
        result.down_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCAdjustStrickRequest> DragsList {
        get { return PrepareBuilder().drags_; }
      }
      public int DragsCount {
        get { return result.DragsCount; }
      }
      public global::com.golf.proto.CCAdjustStrickRequest GetDrags(int index) {
        return result.GetDrags(index);
      }
      public Builder SetDrags(int index, global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drags_[index] = value;
        return this;
      }
      public Builder SetDrags(int index, global::com.golf.proto.CCAdjustStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drags_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrags(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drags_.Add(value);
        return this;
      }
      public Builder AddDrags(global::com.golf.proto.CCAdjustStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drags_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrags(scg::IEnumerable<global::com.golf.proto.CCAdjustStrickRequest> values) {
        PrepareBuilder();
        result.drags_.Add(values);
        return this;
      }
      public Builder ClearDrags() {
        PrepareBuilder();
        result.drags_.Clear();
        return this;
      }
      
      public bool HasUp {
       get { return result.hasUp; }
      }
      public global::com.golf.proto.CCAdjustStrickRequest Up {
        get { return result.Up; }
        set { SetUp(value); }
      }
      public Builder SetUp(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUp = true;
        result.up_ = value;
        return this;
      }
      public Builder SetUp(global::com.golf.proto.CCAdjustStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUp = true;
        result.up_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUp(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUp &&
            result.up_ != global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance) {
            result.up_ = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder(result.up_).MergeFrom(value).BuildPartial();
        } else {
          result.up_ = value;
        }
        result.hasUp = true;
        return this;
      }
      public Builder ClearUp() {
        PrepareBuilder();
        result.hasUp = false;
        result.up_ = null;
        return this;
      }
      
      public bool HasDragOver {
       get { return result.hasDragOver; }
      }
      public global::com.golf.proto.CCAdjustStrickRequest DragOver {
        get { return result.DragOver; }
        set { SetDragOver(value); }
      }
      public Builder SetDragOver(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDragOver = true;
        result.dragOver_ = value;
        return this;
      }
      public Builder SetDragOver(global::com.golf.proto.CCAdjustStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDragOver = true;
        result.dragOver_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDragOver(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDragOver &&
            result.dragOver_ != global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance) {
            result.dragOver_ = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder(result.dragOver_).MergeFrom(value).BuildPartial();
        } else {
          result.dragOver_ = value;
        }
        result.hasDragOver = true;
        return this;
      }
      public Builder ClearDragOver() {
        PrepareBuilder();
        result.hasDragOver = false;
        result.dragOver_ = null;
        return this;
      }
    }
    static CCOperateDataAdjust_AdjStrick() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateDataStrick : pb::GeneratedMessageLite<CCOperateDataStrick, CCOperateDataStrick.Builder> {
    private CCOperateDataStrick() { }
    private static readonly CCOperateDataStrick defaultInstance = new CCOperateDataStrick().MakeReadOnly();
    private static readonly string[] _cCOperateDataStrickFieldNames = new string[] { "state", "strick" };
    private static readonly uint[] _cCOperateDataStrickFieldTags = new uint[] { 8, 18 };
    public static CCOperateDataStrick DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateDataStrick DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateDataStrick ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int StrickFieldNumber = 2;
    private bool hasStrick;
    private global::com.golf.proto.CCStrickRequest strick_;
    public bool HasStrick {
      get { return hasStrick; }
    }
    public global::com.golf.proto.CCStrickRequest Strick {
      get { return strick_ ?? global::com.golf.proto.CCStrickRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateDataStrickFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[0], State);
      }
      if (hasStrick) {
        output.WriteMessage(2, field_names[1], Strick);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasStrick) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Strick);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasStrick) hash ^= strick_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateDataStrick other = obj as CCOperateDataStrick;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasStrick != other.hasStrick || (hasStrick && !strick_.Equals(other.strick_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("strick", hasStrick, strick_, writer);
    }
    #endregion
    
    public static CCOperateDataStrick ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataStrick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataStrick ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataStrick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataStrick ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataStrick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataStrick ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateDataStrick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateDataStrick ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataStrick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateDataStrick MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateDataStrick prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateDataStrick, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateDataStrick cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateDataStrick result;
      
      private CCOperateDataStrick PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateDataStrick original = result;
          result = new CCOperateDataStrick();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateDataStrick MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateDataStrick DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateDataStrick.DefaultInstance; }
      }
      
      public override CCOperateDataStrick BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateDataStrick) {
          return MergeFrom((CCOperateDataStrick) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateDataStrick other) {
        if (other == global::com.golf.proto.CCOperateDataStrick.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasStrick) {
          MergeStrick(other.Strick);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateDataStrickFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateDataStrickFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCStrickRequest.Builder subBuilder = global::com.golf.proto.CCStrickRequest.CreateBuilder();
              if (result.hasStrick) {
                subBuilder.MergeFrom(Strick);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Strick = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasStrick {
       get { return result.hasStrick; }
      }
      public global::com.golf.proto.CCStrickRequest Strick {
        get { return result.Strick; }
        set { SetStrick(value); }
      }
      public Builder SetStrick(global::com.golf.proto.CCStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrick = true;
        result.strick_ = value;
        return this;
      }
      public Builder SetStrick(global::com.golf.proto.CCStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStrick = true;
        result.strick_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStrick(global::com.golf.proto.CCStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStrick &&
            result.strick_ != global::com.golf.proto.CCStrickRequest.DefaultInstance) {
            result.strick_ = global::com.golf.proto.CCStrickRequest.CreateBuilder(result.strick_).MergeFrom(value).BuildPartial();
        } else {
          result.strick_ = value;
        }
        result.hasStrick = true;
        return this;
      }
      public Builder ClearStrick() {
        PrepareBuilder();
        result.hasStrick = false;
        result.strick_ = null;
        return this;
      }
    }
    static CCOperateDataStrick() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateDataBallMoves : pb::GeneratedMessageLite<CCOperateDataBallMoves, CCOperateDataBallMoves.Builder> {
    private CCOperateDataBallMoves() { }
    private static readonly CCOperateDataBallMoves defaultInstance = new CCOperateDataBallMoves().MakeReadOnly();
    private static readonly string[] _cCOperateDataBallMovesFieldNames = new string[] { "ball_statuses", "state" };
    private static readonly uint[] _cCOperateDataBallMovesFieldTags = new uint[] { 18, 8 };
    public static CCOperateDataBallMoves DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateDataBallMoves DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateDataBallMoves ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int BallStatusesFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCBallStatus> ballStatuses_ = new pbc::PopsicleList<global::com.golf.proto.CCBallStatus>();
    public scg::IList<global::com.golf.proto.CCBallStatus> BallStatusesList {
      get { return ballStatuses_; }
    }
    public int BallStatusesCount {
      get { return ballStatuses_.Count; }
    }
    public global::com.golf.proto.CCBallStatus GetBallStatuses(int index) {
      return ballStatuses_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateDataBallMovesFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[1], State);
      }
      if (ballStatuses_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], ballStatuses_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      foreach (global::com.golf.proto.CCBallStatus element in BallStatusesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      foreach(global::com.golf.proto.CCBallStatus i in ballStatuses_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateDataBallMoves other = obj as CCOperateDataBallMoves;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if(ballStatuses_.Count != other.ballStatuses_.Count) return false;
      for(int ix=0; ix < ballStatuses_.Count; ix++)
        if(!ballStatuses_[ix].Equals(other.ballStatuses_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("ball_statuses", ballStatuses_, writer);
    }
    #endregion
    
    public static CCOperateDataBallMoves ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataBallMoves ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateDataBallMoves MakeReadOnly() {
      ballStatuses_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateDataBallMoves prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateDataBallMoves, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateDataBallMoves cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateDataBallMoves result;
      
      private CCOperateDataBallMoves PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateDataBallMoves original = result;
          result = new CCOperateDataBallMoves();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateDataBallMoves MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateDataBallMoves DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateDataBallMoves.DefaultInstance; }
      }
      
      public override CCOperateDataBallMoves BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateDataBallMoves) {
          return MergeFrom((CCOperateDataBallMoves) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateDataBallMoves other) {
        if (other == global::com.golf.proto.CCOperateDataBallMoves.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.ballStatuses_.Count != 0) {
          result.ballStatuses_.Add(other.ballStatuses_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateDataBallMovesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateDataBallMovesFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.ballStatuses_, global::com.golf.proto.CCBallStatus.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCBallStatus> BallStatusesList {
        get { return PrepareBuilder().ballStatuses_; }
      }
      public int BallStatusesCount {
        get { return result.BallStatusesCount; }
      }
      public global::com.golf.proto.CCBallStatus GetBallStatuses(int index) {
        return result.GetBallStatuses(index);
      }
      public Builder SetBallStatuses(int index, global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ballStatuses_[index] = value;
        return this;
      }
      public Builder SetBallStatuses(int index, global::com.golf.proto.CCBallStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ballStatuses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBallStatuses(global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ballStatuses_.Add(value);
        return this;
      }
      public Builder AddBallStatuses(global::com.golf.proto.CCBallStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ballStatuses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBallStatuses(scg::IEnumerable<global::com.golf.proto.CCBallStatus> values) {
        PrepareBuilder();
        result.ballStatuses_.Add(values);
        return this;
      }
      public Builder ClearBallStatuses() {
        PrepareBuilder();
        result.ballStatuses_.Clear();
        return this;
      }
    }
    static CCOperateDataBallMoves() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOperateDataBallMoveStop : pb::GeneratedMessageLite<CCOperateDataBallMoveStop, CCOperateDataBallMoveStop.Builder> {
    private CCOperateDataBallMoveStop() { }
    private static readonly CCOperateDataBallMoveStop defaultInstance = new CCOperateDataBallMoveStop().MakeReadOnly();
    private static readonly string[] _cCOperateDataBallMoveStopFieldNames = new string[] { "ball_status_ex", "state" };
    private static readonly uint[] _cCOperateDataBallMoveStopFieldTags = new uint[] { 18, 8 };
    public static CCOperateDataBallMoveStop DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOperateDataBallMoveStop DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOperateDataBallMoveStop ThisMessage {
      get { return this; }
    }
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int BallStatusExFieldNumber = 2;
    private bool hasBallStatusEx;
    private global::com.golf.proto.CCBallStatusEx ballStatusEx_;
    public bool HasBallStatusEx {
      get { return hasBallStatusEx; }
    }
    public global::com.golf.proto.CCBallStatusEx BallStatusEx {
      get { return ballStatusEx_ ?? global::com.golf.proto.CCBallStatusEx.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOperateDataBallMoveStopFieldNames;
      if (hasState) {
        output.WriteInt32(1, field_names[1], State);
      }
      if (hasBallStatusEx) {
        output.WriteMessage(2, field_names[0], BallStatusEx);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, State);
      }
      if (hasBallStatusEx) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BallStatusEx);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasBallStatusEx) hash ^= ballStatusEx_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOperateDataBallMoveStop other = obj as CCOperateDataBallMoveStop;
      if (other == null) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasBallStatusEx != other.hasBallStatusEx || (hasBallStatusEx && !ballStatusEx_.Equals(other.ballStatusEx_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("state", hasState, state_, writer);
      PrintField("ball_status_ex", hasBallStatusEx, ballStatusEx_, writer);
    }
    #endregion
    
    public static CCOperateDataBallMoveStop ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOperateDataBallMoveStop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOperateDataBallMoveStop MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOperateDataBallMoveStop prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOperateDataBallMoveStop, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOperateDataBallMoveStop cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOperateDataBallMoveStop result;
      
      private CCOperateDataBallMoveStop PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOperateDataBallMoveStop original = result;
          result = new CCOperateDataBallMoveStop();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOperateDataBallMoveStop MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOperateDataBallMoveStop DefaultInstanceForType {
        get { return global::com.golf.proto.CCOperateDataBallMoveStop.DefaultInstance; }
      }
      
      public override CCOperateDataBallMoveStop BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOperateDataBallMoveStop) {
          return MergeFrom((CCOperateDataBallMoveStop) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOperateDataBallMoveStop other) {
        if (other == global::com.golf.proto.CCOperateDataBallMoveStop.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasBallStatusEx) {
          MergeBallStatusEx(other.BallStatusEx);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOperateDataBallMoveStopFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOperateDataBallMoveStopFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBallStatusEx.Builder subBuilder = global::com.golf.proto.CCBallStatusEx.CreateBuilder();
              if (result.hasBallStatusEx) {
                subBuilder.MergeFrom(BallStatusEx);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallStatusEx = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasBallStatusEx {
       get { return result.hasBallStatusEx; }
      }
      public global::com.golf.proto.CCBallStatusEx BallStatusEx {
        get { return result.BallStatusEx; }
        set { SetBallStatusEx(value); }
      }
      public Builder SetBallStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallStatusEx = true;
        result.ballStatusEx_ = value;
        return this;
      }
      public Builder SetBallStatusEx(global::com.golf.proto.CCBallStatusEx.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallStatusEx = true;
        result.ballStatusEx_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallStatusEx &&
            result.ballStatusEx_ != global::com.golf.proto.CCBallStatusEx.DefaultInstance) {
            result.ballStatusEx_ = global::com.golf.proto.CCBallStatusEx.CreateBuilder(result.ballStatusEx_).MergeFrom(value).BuildPartial();
        } else {
          result.ballStatusEx_ = value;
        }
        result.hasBallStatusEx = true;
        return this;
      }
      public Builder ClearBallStatusEx() {
        PrepareBuilder();
        result.hasBallStatusEx = false;
        result.ballStatusEx_ = null;
        return this;
      }
    }
    static CCOperateDataBallMoveStop() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeViewRequest : pb::GeneratedMessageLite<CCChangeViewRequest, CCChangeViewRequest.Builder> {
    private CCChangeViewRequest() { }
    private static readonly CCChangeViewRequest defaultInstance = new CCChangeViewRequest().MakeReadOnly();
    private static readonly string[] _cCChangeViewRequestFieldNames = new string[] { "id", "time", "type" };
    private static readonly uint[] _cCChangeViewRequestFieldTags = new uint[] { 10, 16, 24 };
    public static CCChangeViewRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeViewRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeViewRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TimeFieldNumber = 2;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeViewRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasTime) {
        output.WriteInt64(2, field_names[1], Time);
      }
      if (hasType) {
        output.WriteInt32(3, field_names[2], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Time);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeViewRequest other = obj as CCChangeViewRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("time", hasTime, time_, writer);
      PrintField("type", hasType, type_, writer);
    }
    #endregion
    
    public static CCChangeViewRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeViewRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeViewRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeViewRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeViewRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeViewRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeViewRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeViewRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeViewRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeViewRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeViewRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeViewRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeViewRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeViewRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeViewRequest result;
      
      private CCChangeViewRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeViewRequest original = result;
          result = new CCChangeViewRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeViewRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeViewRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeViewRequest.DefaultInstance; }
      }
      
      public override CCChangeViewRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeViewRequest) {
          return MergeFrom((CCChangeViewRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeViewRequest other) {
        if (other == global::com.golf.proto.CCChangeViewRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeViewRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeViewRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
            case 24: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static CCChangeViewRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeViewResponse : pb::GeneratedMessageLite<CCChangeViewResponse, CCChangeViewResponse.Builder> {
    private CCChangeViewResponse() { }
    private static readonly CCChangeViewResponse defaultInstance = new CCChangeViewResponse().MakeReadOnly();
    private static readonly string[] _cCChangeViewResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _cCChangeViewResponseFieldTags = new uint[] { 8 };
    public static CCChangeViewResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeViewResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeViewResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeViewResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeViewResponse other = obj as CCChangeViewResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
    }
    #endregion
    
    public static CCChangeViewResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeViewResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeViewResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeViewResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeViewResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeViewResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeViewResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeViewResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeViewResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeViewResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeViewResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeViewResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeViewResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeViewResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeViewResponse result;
      
      private CCChangeViewResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeViewResponse original = result;
          result = new CCChangeViewResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeViewResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeViewResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeViewResponse.DefaultInstance; }
      }
      
      public override CCChangeViewResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeViewResponse) {
          return MergeFrom((CCChangeViewResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeViewResponse other) {
        if (other == global::com.golf.proto.CCChangeViewResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeViewResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeViewResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static CCChangeViewResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPVPChangeViewResponse : pb::GeneratedMessageLite<CCPVPChangeViewResponse, CCPVPChangeViewResponse.Builder> {
    private CCPVPChangeViewResponse() { }
    private static readonly CCPVPChangeViewResponse defaultInstance = new CCPVPChangeViewResponse().MakeReadOnly();
    private static readonly string[] _cCPVPChangeViewResponseFieldNames = new string[] { "request" };
    private static readonly uint[] _cCPVPChangeViewResponseFieldTags = new uint[] { 10 };
    public static CCPVPChangeViewResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPVPChangeViewResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPVPChangeViewResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCChangeViewRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCChangeViewRequest Request {
      get { return request_ ?? global::com.golf.proto.CCChangeViewRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPVPChangeViewResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPVPChangeViewResponse other = obj as CCPVPChangeViewResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
    }
    #endregion
    
    public static CCPVPChangeViewResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPChangeViewResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPVPChangeViewResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPVPChangeViewResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPVPChangeViewResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPVPChangeViewResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPVPChangeViewResponse result;
      
      private CCPVPChangeViewResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPVPChangeViewResponse original = result;
          result = new CCPVPChangeViewResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPVPChangeViewResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPVPChangeViewResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPVPChangeViewResponse.DefaultInstance; }
      }
      
      public override CCPVPChangeViewResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPVPChangeViewResponse) {
          return MergeFrom((CCPVPChangeViewResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPVPChangeViewResponse other) {
        if (other == global::com.golf.proto.CCPVPChangeViewResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPVPChangeViewResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPVPChangeViewResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCChangeViewRequest.Builder subBuilder = global::com.golf.proto.CCChangeViewRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCChangeViewRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCChangeViewRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCChangeViewRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCChangeViewRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCChangeViewRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCChangeViewRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
    }
    static CCPVPChangeViewResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAdjustLandingPointRequest : pb::GeneratedMessageLite<CCAdjustLandingPointRequest, CCAdjustLandingPointRequest.Builder> {
    private CCAdjustLandingPointRequest() { }
    private static readonly CCAdjustLandingPointRequest defaultInstance = new CCAdjustLandingPointRequest().MakeReadOnly();
    private static readonly string[] _cCAdjustLandingPointRequestFieldNames = new string[] { "camera_pos", "camera_rot", "id", "landing_pos", "time" };
    private static readonly uint[] _cCAdjustLandingPointRequestFieldTags = new uint[] { 34, 42, 10, 26, 16 };
    public static CCAdjustLandingPointRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAdjustLandingPointRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAdjustLandingPointRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TimeFieldNumber = 2;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public const int LandingPosFieldNumber = 3;
    private bool hasLandingPos;
    private global::com.golf.proto.CCVec3FloatToLong landingPos_;
    public bool HasLandingPos {
      get { return hasLandingPos; }
    }
    public global::com.golf.proto.CCVec3FloatToLong LandingPos {
      get { return landingPos_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int CameraPosFieldNumber = 4;
    private bool hasCameraPos;
    private global::com.golf.proto.CCVec3FloatToLong cameraPos_;
    public bool HasCameraPos {
      get { return hasCameraPos; }
    }
    public global::com.golf.proto.CCVec3FloatToLong CameraPos {
      get { return cameraPos_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int CameraRotFieldNumber = 5;
    private bool hasCameraRot;
    private global::com.golf.proto.CCVec4FloatToLong cameraRot_;
    public bool HasCameraRot {
      get { return hasCameraRot; }
    }
    public global::com.golf.proto.CCVec4FloatToLong CameraRot {
      get { return cameraRot_ ?? global::com.golf.proto.CCVec4FloatToLong.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAdjustLandingPointRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[2], Id);
      }
      if (hasTime) {
        output.WriteInt64(2, field_names[4], Time);
      }
      if (hasLandingPos) {
        output.WriteMessage(3, field_names[3], LandingPos);
      }
      if (hasCameraPos) {
        output.WriteMessage(4, field_names[0], CameraPos);
      }
      if (hasCameraRot) {
        output.WriteMessage(5, field_names[1], CameraRot);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Time);
      }
      if (hasLandingPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, LandingPos);
      }
      if (hasCameraPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, CameraPos);
      }
      if (hasCameraRot) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, CameraRot);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      if (hasLandingPos) hash ^= landingPos_.GetHashCode();
      if (hasCameraPos) hash ^= cameraPos_.GetHashCode();
      if (hasCameraRot) hash ^= cameraRot_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAdjustLandingPointRequest other = obj as CCAdjustLandingPointRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      if (hasLandingPos != other.hasLandingPos || (hasLandingPos && !landingPos_.Equals(other.landingPos_))) return false;
      if (hasCameraPos != other.hasCameraPos || (hasCameraPos && !cameraPos_.Equals(other.cameraPos_))) return false;
      if (hasCameraRot != other.hasCameraRot || (hasCameraRot && !cameraRot_.Equals(other.cameraRot_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("time", hasTime, time_, writer);
      PrintField("landing_pos", hasLandingPos, landingPos_, writer);
      PrintField("camera_pos", hasCameraPos, cameraPos_, writer);
      PrintField("camera_rot", hasCameraRot, cameraRot_, writer);
    }
    #endregion
    
    public static CCAdjustLandingPointRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustLandingPointRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAdjustLandingPointRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAdjustLandingPointRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAdjustLandingPointRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAdjustLandingPointRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAdjustLandingPointRequest result;
      
      private CCAdjustLandingPointRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAdjustLandingPointRequest original = result;
          result = new CCAdjustLandingPointRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAdjustLandingPointRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAdjustLandingPointRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCAdjustLandingPointRequest.DefaultInstance; }
      }
      
      public override CCAdjustLandingPointRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAdjustLandingPointRequest) {
          return MergeFrom((CCAdjustLandingPointRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAdjustLandingPointRequest other) {
        if (other == global::com.golf.proto.CCAdjustLandingPointRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasLandingPos) {
          MergeLandingPos(other.LandingPos);
        }
        if (other.HasCameraPos) {
          MergeCameraPos(other.CameraPos);
        }
        if (other.HasCameraRot) {
          MergeCameraRot(other.CameraRot);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAdjustLandingPointRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAdjustLandingPointRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
            case 26: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasLandingPos) {
                subBuilder.MergeFrom(LandingPos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LandingPos = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasCameraPos) {
                subBuilder.MergeFrom(CameraPos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CameraPos = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::com.golf.proto.CCVec4FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec4FloatToLong.CreateBuilder();
              if (result.hasCameraRot) {
                subBuilder.MergeFrom(CameraRot);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CameraRot = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
      
      public bool HasLandingPos {
       get { return result.hasLandingPos; }
      }
      public global::com.golf.proto.CCVec3FloatToLong LandingPos {
        get { return result.LandingPos; }
        set { SetLandingPos(value); }
      }
      public Builder SetLandingPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLandingPos = true;
        result.landingPos_ = value;
        return this;
      }
      public Builder SetLandingPos(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLandingPos = true;
        result.landingPos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLandingPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLandingPos &&
            result.landingPos_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.landingPos_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.landingPos_).MergeFrom(value).BuildPartial();
        } else {
          result.landingPos_ = value;
        }
        result.hasLandingPos = true;
        return this;
      }
      public Builder ClearLandingPos() {
        PrepareBuilder();
        result.hasLandingPos = false;
        result.landingPos_ = null;
        return this;
      }
      
      public bool HasCameraPos {
       get { return result.hasCameraPos; }
      }
      public global::com.golf.proto.CCVec3FloatToLong CameraPos {
        get { return result.CameraPos; }
        set { SetCameraPos(value); }
      }
      public Builder SetCameraPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCameraPos = true;
        result.cameraPos_ = value;
        return this;
      }
      public Builder SetCameraPos(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCameraPos = true;
        result.cameraPos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCameraPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCameraPos &&
            result.cameraPos_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.cameraPos_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.cameraPos_).MergeFrom(value).BuildPartial();
        } else {
          result.cameraPos_ = value;
        }
        result.hasCameraPos = true;
        return this;
      }
      public Builder ClearCameraPos() {
        PrepareBuilder();
        result.hasCameraPos = false;
        result.cameraPos_ = null;
        return this;
      }
      
      public bool HasCameraRot {
       get { return result.hasCameraRot; }
      }
      public global::com.golf.proto.CCVec4FloatToLong CameraRot {
        get { return result.CameraRot; }
        set { SetCameraRot(value); }
      }
      public Builder SetCameraRot(global::com.golf.proto.CCVec4FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCameraRot = true;
        result.cameraRot_ = value;
        return this;
      }
      public Builder SetCameraRot(global::com.golf.proto.CCVec4FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCameraRot = true;
        result.cameraRot_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCameraRot(global::com.golf.proto.CCVec4FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCameraRot &&
            result.cameraRot_ != global::com.golf.proto.CCVec4FloatToLong.DefaultInstance) {
            result.cameraRot_ = global::com.golf.proto.CCVec4FloatToLong.CreateBuilder(result.cameraRot_).MergeFrom(value).BuildPartial();
        } else {
          result.cameraRot_ = value;
        }
        result.hasCameraRot = true;
        return this;
      }
      public Builder ClearCameraRot() {
        PrepareBuilder();
        result.hasCameraRot = false;
        result.cameraRot_ = null;
        return this;
      }
    }
    static CCAdjustLandingPointRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAdjustLandingPointResponse : pb::GeneratedMessageLite<CCAdjustLandingPointResponse, CCAdjustLandingPointResponse.Builder> {
    private CCAdjustLandingPointResponse() { }
    private static readonly CCAdjustLandingPointResponse defaultInstance = new CCAdjustLandingPointResponse().MakeReadOnly();
    private static readonly string[] _cCAdjustLandingPointResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _cCAdjustLandingPointResponseFieldTags = new uint[] { 8 };
    public static CCAdjustLandingPointResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAdjustLandingPointResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAdjustLandingPointResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAdjustLandingPointResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAdjustLandingPointResponse other = obj as CCAdjustLandingPointResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
    }
    #endregion
    
    public static CCAdjustLandingPointResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustLandingPointResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAdjustLandingPointResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAdjustLandingPointResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAdjustLandingPointResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAdjustLandingPointResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAdjustLandingPointResponse result;
      
      private CCAdjustLandingPointResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAdjustLandingPointResponse original = result;
          result = new CCAdjustLandingPointResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAdjustLandingPointResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAdjustLandingPointResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCAdjustLandingPointResponse.DefaultInstance; }
      }
      
      public override CCAdjustLandingPointResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAdjustLandingPointResponse) {
          return MergeFrom((CCAdjustLandingPointResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAdjustLandingPointResponse other) {
        if (other == global::com.golf.proto.CCAdjustLandingPointResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAdjustLandingPointResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAdjustLandingPointResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static CCAdjustLandingPointResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPVPAdjustLandingPointResponse : pb::GeneratedMessageLite<CCPVPAdjustLandingPointResponse, CCPVPAdjustLandingPointResponse.Builder> {
    private CCPVPAdjustLandingPointResponse() { }
    private static readonly CCPVPAdjustLandingPointResponse defaultInstance = new CCPVPAdjustLandingPointResponse().MakeReadOnly();
    private static readonly string[] _cCPVPAdjustLandingPointResponseFieldNames = new string[] { "request" };
    private static readonly uint[] _cCPVPAdjustLandingPointResponseFieldTags = new uint[] { 10 };
    public static CCPVPAdjustLandingPointResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPVPAdjustLandingPointResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPVPAdjustLandingPointResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCAdjustLandingPointRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCAdjustLandingPointRequest Request {
      get { return request_ ?? global::com.golf.proto.CCAdjustLandingPointRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPVPAdjustLandingPointResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPVPAdjustLandingPointResponse other = obj as CCPVPAdjustLandingPointResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
    }
    #endregion
    
    public static CCPVPAdjustLandingPointResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPAdjustLandingPointResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPVPAdjustLandingPointResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPVPAdjustLandingPointResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPVPAdjustLandingPointResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPVPAdjustLandingPointResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPVPAdjustLandingPointResponse result;
      
      private CCPVPAdjustLandingPointResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPVPAdjustLandingPointResponse original = result;
          result = new CCPVPAdjustLandingPointResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPVPAdjustLandingPointResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPVPAdjustLandingPointResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPVPAdjustLandingPointResponse.DefaultInstance; }
      }
      
      public override CCPVPAdjustLandingPointResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPVPAdjustLandingPointResponse) {
          return MergeFrom((CCPVPAdjustLandingPointResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPVPAdjustLandingPointResponse other) {
        if (other == global::com.golf.proto.CCPVPAdjustLandingPointResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPVPAdjustLandingPointResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPVPAdjustLandingPointResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCAdjustLandingPointRequest.Builder subBuilder = global::com.golf.proto.CCAdjustLandingPointRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCAdjustLandingPointRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCAdjustLandingPointRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCAdjustLandingPointRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCAdjustLandingPointRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCAdjustLandingPointRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCAdjustLandingPointRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
    }
    static CCPVPAdjustLandingPointResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAdjustStrickRequest : pb::GeneratedMessageLite<CCAdjustStrickRequest, CCAdjustStrickRequest.Builder> {
    private CCAdjustStrickRequest() { }
    private static readonly CCAdjustStrickRequest defaultInstance = new CCAdjustStrickRequest().MakeReadOnly();
    private static readonly string[] _cCAdjustStrickRequestFieldNames = new string[] { "id", "time", "type", "ui_pos" };
    private static readonly uint[] _cCAdjustStrickRequestFieldTags = new uint[] { 10, 16, 24, 34 };
    public static CCAdjustStrickRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAdjustStrickRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAdjustStrickRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TimeFieldNumber = 2;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int UiPosFieldNumber = 4;
    private bool hasUiPos;
    private global::com.golf.proto.CCVec3FloatToLong uiPos_;
    public bool HasUiPos {
      get { return hasUiPos; }
    }
    public global::com.golf.proto.CCVec3FloatToLong UiPos {
      get { return uiPos_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAdjustStrickRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasTime) {
        output.WriteInt64(2, field_names[1], Time);
      }
      if (hasType) {
        output.WriteInt32(3, field_names[2], Type);
      }
      if (hasUiPos) {
        output.WriteMessage(4, field_names[3], UiPos);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Time);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
      }
      if (hasUiPos) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, UiPos);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasUiPos) hash ^= uiPos_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAdjustStrickRequest other = obj as CCAdjustStrickRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasUiPos != other.hasUiPos || (hasUiPos && !uiPos_.Equals(other.uiPos_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("time", hasTime, time_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("ui_pos", hasUiPos, uiPos_, writer);
    }
    #endregion
    
    public static CCAdjustStrickRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustStrickRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAdjustStrickRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAdjustStrickRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAdjustStrickRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAdjustStrickRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAdjustStrickRequest result;
      
      private CCAdjustStrickRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAdjustStrickRequest original = result;
          result = new CCAdjustStrickRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAdjustStrickRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAdjustStrickRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance; }
      }
      
      public override CCAdjustStrickRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAdjustStrickRequest) {
          return MergeFrom((CCAdjustStrickRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAdjustStrickRequest other) {
        if (other == global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasUiPos) {
          MergeUiPos(other.UiPos);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAdjustStrickRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAdjustStrickRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
            case 24: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasUiPos) {
                subBuilder.MergeFrom(UiPos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UiPos = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasUiPos {
       get { return result.hasUiPos; }
      }
      public global::com.golf.proto.CCVec3FloatToLong UiPos {
        get { return result.UiPos; }
        set { SetUiPos(value); }
      }
      public Builder SetUiPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUiPos = true;
        result.uiPos_ = value;
        return this;
      }
      public Builder SetUiPos(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUiPos = true;
        result.uiPos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUiPos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUiPos &&
            result.uiPos_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.uiPos_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.uiPos_).MergeFrom(value).BuildPartial();
        } else {
          result.uiPos_ = value;
        }
        result.hasUiPos = true;
        return this;
      }
      public Builder ClearUiPos() {
        PrepareBuilder();
        result.hasUiPos = false;
        result.uiPos_ = null;
        return this;
      }
    }
    static CCAdjustStrickRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAdjustStrickResponse : pb::GeneratedMessageLite<CCAdjustStrickResponse, CCAdjustStrickResponse.Builder> {
    private CCAdjustStrickResponse() { }
    private static readonly CCAdjustStrickResponse defaultInstance = new CCAdjustStrickResponse().MakeReadOnly();
    private static readonly string[] _cCAdjustStrickResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _cCAdjustStrickResponseFieldTags = new uint[] { 8 };
    public static CCAdjustStrickResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAdjustStrickResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAdjustStrickResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAdjustStrickResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAdjustStrickResponse other = obj as CCAdjustStrickResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
    }
    #endregion
    
    public static CCAdjustStrickResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustStrickResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAdjustStrickResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAdjustStrickResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAdjustStrickResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAdjustStrickResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAdjustStrickResponse result;
      
      private CCAdjustStrickResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAdjustStrickResponse original = result;
          result = new CCAdjustStrickResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAdjustStrickResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAdjustStrickResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCAdjustStrickResponse.DefaultInstance; }
      }
      
      public override CCAdjustStrickResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAdjustStrickResponse) {
          return MergeFrom((CCAdjustStrickResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAdjustStrickResponse other) {
        if (other == global::com.golf.proto.CCAdjustStrickResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAdjustStrickResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAdjustStrickResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static CCAdjustStrickResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPVPAdjustStrickResponse : pb::GeneratedMessageLite<CCPVPAdjustStrickResponse, CCPVPAdjustStrickResponse.Builder> {
    private CCPVPAdjustStrickResponse() { }
    private static readonly CCPVPAdjustStrickResponse defaultInstance = new CCPVPAdjustStrickResponse().MakeReadOnly();
    private static readonly string[] _cCPVPAdjustStrickResponseFieldNames = new string[] { "request" };
    private static readonly uint[] _cCPVPAdjustStrickResponseFieldTags = new uint[] { 10 };
    public static CCPVPAdjustStrickResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPVPAdjustStrickResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPVPAdjustStrickResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCAdjustStrickRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCAdjustStrickRequest Request {
      get { return request_ ?? global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPVPAdjustStrickResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPVPAdjustStrickResponse other = obj as CCPVPAdjustStrickResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
    }
    #endregion
    
    public static CCPVPAdjustStrickResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPAdjustStrickResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPVPAdjustStrickResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPVPAdjustStrickResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPVPAdjustStrickResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPVPAdjustStrickResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPVPAdjustStrickResponse result;
      
      private CCPVPAdjustStrickResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPVPAdjustStrickResponse original = result;
          result = new CCPVPAdjustStrickResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPVPAdjustStrickResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPVPAdjustStrickResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPVPAdjustStrickResponse.DefaultInstance; }
      }
      
      public override CCPVPAdjustStrickResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPVPAdjustStrickResponse) {
          return MergeFrom((CCPVPAdjustStrickResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPVPAdjustStrickResponse other) {
        if (other == global::com.golf.proto.CCPVPAdjustStrickResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPVPAdjustStrickResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPVPAdjustStrickResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCAdjustStrickRequest.Builder subBuilder = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCAdjustStrickRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCAdjustStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
    }
    static CCPVPAdjustStrickResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCStrickRequest : pb::GeneratedMessageLite<CCStrickRequest, CCStrickRequest.Builder> {
    private CCStrickRequest() { }
    private static readonly CCStrickRequest defaultInstance = new CCStrickRequest().MakeReadOnly();
    private static readonly string[] _cCStrickRequestFieldNames = new string[] { "adjust_strick_drag_over", "ball_status_ex", "id", "is_robot", "strick_data", "time" };
    private static readonly uint[] _cCStrickRequestFieldTags = new uint[] { 34, 42, 10, 48, 26, 16 };
    public static CCStrickRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCStrickRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCStrickRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TimeFieldNumber = 2;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public const int StrickDataFieldNumber = 3;
    private bool hasStrickData;
    private global::com.golf.proto.CCStrickData strickData_;
    public bool HasStrickData {
      get { return hasStrickData; }
    }
    public global::com.golf.proto.CCStrickData StrickData {
      get { return strickData_ ?? global::com.golf.proto.CCStrickData.DefaultInstance; }
    }
    
    public const int AdjustStrickDragOverFieldNumber = 4;
    private bool hasAdjustStrickDragOver;
    private global::com.golf.proto.CCAdjustStrickRequest adjustStrickDragOver_;
    public bool HasAdjustStrickDragOver {
      get { return hasAdjustStrickDragOver; }
    }
    public global::com.golf.proto.CCAdjustStrickRequest AdjustStrickDragOver {
      get { return adjustStrickDragOver_ ?? global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance; }
    }
    
    public const int BallStatusExFieldNumber = 5;
    private bool hasBallStatusEx;
    private global::com.golf.proto.CCBallStatusEx ballStatusEx_;
    public bool HasBallStatusEx {
      get { return hasBallStatusEx; }
    }
    public global::com.golf.proto.CCBallStatusEx BallStatusEx {
      get { return ballStatusEx_ ?? global::com.golf.proto.CCBallStatusEx.DefaultInstance; }
    }
    
    public const int IsRobotFieldNumber = 6;
    private bool hasIsRobot;
    private bool isRobot_;
    public bool HasIsRobot {
      get { return hasIsRobot; }
    }
    public bool IsRobot {
      get { return isRobot_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCStrickRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[2], Id);
      }
      if (hasTime) {
        output.WriteInt64(2, field_names[5], Time);
      }
      if (hasStrickData) {
        output.WriteMessage(3, field_names[4], StrickData);
      }
      if (hasAdjustStrickDragOver) {
        output.WriteMessage(4, field_names[0], AdjustStrickDragOver);
      }
      if (hasBallStatusEx) {
        output.WriteMessage(5, field_names[1], BallStatusEx);
      }
      if (hasIsRobot) {
        output.WriteBool(6, field_names[3], IsRobot);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Time);
      }
      if (hasStrickData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, StrickData);
      }
      if (hasAdjustStrickDragOver) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, AdjustStrickDragOver);
      }
      if (hasBallStatusEx) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, BallStatusEx);
      }
      if (hasIsRobot) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, IsRobot);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      if (hasStrickData) hash ^= strickData_.GetHashCode();
      if (hasAdjustStrickDragOver) hash ^= adjustStrickDragOver_.GetHashCode();
      if (hasBallStatusEx) hash ^= ballStatusEx_.GetHashCode();
      if (hasIsRobot) hash ^= isRobot_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCStrickRequest other = obj as CCStrickRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      if (hasStrickData != other.hasStrickData || (hasStrickData && !strickData_.Equals(other.strickData_))) return false;
      if (hasAdjustStrickDragOver != other.hasAdjustStrickDragOver || (hasAdjustStrickDragOver && !adjustStrickDragOver_.Equals(other.adjustStrickDragOver_))) return false;
      if (hasBallStatusEx != other.hasBallStatusEx || (hasBallStatusEx && !ballStatusEx_.Equals(other.ballStatusEx_))) return false;
      if (hasIsRobot != other.hasIsRobot || (hasIsRobot && !isRobot_.Equals(other.isRobot_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("time", hasTime, time_, writer);
      PrintField("strick_data", hasStrickData, strickData_, writer);
      PrintField("adjust_strick_drag_over", hasAdjustStrickDragOver, adjustStrickDragOver_, writer);
      PrintField("ball_status_ex", hasBallStatusEx, ballStatusEx_, writer);
      PrintField("is_robot", hasIsRobot, isRobot_, writer);
    }
    #endregion
    
    public static CCStrickRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCStrickRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCStrickRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCStrickRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCStrickRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCStrickRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCStrickRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCStrickRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCStrickRequest result;
      
      private CCStrickRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCStrickRequest original = result;
          result = new CCStrickRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCStrickRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCStrickRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCStrickRequest.DefaultInstance; }
      }
      
      public override CCStrickRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCStrickRequest) {
          return MergeFrom((CCStrickRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCStrickRequest other) {
        if (other == global::com.golf.proto.CCStrickRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasStrickData) {
          MergeStrickData(other.StrickData);
        }
        if (other.HasAdjustStrickDragOver) {
          MergeAdjustStrickDragOver(other.AdjustStrickDragOver);
        }
        if (other.HasBallStatusEx) {
          MergeBallStatusEx(other.BallStatusEx);
        }
        if (other.HasIsRobot) {
          IsRobot = other.IsRobot;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCStrickRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCStrickRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
            case 26: {
              global::com.golf.proto.CCStrickData.Builder subBuilder = global::com.golf.proto.CCStrickData.CreateBuilder();
              if (result.hasStrickData) {
                subBuilder.MergeFrom(StrickData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StrickData = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCAdjustStrickRequest.Builder subBuilder = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder();
              if (result.hasAdjustStrickDragOver) {
                subBuilder.MergeFrom(AdjustStrickDragOver);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AdjustStrickDragOver = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::com.golf.proto.CCBallStatusEx.Builder subBuilder = global::com.golf.proto.CCBallStatusEx.CreateBuilder();
              if (result.hasBallStatusEx) {
                subBuilder.MergeFrom(BallStatusEx);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallStatusEx = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasIsRobot = input.ReadBool(ref result.isRobot_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
      
      public bool HasStrickData {
       get { return result.hasStrickData; }
      }
      public global::com.golf.proto.CCStrickData StrickData {
        get { return result.StrickData; }
        set { SetStrickData(value); }
      }
      public Builder SetStrickData(global::com.golf.proto.CCStrickData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrickData = true;
        result.strickData_ = value;
        return this;
      }
      public Builder SetStrickData(global::com.golf.proto.CCStrickData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStrickData = true;
        result.strickData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStrickData(global::com.golf.proto.CCStrickData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStrickData &&
            result.strickData_ != global::com.golf.proto.CCStrickData.DefaultInstance) {
            result.strickData_ = global::com.golf.proto.CCStrickData.CreateBuilder(result.strickData_).MergeFrom(value).BuildPartial();
        } else {
          result.strickData_ = value;
        }
        result.hasStrickData = true;
        return this;
      }
      public Builder ClearStrickData() {
        PrepareBuilder();
        result.hasStrickData = false;
        result.strickData_ = null;
        return this;
      }
      
      public bool HasAdjustStrickDragOver {
       get { return result.hasAdjustStrickDragOver; }
      }
      public global::com.golf.proto.CCAdjustStrickRequest AdjustStrickDragOver {
        get { return result.AdjustStrickDragOver; }
        set { SetAdjustStrickDragOver(value); }
      }
      public Builder SetAdjustStrickDragOver(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdjustStrickDragOver = true;
        result.adjustStrickDragOver_ = value;
        return this;
      }
      public Builder SetAdjustStrickDragOver(global::com.golf.proto.CCAdjustStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAdjustStrickDragOver = true;
        result.adjustStrickDragOver_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAdjustStrickDragOver(global::com.golf.proto.CCAdjustStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAdjustStrickDragOver &&
            result.adjustStrickDragOver_ != global::com.golf.proto.CCAdjustStrickRequest.DefaultInstance) {
            result.adjustStrickDragOver_ = global::com.golf.proto.CCAdjustStrickRequest.CreateBuilder(result.adjustStrickDragOver_).MergeFrom(value).BuildPartial();
        } else {
          result.adjustStrickDragOver_ = value;
        }
        result.hasAdjustStrickDragOver = true;
        return this;
      }
      public Builder ClearAdjustStrickDragOver() {
        PrepareBuilder();
        result.hasAdjustStrickDragOver = false;
        result.adjustStrickDragOver_ = null;
        return this;
      }
      
      public bool HasBallStatusEx {
       get { return result.hasBallStatusEx; }
      }
      public global::com.golf.proto.CCBallStatusEx BallStatusEx {
        get { return result.BallStatusEx; }
        set { SetBallStatusEx(value); }
      }
      public Builder SetBallStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallStatusEx = true;
        result.ballStatusEx_ = value;
        return this;
      }
      public Builder SetBallStatusEx(global::com.golf.proto.CCBallStatusEx.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallStatusEx = true;
        result.ballStatusEx_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallStatusEx &&
            result.ballStatusEx_ != global::com.golf.proto.CCBallStatusEx.DefaultInstance) {
            result.ballStatusEx_ = global::com.golf.proto.CCBallStatusEx.CreateBuilder(result.ballStatusEx_).MergeFrom(value).BuildPartial();
        } else {
          result.ballStatusEx_ = value;
        }
        result.hasBallStatusEx = true;
        return this;
      }
      public Builder ClearBallStatusEx() {
        PrepareBuilder();
        result.hasBallStatusEx = false;
        result.ballStatusEx_ = null;
        return this;
      }
      
      public bool HasIsRobot {
        get { return result.hasIsRobot; }
      }
      public bool IsRobot {
        get { return result.IsRobot; }
        set { SetIsRobot(value); }
      }
      public Builder SetIsRobot(bool value) {
        PrepareBuilder();
        result.hasIsRobot = true;
        result.isRobot_ = value;
        return this;
      }
      public Builder ClearIsRobot() {
        PrepareBuilder();
        result.hasIsRobot = false;
        result.isRobot_ = false;
        return this;
      }
    }
    static CCStrickRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCStrickResponse : pb::GeneratedMessageLite<CCStrickResponse, CCStrickResponse.Builder> {
    private CCStrickResponse() { }
    private static readonly CCStrickResponse defaultInstance = new CCStrickResponse().MakeReadOnly();
    private static readonly string[] _cCStrickResponseFieldNames = new string[] { "result", "user_data" };
    private static readonly uint[] _cCStrickResponseFieldTags = new uint[] { 8, 18 };
    public static CCStrickResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCStrickResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCStrickResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int UserDataFieldNumber = 2;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCStrickResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasUserData) {
        output.WriteMessage(2, field_names[1], UserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCStrickResponse other = obj as CCStrickResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
    }
    #endregion
    
    public static CCStrickResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCStrickResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCStrickResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCStrickResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCStrickResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCStrickResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCStrickResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCStrickResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCStrickResponse result;
      
      private CCStrickResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCStrickResponse original = result;
          result = new CCStrickResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCStrickResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCStrickResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCStrickResponse.DefaultInstance; }
      }
      
      public override CCStrickResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCStrickResponse) {
          return MergeFrom((CCStrickResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCStrickResponse other) {
        if (other == global::com.golf.proto.CCStrickResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCStrickResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCStrickResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
    }
    static CCStrickResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPVPStrickResponse : pb::GeneratedMessageLite<CCPVPStrickResponse, CCPVPStrickResponse.Builder> {
    private CCPVPStrickResponse() { }
    private static readonly CCPVPStrickResponse defaultInstance = new CCPVPStrickResponse().MakeReadOnly();
    private static readonly string[] _cCPVPStrickResponseFieldNames = new string[] { "oppo_strick_id", "request" };
    private static readonly uint[] _cCPVPStrickResponseFieldTags = new uint[] { 16, 10 };
    public static CCPVPStrickResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPVPStrickResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPVPStrickResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCStrickRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCStrickRequest Request {
      get { return request_ ?? global::com.golf.proto.CCStrickRequest.DefaultInstance; }
    }
    
    public const int OppoStrickIdFieldNumber = 2;
    private bool hasOppoStrickId;
    private int oppoStrickId_;
    public bool HasOppoStrickId {
      get { return hasOppoStrickId; }
    }
    public int OppoStrickId {
      get { return oppoStrickId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPVPStrickResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[1], Request);
      }
      if (hasOppoStrickId) {
        output.WriteInt32(2, field_names[0], OppoStrickId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      if (hasOppoStrickId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, OppoStrickId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      if (hasOppoStrickId) hash ^= oppoStrickId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPVPStrickResponse other = obj as CCPVPStrickResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      if (hasOppoStrickId != other.hasOppoStrickId || (hasOppoStrickId && !oppoStrickId_.Equals(other.oppoStrickId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
      PrintField("oppo_strick_id", hasOppoStrickId, oppoStrickId_, writer);
    }
    #endregion
    
    public static CCPVPStrickResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPStrickResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPStrickResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPStrickResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPStrickResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPStrickResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPVPStrickResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPVPStrickResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPVPStrickResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPStrickResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPVPStrickResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPVPStrickResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPVPStrickResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPVPStrickResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPVPStrickResponse result;
      
      private CCPVPStrickResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPVPStrickResponse original = result;
          result = new CCPVPStrickResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPVPStrickResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPVPStrickResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPVPStrickResponse.DefaultInstance; }
      }
      
      public override CCPVPStrickResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPVPStrickResponse) {
          return MergeFrom((CCPVPStrickResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPVPStrickResponse other) {
        if (other == global::com.golf.proto.CCPVPStrickResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        if (other.HasOppoStrickId) {
          OppoStrickId = other.OppoStrickId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPVPStrickResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPVPStrickResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCStrickRequest.Builder subBuilder = global::com.golf.proto.CCStrickRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOppoStrickId = input.ReadInt32(ref result.oppoStrickId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCStrickRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCStrickRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCStrickRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCStrickRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCStrickRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
      
      public bool HasOppoStrickId {
        get { return result.hasOppoStrickId; }
      }
      public int OppoStrickId {
        get { return result.OppoStrickId; }
        set { SetOppoStrickId(value); }
      }
      public Builder SetOppoStrickId(int value) {
        PrepareBuilder();
        result.hasOppoStrickId = true;
        result.oppoStrickId_ = value;
        return this;
      }
      public Builder ClearOppoStrickId() {
        PrepareBuilder();
        result.hasOppoStrickId = false;
        result.oppoStrickId_ = 0;
        return this;
      }
    }
    static CCPVPStrickResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUploadBallStatusRequest : pb::GeneratedMessageLite<CCUploadBallStatusRequest, CCUploadBallStatusRequest.Builder> {
    private CCUploadBallStatusRequest() { }
    private static readonly CCUploadBallStatusRequest defaultInstance = new CCUploadBallStatusRequest().MakeReadOnly();
    private static readonly string[] _cCUploadBallStatusRequestFieldNames = new string[] { "ball_statuses", "id" };
    private static readonly uint[] _cCUploadBallStatusRequestFieldTags = new uint[] { 18, 10 };
    public static CCUploadBallStatusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUploadBallStatusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUploadBallStatusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int BallStatusesFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCBallStatus> ballStatuses_ = new pbc::PopsicleList<global::com.golf.proto.CCBallStatus>();
    public scg::IList<global::com.golf.proto.CCBallStatus> BallStatusesList {
      get { return ballStatuses_; }
    }
    public int BallStatusesCount {
      get { return ballStatuses_.Count; }
    }
    public global::com.golf.proto.CCBallStatus GetBallStatuses(int index) {
      return ballStatuses_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUploadBallStatusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (ballStatuses_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], ballStatuses_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      foreach (global::com.golf.proto.CCBallStatus element in BallStatusesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      foreach(global::com.golf.proto.CCBallStatus i in ballStatuses_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUploadBallStatusRequest other = obj as CCUploadBallStatusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if(ballStatuses_.Count != other.ballStatuses_.Count) return false;
      for(int ix=0; ix < ballStatuses_.Count; ix++)
        if(!ballStatuses_[ix].Equals(other.ballStatuses_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("ball_statuses", ballStatuses_, writer);
    }
    #endregion
    
    public static CCUploadBallStatusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUploadBallStatusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUploadBallStatusRequest MakeReadOnly() {
      ballStatuses_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUploadBallStatusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUploadBallStatusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUploadBallStatusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUploadBallStatusRequest result;
      
      private CCUploadBallStatusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUploadBallStatusRequest original = result;
          result = new CCUploadBallStatusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUploadBallStatusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUploadBallStatusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCUploadBallStatusRequest.DefaultInstance; }
      }
      
      public override CCUploadBallStatusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUploadBallStatusRequest) {
          return MergeFrom((CCUploadBallStatusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUploadBallStatusRequest other) {
        if (other == global::com.golf.proto.CCUploadBallStatusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.ballStatuses_.Count != 0) {
          result.ballStatuses_.Add(other.ballStatuses_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUploadBallStatusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUploadBallStatusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.ballStatuses_, global::com.golf.proto.CCBallStatus.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCBallStatus> BallStatusesList {
        get { return PrepareBuilder().ballStatuses_; }
      }
      public int BallStatusesCount {
        get { return result.BallStatusesCount; }
      }
      public global::com.golf.proto.CCBallStatus GetBallStatuses(int index) {
        return result.GetBallStatuses(index);
      }
      public Builder SetBallStatuses(int index, global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ballStatuses_[index] = value;
        return this;
      }
      public Builder SetBallStatuses(int index, global::com.golf.proto.CCBallStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ballStatuses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBallStatuses(global::com.golf.proto.CCBallStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ballStatuses_.Add(value);
        return this;
      }
      public Builder AddBallStatuses(global::com.golf.proto.CCBallStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ballStatuses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBallStatuses(scg::IEnumerable<global::com.golf.proto.CCBallStatus> values) {
        PrepareBuilder();
        result.ballStatuses_.Add(values);
        return this;
      }
      public Builder ClearBallStatuses() {
        PrepareBuilder();
        result.ballStatuses_.Clear();
        return this;
      }
    }
    static CCUploadBallStatusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUploadBallStatusResponse : pb::GeneratedMessageLite<CCUploadBallStatusResponse, CCUploadBallStatusResponse.Builder> {
    private CCUploadBallStatusResponse() { }
    private static readonly CCUploadBallStatusResponse defaultInstance = new CCUploadBallStatusResponse().MakeReadOnly();
    private static readonly string[] _cCUploadBallStatusResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _cCUploadBallStatusResponseFieldTags = new uint[] { 8 };
    public static CCUploadBallStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUploadBallStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUploadBallStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUploadBallStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUploadBallStatusResponse other = obj as CCUploadBallStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
    }
    #endregion
    
    public static CCUploadBallStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUploadBallStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUploadBallStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUploadBallStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUploadBallStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUploadBallStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUploadBallStatusResponse result;
      
      private CCUploadBallStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUploadBallStatusResponse original = result;
          result = new CCUploadBallStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUploadBallStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUploadBallStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCUploadBallStatusResponse.DefaultInstance; }
      }
      
      public override CCUploadBallStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUploadBallStatusResponse) {
          return MergeFrom((CCUploadBallStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUploadBallStatusResponse other) {
        if (other == global::com.golf.proto.CCUploadBallStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUploadBallStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUploadBallStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static CCUploadBallStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPVPUploadBallStatusResponse : pb::GeneratedMessageLite<CCPVPUploadBallStatusResponse, CCPVPUploadBallStatusResponse.Builder> {
    private CCPVPUploadBallStatusResponse() { }
    private static readonly CCPVPUploadBallStatusResponse defaultInstance = new CCPVPUploadBallStatusResponse().MakeReadOnly();
    private static readonly string[] _cCPVPUploadBallStatusResponseFieldNames = new string[] { "request" };
    private static readonly uint[] _cCPVPUploadBallStatusResponseFieldTags = new uint[] { 10 };
    public static CCPVPUploadBallStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPVPUploadBallStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPVPUploadBallStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCUploadBallStatusRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCUploadBallStatusRequest Request {
      get { return request_ ?? global::com.golf.proto.CCUploadBallStatusRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPVPUploadBallStatusResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPVPUploadBallStatusResponse other = obj as CCPVPUploadBallStatusResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
    }
    #endregion
    
    public static CCPVPUploadBallStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPUploadBallStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPVPUploadBallStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPVPUploadBallStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPVPUploadBallStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPVPUploadBallStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPVPUploadBallStatusResponse result;
      
      private CCPVPUploadBallStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPVPUploadBallStatusResponse original = result;
          result = new CCPVPUploadBallStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPVPUploadBallStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPVPUploadBallStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPVPUploadBallStatusResponse.DefaultInstance; }
      }
      
      public override CCPVPUploadBallStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPVPUploadBallStatusResponse) {
          return MergeFrom((CCPVPUploadBallStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPVPUploadBallStatusResponse other) {
        if (other == global::com.golf.proto.CCPVPUploadBallStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPVPUploadBallStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPVPUploadBallStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCUploadBallStatusRequest.Builder subBuilder = global::com.golf.proto.CCUploadBallStatusRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCUploadBallStatusRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCUploadBallStatusRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCUploadBallStatusRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCUploadBallStatusRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCUploadBallStatusRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCUploadBallStatusRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
    }
    static CCPVPUploadBallStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBallStopMoveRequest : pb::GeneratedMessageLite<CCBallStopMoveRequest, CCBallStopMoveRequest.Builder> {
    private CCBallStopMoveRequest() { }
    private static readonly CCBallStopMoveRequest defaultInstance = new CCBallStopMoveRequest().MakeReadOnly();
    private static readonly string[] _cCBallStopMoveRequestFieldNames = new string[] { "id", "status_ex" };
    private static readonly uint[] _cCBallStopMoveRequestFieldTags = new uint[] { 10, 18 };
    public static CCBallStopMoveRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBallStopMoveRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBallStopMoveRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int StatusExFieldNumber = 2;
    private bool hasStatusEx;
    private global::com.golf.proto.CCBallStatusEx statusEx_;
    public bool HasStatusEx {
      get { return hasStatusEx; }
    }
    public global::com.golf.proto.CCBallStatusEx StatusEx {
      get { return statusEx_ ?? global::com.golf.proto.CCBallStatusEx.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBallStopMoveRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasStatusEx) {
        output.WriteMessage(2, field_names[1], StatusEx);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasStatusEx) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, StatusEx);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasStatusEx) hash ^= statusEx_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBallStopMoveRequest other = obj as CCBallStopMoveRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasStatusEx != other.hasStatusEx || (hasStatusEx && !statusEx_.Equals(other.statusEx_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("status_ex", hasStatusEx, statusEx_, writer);
    }
    #endregion
    
    public static CCBallStopMoveRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallStopMoveRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBallStopMoveRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBallStopMoveRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBallStopMoveRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBallStopMoveRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBallStopMoveRequest result;
      
      private CCBallStopMoveRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBallStopMoveRequest original = result;
          result = new CCBallStopMoveRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBallStopMoveRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBallStopMoveRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCBallStopMoveRequest.DefaultInstance; }
      }
      
      public override CCBallStopMoveRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBallStopMoveRequest) {
          return MergeFrom((CCBallStopMoveRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBallStopMoveRequest other) {
        if (other == global::com.golf.proto.CCBallStopMoveRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasStatusEx) {
          MergeStatusEx(other.StatusEx);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBallStopMoveRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBallStopMoveRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBallStatusEx.Builder subBuilder = global::com.golf.proto.CCBallStatusEx.CreateBuilder();
              if (result.hasStatusEx) {
                subBuilder.MergeFrom(StatusEx);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StatusEx = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasStatusEx {
       get { return result.hasStatusEx; }
      }
      public global::com.golf.proto.CCBallStatusEx StatusEx {
        get { return result.StatusEx; }
        set { SetStatusEx(value); }
      }
      public Builder SetStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatusEx = true;
        result.statusEx_ = value;
        return this;
      }
      public Builder SetStatusEx(global::com.golf.proto.CCBallStatusEx.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatusEx = true;
        result.statusEx_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatusEx &&
            result.statusEx_ != global::com.golf.proto.CCBallStatusEx.DefaultInstance) {
            result.statusEx_ = global::com.golf.proto.CCBallStatusEx.CreateBuilder(result.statusEx_).MergeFrom(value).BuildPartial();
        } else {
          result.statusEx_ = value;
        }
        result.hasStatusEx = true;
        return this;
      }
      public Builder ClearStatusEx() {
        PrepareBuilder();
        result.hasStatusEx = false;
        result.statusEx_ = null;
        return this;
      }
    }
    static CCBallStopMoveRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBallStopMoveResponse : pb::GeneratedMessageLite<CCBallStopMoveResponse, CCBallStopMoveResponse.Builder> {
    private CCBallStopMoveResponse() { }
    private static readonly CCBallStopMoveResponse defaultInstance = new CCBallStopMoveResponse().MakeReadOnly();
    private static readonly string[] _cCBallStopMoveResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _cCBallStopMoveResponseFieldTags = new uint[] { 8 };
    public static CCBallStopMoveResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBallStopMoveResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBallStopMoveResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBallStopMoveResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBallStopMoveResponse other = obj as CCBallStopMoveResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
    }
    #endregion
    
    public static CCBallStopMoveResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBallStopMoveResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBallStopMoveResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBallStopMoveResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBallStopMoveResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBallStopMoveResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBallStopMoveResponse result;
      
      private CCBallStopMoveResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBallStopMoveResponse original = result;
          result = new CCBallStopMoveResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBallStopMoveResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBallStopMoveResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCBallStopMoveResponse.DefaultInstance; }
      }
      
      public override CCBallStopMoveResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBallStopMoveResponse) {
          return MergeFrom((CCBallStopMoveResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBallStopMoveResponse other) {
        if (other == global::com.golf.proto.CCBallStopMoveResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBallStopMoveResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBallStopMoveResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static CCBallStopMoveResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPVPBallStopMoveResponse : pb::GeneratedMessageLite<CCPVPBallStopMoveResponse, CCPVPBallStopMoveResponse.Builder> {
    private CCPVPBallStopMoveResponse() { }
    private static readonly CCPVPBallStopMoveResponse defaultInstance = new CCPVPBallStopMoveResponse().MakeReadOnly();
    private static readonly string[] _cCPVPBallStopMoveResponseFieldNames = new string[] { "request" };
    private static readonly uint[] _cCPVPBallStopMoveResponseFieldTags = new uint[] { 10 };
    public static CCPVPBallStopMoveResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPVPBallStopMoveResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPVPBallStopMoveResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCBallStopMoveRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCBallStopMoveRequest Request {
      get { return request_ ?? global::com.golf.proto.CCBallStopMoveRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPVPBallStopMoveResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPVPBallStopMoveResponse other = obj as CCPVPBallStopMoveResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
    }
    #endregion
    
    public static CCPVPBallStopMoveResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPVPBallStopMoveResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPVPBallStopMoveResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPVPBallStopMoveResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPVPBallStopMoveResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPVPBallStopMoveResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPVPBallStopMoveResponse result;
      
      private CCPVPBallStopMoveResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPVPBallStopMoveResponse original = result;
          result = new CCPVPBallStopMoveResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPVPBallStopMoveResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPVPBallStopMoveResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPVPBallStopMoveResponse.DefaultInstance; }
      }
      
      public override CCPVPBallStopMoveResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPVPBallStopMoveResponse) {
          return MergeFrom((CCPVPBallStopMoveResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPVPBallStopMoveResponse other) {
        if (other == global::com.golf.proto.CCPVPBallStopMoveResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPVPBallStopMoveResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPVPBallStopMoveResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCBallStopMoveRequest.Builder subBuilder = global::com.golf.proto.CCBallStopMoveRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCBallStopMoveRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCBallStopMoveRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCBallStopMoveRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCBallStopMoveRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCBallStopMoveRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCBallStopMoveRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
    }
    static CCPVPBallStopMoveResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeTurnRequest : pb::GeneratedMessageLite<CCChangeTurnRequest, CCChangeTurnRequest.Builder> {
    private CCChangeTurnRequest() { }
    private static readonly CCChangeTurnRequest defaultInstance = new CCChangeTurnRequest().MakeReadOnly();
    private static readonly string[] _cCChangeTurnRequestFieldNames = new string[] { "id", "is_robot", "reason", "rrs" };
    private static readonly uint[] _cCChangeTurnRequestFieldTags = new uint[] { 10, 24, 16, 34 };
    public static CCChangeTurnRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeTurnRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeTurnRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ReasonFieldNumber = 2;
    private bool hasReason;
    private int reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public int Reason {
      get { return reason_; }
    }
    
    public const int IsRobotFieldNumber = 3;
    private bool hasIsRobot;
    private bool isRobot_;
    public bool HasIsRobot {
      get { return hasIsRobot; }
    }
    public bool IsRobot {
      get { return isRobot_; }
    }
    
    public const int RrsFieldNumber = 4;
    private bool hasRrs;
    private global::com.golf.proto.CCRoundResultStatus rrs_;
    public bool HasRrs {
      get { return hasRrs; }
    }
    public global::com.golf.proto.CCRoundResultStatus Rrs {
      get { return rrs_ ?? global::com.golf.proto.CCRoundResultStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeTurnRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasReason) {
        output.WriteInt32(2, field_names[2], Reason);
      }
      if (hasIsRobot) {
        output.WriteBool(3, field_names[1], IsRobot);
      }
      if (hasRrs) {
        output.WriteMessage(4, field_names[3], Rrs);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Reason);
      }
      if (hasIsRobot) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, IsRobot);
      }
      if (hasRrs) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Rrs);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasReason) hash ^= reason_.GetHashCode();
      if (hasIsRobot) hash ^= isRobot_.GetHashCode();
      if (hasRrs) hash ^= rrs_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeTurnRequest other = obj as CCChangeTurnRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasReason != other.hasReason || (hasReason && !reason_.Equals(other.reason_))) return false;
      if (hasIsRobot != other.hasIsRobot || (hasIsRobot && !isRobot_.Equals(other.isRobot_))) return false;
      if (hasRrs != other.hasRrs || (hasRrs && !rrs_.Equals(other.rrs_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("reason", hasReason, reason_, writer);
      PrintField("is_robot", hasIsRobot, isRobot_, writer);
      PrintField("rrs", hasRrs, rrs_, writer);
    }
    #endregion
    
    public static CCChangeTurnRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeTurnRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeTurnRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeTurnRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeTurnRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeTurnRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeTurnRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeTurnRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeTurnRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeTurnRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeTurnRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeTurnRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeTurnRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeTurnRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeTurnRequest result;
      
      private CCChangeTurnRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeTurnRequest original = result;
          result = new CCChangeTurnRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeTurnRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeTurnRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeTurnRequest.DefaultInstance; }
      }
      
      public override CCChangeTurnRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeTurnRequest) {
          return MergeFrom((CCChangeTurnRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeTurnRequest other) {
        if (other == global::com.golf.proto.CCChangeTurnRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasIsRobot) {
          IsRobot = other.IsRobot;
        }
        if (other.HasRrs) {
          MergeRrs(other.Rrs);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeTurnRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeTurnRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasReason = input.ReadInt32(ref result.reason_);
              break;
            }
            case 24: {
              result.hasIsRobot = input.ReadBool(ref result.isRobot_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCRoundResultStatus.Builder subBuilder = global::com.golf.proto.CCRoundResultStatus.CreateBuilder();
              if (result.hasRrs) {
                subBuilder.MergeFrom(Rrs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rrs = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public int Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(int value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasIsRobot {
        get { return result.hasIsRobot; }
      }
      public bool IsRobot {
        get { return result.IsRobot; }
        set { SetIsRobot(value); }
      }
      public Builder SetIsRobot(bool value) {
        PrepareBuilder();
        result.hasIsRobot = true;
        result.isRobot_ = value;
        return this;
      }
      public Builder ClearIsRobot() {
        PrepareBuilder();
        result.hasIsRobot = false;
        result.isRobot_ = false;
        return this;
      }
      
      public bool HasRrs {
       get { return result.hasRrs; }
      }
      public global::com.golf.proto.CCRoundResultStatus Rrs {
        get { return result.Rrs; }
        set { SetRrs(value); }
      }
      public Builder SetRrs(global::com.golf.proto.CCRoundResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRrs = true;
        result.rrs_ = value;
        return this;
      }
      public Builder SetRrs(global::com.golf.proto.CCRoundResultStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRrs = true;
        result.rrs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRrs(global::com.golf.proto.CCRoundResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRrs &&
            result.rrs_ != global::com.golf.proto.CCRoundResultStatus.DefaultInstance) {
            result.rrs_ = global::com.golf.proto.CCRoundResultStatus.CreateBuilder(result.rrs_).MergeFrom(value).BuildPartial();
        } else {
          result.rrs_ = value;
        }
        result.hasRrs = true;
        return this;
      }
      public Builder ClearRrs() {
        PrepareBuilder();
        result.hasRrs = false;
        result.rrs_ = null;
        return this;
      }
    }
    static CCChangeTurnRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeTurnResponse : pb::GeneratedMessageLite<CCChangeTurnResponse, CCChangeTurnResponse.Builder> {
    private CCChangeTurnResponse() { }
    private static readonly CCChangeTurnResponse defaultInstance = new CCChangeTurnResponse().MakeReadOnly();
    private static readonly string[] _cCChangeTurnResponseFieldNames = new string[] { "reason", "result", "room_status" };
    private static readonly uint[] _cCChangeTurnResponseFieldTags = new uint[] { 24, 8, 18 };
    public static CCChangeTurnResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeTurnResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeTurnResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int RoomStatusFieldNumber = 2;
    private bool hasRoomStatus;
    private global::com.golf.proto.CCRoomStatus roomStatus_;
    public bool HasRoomStatus {
      get { return hasRoomStatus; }
    }
    public global::com.golf.proto.CCRoomStatus RoomStatus {
      get { return roomStatus_ ?? global::com.golf.proto.CCRoomStatus.DefaultInstance; }
    }
    
    public const int ReasonFieldNumber = 3;
    private bool hasReason;
    private int reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public int Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeTurnResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasRoomStatus) {
        output.WriteMessage(2, field_names[2], RoomStatus);
      }
      if (hasReason) {
        output.WriteInt32(3, field_names[0], Reason);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasRoomStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, RoomStatus);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Reason);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasRoomStatus) hash ^= roomStatus_.GetHashCode();
      if (hasReason) hash ^= reason_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeTurnResponse other = obj as CCChangeTurnResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasRoomStatus != other.hasRoomStatus || (hasRoomStatus && !roomStatus_.Equals(other.roomStatus_))) return false;
      if (hasReason != other.hasReason || (hasReason && !reason_.Equals(other.reason_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("room_status", hasRoomStatus, roomStatus_, writer);
      PrintField("reason", hasReason, reason_, writer);
    }
    #endregion
    
    public static CCChangeTurnResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeTurnResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeTurnResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeTurnResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeTurnResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeTurnResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeTurnResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeTurnResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeTurnResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeTurnResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeTurnResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeTurnResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeTurnResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeTurnResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeTurnResponse result;
      
      private CCChangeTurnResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeTurnResponse original = result;
          result = new CCChangeTurnResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeTurnResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeTurnResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeTurnResponse.DefaultInstance; }
      }
      
      public override CCChangeTurnResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeTurnResponse) {
          return MergeFrom((CCChangeTurnResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeTurnResponse other) {
        if (other == global::com.golf.proto.CCChangeTurnResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasRoomStatus) {
          MergeRoomStatus(other.RoomStatus);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeTurnResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeTurnResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCRoomStatus.Builder subBuilder = global::com.golf.proto.CCRoomStatus.CreateBuilder();
              if (result.hasRoomStatus) {
                subBuilder.MergeFrom(RoomStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RoomStatus = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasReason = input.ReadInt32(ref result.reason_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasRoomStatus {
       get { return result.hasRoomStatus; }
      }
      public global::com.golf.proto.CCRoomStatus RoomStatus {
        get { return result.RoomStatus; }
        set { SetRoomStatus(value); }
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = value;
        return this;
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRoomStatus &&
            result.roomStatus_ != global::com.golf.proto.CCRoomStatus.DefaultInstance) {
            result.roomStatus_ = global::com.golf.proto.CCRoomStatus.CreateBuilder(result.roomStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.roomStatus_ = value;
        }
        result.hasRoomStatus = true;
        return this;
      }
      public Builder ClearRoomStatus() {
        PrepareBuilder();
        result.hasRoomStatus = false;
        result.roomStatus_ = null;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public int Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(int value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
    }
    static CCChangeTurnResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSetGameResultShownRequest : pb::GeneratedMessageLite<CCSetGameResultShownRequest, CCSetGameResultShownRequest.Builder> {
    private CCSetGameResultShownRequest() { }
    private static readonly CCSetGameResultShownRequest defaultInstance = new CCSetGameResultShownRequest().MakeReadOnly();
    private static readonly string[] _cCSetGameResultShownRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCSetGameResultShownRequestFieldTags = new uint[] { 10 };
    public static CCSetGameResultShownRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSetGameResultShownRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSetGameResultShownRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSetGameResultShownRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSetGameResultShownRequest other = obj as CCSetGameResultShownRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCSetGameResultShownRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSetGameResultShownRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSetGameResultShownRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSetGameResultShownRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSetGameResultShownRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSetGameResultShownRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSetGameResultShownRequest result;
      
      private CCSetGameResultShownRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSetGameResultShownRequest original = result;
          result = new CCSetGameResultShownRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSetGameResultShownRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSetGameResultShownRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSetGameResultShownRequest.DefaultInstance; }
      }
      
      public override CCSetGameResultShownRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSetGameResultShownRequest) {
          return MergeFrom((CCSetGameResultShownRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSetGameResultShownRequest other) {
        if (other == global::com.golf.proto.CCSetGameResultShownRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSetGameResultShownRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSetGameResultShownRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCSetGameResultShownRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGameResultRequest : pb::GeneratedMessageLite<CCGameResultRequest, CCGameResultRequest.Builder> {
    private CCGameResultRequest() { }
    private static readonly CCGameResultRequest defaultInstance = new CCGameResultRequest().MakeReadOnly();
    private static readonly string[] _cCGameResultRequestFieldNames = new string[] { "id", "reason", "result_state" };
    private static readonly uint[] _cCGameResultRequestFieldTags = new uint[] { 10, 24, 16 };
    public static CCGameResultRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGameResultRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGameResultRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ResultStateFieldNumber = 2;
    private bool hasResultState;
    private int resultState_;
    public bool HasResultState {
      get { return hasResultState; }
    }
    public int ResultState {
      get { return resultState_; }
    }
    
    public const int ReasonFieldNumber = 3;
    private bool hasReason;
    private int reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public int Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGameResultRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasResultState) {
        output.WriteInt32(2, field_names[2], ResultState);
      }
      if (hasReason) {
        output.WriteInt32(3, field_names[1], Reason);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasResultState) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ResultState);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Reason);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasResultState) hash ^= resultState_.GetHashCode();
      if (hasReason) hash ^= reason_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGameResultRequest other = obj as CCGameResultRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasResultState != other.hasResultState || (hasResultState && !resultState_.Equals(other.resultState_))) return false;
      if (hasReason != other.hasReason || (hasReason && !reason_.Equals(other.reason_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("result_state", hasResultState, resultState_, writer);
      PrintField("reason", hasReason, reason_, writer);
    }
    #endregion
    
    public static CCGameResultRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameResultRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameResultRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameResultRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGameResultRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGameResultRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameResultRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGameResultRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGameResultRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGameResultRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGameResultRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGameResultRequest result;
      
      private CCGameResultRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGameResultRequest original = result;
          result = new CCGameResultRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGameResultRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGameResultRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGameResultRequest.DefaultInstance; }
      }
      
      public override CCGameResultRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGameResultRequest) {
          return MergeFrom((CCGameResultRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGameResultRequest other) {
        if (other == global::com.golf.proto.CCGameResultRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasResultState) {
          ResultState = other.ResultState;
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGameResultRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGameResultRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasResultState = input.ReadInt32(ref result.resultState_);
              break;
            }
            case 24: {
              result.hasReason = input.ReadInt32(ref result.reason_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasResultState {
        get { return result.hasResultState; }
      }
      public int ResultState {
        get { return result.ResultState; }
        set { SetResultState(value); }
      }
      public Builder SetResultState(int value) {
        PrepareBuilder();
        result.hasResultState = true;
        result.resultState_ = value;
        return this;
      }
      public Builder ClearResultState() {
        PrepareBuilder();
        result.hasResultState = false;
        result.resultState_ = 0;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public int Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(int value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
    }
    static CCGameResultRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGameResultResponse : pb::GeneratedMessageLite<CCGameResultResponse, CCGameResultResponse.Builder> {
    private CCGameResultResponse() { }
    private static readonly CCGameResultResponse defaultInstance = new CCGameResultResponse().MakeReadOnly();
    private static readonly string[] _cCGameResultResponseFieldNames = new string[] { "game_result_status", "result", "room_status", "tnmt_room_user_item", "user_data", "vsmode_status" };
    private static readonly uint[] _cCGameResultResponseFieldTags = new uint[] { 18, 8, 50, 42, 26, 34 };
    public static CCGameResultResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGameResultResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGameResultResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int GameResultStatusFieldNumber = 2;
    private bool hasGameResultStatus;
    private global::com.golf.proto.CCGameResultStatus gameResultStatus_;
    public bool HasGameResultStatus {
      get { return hasGameResultStatus; }
    }
    public global::com.golf.proto.CCGameResultStatus GameResultStatus {
      get { return gameResultStatus_ ?? global::com.golf.proto.CCGameResultStatus.DefaultInstance; }
    }
    
    public const int UserDataFieldNumber = 3;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int VsmodeStatusFieldNumber = 4;
    private bool hasVsmodeStatus;
    private global::com.golf.proto.CCVsModeStatus vsmodeStatus_;
    public bool HasVsmodeStatus {
      get { return hasVsmodeStatus; }
    }
    public global::com.golf.proto.CCVsModeStatus VsmodeStatus {
      get { return vsmodeStatus_ ?? global::com.golf.proto.CCVsModeStatus.DefaultInstance; }
    }
    
    public const int TnmtRoomUserItemFieldNumber = 5;
    private bool hasTnmtRoomUserItem;
    private global::com.golf.proto.CCTournamentRoomUserItem tnmtRoomUserItem_;
    public bool HasTnmtRoomUserItem {
      get { return hasTnmtRoomUserItem; }
    }
    public global::com.golf.proto.CCTournamentRoomUserItem TnmtRoomUserItem {
      get { return tnmtRoomUserItem_ ?? global::com.golf.proto.CCTournamentRoomUserItem.DefaultInstance; }
    }
    
    public const int RoomStatusFieldNumber = 6;
    private bool hasRoomStatus;
    private global::com.golf.proto.CCRoomStatus roomStatus_;
    public bool HasRoomStatus {
      get { return hasRoomStatus; }
    }
    public global::com.golf.proto.CCRoomStatus RoomStatus {
      get { return roomStatus_ ?? global::com.golf.proto.CCRoomStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGameResultResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasGameResultStatus) {
        output.WriteMessage(2, field_names[0], GameResultStatus);
      }
      if (hasUserData) {
        output.WriteMessage(3, field_names[4], UserData);
      }
      if (hasVsmodeStatus) {
        output.WriteMessage(4, field_names[5], VsmodeStatus);
      }
      if (hasTnmtRoomUserItem) {
        output.WriteMessage(5, field_names[3], TnmtRoomUserItem);
      }
      if (hasRoomStatus) {
        output.WriteMessage(6, field_names[2], RoomStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasGameResultStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, GameResultStatus);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, UserData);
      }
      if (hasVsmodeStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, VsmodeStatus);
      }
      if (hasTnmtRoomUserItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, TnmtRoomUserItem);
      }
      if (hasRoomStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, RoomStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasGameResultStatus) hash ^= gameResultStatus_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      if (hasVsmodeStatus) hash ^= vsmodeStatus_.GetHashCode();
      if (hasTnmtRoomUserItem) hash ^= tnmtRoomUserItem_.GetHashCode();
      if (hasRoomStatus) hash ^= roomStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGameResultResponse other = obj as CCGameResultResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasGameResultStatus != other.hasGameResultStatus || (hasGameResultStatus && !gameResultStatus_.Equals(other.gameResultStatus_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if (hasVsmodeStatus != other.hasVsmodeStatus || (hasVsmodeStatus && !vsmodeStatus_.Equals(other.vsmodeStatus_))) return false;
      if (hasTnmtRoomUserItem != other.hasTnmtRoomUserItem || (hasTnmtRoomUserItem && !tnmtRoomUserItem_.Equals(other.tnmtRoomUserItem_))) return false;
      if (hasRoomStatus != other.hasRoomStatus || (hasRoomStatus && !roomStatus_.Equals(other.roomStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("game_result_status", hasGameResultStatus, gameResultStatus_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("vsmode_status", hasVsmodeStatus, vsmodeStatus_, writer);
      PrintField("tnmt_room_user_item", hasTnmtRoomUserItem, tnmtRoomUserItem_, writer);
      PrintField("room_status", hasRoomStatus, roomStatus_, writer);
    }
    #endregion
    
    public static CCGameResultResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameResultResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameResultResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameResultResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGameResultResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGameResultResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGameResultResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameResultResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGameResultResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGameResultResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGameResultResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGameResultResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGameResultResponse result;
      
      private CCGameResultResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGameResultResponse original = result;
          result = new CCGameResultResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGameResultResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGameResultResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGameResultResponse.DefaultInstance; }
      }
      
      public override CCGameResultResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGameResultResponse) {
          return MergeFrom((CCGameResultResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGameResultResponse other) {
        if (other == global::com.golf.proto.CCGameResultResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasGameResultStatus) {
          MergeGameResultStatus(other.GameResultStatus);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.HasVsmodeStatus) {
          MergeVsmodeStatus(other.VsmodeStatus);
        }
        if (other.HasTnmtRoomUserItem) {
          MergeTnmtRoomUserItem(other.TnmtRoomUserItem);
        }
        if (other.HasRoomStatus) {
          MergeRoomStatus(other.RoomStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGameResultResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGameResultResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCGameResultStatus.Builder subBuilder = global::com.golf.proto.CCGameResultStatus.CreateBuilder();
              if (result.hasGameResultStatus) {
                subBuilder.MergeFrom(GameResultStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameResultStatus = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCVsModeStatus.Builder subBuilder = global::com.golf.proto.CCVsModeStatus.CreateBuilder();
              if (result.hasVsmodeStatus) {
                subBuilder.MergeFrom(VsmodeStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VsmodeStatus = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::com.golf.proto.CCTournamentRoomUserItem.Builder subBuilder = global::com.golf.proto.CCTournamentRoomUserItem.CreateBuilder();
              if (result.hasTnmtRoomUserItem) {
                subBuilder.MergeFrom(TnmtRoomUserItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TnmtRoomUserItem = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::com.golf.proto.CCRoomStatus.Builder subBuilder = global::com.golf.proto.CCRoomStatus.CreateBuilder();
              if (result.hasRoomStatus) {
                subBuilder.MergeFrom(RoomStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RoomStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasGameResultStatus {
       get { return result.hasGameResultStatus; }
      }
      public global::com.golf.proto.CCGameResultStatus GameResultStatus {
        get { return result.GameResultStatus; }
        set { SetGameResultStatus(value); }
      }
      public Builder SetGameResultStatus(global::com.golf.proto.CCGameResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameResultStatus = true;
        result.gameResultStatus_ = value;
        return this;
      }
      public Builder SetGameResultStatus(global::com.golf.proto.CCGameResultStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameResultStatus = true;
        result.gameResultStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameResultStatus(global::com.golf.proto.CCGameResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameResultStatus &&
            result.gameResultStatus_ != global::com.golf.proto.CCGameResultStatus.DefaultInstance) {
            result.gameResultStatus_ = global::com.golf.proto.CCGameResultStatus.CreateBuilder(result.gameResultStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.gameResultStatus_ = value;
        }
        result.hasGameResultStatus = true;
        return this;
      }
      public Builder ClearGameResultStatus() {
        PrepareBuilder();
        result.hasGameResultStatus = false;
        result.gameResultStatus_ = null;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public bool HasVsmodeStatus {
       get { return result.hasVsmodeStatus; }
      }
      public global::com.golf.proto.CCVsModeStatus VsmodeStatus {
        get { return result.VsmodeStatus; }
        set { SetVsmodeStatus(value); }
      }
      public Builder SetVsmodeStatus(global::com.golf.proto.CCVsModeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVsmodeStatus = true;
        result.vsmodeStatus_ = value;
        return this;
      }
      public Builder SetVsmodeStatus(global::com.golf.proto.CCVsModeStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVsmodeStatus = true;
        result.vsmodeStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVsmodeStatus(global::com.golf.proto.CCVsModeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVsmodeStatus &&
            result.vsmodeStatus_ != global::com.golf.proto.CCVsModeStatus.DefaultInstance) {
            result.vsmodeStatus_ = global::com.golf.proto.CCVsModeStatus.CreateBuilder(result.vsmodeStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.vsmodeStatus_ = value;
        }
        result.hasVsmodeStatus = true;
        return this;
      }
      public Builder ClearVsmodeStatus() {
        PrepareBuilder();
        result.hasVsmodeStatus = false;
        result.vsmodeStatus_ = null;
        return this;
      }
      
      public bool HasTnmtRoomUserItem {
       get { return result.hasTnmtRoomUserItem; }
      }
      public global::com.golf.proto.CCTournamentRoomUserItem TnmtRoomUserItem {
        get { return result.TnmtRoomUserItem; }
        set { SetTnmtRoomUserItem(value); }
      }
      public Builder SetTnmtRoomUserItem(global::com.golf.proto.CCTournamentRoomUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTnmtRoomUserItem = true;
        result.tnmtRoomUserItem_ = value;
        return this;
      }
      public Builder SetTnmtRoomUserItem(global::com.golf.proto.CCTournamentRoomUserItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTnmtRoomUserItem = true;
        result.tnmtRoomUserItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTnmtRoomUserItem(global::com.golf.proto.CCTournamentRoomUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTnmtRoomUserItem &&
            result.tnmtRoomUserItem_ != global::com.golf.proto.CCTournamentRoomUserItem.DefaultInstance) {
            result.tnmtRoomUserItem_ = global::com.golf.proto.CCTournamentRoomUserItem.CreateBuilder(result.tnmtRoomUserItem_).MergeFrom(value).BuildPartial();
        } else {
          result.tnmtRoomUserItem_ = value;
        }
        result.hasTnmtRoomUserItem = true;
        return this;
      }
      public Builder ClearTnmtRoomUserItem() {
        PrepareBuilder();
        result.hasTnmtRoomUserItem = false;
        result.tnmtRoomUserItem_ = null;
        return this;
      }
      
      public bool HasRoomStatus {
       get { return result.hasRoomStatus; }
      }
      public global::com.golf.proto.CCRoomStatus RoomStatus {
        get { return result.RoomStatus; }
        set { SetRoomStatus(value); }
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = value;
        return this;
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRoomStatus &&
            result.roomStatus_ != global::com.golf.proto.CCRoomStatus.DefaultInstance) {
            result.roomStatus_ = global::com.golf.proto.CCRoomStatus.CreateBuilder(result.roomStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.roomStatus_ = value;
        }
        result.hasRoomStatus = true;
        return this;
      }
      public Builder ClearRoomStatus() {
        PrepareBuilder();
        result.hasRoomStatus = false;
        result.roomStatus_ = null;
        return this;
      }
    }
    static CCGameResultResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCExtraGameResponse : pb::GeneratedMessageLite<CCExtraGameResponse, CCExtraGameResponse.Builder> {
    private CCExtraGameResponse() { }
    private static readonly CCExtraGameResponse defaultInstance = new CCExtraGameResponse().MakeReadOnly();
    private static readonly string[] _cCExtraGameResponseFieldNames = new string[] { "result", "room_status" };
    private static readonly uint[] _cCExtraGameResponseFieldTags = new uint[] { 8, 18 };
    public static CCExtraGameResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCExtraGameResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCExtraGameResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int RoomStatusFieldNumber = 2;
    private bool hasRoomStatus;
    private global::com.golf.proto.CCRoomStatus roomStatus_;
    public bool HasRoomStatus {
      get { return hasRoomStatus; }
    }
    public global::com.golf.proto.CCRoomStatus RoomStatus {
      get { return roomStatus_ ?? global::com.golf.proto.CCRoomStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCExtraGameResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasRoomStatus) {
        output.WriteMessage(2, field_names[1], RoomStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasRoomStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, RoomStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasRoomStatus) hash ^= roomStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCExtraGameResponse other = obj as CCExtraGameResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasRoomStatus != other.hasRoomStatus || (hasRoomStatus && !roomStatus_.Equals(other.roomStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("room_status", hasRoomStatus, roomStatus_, writer);
    }
    #endregion
    
    public static CCExtraGameResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCExtraGameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCExtraGameResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCExtraGameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCExtraGameResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCExtraGameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCExtraGameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCExtraGameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCExtraGameResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCExtraGameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCExtraGameResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCExtraGameResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCExtraGameResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCExtraGameResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCExtraGameResponse result;
      
      private CCExtraGameResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCExtraGameResponse original = result;
          result = new CCExtraGameResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCExtraGameResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCExtraGameResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCExtraGameResponse.DefaultInstance; }
      }
      
      public override CCExtraGameResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCExtraGameResponse) {
          return MergeFrom((CCExtraGameResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCExtraGameResponse other) {
        if (other == global::com.golf.proto.CCExtraGameResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasRoomStatus) {
          MergeRoomStatus(other.RoomStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCExtraGameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCExtraGameResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCRoomStatus.Builder subBuilder = global::com.golf.proto.CCRoomStatus.CreateBuilder();
              if (result.hasRoomStatus) {
                subBuilder.MergeFrom(RoomStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RoomStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasRoomStatus {
       get { return result.hasRoomStatus; }
      }
      public global::com.golf.proto.CCRoomStatus RoomStatus {
        get { return result.RoomStatus; }
        set { SetRoomStatus(value); }
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = value;
        return this;
      }
      public Builder SetRoomStatus(global::com.golf.proto.CCRoomStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRoomStatus = true;
        result.roomStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRoomStatus(global::com.golf.proto.CCRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRoomStatus &&
            result.roomStatus_ != global::com.golf.proto.CCRoomStatus.DefaultInstance) {
            result.roomStatus_ = global::com.golf.proto.CCRoomStatus.CreateBuilder(result.roomStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.roomStatus_ = value;
        }
        result.hasRoomStatus = true;
        return this;
      }
      public Builder ClearRoomStatus() {
        PrepareBuilder();
        result.hasRoomStatus = false;
        result.roomStatus_ = null;
        return this;
      }
    }
    static CCExtraGameResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCQuitGameRequest : pb::GeneratedMessageLite<CCQuitGameRequest, CCQuitGameRequest.Builder> {
    private CCQuitGameRequest() { }
    private static readonly CCQuitGameRequest defaultInstance = new CCQuitGameRequest().MakeReadOnly();
    private static readonly string[] _cCQuitGameRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCQuitGameRequestFieldTags = new uint[] { 10 };
    public static CCQuitGameRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCQuitGameRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCQuitGameRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCQuitGameRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCQuitGameRequest other = obj as CCQuitGameRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCQuitGameRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCQuitGameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCQuitGameRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCQuitGameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCQuitGameRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCQuitGameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCQuitGameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCQuitGameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCQuitGameRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCQuitGameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCQuitGameRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCQuitGameRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCQuitGameRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCQuitGameRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCQuitGameRequest result;
      
      private CCQuitGameRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCQuitGameRequest original = result;
          result = new CCQuitGameRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCQuitGameRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCQuitGameRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCQuitGameRequest.DefaultInstance; }
      }
      
      public override CCQuitGameRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCQuitGameRequest) {
          return MergeFrom((CCQuitGameRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCQuitGameRequest other) {
        if (other == global::com.golf.proto.CCQuitGameRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCQuitGameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCQuitGameRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCQuitGameRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLeaveRoomRequest : pb::GeneratedMessageLite<CCLeaveRoomRequest, CCLeaveRoomRequest.Builder> {
    private CCLeaveRoomRequest() { }
    private static readonly CCLeaveRoomRequest defaultInstance = new CCLeaveRoomRequest().MakeReadOnly();
    private static readonly string[] _cCLeaveRoomRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCLeaveRoomRequestFieldTags = new uint[] { 10 };
    public static CCLeaveRoomRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLeaveRoomRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLeaveRoomRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLeaveRoomRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLeaveRoomRequest other = obj as CCLeaveRoomRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCLeaveRoomRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeaveRoomRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLeaveRoomRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLeaveRoomRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLeaveRoomRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLeaveRoomRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLeaveRoomRequest result;
      
      private CCLeaveRoomRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLeaveRoomRequest original = result;
          result = new CCLeaveRoomRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLeaveRoomRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLeaveRoomRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCLeaveRoomRequest.DefaultInstance; }
      }
      
      public override CCLeaveRoomRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLeaveRoomRequest) {
          return MergeFrom((CCLeaveRoomRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLeaveRoomRequest other) {
        if (other == global::com.golf.proto.CCLeaveRoomRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLeaveRoomRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLeaveRoomRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCLeaveRoomRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetContestRecordRequest : pb::GeneratedMessageLite<CCGetContestRecordRequest, CCGetContestRecordRequest.Builder> {
    private CCGetContestRecordRequest() { }
    private static readonly CCGetContestRecordRequest defaultInstance = new CCGetContestRecordRequest().MakeReadOnly();
    private static readonly string[] _cCGetContestRecordRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetContestRecordRequestFieldTags = new uint[] { 10 };
    public static CCGetContestRecordRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetContestRecordRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetContestRecordRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetContestRecordRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetContestRecordRequest other = obj as CCGetContestRecordRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetContestRecordRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetContestRecordRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetContestRecordRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetContestRecordRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetContestRecordRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetContestRecordRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetContestRecordRequest result;
      
      private CCGetContestRecordRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetContestRecordRequest original = result;
          result = new CCGetContestRecordRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetContestRecordRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetContestRecordRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetContestRecordRequest.DefaultInstance; }
      }
      
      public override CCGetContestRecordRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetContestRecordRequest) {
          return MergeFrom((CCGetContestRecordRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetContestRecordRequest other) {
        if (other == global::com.golf.proto.CCGetContestRecordRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetContestRecordRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetContestRecordRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetContestRecordRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetContestRecordResponse : pb::GeneratedMessageLite<CCGetContestRecordResponse, CCGetContestRecordResponse.Builder> {
    private CCGetContestRecordResponse() { }
    private static readonly CCGetContestRecordResponse defaultInstance = new CCGetContestRecordResponse().MakeReadOnly();
    private static readonly string[] _cCGetContestRecordResponseFieldNames = new string[] { "ex_contest_items", "ex_contest_items_fav", "result" };
    private static readonly uint[] _cCGetContestRecordResponseFieldTags = new uint[] { 18, 26, 8 };
    public static CCGetContestRecordResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetContestRecordResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetContestRecordResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ExContestItemsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCExContestItem> exContestItems_ = new pbc::PopsicleList<global::com.golf.proto.CCExContestItem>();
    public scg::IList<global::com.golf.proto.CCExContestItem> ExContestItemsList {
      get { return exContestItems_; }
    }
    public int ExContestItemsCount {
      get { return exContestItems_.Count; }
    }
    public global::com.golf.proto.CCExContestItem GetExContestItems(int index) {
      return exContestItems_[index];
    }
    
    public const int ExContestItemsFavFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCExContestItem> exContestItemsFav_ = new pbc::PopsicleList<global::com.golf.proto.CCExContestItem>();
    public scg::IList<global::com.golf.proto.CCExContestItem> ExContestItemsFavList {
      get { return exContestItemsFav_; }
    }
    public int ExContestItemsFavCount {
      get { return exContestItemsFav_.Count; }
    }
    public global::com.golf.proto.CCExContestItem GetExContestItemsFav(int index) {
      return exContestItemsFav_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetContestRecordResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[2], Result);
      }
      if (exContestItems_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], exContestItems_);
      }
      if (exContestItemsFav_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], exContestItemsFav_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      foreach (global::com.golf.proto.CCExContestItem element in ExContestItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::com.golf.proto.CCExContestItem element in ExContestItemsFavList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(global::com.golf.proto.CCExContestItem i in exContestItems_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCExContestItem i in exContestItemsFav_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetContestRecordResponse other = obj as CCGetContestRecordResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(exContestItems_.Count != other.exContestItems_.Count) return false;
      for(int ix=0; ix < exContestItems_.Count; ix++)
        if(!exContestItems_[ix].Equals(other.exContestItems_[ix])) return false;
      if(exContestItemsFav_.Count != other.exContestItemsFav_.Count) return false;
      for(int ix=0; ix < exContestItemsFav_.Count; ix++)
        if(!exContestItemsFav_[ix].Equals(other.exContestItemsFav_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("ex_contest_items", exContestItems_, writer);
      PrintField("ex_contest_items_fav", exContestItemsFav_, writer);
    }
    #endregion
    
    public static CCGetContestRecordResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetContestRecordResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetContestRecordResponse MakeReadOnly() {
      exContestItems_.MakeReadOnly();
      exContestItemsFav_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetContestRecordResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetContestRecordResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetContestRecordResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetContestRecordResponse result;
      
      private CCGetContestRecordResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetContestRecordResponse original = result;
          result = new CCGetContestRecordResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetContestRecordResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetContestRecordResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetContestRecordResponse.DefaultInstance; }
      }
      
      public override CCGetContestRecordResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetContestRecordResponse) {
          return MergeFrom((CCGetContestRecordResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetContestRecordResponse other) {
        if (other == global::com.golf.proto.CCGetContestRecordResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.exContestItems_.Count != 0) {
          result.exContestItems_.Add(other.exContestItems_);
        }
        if (other.exContestItemsFav_.Count != 0) {
          result.exContestItemsFav_.Add(other.exContestItemsFav_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetContestRecordResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetContestRecordResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.exContestItems_, global::com.golf.proto.CCExContestItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.exContestItemsFav_, global::com.golf.proto.CCExContestItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCExContestItem> ExContestItemsList {
        get { return PrepareBuilder().exContestItems_; }
      }
      public int ExContestItemsCount {
        get { return result.ExContestItemsCount; }
      }
      public global::com.golf.proto.CCExContestItem GetExContestItems(int index) {
        return result.GetExContestItems(index);
      }
      public Builder SetExContestItems(int index, global::com.golf.proto.CCExContestItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exContestItems_[index] = value;
        return this;
      }
      public Builder SetExContestItems(int index, global::com.golf.proto.CCExContestItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exContestItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddExContestItems(global::com.golf.proto.CCExContestItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exContestItems_.Add(value);
        return this;
      }
      public Builder AddExContestItems(global::com.golf.proto.CCExContestItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exContestItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeExContestItems(scg::IEnumerable<global::com.golf.proto.CCExContestItem> values) {
        PrepareBuilder();
        result.exContestItems_.Add(values);
        return this;
      }
      public Builder ClearExContestItems() {
        PrepareBuilder();
        result.exContestItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCExContestItem> ExContestItemsFavList {
        get { return PrepareBuilder().exContestItemsFav_; }
      }
      public int ExContestItemsFavCount {
        get { return result.ExContestItemsFavCount; }
      }
      public global::com.golf.proto.CCExContestItem GetExContestItemsFav(int index) {
        return result.GetExContestItemsFav(index);
      }
      public Builder SetExContestItemsFav(int index, global::com.golf.proto.CCExContestItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exContestItemsFav_[index] = value;
        return this;
      }
      public Builder SetExContestItemsFav(int index, global::com.golf.proto.CCExContestItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exContestItemsFav_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddExContestItemsFav(global::com.golf.proto.CCExContestItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exContestItemsFav_.Add(value);
        return this;
      }
      public Builder AddExContestItemsFav(global::com.golf.proto.CCExContestItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exContestItemsFav_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeExContestItemsFav(scg::IEnumerable<global::com.golf.proto.CCExContestItem> values) {
        PrepareBuilder();
        result.exContestItemsFav_.Add(values);
        return this;
      }
      public Builder ClearExContestItemsFav() {
        PrepareBuilder();
        result.exContestItemsFav_.Clear();
        return this;
      }
    }
    static CCGetContestRecordResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCContestItem : pb::GeneratedMessageLite<CCContestItem, CCContestItem.Builder> {
    private CCContestItem() { }
    private static readonly CCContestItem defaultInstance = new CCContestItem().MakeReadOnly();
    private static readonly string[] _cCContestItemFieldNames = new string[] { "end_time", "entry_fees", "ex_game_cnt", "ex_sskin_ids", "id", "reason", "s_user_data1", "s_user_data2", "sskin_id", "start_time", "vs_exlevel_ids", "vs_level_id", "vs_mode_id", "winner" };
    private static readonly uint[] _cCContestItemFieldTags = new uint[] { 80, 50, 88, 112, 10, 56, 18, 26, 104, 72, 96, 40, 32, 64 };
    public static CCContestItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCContestItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCContestItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SUserData1FieldNumber = 2;
    private bool hasSUserData1;
    private global::com.golf.proto.CCSimpleUserData sUserData1_;
    public bool HasSUserData1 {
      get { return hasSUserData1; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData1 {
      get { return sUserData1_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public const int SUserData2FieldNumber = 3;
    private bool hasSUserData2;
    private global::com.golf.proto.CCSimpleUserData sUserData2_;
    public bool HasSUserData2 {
      get { return hasSUserData2; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData2 {
      get { return sUserData2_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public const int VsModeIdFieldNumber = 4;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public const int VsLevelIdFieldNumber = 5;
    private bool hasVsLevelId;
    private int vsLevelId_;
    public bool HasVsLevelId {
      get { return hasVsLevelId; }
    }
    public int VsLevelId {
      get { return vsLevelId_; }
    }
    
    public const int EntryFeesFieldNumber = 6;
    private pbc::PopsicleList<global::com.golf.proto.CCItem> entryFees_ = new pbc::PopsicleList<global::com.golf.proto.CCItem>();
    public scg::IList<global::com.golf.proto.CCItem> EntryFeesList {
      get { return entryFees_; }
    }
    public int EntryFeesCount {
      get { return entryFees_.Count; }
    }
    public global::com.golf.proto.CCItem GetEntryFees(int index) {
      return entryFees_[index];
    }
    
    public const int ReasonFieldNumber = 7;
    private bool hasReason;
    private int reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public int Reason {
      get { return reason_; }
    }
    
    public const int WinnerFieldNumber = 8;
    private bool hasWinner;
    private int winner_;
    public bool HasWinner {
      get { return hasWinner; }
    }
    public int Winner {
      get { return winner_; }
    }
    
    public const int StartTimeFieldNumber = 9;
    private bool hasStartTime;
    private long startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public long StartTime {
      get { return startTime_; }
    }
    
    public const int EndTimeFieldNumber = 10;
    private bool hasEndTime;
    private long endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public long EndTime {
      get { return endTime_; }
    }
    
    public const int ExGameCntFieldNumber = 11;
    private bool hasExGameCnt;
    private int exGameCnt_;
    public bool HasExGameCnt {
      get { return hasExGameCnt; }
    }
    public int ExGameCnt {
      get { return exGameCnt_; }
    }
    
    public const int VsExlevelIdsFieldNumber = 12;
    private pbc::PopsicleList<int> vsExlevelIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> VsExlevelIdsList {
      get { return pbc::Lists.AsReadOnly(vsExlevelIds_); }
    }
    public int VsExlevelIdsCount {
      get { return vsExlevelIds_.Count; }
    }
    public int GetVsExlevelIds(int index) {
      return vsExlevelIds_[index];
    }
    
    public const int SskinIdFieldNumber = 13;
    private bool hasSskinId;
    private int sskinId_;
    public bool HasSskinId {
      get { return hasSskinId; }
    }
    public int SskinId {
      get { return sskinId_; }
    }
    
    public const int ExSskinIdsFieldNumber = 14;
    private pbc::PopsicleList<int> exSskinIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ExSskinIdsList {
      get { return pbc::Lists.AsReadOnly(exSskinIds_); }
    }
    public int ExSskinIdsCount {
      get { return exSskinIds_.Count; }
    }
    public int GetExSskinIds(int index) {
      return exSskinIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCContestItemFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[4], Id);
      }
      if (hasSUserData1) {
        output.WriteMessage(2, field_names[6], SUserData1);
      }
      if (hasSUserData2) {
        output.WriteMessage(3, field_names[7], SUserData2);
      }
      if (hasVsModeId) {
        output.WriteInt32(4, field_names[12], VsModeId);
      }
      if (hasVsLevelId) {
        output.WriteInt32(5, field_names[11], VsLevelId);
      }
      if (entryFees_.Count > 0) {
        output.WriteMessageArray(6, field_names[1], entryFees_);
      }
      if (hasReason) {
        output.WriteInt32(7, field_names[5], Reason);
      }
      if (hasWinner) {
        output.WriteInt32(8, field_names[13], Winner);
      }
      if (hasStartTime) {
        output.WriteInt64(9, field_names[9], StartTime);
      }
      if (hasEndTime) {
        output.WriteInt64(10, field_names[0], EndTime);
      }
      if (hasExGameCnt) {
        output.WriteInt32(11, field_names[2], ExGameCnt);
      }
      if (vsExlevelIds_.Count > 0) {
        output.WriteInt32Array(12, field_names[10], vsExlevelIds_);
      }
      if (hasSskinId) {
        output.WriteInt32(13, field_names[8], SskinId);
      }
      if (exSskinIds_.Count > 0) {
        output.WriteInt32Array(14, field_names[3], exSskinIds_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSUserData1) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SUserData1);
      }
      if (hasSUserData2) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, SUserData2);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, VsModeId);
      }
      if (hasVsLevelId) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, VsLevelId);
      }
      foreach (global::com.golf.proto.CCItem element in EntryFeesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Reason);
      }
      if (hasWinner) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, Winner);
      }
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(9, StartTime);
      }
      if (hasEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(10, EndTime);
      }
      if (hasExGameCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, ExGameCnt);
      }
      {
        int dataSize = 0;
        foreach (int element in VsExlevelIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * vsExlevelIds_.Count;
      }
      if (hasSskinId) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, SskinId);
      }
      {
        int dataSize = 0;
        foreach (int element in ExSskinIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * exSskinIds_.Count;
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSUserData1) hash ^= sUserData1_.GetHashCode();
      if (hasSUserData2) hash ^= sUserData2_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      if (hasVsLevelId) hash ^= vsLevelId_.GetHashCode();
      foreach(global::com.golf.proto.CCItem i in entryFees_)
        hash ^= i.GetHashCode();
      if (hasReason) hash ^= reason_.GetHashCode();
      if (hasWinner) hash ^= winner_.GetHashCode();
      if (hasStartTime) hash ^= startTime_.GetHashCode();
      if (hasEndTime) hash ^= endTime_.GetHashCode();
      if (hasExGameCnt) hash ^= exGameCnt_.GetHashCode();
      foreach(int i in vsExlevelIds_)
        hash ^= i.GetHashCode();
      if (hasSskinId) hash ^= sskinId_.GetHashCode();
      foreach(int i in exSskinIds_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCContestItem other = obj as CCContestItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSUserData1 != other.hasSUserData1 || (hasSUserData1 && !sUserData1_.Equals(other.sUserData1_))) return false;
      if (hasSUserData2 != other.hasSUserData2 || (hasSUserData2 && !sUserData2_.Equals(other.sUserData2_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      if (hasVsLevelId != other.hasVsLevelId || (hasVsLevelId && !vsLevelId_.Equals(other.vsLevelId_))) return false;
      if(entryFees_.Count != other.entryFees_.Count) return false;
      for(int ix=0; ix < entryFees_.Count; ix++)
        if(!entryFees_[ix].Equals(other.entryFees_[ix])) return false;
      if (hasReason != other.hasReason || (hasReason && !reason_.Equals(other.reason_))) return false;
      if (hasWinner != other.hasWinner || (hasWinner && !winner_.Equals(other.winner_))) return false;
      if (hasStartTime != other.hasStartTime || (hasStartTime && !startTime_.Equals(other.startTime_))) return false;
      if (hasEndTime != other.hasEndTime || (hasEndTime && !endTime_.Equals(other.endTime_))) return false;
      if (hasExGameCnt != other.hasExGameCnt || (hasExGameCnt && !exGameCnt_.Equals(other.exGameCnt_))) return false;
      if(vsExlevelIds_.Count != other.vsExlevelIds_.Count) return false;
      for(int ix=0; ix < vsExlevelIds_.Count; ix++)
        if(!vsExlevelIds_[ix].Equals(other.vsExlevelIds_[ix])) return false;
      if (hasSskinId != other.hasSskinId || (hasSskinId && !sskinId_.Equals(other.sskinId_))) return false;
      if(exSskinIds_.Count != other.exSskinIds_.Count) return false;
      for(int ix=0; ix < exSskinIds_.Count; ix++)
        if(!exSskinIds_[ix].Equals(other.exSskinIds_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("s_user_data1", hasSUserData1, sUserData1_, writer);
      PrintField("s_user_data2", hasSUserData2, sUserData2_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
      PrintField("vs_level_id", hasVsLevelId, vsLevelId_, writer);
      PrintField("entry_fees", entryFees_, writer);
      PrintField("reason", hasReason, reason_, writer);
      PrintField("winner", hasWinner, winner_, writer);
      PrintField("start_time", hasStartTime, startTime_, writer);
      PrintField("end_time", hasEndTime, endTime_, writer);
      PrintField("ex_game_cnt", hasExGameCnt, exGameCnt_, writer);
      PrintField("vs_exlevel_ids", vsExlevelIds_, writer);
      PrintField("sskin_id", hasSskinId, sskinId_, writer);
      PrintField("ex_sskin_ids", exSskinIds_, writer);
    }
    #endregion
    
    public static CCContestItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCContestItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCContestItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCContestItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCContestItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCContestItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCContestItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCContestItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCContestItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCContestItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCContestItem MakeReadOnly() {
      entryFees_.MakeReadOnly();
      vsExlevelIds_.MakeReadOnly();
      exSskinIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCContestItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCContestItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCContestItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCContestItem result;
      
      private CCContestItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCContestItem original = result;
          result = new CCContestItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCContestItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCContestItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCContestItem.DefaultInstance; }
      }
      
      public override CCContestItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCContestItem) {
          return MergeFrom((CCContestItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCContestItem other) {
        if (other == global::com.golf.proto.CCContestItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSUserData1) {
          MergeSUserData1(other.SUserData1);
        }
        if (other.HasSUserData2) {
          MergeSUserData2(other.SUserData2);
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        if (other.HasVsLevelId) {
          VsLevelId = other.VsLevelId;
        }
        if (other.entryFees_.Count != 0) {
          result.entryFees_.Add(other.entryFees_);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        if (other.HasWinner) {
          Winner = other.Winner;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        if (other.HasExGameCnt) {
          ExGameCnt = other.ExGameCnt;
        }
        if (other.vsExlevelIds_.Count != 0) {
          result.vsExlevelIds_.Add(other.vsExlevelIds_);
        }
        if (other.HasSskinId) {
          SskinId = other.SskinId;
        }
        if (other.exSskinIds_.Count != 0) {
          result.exSskinIds_.Add(other.exSskinIds_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCContestItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCContestItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData1) {
                subBuilder.MergeFrom(SUserData1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData1 = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData2) {
                subBuilder.MergeFrom(SUserData2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData2 = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
            case 40: {
              result.hasVsLevelId = input.ReadInt32(ref result.vsLevelId_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.entryFees_, global::com.golf.proto.CCItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              result.hasReason = input.ReadInt32(ref result.reason_);
              break;
            }
            case 64: {
              result.hasWinner = input.ReadInt32(ref result.winner_);
              break;
            }
            case 72: {
              result.hasStartTime = input.ReadInt64(ref result.startTime_);
              break;
            }
            case 80: {
              result.hasEndTime = input.ReadInt64(ref result.endTime_);
              break;
            }
            case 88: {
              result.hasExGameCnt = input.ReadInt32(ref result.exGameCnt_);
              break;
            }
            case 98:
            case 96: {
              input.ReadInt32Array(tag, field_name, result.vsExlevelIds_);
              break;
            }
            case 104: {
              result.hasSskinId = input.ReadInt32(ref result.sskinId_);
              break;
            }
            case 114:
            case 112: {
              input.ReadInt32Array(tag, field_name, result.exSskinIds_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSUserData1 {
       get { return result.hasSUserData1; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData1 {
        get { return result.SUserData1; }
        set { SetSUserData1(value); }
      }
      public Builder SetSUserData1(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData1 = true;
        result.sUserData1_ = value;
        return this;
      }
      public Builder SetSUserData1(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData1 = true;
        result.sUserData1_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData1(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData1 &&
            result.sUserData1_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData1_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData1_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData1_ = value;
        }
        result.hasSUserData1 = true;
        return this;
      }
      public Builder ClearSUserData1() {
        PrepareBuilder();
        result.hasSUserData1 = false;
        result.sUserData1_ = null;
        return this;
      }
      
      public bool HasSUserData2 {
       get { return result.hasSUserData2; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData2 {
        get { return result.SUserData2; }
        set { SetSUserData2(value); }
      }
      public Builder SetSUserData2(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData2 = true;
        result.sUserData2_ = value;
        return this;
      }
      public Builder SetSUserData2(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData2 = true;
        result.sUserData2_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData2(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData2 &&
            result.sUserData2_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData2_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData2_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData2_ = value;
        }
        result.hasSUserData2 = true;
        return this;
      }
      public Builder ClearSUserData2() {
        PrepareBuilder();
        result.hasSUserData2 = false;
        result.sUserData2_ = null;
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
      
      public bool HasVsLevelId {
        get { return result.hasVsLevelId; }
      }
      public int VsLevelId {
        get { return result.VsLevelId; }
        set { SetVsLevelId(value); }
      }
      public Builder SetVsLevelId(int value) {
        PrepareBuilder();
        result.hasVsLevelId = true;
        result.vsLevelId_ = value;
        return this;
      }
      public Builder ClearVsLevelId() {
        PrepareBuilder();
        result.hasVsLevelId = false;
        result.vsLevelId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCItem> EntryFeesList {
        get { return PrepareBuilder().entryFees_; }
      }
      public int EntryFeesCount {
        get { return result.EntryFeesCount; }
      }
      public global::com.golf.proto.CCItem GetEntryFees(int index) {
        return result.GetEntryFees(index);
      }
      public Builder SetEntryFees(int index, global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entryFees_[index] = value;
        return this;
      }
      public Builder SetEntryFees(int index, global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entryFees_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntryFees(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entryFees_.Add(value);
        return this;
      }
      public Builder AddEntryFees(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entryFees_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntryFees(scg::IEnumerable<global::com.golf.proto.CCItem> values) {
        PrepareBuilder();
        result.entryFees_.Add(values);
        return this;
      }
      public Builder ClearEntryFees() {
        PrepareBuilder();
        result.entryFees_.Clear();
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public int Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(int value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
      
      public bool HasWinner {
        get { return result.hasWinner; }
      }
      public int Winner {
        get { return result.Winner; }
        set { SetWinner(value); }
      }
      public Builder SetWinner(int value) {
        PrepareBuilder();
        result.hasWinner = true;
        result.winner_ = value;
        return this;
      }
      public Builder ClearWinner() {
        PrepareBuilder();
        result.hasWinner = false;
        result.winner_ = 0;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public long StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(long value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0L;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public long EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(long value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0L;
        return this;
      }
      
      public bool HasExGameCnt {
        get { return result.hasExGameCnt; }
      }
      public int ExGameCnt {
        get { return result.ExGameCnt; }
        set { SetExGameCnt(value); }
      }
      public Builder SetExGameCnt(int value) {
        PrepareBuilder();
        result.hasExGameCnt = true;
        result.exGameCnt_ = value;
        return this;
      }
      public Builder ClearExGameCnt() {
        PrepareBuilder();
        result.hasExGameCnt = false;
        result.exGameCnt_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> VsExlevelIdsList {
        get { return PrepareBuilder().vsExlevelIds_; }
      }
      public int VsExlevelIdsCount {
        get { return result.VsExlevelIdsCount; }
      }
      public int GetVsExlevelIds(int index) {
        return result.GetVsExlevelIds(index);
      }
      public Builder SetVsExlevelIds(int index, int value) {
        PrepareBuilder();
        result.vsExlevelIds_[index] = value;
        return this;
      }
      public Builder AddVsExlevelIds(int value) {
        PrepareBuilder();
        result.vsExlevelIds_.Add(value);
        return this;
      }
      public Builder AddRangeVsExlevelIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.vsExlevelIds_.Add(values);
        return this;
      }
      public Builder ClearVsExlevelIds() {
        PrepareBuilder();
        result.vsExlevelIds_.Clear();
        return this;
      }
      
      public bool HasSskinId {
        get { return result.hasSskinId; }
      }
      public int SskinId {
        get { return result.SskinId; }
        set { SetSskinId(value); }
      }
      public Builder SetSskinId(int value) {
        PrepareBuilder();
        result.hasSskinId = true;
        result.sskinId_ = value;
        return this;
      }
      public Builder ClearSskinId() {
        PrepareBuilder();
        result.hasSskinId = false;
        result.sskinId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ExSskinIdsList {
        get { return PrepareBuilder().exSskinIds_; }
      }
      public int ExSskinIdsCount {
        get { return result.ExSskinIdsCount; }
      }
      public int GetExSskinIds(int index) {
        return result.GetExSskinIds(index);
      }
      public Builder SetExSskinIds(int index, int value) {
        PrepareBuilder();
        result.exSskinIds_[index] = value;
        return this;
      }
      public Builder AddExSskinIds(int value) {
        PrepareBuilder();
        result.exSskinIds_.Add(value);
        return this;
      }
      public Builder AddRangeExSskinIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.exSskinIds_.Add(values);
        return this;
      }
      public Builder ClearExSskinIds() {
        PrepareBuilder();
        result.exSskinIds_.Clear();
        return this;
      }
    }
    static CCContestItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCExContestItem : pb::GeneratedMessageLite<CCExContestItem, CCExContestItem.Builder> {
    private CCExContestItem() { }
    private static readonly CCExContestItem defaultInstance = new CCExContestItem().MakeReadOnly();
    private static readonly string[] _cCExContestItemFieldNames = new string[] { "contest_item", "ur_items" };
    private static readonly uint[] _cCExContestItemFieldTags = new uint[] { 10, 18 };
    public static CCExContestItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCExContestItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCExContestItem ThisMessage {
      get { return this; }
    }
    
    public const int ContestItemFieldNumber = 1;
    private bool hasContestItem;
    private global::com.golf.proto.CCContestItem contestItem_;
    public bool HasContestItem {
      get { return hasContestItem; }
    }
    public global::com.golf.proto.CCContestItem ContestItem {
      get { return contestItem_ ?? global::com.golf.proto.CCContestItem.DefaultInstance; }
    }
    
    public const int UrItemsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCUserReplayItem> urItems_ = new pbc::PopsicleList<global::com.golf.proto.CCUserReplayItem>();
    public scg::IList<global::com.golf.proto.CCUserReplayItem> UrItemsList {
      get { return urItems_; }
    }
    public int UrItemsCount {
      get { return urItems_.Count; }
    }
    public global::com.golf.proto.CCUserReplayItem GetUrItems(int index) {
      return urItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCExContestItemFieldNames;
      if (hasContestItem) {
        output.WriteMessage(1, field_names[0], ContestItem);
      }
      if (urItems_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], urItems_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasContestItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, ContestItem);
      }
      foreach (global::com.golf.proto.CCUserReplayItem element in UrItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasContestItem) hash ^= contestItem_.GetHashCode();
      foreach(global::com.golf.proto.CCUserReplayItem i in urItems_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCExContestItem other = obj as CCExContestItem;
      if (other == null) return false;
      if (hasContestItem != other.hasContestItem || (hasContestItem && !contestItem_.Equals(other.contestItem_))) return false;
      if(urItems_.Count != other.urItems_.Count) return false;
      for(int ix=0; ix < urItems_.Count; ix++)
        if(!urItems_[ix].Equals(other.urItems_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("contest_item", hasContestItem, contestItem_, writer);
      PrintField("ur_items", urItems_, writer);
    }
    #endregion
    
    public static CCExContestItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCExContestItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCExContestItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCExContestItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCExContestItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCExContestItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCExContestItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCExContestItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCExContestItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCExContestItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCExContestItem MakeReadOnly() {
      urItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCExContestItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCExContestItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCExContestItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCExContestItem result;
      
      private CCExContestItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCExContestItem original = result;
          result = new CCExContestItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCExContestItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCExContestItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCExContestItem.DefaultInstance; }
      }
      
      public override CCExContestItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCExContestItem) {
          return MergeFrom((CCExContestItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCExContestItem other) {
        if (other == global::com.golf.proto.CCExContestItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContestItem) {
          MergeContestItem(other.ContestItem);
        }
        if (other.urItems_.Count != 0) {
          result.urItems_.Add(other.urItems_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCExContestItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCExContestItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCContestItem.Builder subBuilder = global::com.golf.proto.CCContestItem.CreateBuilder();
              if (result.hasContestItem) {
                subBuilder.MergeFrom(ContestItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContestItem = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.urItems_, global::com.golf.proto.CCUserReplayItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasContestItem {
       get { return result.hasContestItem; }
      }
      public global::com.golf.proto.CCContestItem ContestItem {
        get { return result.ContestItem; }
        set { SetContestItem(value); }
      }
      public Builder SetContestItem(global::com.golf.proto.CCContestItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestItem = true;
        result.contestItem_ = value;
        return this;
      }
      public Builder SetContestItem(global::com.golf.proto.CCContestItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContestItem = true;
        result.contestItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContestItem(global::com.golf.proto.CCContestItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContestItem &&
            result.contestItem_ != global::com.golf.proto.CCContestItem.DefaultInstance) {
            result.contestItem_ = global::com.golf.proto.CCContestItem.CreateBuilder(result.contestItem_).MergeFrom(value).BuildPartial();
        } else {
          result.contestItem_ = value;
        }
        result.hasContestItem = true;
        return this;
      }
      public Builder ClearContestItem() {
        PrepareBuilder();
        result.hasContestItem = false;
        result.contestItem_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCUserReplayItem> UrItemsList {
        get { return PrepareBuilder().urItems_; }
      }
      public int UrItemsCount {
        get { return result.UrItemsCount; }
      }
      public global::com.golf.proto.CCUserReplayItem GetUrItems(int index) {
        return result.GetUrItems(index);
      }
      public Builder SetUrItems(int index, global::com.golf.proto.CCUserReplayItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.urItems_[index] = value;
        return this;
      }
      public Builder SetUrItems(int index, global::com.golf.proto.CCUserReplayItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.urItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUrItems(global::com.golf.proto.CCUserReplayItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.urItems_.Add(value);
        return this;
      }
      public Builder AddUrItems(global::com.golf.proto.CCUserReplayItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.urItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUrItems(scg::IEnumerable<global::com.golf.proto.CCUserReplayItem> values) {
        PrepareBuilder();
        result.urItems_.Add(values);
        return this;
      }
      public Builder ClearUrItems() {
        PrepareBuilder();
        result.urItems_.Clear();
        return this;
      }
    }
    static CCExContestItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUserReplayItem : pb::GeneratedMessageLite<CCUserReplayItem, CCUserReplayItem.Builder> {
    private CCUserReplayItem() { }
    private static readonly CCUserReplayItem defaultInstance = new CCUserReplayItem().MakeReadOnly();
    private static readonly string[] _cCUserReplayItemFieldNames = new string[] { "comb_id", "faved", "name", "time", "user_id" };
    private static readonly uint[] _cCUserReplayItemFieldTags = new uint[] { 18, 40, 26, 32, 10 };
    public static CCUserReplayItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUserReplayItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUserReplayItem ThisMessage {
      get { return this; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int CombIdFieldNumber = 2;
    private bool hasCombId;
    private string combId_ = "";
    public bool HasCombId {
      get { return hasCombId; }
    }
    public string CombId {
      get { return combId_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TimeFieldNumber = 4;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public const int FavedFieldNumber = 5;
    private bool hasFaved;
    private bool faved_;
    public bool HasFaved {
      get { return hasFaved; }
    }
    public bool Faved {
      get { return faved_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUserReplayItemFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[4], UserId);
      }
      if (hasCombId) {
        output.WriteString(2, field_names[0], CombId);
      }
      if (hasName) {
        output.WriteString(3, field_names[2], Name);
      }
      if (hasTime) {
        output.WriteInt64(4, field_names[3], Time);
      }
      if (hasFaved) {
        output.WriteBool(5, field_names[1], Faved);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
      }
      if (hasCombId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CombId);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, Time);
      }
      if (hasFaved) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Faved);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasCombId) hash ^= combId_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      if (hasFaved) hash ^= faved_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUserReplayItem other = obj as CCUserReplayItem;
      if (other == null) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasCombId != other.hasCombId || (hasCombId && !combId_.Equals(other.combId_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      if (hasFaved != other.hasFaved || (hasFaved && !faved_.Equals(other.faved_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("user_id", hasUserId, userId_, writer);
      PrintField("comb_id", hasCombId, combId_, writer);
      PrintField("name", hasName, name_, writer);
      PrintField("time", hasTime, time_, writer);
      PrintField("faved", hasFaved, faved_, writer);
    }
    #endregion
    
    public static CCUserReplayItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUserReplayItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUserReplayItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUserReplayItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUserReplayItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUserReplayItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUserReplayItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUserReplayItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUserReplayItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUserReplayItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUserReplayItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUserReplayItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUserReplayItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUserReplayItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUserReplayItem result;
      
      private CCUserReplayItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUserReplayItem original = result;
          result = new CCUserReplayItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUserReplayItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUserReplayItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCUserReplayItem.DefaultInstance; }
      }
      
      public override CCUserReplayItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUserReplayItem) {
          return MergeFrom((CCUserReplayItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUserReplayItem other) {
        if (other == global::com.golf.proto.CCUserReplayItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasCombId) {
          CombId = other.CombId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasFaved) {
          Faved = other.Faved;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUserReplayItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUserReplayItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              result.hasCombId = input.ReadString(ref result.combId_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 32: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
            case 40: {
              result.hasFaved = input.ReadBool(ref result.faved_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasCombId {
        get { return result.hasCombId; }
      }
      public string CombId {
        get { return result.CombId; }
        set { SetCombId(value); }
      }
      public Builder SetCombId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombId = true;
        result.combId_ = value;
        return this;
      }
      public Builder ClearCombId() {
        PrepareBuilder();
        result.hasCombId = false;
        result.combId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
      
      public bool HasFaved {
        get { return result.hasFaved; }
      }
      public bool Faved {
        get { return result.Faved; }
        set { SetFaved(value); }
      }
      public Builder SetFaved(bool value) {
        PrepareBuilder();
        result.hasFaved = true;
        result.faved_ = value;
        return this;
      }
      public Builder ClearFaved() {
        PrepareBuilder();
        result.hasFaved = false;
        result.faved_ = false;
        return this;
      }
    }
    static CCUserReplayItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetReplayDataRequest : pb::GeneratedMessageLite<CCGetReplayDataRequest, CCGetReplayDataRequest.Builder> {
    private CCGetReplayDataRequest() { }
    private static readonly CCGetReplayDataRequest defaultInstance = new CCGetReplayDataRequest().MakeReadOnly();
    private static readonly string[] _cCGetReplayDataRequestFieldNames = new string[] { "comb_round_cnt", "contest_id", "id" };
    private static readonly uint[] _cCGetReplayDataRequestFieldTags = new uint[] { 26, 18, 10 };
    public static CCGetReplayDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetReplayDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetReplayDataRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ContestIdFieldNumber = 2;
    private bool hasContestId;
    private string contestId_ = "";
    public bool HasContestId {
      get { return hasContestId; }
    }
    public string ContestId {
      get { return contestId_; }
    }
    
    public const int CombRoundCntFieldNumber = 3;
    private bool hasCombRoundCnt;
    private string combRoundCnt_ = "";
    public bool HasCombRoundCnt {
      get { return hasCombRoundCnt; }
    }
    public string CombRoundCnt {
      get { return combRoundCnt_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetReplayDataRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[2], Id);
      }
      if (hasContestId) {
        output.WriteString(2, field_names[1], ContestId);
      }
      if (hasCombRoundCnt) {
        output.WriteString(3, field_names[0], CombRoundCnt);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasContestId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ContestId);
      }
      if (hasCombRoundCnt) {
        size += pb::CodedOutputStream.ComputeStringSize(3, CombRoundCnt);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasContestId) hash ^= contestId_.GetHashCode();
      if (hasCombRoundCnt) hash ^= combRoundCnt_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetReplayDataRequest other = obj as CCGetReplayDataRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasContestId != other.hasContestId || (hasContestId && !contestId_.Equals(other.contestId_))) return false;
      if (hasCombRoundCnt != other.hasCombRoundCnt || (hasCombRoundCnt && !combRoundCnt_.Equals(other.combRoundCnt_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("contest_id", hasContestId, contestId_, writer);
      PrintField("comb_round_cnt", hasCombRoundCnt, combRoundCnt_, writer);
    }
    #endregion
    
    public static CCGetReplayDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetReplayDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetReplayDataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetReplayDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetReplayDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetReplayDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetReplayDataRequest result;
      
      private CCGetReplayDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetReplayDataRequest original = result;
          result = new CCGetReplayDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetReplayDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetReplayDataRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetReplayDataRequest.DefaultInstance; }
      }
      
      public override CCGetReplayDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetReplayDataRequest) {
          return MergeFrom((CCGetReplayDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetReplayDataRequest other) {
        if (other == global::com.golf.proto.CCGetReplayDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasContestId) {
          ContestId = other.ContestId;
        }
        if (other.HasCombRoundCnt) {
          CombRoundCnt = other.CombRoundCnt;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetReplayDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetReplayDataRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasContestId = input.ReadString(ref result.contestId_);
              break;
            }
            case 26: {
              result.hasCombRoundCnt = input.ReadString(ref result.combRoundCnt_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasContestId {
        get { return result.hasContestId; }
      }
      public string ContestId {
        get { return result.ContestId; }
        set { SetContestId(value); }
      }
      public Builder SetContestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestId = true;
        result.contestId_ = value;
        return this;
      }
      public Builder ClearContestId() {
        PrepareBuilder();
        result.hasContestId = false;
        result.contestId_ = "";
        return this;
      }
      
      public bool HasCombRoundCnt {
        get { return result.hasCombRoundCnt; }
      }
      public string CombRoundCnt {
        get { return result.CombRoundCnt; }
        set { SetCombRoundCnt(value); }
      }
      public Builder SetCombRoundCnt(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombRoundCnt = true;
        result.combRoundCnt_ = value;
        return this;
      }
      public Builder ClearCombRoundCnt() {
        PrepareBuilder();
        result.hasCombRoundCnt = false;
        result.combRoundCnt_ = "";
        return this;
      }
    }
    static CCGetReplayDataRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetReplayDataResponse : pb::GeneratedMessageLite<CCGetReplayDataResponse, CCGetReplayDataResponse.Builder> {
    private CCGetReplayDataResponse() { }
    private static readonly CCGetReplayDataResponse defaultInstance = new CCGetReplayDataResponse().MakeReadOnly();
    private static readonly string[] _cCGetReplayDataResponseFieldNames = new string[] { "rd_item", "result" };
    private static readonly uint[] _cCGetReplayDataResponseFieldTags = new uint[] { 18, 8 };
    public static CCGetReplayDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetReplayDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetReplayDataResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int RdItemFieldNumber = 2;
    private bool hasRdItem;
    private global::com.golf.proto.CCReplayDataItem rdItem_;
    public bool HasRdItem {
      get { return hasRdItem; }
    }
    public global::com.golf.proto.CCReplayDataItem RdItem {
      get { return rdItem_ ?? global::com.golf.proto.CCReplayDataItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetReplayDataResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasRdItem) {
        output.WriteMessage(2, field_names[0], RdItem);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasRdItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, RdItem);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasRdItem) hash ^= rdItem_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetReplayDataResponse other = obj as CCGetReplayDataResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasRdItem != other.hasRdItem || (hasRdItem && !rdItem_.Equals(other.rdItem_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("rd_item", hasRdItem, rdItem_, writer);
    }
    #endregion
    
    public static CCGetReplayDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetReplayDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetReplayDataResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetReplayDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetReplayDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetReplayDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetReplayDataResponse result;
      
      private CCGetReplayDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetReplayDataResponse original = result;
          result = new CCGetReplayDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetReplayDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetReplayDataResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetReplayDataResponse.DefaultInstance; }
      }
      
      public override CCGetReplayDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetReplayDataResponse) {
          return MergeFrom((CCGetReplayDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetReplayDataResponse other) {
        if (other == global::com.golf.proto.CCGetReplayDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasRdItem) {
          MergeRdItem(other.RdItem);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetReplayDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetReplayDataResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCReplayDataItem.Builder subBuilder = global::com.golf.proto.CCReplayDataItem.CreateBuilder();
              if (result.hasRdItem) {
                subBuilder.MergeFrom(RdItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RdItem = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasRdItem {
       get { return result.hasRdItem; }
      }
      public global::com.golf.proto.CCReplayDataItem RdItem {
        get { return result.RdItem; }
        set { SetRdItem(value); }
      }
      public Builder SetRdItem(global::com.golf.proto.CCReplayDataItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRdItem = true;
        result.rdItem_ = value;
        return this;
      }
      public Builder SetRdItem(global::com.golf.proto.CCReplayDataItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRdItem = true;
        result.rdItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRdItem(global::com.golf.proto.CCReplayDataItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRdItem &&
            result.rdItem_ != global::com.golf.proto.CCReplayDataItem.DefaultInstance) {
            result.rdItem_ = global::com.golf.proto.CCReplayDataItem.CreateBuilder(result.rdItem_).MergeFrom(value).BuildPartial();
        } else {
          result.rdItem_ = value;
        }
        result.hasRdItem = true;
        return this;
      }
      public Builder ClearRdItem() {
        PrepareBuilder();
        result.hasRdItem = false;
        result.rdItem_ = null;
        return this;
      }
    }
    static CCGetReplayDataResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCReplayDataItem : pb::GeneratedMessageLite<CCReplayDataItem, CCReplayDataItem.Builder> {
    private CCReplayDataItem() { }
    private static readonly CCReplayDataItem defaultInstance = new CCReplayDataItem().MakeReadOnly();
    private static readonly string[] _cCReplayDataItemFieldNames = new string[] { "client_version", "comb_round_cnt", "contest_id", "data", "valid" };
    private static readonly uint[] _cCReplayDataItemFieldTags = new uint[] { 34, 18, 10, 26, 40 };
    public static CCReplayDataItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCReplayDataItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCReplayDataItem ThisMessage {
      get { return this; }
    }
    
    public const int ContestIdFieldNumber = 1;
    private bool hasContestId;
    private string contestId_ = "";
    public bool HasContestId {
      get { return hasContestId; }
    }
    public string ContestId {
      get { return contestId_; }
    }
    
    public const int CombRoundCntFieldNumber = 2;
    private bool hasCombRoundCnt;
    private string combRoundCnt_ = "";
    public bool HasCombRoundCnt {
      get { return hasCombRoundCnt; }
    }
    public string CombRoundCnt {
      get { return combRoundCnt_; }
    }
    
    public const int DataFieldNumber = 3;
    private bool hasData;
    private global::com.golf.proto.CCOperateData data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::com.golf.proto.CCOperateData Data {
      get { return data_ ?? global::com.golf.proto.CCOperateData.DefaultInstance; }
    }
    
    public const int ClientVersionFieldNumber = 4;
    private bool hasClientVersion;
    private string clientVersion_ = "";
    public bool HasClientVersion {
      get { return hasClientVersion; }
    }
    public string ClientVersion {
      get { return clientVersion_; }
    }
    
    public const int ValidFieldNumber = 5;
    private bool hasValid;
    private bool valid_;
    public bool HasValid {
      get { return hasValid; }
    }
    public bool Valid {
      get { return valid_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCReplayDataItemFieldNames;
      if (hasContestId) {
        output.WriteString(1, field_names[2], ContestId);
      }
      if (hasCombRoundCnt) {
        output.WriteString(2, field_names[1], CombRoundCnt);
      }
      if (hasData) {
        output.WriteMessage(3, field_names[3], Data);
      }
      if (hasClientVersion) {
        output.WriteString(4, field_names[0], ClientVersion);
      }
      if (hasValid) {
        output.WriteBool(5, field_names[4], Valid);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasContestId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ContestId);
      }
      if (hasCombRoundCnt) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CombRoundCnt);
      }
      if (hasData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Data);
      }
      if (hasClientVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(4, ClientVersion);
      }
      if (hasValid) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Valid);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasContestId) hash ^= contestId_.GetHashCode();
      if (hasCombRoundCnt) hash ^= combRoundCnt_.GetHashCode();
      if (hasData) hash ^= data_.GetHashCode();
      if (hasClientVersion) hash ^= clientVersion_.GetHashCode();
      if (hasValid) hash ^= valid_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCReplayDataItem other = obj as CCReplayDataItem;
      if (other == null) return false;
      if (hasContestId != other.hasContestId || (hasContestId && !contestId_.Equals(other.contestId_))) return false;
      if (hasCombRoundCnt != other.hasCombRoundCnt || (hasCombRoundCnt && !combRoundCnt_.Equals(other.combRoundCnt_))) return false;
      if (hasData != other.hasData || (hasData && !data_.Equals(other.data_))) return false;
      if (hasClientVersion != other.hasClientVersion || (hasClientVersion && !clientVersion_.Equals(other.clientVersion_))) return false;
      if (hasValid != other.hasValid || (hasValid && !valid_.Equals(other.valid_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("contest_id", hasContestId, contestId_, writer);
      PrintField("comb_round_cnt", hasCombRoundCnt, combRoundCnt_, writer);
      PrintField("data", hasData, data_, writer);
      PrintField("client_version", hasClientVersion, clientVersion_, writer);
      PrintField("valid", hasValid, valid_, writer);
    }
    #endregion
    
    public static CCReplayDataItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCReplayDataItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCReplayDataItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCReplayDataItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCReplayDataItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCReplayDataItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCReplayDataItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCReplayDataItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCReplayDataItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCReplayDataItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCReplayDataItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCReplayDataItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCReplayDataItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCReplayDataItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCReplayDataItem result;
      
      private CCReplayDataItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCReplayDataItem original = result;
          result = new CCReplayDataItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCReplayDataItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCReplayDataItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCReplayDataItem.DefaultInstance; }
      }
      
      public override CCReplayDataItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCReplayDataItem) {
          return MergeFrom((CCReplayDataItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCReplayDataItem other) {
        if (other == global::com.golf.proto.CCReplayDataItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContestId) {
          ContestId = other.ContestId;
        }
        if (other.HasCombRoundCnt) {
          CombRoundCnt = other.CombRoundCnt;
        }
        if (other.HasData) {
          MergeData(other.Data);
        }
        if (other.HasClientVersion) {
          ClientVersion = other.ClientVersion;
        }
        if (other.HasValid) {
          Valid = other.Valid;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCReplayDataItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCReplayDataItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasContestId = input.ReadString(ref result.contestId_);
              break;
            }
            case 18: {
              result.hasCombRoundCnt = input.ReadString(ref result.combRoundCnt_);
              break;
            }
            case 26: {
              global::com.golf.proto.CCOperateData.Builder subBuilder = global::com.golf.proto.CCOperateData.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              result.hasClientVersion = input.ReadString(ref result.clientVersion_);
              break;
            }
            case 40: {
              result.hasValid = input.ReadBool(ref result.valid_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasContestId {
        get { return result.hasContestId; }
      }
      public string ContestId {
        get { return result.ContestId; }
        set { SetContestId(value); }
      }
      public Builder SetContestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestId = true;
        result.contestId_ = value;
        return this;
      }
      public Builder ClearContestId() {
        PrepareBuilder();
        result.hasContestId = false;
        result.contestId_ = "";
        return this;
      }
      
      public bool HasCombRoundCnt {
        get { return result.hasCombRoundCnt; }
      }
      public string CombRoundCnt {
        get { return result.CombRoundCnt; }
        set { SetCombRoundCnt(value); }
      }
      public Builder SetCombRoundCnt(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombRoundCnt = true;
        result.combRoundCnt_ = value;
        return this;
      }
      public Builder ClearCombRoundCnt() {
        PrepareBuilder();
        result.hasCombRoundCnt = false;
        result.combRoundCnt_ = "";
        return this;
      }
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::com.golf.proto.CCOperateData Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::com.golf.proto.CCOperateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::com.golf.proto.CCOperateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::com.golf.proto.CCOperateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::com.golf.proto.CCOperateData.DefaultInstance) {
            result.data_ = global::com.golf.proto.CCOperateData.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
      
      public bool HasClientVersion {
        get { return result.hasClientVersion; }
      }
      public string ClientVersion {
        get { return result.ClientVersion; }
        set { SetClientVersion(value); }
      }
      public Builder SetClientVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientVersion = true;
        result.clientVersion_ = value;
        return this;
      }
      public Builder ClearClientVersion() {
        PrepareBuilder();
        result.hasClientVersion = false;
        result.clientVersion_ = "";
        return this;
      }
      
      public bool HasValid {
        get { return result.hasValid; }
      }
      public bool Valid {
        get { return result.Valid; }
        set { SetValid(value); }
      }
      public Builder SetValid(bool value) {
        PrepareBuilder();
        result.hasValid = true;
        result.valid_ = value;
        return this;
      }
      public Builder ClearValid() {
        PrepareBuilder();
        result.hasValid = false;
        result.valid_ = false;
        return this;
      }
    }
    static CCReplayDataItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetVsModeStatusRequest : pb::GeneratedMessageLite<CCGetVsModeStatusRequest, CCGetVsModeStatusRequest.Builder> {
    private CCGetVsModeStatusRequest() { }
    private static readonly CCGetVsModeStatusRequest defaultInstance = new CCGetVsModeStatusRequest().MakeReadOnly();
    private static readonly string[] _cCGetVsModeStatusRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetVsModeStatusRequestFieldTags = new uint[] { 10 };
    public static CCGetVsModeStatusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetVsModeStatusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetVsModeStatusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetVsModeStatusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetVsModeStatusRequest other = obj as CCGetVsModeStatusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetVsModeStatusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVsModeStatusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetVsModeStatusRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetVsModeStatusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetVsModeStatusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetVsModeStatusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetVsModeStatusRequest result;
      
      private CCGetVsModeStatusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetVsModeStatusRequest original = result;
          result = new CCGetVsModeStatusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetVsModeStatusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetVsModeStatusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetVsModeStatusRequest.DefaultInstance; }
      }
      
      public override CCGetVsModeStatusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetVsModeStatusRequest) {
          return MergeFrom((CCGetVsModeStatusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetVsModeStatusRequest other) {
        if (other == global::com.golf.proto.CCGetVsModeStatusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetVsModeStatusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetVsModeStatusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetVsModeStatusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetVsModeStatusResponse : pb::GeneratedMessageLite<CCGetVsModeStatusResponse, CCGetVsModeStatusResponse.Builder> {
    private CCGetVsModeStatusResponse() { }
    private static readonly CCGetVsModeStatusResponse defaultInstance = new CCGetVsModeStatusResponse().MakeReadOnly();
    private static readonly string[] _cCGetVsModeStatusResponseFieldNames = new string[] { "result", "status" };
    private static readonly uint[] _cCGetVsModeStatusResponseFieldTags = new uint[] { 8, 18 };
    public static CCGetVsModeStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetVsModeStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetVsModeStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCVsModeStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCVsModeStatus Status {
      get { return status_ ?? global::com.golf.proto.CCVsModeStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetVsModeStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[1], Status);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetVsModeStatusResponse other = obj as CCGetVsModeStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", hasStatus, status_, writer);
    }
    #endregion
    
    public static CCGetVsModeStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVsModeStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetVsModeStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetVsModeStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetVsModeStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetVsModeStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetVsModeStatusResponse result;
      
      private CCGetVsModeStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetVsModeStatusResponse original = result;
          result = new CCGetVsModeStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetVsModeStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetVsModeStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetVsModeStatusResponse.DefaultInstance; }
      }
      
      public override CCGetVsModeStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetVsModeStatusResponse) {
          return MergeFrom((CCGetVsModeStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetVsModeStatusResponse other) {
        if (other == global::com.golf.proto.CCGetVsModeStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetVsModeStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetVsModeStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCVsModeStatus.Builder subBuilder = global::com.golf.proto.CCVsModeStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCVsModeStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCVsModeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCVsModeStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCVsModeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCVsModeStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCVsModeStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
    }
    static CCGetVsModeStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetTournamentStatusRequest : pb::GeneratedMessageLite<CCGetTournamentStatusRequest, CCGetTournamentStatusRequest.Builder> {
    private CCGetTournamentStatusRequest() { }
    private static readonly CCGetTournamentStatusRequest defaultInstance = new CCGetTournamentStatusRequest().MakeReadOnly();
    private static readonly string[] _cCGetTournamentStatusRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetTournamentStatusRequestFieldTags = new uint[] { 10 };
    public static CCGetTournamentStatusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetTournamentStatusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetTournamentStatusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetTournamentStatusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetTournamentStatusRequest other = obj as CCGetTournamentStatusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetTournamentStatusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentStatusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetTournamentStatusRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetTournamentStatusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetTournamentStatusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetTournamentStatusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetTournamentStatusRequest result;
      
      private CCGetTournamentStatusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetTournamentStatusRequest original = result;
          result = new CCGetTournamentStatusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetTournamentStatusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetTournamentStatusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetTournamentStatusRequest.DefaultInstance; }
      }
      
      public override CCGetTournamentStatusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetTournamentStatusRequest) {
          return MergeFrom((CCGetTournamentStatusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetTournamentStatusRequest other) {
        if (other == global::com.golf.proto.CCGetTournamentStatusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetTournamentStatusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetTournamentStatusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetTournamentStatusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetTournamentStatusResponse : pb::GeneratedMessageLite<CCGetTournamentStatusResponse, CCGetTournamentStatusResponse.Builder> {
    private CCGetTournamentStatusResponse() { }
    private static readonly CCGetTournamentStatusResponse defaultInstance = new CCGetTournamentStatusResponse().MakeReadOnly();
    private static readonly string[] _cCGetTournamentStatusResponseFieldNames = new string[] { "result", "status" };
    private static readonly uint[] _cCGetTournamentStatusResponseFieldTags = new uint[] { 8, 18 };
    public static CCGetTournamentStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetTournamentStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetTournamentStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCTournamentStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCTournamentStatus Status {
      get { return status_ ?? global::com.golf.proto.CCTournamentStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetTournamentStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[1], Status);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetTournamentStatusResponse other = obj as CCGetTournamentStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", hasStatus, status_, writer);
    }
    #endregion
    
    public static CCGetTournamentStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetTournamentStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetTournamentStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetTournamentStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetTournamentStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetTournamentStatusResponse result;
      
      private CCGetTournamentStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetTournamentStatusResponse original = result;
          result = new CCGetTournamentStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetTournamentStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetTournamentStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetTournamentStatusResponse.DefaultInstance; }
      }
      
      public override CCGetTournamentStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetTournamentStatusResponse) {
          return MergeFrom((CCGetTournamentStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetTournamentStatusResponse other) {
        if (other == global::com.golf.proto.CCGetTournamentStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetTournamentStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetTournamentStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCTournamentStatus.Builder subBuilder = global::com.golf.proto.CCTournamentStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCTournamentStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCTournamentStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCTournamentStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCTournamentStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCTournamentStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCTournamentStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
    }
    static CCGetTournamentStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCConfig : pb::GeneratedMessageLite<CCConfig, CCConfig.Builder> {
    private CCConfig() { }
    private static readonly CCConfig defaultInstance = new CCConfig().MakeReadOnly();
    private static readonly string[] _cCConfigFieldNames = new string[] { "enable_branch_physics_effect", "enable_compress_op_data", "enable_rbt_op_continuous", "enable_reloading_when_msg_timeout", "enable_resend_op_data", "enable_slow_motion", "enable_slow_motion_use_old_logic", "heart_check_interval", "heart_max_unreachable_times", "heart_max_unreachable_times_not_ingame", "http_ip", "is_club_suit_func_on", "ldbd_promote_rank_scale", "low_mid_high_config", "match_heart_check_interval", "match_heart_max_unreacheble_times", "pre_match_heart_max_unreacheble_times", "tcp_thread_sleep_time", "tnmt_config", "use_http_request", "use_new_paowuxian", "use_new_physics", "use_safe_physics_check" };
    private static readonly uint[] _cCConfigFieldTags = new uint[] { 64, 112, 184, 120, 104, 80, 88, 37, 24, 128, 170, 40, 21, 98, 144, 136, 160, 48, 10, 152, 72, 176, 56 };
    public static CCConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCConfig ThisMessage {
      get { return this; }
    }
    
    public const int TnmtConfigFieldNumber = 1;
    private bool hasTnmtConfig;
    private global::com.golf.proto.CCTournamentConfig tnmtConfig_;
    public bool HasTnmtConfig {
      get { return hasTnmtConfig; }
    }
    public global::com.golf.proto.CCTournamentConfig TnmtConfig {
      get { return tnmtConfig_ ?? global::com.golf.proto.CCTournamentConfig.DefaultInstance; }
    }
    
    public const int LdbdPromoteRankScaleFieldNumber = 2;
    private bool hasLdbdPromoteRankScale;
    private float ldbdPromoteRankScale_;
    public bool HasLdbdPromoteRankScale {
      get { return hasLdbdPromoteRankScale; }
    }
    public float LdbdPromoteRankScale {
      get { return ldbdPromoteRankScale_; }
    }
    
    public const int HeartMaxUnreachableTimesFieldNumber = 3;
    private bool hasHeartMaxUnreachableTimes;
    private int heartMaxUnreachableTimes_;
    public bool HasHeartMaxUnreachableTimes {
      get { return hasHeartMaxUnreachableTimes; }
    }
    public int HeartMaxUnreachableTimes {
      get { return heartMaxUnreachableTimes_; }
    }
    
    public const int HeartCheckIntervalFieldNumber = 4;
    private bool hasHeartCheckInterval;
    private float heartCheckInterval_;
    public bool HasHeartCheckInterval {
      get { return hasHeartCheckInterval; }
    }
    public float HeartCheckInterval {
      get { return heartCheckInterval_; }
    }
    
    public const int IsClubSuitFuncOnFieldNumber = 5;
    private bool hasIsClubSuitFuncOn;
    private bool isClubSuitFuncOn_;
    public bool HasIsClubSuitFuncOn {
      get { return hasIsClubSuitFuncOn; }
    }
    public bool IsClubSuitFuncOn {
      get { return isClubSuitFuncOn_; }
    }
    
    public const int TcpThreadSleepTimeFieldNumber = 6;
    private bool hasTcpThreadSleepTime;
    private int tcpThreadSleepTime_;
    public bool HasTcpThreadSleepTime {
      get { return hasTcpThreadSleepTime; }
    }
    public int TcpThreadSleepTime {
      get { return tcpThreadSleepTime_; }
    }
    
    public const int UseSafePhysicsCheckFieldNumber = 7;
    private bool hasUseSafePhysicsCheck;
    private bool useSafePhysicsCheck_;
    public bool HasUseSafePhysicsCheck {
      get { return hasUseSafePhysicsCheck; }
    }
    public bool UseSafePhysicsCheck {
      get { return useSafePhysicsCheck_; }
    }
    
    public const int EnableBranchPhysicsEffectFieldNumber = 8;
    private bool hasEnableBranchPhysicsEffect;
    private bool enableBranchPhysicsEffect_;
    public bool HasEnableBranchPhysicsEffect {
      get { return hasEnableBranchPhysicsEffect; }
    }
    public bool EnableBranchPhysicsEffect {
      get { return enableBranchPhysicsEffect_; }
    }
    
    public const int UseNewPaowuxianFieldNumber = 9;
    private bool hasUseNewPaowuxian;
    private bool useNewPaowuxian_;
    public bool HasUseNewPaowuxian {
      get { return hasUseNewPaowuxian; }
    }
    public bool UseNewPaowuxian {
      get { return useNewPaowuxian_; }
    }
    
    public const int EnableSlowMotionFieldNumber = 10;
    private bool hasEnableSlowMotion;
    private bool enableSlowMotion_;
    public bool HasEnableSlowMotion {
      get { return hasEnableSlowMotion; }
    }
    public bool EnableSlowMotion {
      get { return enableSlowMotion_; }
    }
    
    public const int EnableSlowMotionUseOldLogicFieldNumber = 11;
    private bool hasEnableSlowMotionUseOldLogic;
    private bool enableSlowMotionUseOldLogic_;
    public bool HasEnableSlowMotionUseOldLogic {
      get { return hasEnableSlowMotionUseOldLogic; }
    }
    public bool EnableSlowMotionUseOldLogic {
      get { return enableSlowMotionUseOldLogic_; }
    }
    
    public const int LowMidHighConfigFieldNumber = 12;
    private bool hasLowMidHighConfig;
    private global::com.golf.proto.CCLowMidHighConfig lowMidHighConfig_;
    public bool HasLowMidHighConfig {
      get { return hasLowMidHighConfig; }
    }
    public global::com.golf.proto.CCLowMidHighConfig LowMidHighConfig {
      get { return lowMidHighConfig_ ?? global::com.golf.proto.CCLowMidHighConfig.DefaultInstance; }
    }
    
    public const int EnableResendOpDataFieldNumber = 13;
    private bool hasEnableResendOpData;
    private bool enableResendOpData_;
    public bool HasEnableResendOpData {
      get { return hasEnableResendOpData; }
    }
    public bool EnableResendOpData {
      get { return enableResendOpData_; }
    }
    
    public const int EnableCompressOpDataFieldNumber = 14;
    private bool hasEnableCompressOpData;
    private bool enableCompressOpData_;
    public bool HasEnableCompressOpData {
      get { return hasEnableCompressOpData; }
    }
    public bool EnableCompressOpData {
      get { return enableCompressOpData_; }
    }
    
    public const int EnableReloadingWhenMsgTimeoutFieldNumber = 15;
    private bool hasEnableReloadingWhenMsgTimeout;
    private bool enableReloadingWhenMsgTimeout_;
    public bool HasEnableReloadingWhenMsgTimeout {
      get { return hasEnableReloadingWhenMsgTimeout; }
    }
    public bool EnableReloadingWhenMsgTimeout {
      get { return enableReloadingWhenMsgTimeout_; }
    }
    
    public const int HeartMaxUnreachableTimesNotIngameFieldNumber = 16;
    private bool hasHeartMaxUnreachableTimesNotIngame;
    private int heartMaxUnreachableTimesNotIngame_;
    public bool HasHeartMaxUnreachableTimesNotIngame {
      get { return hasHeartMaxUnreachableTimesNotIngame; }
    }
    public int HeartMaxUnreachableTimesNotIngame {
      get { return heartMaxUnreachableTimesNotIngame_; }
    }
    
    public const int MatchHeartMaxUnreachebleTimesFieldNumber = 17;
    private bool hasMatchHeartMaxUnreachebleTimes;
    private int matchHeartMaxUnreachebleTimes_;
    public bool HasMatchHeartMaxUnreachebleTimes {
      get { return hasMatchHeartMaxUnreachebleTimes; }
    }
    public int MatchHeartMaxUnreachebleTimes {
      get { return matchHeartMaxUnreachebleTimes_; }
    }
    
    public const int MatchHeartCheckIntervalFieldNumber = 18;
    private bool hasMatchHeartCheckInterval;
    private int matchHeartCheckInterval_;
    public bool HasMatchHeartCheckInterval {
      get { return hasMatchHeartCheckInterval; }
    }
    public int MatchHeartCheckInterval {
      get { return matchHeartCheckInterval_; }
    }
    
    public const int UseHttpRequestFieldNumber = 19;
    private bool hasUseHttpRequest;
    private bool useHttpRequest_;
    public bool HasUseHttpRequest {
      get { return hasUseHttpRequest; }
    }
    public bool UseHttpRequest {
      get { return useHttpRequest_; }
    }
    
    public const int PreMatchHeartMaxUnreachebleTimesFieldNumber = 20;
    private bool hasPreMatchHeartMaxUnreachebleTimes;
    private int preMatchHeartMaxUnreachebleTimes_;
    public bool HasPreMatchHeartMaxUnreachebleTimes {
      get { return hasPreMatchHeartMaxUnreachebleTimes; }
    }
    public int PreMatchHeartMaxUnreachebleTimes {
      get { return preMatchHeartMaxUnreachebleTimes_; }
    }
    
    public const int HttpIpFieldNumber = 21;
    private bool hasHttpIp;
    private string httpIp_ = "";
    public bool HasHttpIp {
      get { return hasHttpIp; }
    }
    public string HttpIp {
      get { return httpIp_; }
    }
    
    public const int UseNewPhysicsFieldNumber = 22;
    private bool hasUseNewPhysics;
    private bool useNewPhysics_;
    public bool HasUseNewPhysics {
      get { return hasUseNewPhysics; }
    }
    public bool UseNewPhysics {
      get { return useNewPhysics_; }
    }
    
    public const int EnableRbtOpContinuousFieldNumber = 23;
    private bool hasEnableRbtOpContinuous;
    private bool enableRbtOpContinuous_;
    public bool HasEnableRbtOpContinuous {
      get { return hasEnableRbtOpContinuous; }
    }
    public bool EnableRbtOpContinuous {
      get { return enableRbtOpContinuous_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCConfigFieldNames;
      if (hasTnmtConfig) {
        output.WriteMessage(1, field_names[18], TnmtConfig);
      }
      if (hasLdbdPromoteRankScale) {
        output.WriteFloat(2, field_names[12], LdbdPromoteRankScale);
      }
      if (hasHeartMaxUnreachableTimes) {
        output.WriteInt32(3, field_names[8], HeartMaxUnreachableTimes);
      }
      if (hasHeartCheckInterval) {
        output.WriteFloat(4, field_names[7], HeartCheckInterval);
      }
      if (hasIsClubSuitFuncOn) {
        output.WriteBool(5, field_names[11], IsClubSuitFuncOn);
      }
      if (hasTcpThreadSleepTime) {
        output.WriteInt32(6, field_names[17], TcpThreadSleepTime);
      }
      if (hasUseSafePhysicsCheck) {
        output.WriteBool(7, field_names[22], UseSafePhysicsCheck);
      }
      if (hasEnableBranchPhysicsEffect) {
        output.WriteBool(8, field_names[0], EnableBranchPhysicsEffect);
      }
      if (hasUseNewPaowuxian) {
        output.WriteBool(9, field_names[20], UseNewPaowuxian);
      }
      if (hasEnableSlowMotion) {
        output.WriteBool(10, field_names[5], EnableSlowMotion);
      }
      if (hasEnableSlowMotionUseOldLogic) {
        output.WriteBool(11, field_names[6], EnableSlowMotionUseOldLogic);
      }
      if (hasLowMidHighConfig) {
        output.WriteMessage(12, field_names[13], LowMidHighConfig);
      }
      if (hasEnableResendOpData) {
        output.WriteBool(13, field_names[4], EnableResendOpData);
      }
      if (hasEnableCompressOpData) {
        output.WriteBool(14, field_names[1], EnableCompressOpData);
      }
      if (hasEnableReloadingWhenMsgTimeout) {
        output.WriteBool(15, field_names[3], EnableReloadingWhenMsgTimeout);
      }
      if (hasHeartMaxUnreachableTimesNotIngame) {
        output.WriteInt32(16, field_names[9], HeartMaxUnreachableTimesNotIngame);
      }
      if (hasMatchHeartMaxUnreachebleTimes) {
        output.WriteInt32(17, field_names[15], MatchHeartMaxUnreachebleTimes);
      }
      if (hasMatchHeartCheckInterval) {
        output.WriteInt32(18, field_names[14], MatchHeartCheckInterval);
      }
      if (hasUseHttpRequest) {
        output.WriteBool(19, field_names[19], UseHttpRequest);
      }
      if (hasPreMatchHeartMaxUnreachebleTimes) {
        output.WriteInt32(20, field_names[16], PreMatchHeartMaxUnreachebleTimes);
      }
      if (hasHttpIp) {
        output.WriteString(21, field_names[10], HttpIp);
      }
      if (hasUseNewPhysics) {
        output.WriteBool(22, field_names[21], UseNewPhysics);
      }
      if (hasEnableRbtOpContinuous) {
        output.WriteBool(23, field_names[2], EnableRbtOpContinuous);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTnmtConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, TnmtConfig);
      }
      if (hasLdbdPromoteRankScale) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, LdbdPromoteRankScale);
      }
      if (hasHeartMaxUnreachableTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, HeartMaxUnreachableTimes);
      }
      if (hasHeartCheckInterval) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, HeartCheckInterval);
      }
      if (hasIsClubSuitFuncOn) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, IsClubSuitFuncOn);
      }
      if (hasTcpThreadSleepTime) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, TcpThreadSleepTime);
      }
      if (hasUseSafePhysicsCheck) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, UseSafePhysicsCheck);
      }
      if (hasEnableBranchPhysicsEffect) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, EnableBranchPhysicsEffect);
      }
      if (hasUseNewPaowuxian) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, UseNewPaowuxian);
      }
      if (hasEnableSlowMotion) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, EnableSlowMotion);
      }
      if (hasEnableSlowMotionUseOldLogic) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, EnableSlowMotionUseOldLogic);
      }
      if (hasLowMidHighConfig) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, LowMidHighConfig);
      }
      if (hasEnableResendOpData) {
        size += pb::CodedOutputStream.ComputeBoolSize(13, EnableResendOpData);
      }
      if (hasEnableCompressOpData) {
        size += pb::CodedOutputStream.ComputeBoolSize(14, EnableCompressOpData);
      }
      if (hasEnableReloadingWhenMsgTimeout) {
        size += pb::CodedOutputStream.ComputeBoolSize(15, EnableReloadingWhenMsgTimeout);
      }
      if (hasHeartMaxUnreachableTimesNotIngame) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, HeartMaxUnreachableTimesNotIngame);
      }
      if (hasMatchHeartMaxUnreachebleTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, MatchHeartMaxUnreachebleTimes);
      }
      if (hasMatchHeartCheckInterval) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, MatchHeartCheckInterval);
      }
      if (hasUseHttpRequest) {
        size += pb::CodedOutputStream.ComputeBoolSize(19, UseHttpRequest);
      }
      if (hasPreMatchHeartMaxUnreachebleTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, PreMatchHeartMaxUnreachebleTimes);
      }
      if (hasHttpIp) {
        size += pb::CodedOutputStream.ComputeStringSize(21, HttpIp);
      }
      if (hasUseNewPhysics) {
        size += pb::CodedOutputStream.ComputeBoolSize(22, UseNewPhysics);
      }
      if (hasEnableRbtOpContinuous) {
        size += pb::CodedOutputStream.ComputeBoolSize(23, EnableRbtOpContinuous);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTnmtConfig) hash ^= tnmtConfig_.GetHashCode();
      if (hasLdbdPromoteRankScale) hash ^= ldbdPromoteRankScale_.GetHashCode();
      if (hasHeartMaxUnreachableTimes) hash ^= heartMaxUnreachableTimes_.GetHashCode();
      if (hasHeartCheckInterval) hash ^= heartCheckInterval_.GetHashCode();
      if (hasIsClubSuitFuncOn) hash ^= isClubSuitFuncOn_.GetHashCode();
      if (hasTcpThreadSleepTime) hash ^= tcpThreadSleepTime_.GetHashCode();
      if (hasUseSafePhysicsCheck) hash ^= useSafePhysicsCheck_.GetHashCode();
      if (hasEnableBranchPhysicsEffect) hash ^= enableBranchPhysicsEffect_.GetHashCode();
      if (hasUseNewPaowuxian) hash ^= useNewPaowuxian_.GetHashCode();
      if (hasEnableSlowMotion) hash ^= enableSlowMotion_.GetHashCode();
      if (hasEnableSlowMotionUseOldLogic) hash ^= enableSlowMotionUseOldLogic_.GetHashCode();
      if (hasLowMidHighConfig) hash ^= lowMidHighConfig_.GetHashCode();
      if (hasEnableResendOpData) hash ^= enableResendOpData_.GetHashCode();
      if (hasEnableCompressOpData) hash ^= enableCompressOpData_.GetHashCode();
      if (hasEnableReloadingWhenMsgTimeout) hash ^= enableReloadingWhenMsgTimeout_.GetHashCode();
      if (hasHeartMaxUnreachableTimesNotIngame) hash ^= heartMaxUnreachableTimesNotIngame_.GetHashCode();
      if (hasMatchHeartMaxUnreachebleTimes) hash ^= matchHeartMaxUnreachebleTimes_.GetHashCode();
      if (hasMatchHeartCheckInterval) hash ^= matchHeartCheckInterval_.GetHashCode();
      if (hasUseHttpRequest) hash ^= useHttpRequest_.GetHashCode();
      if (hasPreMatchHeartMaxUnreachebleTimes) hash ^= preMatchHeartMaxUnreachebleTimes_.GetHashCode();
      if (hasHttpIp) hash ^= httpIp_.GetHashCode();
      if (hasUseNewPhysics) hash ^= useNewPhysics_.GetHashCode();
      if (hasEnableRbtOpContinuous) hash ^= enableRbtOpContinuous_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCConfig other = obj as CCConfig;
      if (other == null) return false;
      if (hasTnmtConfig != other.hasTnmtConfig || (hasTnmtConfig && !tnmtConfig_.Equals(other.tnmtConfig_))) return false;
      if (hasLdbdPromoteRankScale != other.hasLdbdPromoteRankScale || (hasLdbdPromoteRankScale && !ldbdPromoteRankScale_.Equals(other.ldbdPromoteRankScale_))) return false;
      if (hasHeartMaxUnreachableTimes != other.hasHeartMaxUnreachableTimes || (hasHeartMaxUnreachableTimes && !heartMaxUnreachableTimes_.Equals(other.heartMaxUnreachableTimes_))) return false;
      if (hasHeartCheckInterval != other.hasHeartCheckInterval || (hasHeartCheckInterval && !heartCheckInterval_.Equals(other.heartCheckInterval_))) return false;
      if (hasIsClubSuitFuncOn != other.hasIsClubSuitFuncOn || (hasIsClubSuitFuncOn && !isClubSuitFuncOn_.Equals(other.isClubSuitFuncOn_))) return false;
      if (hasTcpThreadSleepTime != other.hasTcpThreadSleepTime || (hasTcpThreadSleepTime && !tcpThreadSleepTime_.Equals(other.tcpThreadSleepTime_))) return false;
      if (hasUseSafePhysicsCheck != other.hasUseSafePhysicsCheck || (hasUseSafePhysicsCheck && !useSafePhysicsCheck_.Equals(other.useSafePhysicsCheck_))) return false;
      if (hasEnableBranchPhysicsEffect != other.hasEnableBranchPhysicsEffect || (hasEnableBranchPhysicsEffect && !enableBranchPhysicsEffect_.Equals(other.enableBranchPhysicsEffect_))) return false;
      if (hasUseNewPaowuxian != other.hasUseNewPaowuxian || (hasUseNewPaowuxian && !useNewPaowuxian_.Equals(other.useNewPaowuxian_))) return false;
      if (hasEnableSlowMotion != other.hasEnableSlowMotion || (hasEnableSlowMotion && !enableSlowMotion_.Equals(other.enableSlowMotion_))) return false;
      if (hasEnableSlowMotionUseOldLogic != other.hasEnableSlowMotionUseOldLogic || (hasEnableSlowMotionUseOldLogic && !enableSlowMotionUseOldLogic_.Equals(other.enableSlowMotionUseOldLogic_))) return false;
      if (hasLowMidHighConfig != other.hasLowMidHighConfig || (hasLowMidHighConfig && !lowMidHighConfig_.Equals(other.lowMidHighConfig_))) return false;
      if (hasEnableResendOpData != other.hasEnableResendOpData || (hasEnableResendOpData && !enableResendOpData_.Equals(other.enableResendOpData_))) return false;
      if (hasEnableCompressOpData != other.hasEnableCompressOpData || (hasEnableCompressOpData && !enableCompressOpData_.Equals(other.enableCompressOpData_))) return false;
      if (hasEnableReloadingWhenMsgTimeout != other.hasEnableReloadingWhenMsgTimeout || (hasEnableReloadingWhenMsgTimeout && !enableReloadingWhenMsgTimeout_.Equals(other.enableReloadingWhenMsgTimeout_))) return false;
      if (hasHeartMaxUnreachableTimesNotIngame != other.hasHeartMaxUnreachableTimesNotIngame || (hasHeartMaxUnreachableTimesNotIngame && !heartMaxUnreachableTimesNotIngame_.Equals(other.heartMaxUnreachableTimesNotIngame_))) return false;
      if (hasMatchHeartMaxUnreachebleTimes != other.hasMatchHeartMaxUnreachebleTimes || (hasMatchHeartMaxUnreachebleTimes && !matchHeartMaxUnreachebleTimes_.Equals(other.matchHeartMaxUnreachebleTimes_))) return false;
      if (hasMatchHeartCheckInterval != other.hasMatchHeartCheckInterval || (hasMatchHeartCheckInterval && !matchHeartCheckInterval_.Equals(other.matchHeartCheckInterval_))) return false;
      if (hasUseHttpRequest != other.hasUseHttpRequest || (hasUseHttpRequest && !useHttpRequest_.Equals(other.useHttpRequest_))) return false;
      if (hasPreMatchHeartMaxUnreachebleTimes != other.hasPreMatchHeartMaxUnreachebleTimes || (hasPreMatchHeartMaxUnreachebleTimes && !preMatchHeartMaxUnreachebleTimes_.Equals(other.preMatchHeartMaxUnreachebleTimes_))) return false;
      if (hasHttpIp != other.hasHttpIp || (hasHttpIp && !httpIp_.Equals(other.httpIp_))) return false;
      if (hasUseNewPhysics != other.hasUseNewPhysics || (hasUseNewPhysics && !useNewPhysics_.Equals(other.useNewPhysics_))) return false;
      if (hasEnableRbtOpContinuous != other.hasEnableRbtOpContinuous || (hasEnableRbtOpContinuous && !enableRbtOpContinuous_.Equals(other.enableRbtOpContinuous_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("tnmt_config", hasTnmtConfig, tnmtConfig_, writer);
      PrintField("ldbd_promote_rank_scale", hasLdbdPromoteRankScale, ldbdPromoteRankScale_, writer);
      PrintField("heart_max_unreachable_times", hasHeartMaxUnreachableTimes, heartMaxUnreachableTimes_, writer);
      PrintField("heart_check_interval", hasHeartCheckInterval, heartCheckInterval_, writer);
      PrintField("is_club_suit_func_on", hasIsClubSuitFuncOn, isClubSuitFuncOn_, writer);
      PrintField("tcp_thread_sleep_time", hasTcpThreadSleepTime, tcpThreadSleepTime_, writer);
      PrintField("use_safe_physics_check", hasUseSafePhysicsCheck, useSafePhysicsCheck_, writer);
      PrintField("enable_branch_physics_effect", hasEnableBranchPhysicsEffect, enableBranchPhysicsEffect_, writer);
      PrintField("use_new_paowuxian", hasUseNewPaowuxian, useNewPaowuxian_, writer);
      PrintField("enable_slow_motion", hasEnableSlowMotion, enableSlowMotion_, writer);
      PrintField("enable_slow_motion_use_old_logic", hasEnableSlowMotionUseOldLogic, enableSlowMotionUseOldLogic_, writer);
      PrintField("low_mid_high_config", hasLowMidHighConfig, lowMidHighConfig_, writer);
      PrintField("enable_resend_op_data", hasEnableResendOpData, enableResendOpData_, writer);
      PrintField("enable_compress_op_data", hasEnableCompressOpData, enableCompressOpData_, writer);
      PrintField("enable_reloading_when_msg_timeout", hasEnableReloadingWhenMsgTimeout, enableReloadingWhenMsgTimeout_, writer);
      PrintField("heart_max_unreachable_times_not_ingame", hasHeartMaxUnreachableTimesNotIngame, heartMaxUnreachableTimesNotIngame_, writer);
      PrintField("match_heart_max_unreacheble_times", hasMatchHeartMaxUnreachebleTimes, matchHeartMaxUnreachebleTimes_, writer);
      PrintField("match_heart_check_interval", hasMatchHeartCheckInterval, matchHeartCheckInterval_, writer);
      PrintField("use_http_request", hasUseHttpRequest, useHttpRequest_, writer);
      PrintField("pre_match_heart_max_unreacheble_times", hasPreMatchHeartMaxUnreachebleTimes, preMatchHeartMaxUnreachebleTimes_, writer);
      PrintField("http_ip", hasHttpIp, httpIp_, writer);
      PrintField("use_new_physics", hasUseNewPhysics, useNewPhysics_, writer);
      PrintField("enable_rbt_op_continuous", hasEnableRbtOpContinuous, enableRbtOpContinuous_, writer);
    }
    #endregion
    
    public static CCConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCConfig result;
      
      private CCConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          CCConfig original = result;
          result = new CCConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCConfig DefaultInstanceForType {
        get { return global::com.golf.proto.CCConfig.DefaultInstance; }
      }
      
      public override CCConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCConfig) {
          return MergeFrom((CCConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCConfig other) {
        if (other == global::com.golf.proto.CCConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTnmtConfig) {
          MergeTnmtConfig(other.TnmtConfig);
        }
        if (other.HasLdbdPromoteRankScale) {
          LdbdPromoteRankScale = other.LdbdPromoteRankScale;
        }
        if (other.HasHeartMaxUnreachableTimes) {
          HeartMaxUnreachableTimes = other.HeartMaxUnreachableTimes;
        }
        if (other.HasHeartCheckInterval) {
          HeartCheckInterval = other.HeartCheckInterval;
        }
        if (other.HasIsClubSuitFuncOn) {
          IsClubSuitFuncOn = other.IsClubSuitFuncOn;
        }
        if (other.HasTcpThreadSleepTime) {
          TcpThreadSleepTime = other.TcpThreadSleepTime;
        }
        if (other.HasUseSafePhysicsCheck) {
          UseSafePhysicsCheck = other.UseSafePhysicsCheck;
        }
        if (other.HasEnableBranchPhysicsEffect) {
          EnableBranchPhysicsEffect = other.EnableBranchPhysicsEffect;
        }
        if (other.HasUseNewPaowuxian) {
          UseNewPaowuxian = other.UseNewPaowuxian;
        }
        if (other.HasEnableSlowMotion) {
          EnableSlowMotion = other.EnableSlowMotion;
        }
        if (other.HasEnableSlowMotionUseOldLogic) {
          EnableSlowMotionUseOldLogic = other.EnableSlowMotionUseOldLogic;
        }
        if (other.HasLowMidHighConfig) {
          MergeLowMidHighConfig(other.LowMidHighConfig);
        }
        if (other.HasEnableResendOpData) {
          EnableResendOpData = other.EnableResendOpData;
        }
        if (other.HasEnableCompressOpData) {
          EnableCompressOpData = other.EnableCompressOpData;
        }
        if (other.HasEnableReloadingWhenMsgTimeout) {
          EnableReloadingWhenMsgTimeout = other.EnableReloadingWhenMsgTimeout;
        }
        if (other.HasHeartMaxUnreachableTimesNotIngame) {
          HeartMaxUnreachableTimesNotIngame = other.HeartMaxUnreachableTimesNotIngame;
        }
        if (other.HasMatchHeartMaxUnreachebleTimes) {
          MatchHeartMaxUnreachebleTimes = other.MatchHeartMaxUnreachebleTimes;
        }
        if (other.HasMatchHeartCheckInterval) {
          MatchHeartCheckInterval = other.MatchHeartCheckInterval;
        }
        if (other.HasUseHttpRequest) {
          UseHttpRequest = other.UseHttpRequest;
        }
        if (other.HasPreMatchHeartMaxUnreachebleTimes) {
          PreMatchHeartMaxUnreachebleTimes = other.PreMatchHeartMaxUnreachebleTimes;
        }
        if (other.HasHttpIp) {
          HttpIp = other.HttpIp;
        }
        if (other.HasUseNewPhysics) {
          UseNewPhysics = other.UseNewPhysics;
        }
        if (other.HasEnableRbtOpContinuous) {
          EnableRbtOpContinuous = other.EnableRbtOpContinuous;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCConfigFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCTournamentConfig.Builder subBuilder = global::com.golf.proto.CCTournamentConfig.CreateBuilder();
              if (result.hasTnmtConfig) {
                subBuilder.MergeFrom(TnmtConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TnmtConfig = subBuilder.BuildPartial();
              break;
            }
            case 21: {
              result.hasLdbdPromoteRankScale = input.ReadFloat(ref result.ldbdPromoteRankScale_);
              break;
            }
            case 24: {
              result.hasHeartMaxUnreachableTimes = input.ReadInt32(ref result.heartMaxUnreachableTimes_);
              break;
            }
            case 37: {
              result.hasHeartCheckInterval = input.ReadFloat(ref result.heartCheckInterval_);
              break;
            }
            case 40: {
              result.hasIsClubSuitFuncOn = input.ReadBool(ref result.isClubSuitFuncOn_);
              break;
            }
            case 48: {
              result.hasTcpThreadSleepTime = input.ReadInt32(ref result.tcpThreadSleepTime_);
              break;
            }
            case 56: {
              result.hasUseSafePhysicsCheck = input.ReadBool(ref result.useSafePhysicsCheck_);
              break;
            }
            case 64: {
              result.hasEnableBranchPhysicsEffect = input.ReadBool(ref result.enableBranchPhysicsEffect_);
              break;
            }
            case 72: {
              result.hasUseNewPaowuxian = input.ReadBool(ref result.useNewPaowuxian_);
              break;
            }
            case 80: {
              result.hasEnableSlowMotion = input.ReadBool(ref result.enableSlowMotion_);
              break;
            }
            case 88: {
              result.hasEnableSlowMotionUseOldLogic = input.ReadBool(ref result.enableSlowMotionUseOldLogic_);
              break;
            }
            case 98: {
              global::com.golf.proto.CCLowMidHighConfig.Builder subBuilder = global::com.golf.proto.CCLowMidHighConfig.CreateBuilder();
              if (result.hasLowMidHighConfig) {
                subBuilder.MergeFrom(LowMidHighConfig);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LowMidHighConfig = subBuilder.BuildPartial();
              break;
            }
            case 104: {
              result.hasEnableResendOpData = input.ReadBool(ref result.enableResendOpData_);
              break;
            }
            case 112: {
              result.hasEnableCompressOpData = input.ReadBool(ref result.enableCompressOpData_);
              break;
            }
            case 120: {
              result.hasEnableReloadingWhenMsgTimeout = input.ReadBool(ref result.enableReloadingWhenMsgTimeout_);
              break;
            }
            case 128: {
              result.hasHeartMaxUnreachableTimesNotIngame = input.ReadInt32(ref result.heartMaxUnreachableTimesNotIngame_);
              break;
            }
            case 136: {
              result.hasMatchHeartMaxUnreachebleTimes = input.ReadInt32(ref result.matchHeartMaxUnreachebleTimes_);
              break;
            }
            case 144: {
              result.hasMatchHeartCheckInterval = input.ReadInt32(ref result.matchHeartCheckInterval_);
              break;
            }
            case 152: {
              result.hasUseHttpRequest = input.ReadBool(ref result.useHttpRequest_);
              break;
            }
            case 160: {
              result.hasPreMatchHeartMaxUnreachebleTimes = input.ReadInt32(ref result.preMatchHeartMaxUnreachebleTimes_);
              break;
            }
            case 170: {
              result.hasHttpIp = input.ReadString(ref result.httpIp_);
              break;
            }
            case 176: {
              result.hasUseNewPhysics = input.ReadBool(ref result.useNewPhysics_);
              break;
            }
            case 184: {
              result.hasEnableRbtOpContinuous = input.ReadBool(ref result.enableRbtOpContinuous_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasTnmtConfig {
       get { return result.hasTnmtConfig; }
      }
      public global::com.golf.proto.CCTournamentConfig TnmtConfig {
        get { return result.TnmtConfig; }
        set { SetTnmtConfig(value); }
      }
      public Builder SetTnmtConfig(global::com.golf.proto.CCTournamentConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTnmtConfig = true;
        result.tnmtConfig_ = value;
        return this;
      }
      public Builder SetTnmtConfig(global::com.golf.proto.CCTournamentConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTnmtConfig = true;
        result.tnmtConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTnmtConfig(global::com.golf.proto.CCTournamentConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTnmtConfig &&
            result.tnmtConfig_ != global::com.golf.proto.CCTournamentConfig.DefaultInstance) {
            result.tnmtConfig_ = global::com.golf.proto.CCTournamentConfig.CreateBuilder(result.tnmtConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.tnmtConfig_ = value;
        }
        result.hasTnmtConfig = true;
        return this;
      }
      public Builder ClearTnmtConfig() {
        PrepareBuilder();
        result.hasTnmtConfig = false;
        result.tnmtConfig_ = null;
        return this;
      }
      
      public bool HasLdbdPromoteRankScale {
        get { return result.hasLdbdPromoteRankScale; }
      }
      public float LdbdPromoteRankScale {
        get { return result.LdbdPromoteRankScale; }
        set { SetLdbdPromoteRankScale(value); }
      }
      public Builder SetLdbdPromoteRankScale(float value) {
        PrepareBuilder();
        result.hasLdbdPromoteRankScale = true;
        result.ldbdPromoteRankScale_ = value;
        return this;
      }
      public Builder ClearLdbdPromoteRankScale() {
        PrepareBuilder();
        result.hasLdbdPromoteRankScale = false;
        result.ldbdPromoteRankScale_ = 0F;
        return this;
      }
      
      public bool HasHeartMaxUnreachableTimes {
        get { return result.hasHeartMaxUnreachableTimes; }
      }
      public int HeartMaxUnreachableTimes {
        get { return result.HeartMaxUnreachableTimes; }
        set { SetHeartMaxUnreachableTimes(value); }
      }
      public Builder SetHeartMaxUnreachableTimes(int value) {
        PrepareBuilder();
        result.hasHeartMaxUnreachableTimes = true;
        result.heartMaxUnreachableTimes_ = value;
        return this;
      }
      public Builder ClearHeartMaxUnreachableTimes() {
        PrepareBuilder();
        result.hasHeartMaxUnreachableTimes = false;
        result.heartMaxUnreachableTimes_ = 0;
        return this;
      }
      
      public bool HasHeartCheckInterval {
        get { return result.hasHeartCheckInterval; }
      }
      public float HeartCheckInterval {
        get { return result.HeartCheckInterval; }
        set { SetHeartCheckInterval(value); }
      }
      public Builder SetHeartCheckInterval(float value) {
        PrepareBuilder();
        result.hasHeartCheckInterval = true;
        result.heartCheckInterval_ = value;
        return this;
      }
      public Builder ClearHeartCheckInterval() {
        PrepareBuilder();
        result.hasHeartCheckInterval = false;
        result.heartCheckInterval_ = 0F;
        return this;
      }
      
      public bool HasIsClubSuitFuncOn {
        get { return result.hasIsClubSuitFuncOn; }
      }
      public bool IsClubSuitFuncOn {
        get { return result.IsClubSuitFuncOn; }
        set { SetIsClubSuitFuncOn(value); }
      }
      public Builder SetIsClubSuitFuncOn(bool value) {
        PrepareBuilder();
        result.hasIsClubSuitFuncOn = true;
        result.isClubSuitFuncOn_ = value;
        return this;
      }
      public Builder ClearIsClubSuitFuncOn() {
        PrepareBuilder();
        result.hasIsClubSuitFuncOn = false;
        result.isClubSuitFuncOn_ = false;
        return this;
      }
      
      public bool HasTcpThreadSleepTime {
        get { return result.hasTcpThreadSleepTime; }
      }
      public int TcpThreadSleepTime {
        get { return result.TcpThreadSleepTime; }
        set { SetTcpThreadSleepTime(value); }
      }
      public Builder SetTcpThreadSleepTime(int value) {
        PrepareBuilder();
        result.hasTcpThreadSleepTime = true;
        result.tcpThreadSleepTime_ = value;
        return this;
      }
      public Builder ClearTcpThreadSleepTime() {
        PrepareBuilder();
        result.hasTcpThreadSleepTime = false;
        result.tcpThreadSleepTime_ = 0;
        return this;
      }
      
      public bool HasUseSafePhysicsCheck {
        get { return result.hasUseSafePhysicsCheck; }
      }
      public bool UseSafePhysicsCheck {
        get { return result.UseSafePhysicsCheck; }
        set { SetUseSafePhysicsCheck(value); }
      }
      public Builder SetUseSafePhysicsCheck(bool value) {
        PrepareBuilder();
        result.hasUseSafePhysicsCheck = true;
        result.useSafePhysicsCheck_ = value;
        return this;
      }
      public Builder ClearUseSafePhysicsCheck() {
        PrepareBuilder();
        result.hasUseSafePhysicsCheck = false;
        result.useSafePhysicsCheck_ = false;
        return this;
      }
      
      public bool HasEnableBranchPhysicsEffect {
        get { return result.hasEnableBranchPhysicsEffect; }
      }
      public bool EnableBranchPhysicsEffect {
        get { return result.EnableBranchPhysicsEffect; }
        set { SetEnableBranchPhysicsEffect(value); }
      }
      public Builder SetEnableBranchPhysicsEffect(bool value) {
        PrepareBuilder();
        result.hasEnableBranchPhysicsEffect = true;
        result.enableBranchPhysicsEffect_ = value;
        return this;
      }
      public Builder ClearEnableBranchPhysicsEffect() {
        PrepareBuilder();
        result.hasEnableBranchPhysicsEffect = false;
        result.enableBranchPhysicsEffect_ = false;
        return this;
      }
      
      public bool HasUseNewPaowuxian {
        get { return result.hasUseNewPaowuxian; }
      }
      public bool UseNewPaowuxian {
        get { return result.UseNewPaowuxian; }
        set { SetUseNewPaowuxian(value); }
      }
      public Builder SetUseNewPaowuxian(bool value) {
        PrepareBuilder();
        result.hasUseNewPaowuxian = true;
        result.useNewPaowuxian_ = value;
        return this;
      }
      public Builder ClearUseNewPaowuxian() {
        PrepareBuilder();
        result.hasUseNewPaowuxian = false;
        result.useNewPaowuxian_ = false;
        return this;
      }
      
      public bool HasEnableSlowMotion {
        get { return result.hasEnableSlowMotion; }
      }
      public bool EnableSlowMotion {
        get { return result.EnableSlowMotion; }
        set { SetEnableSlowMotion(value); }
      }
      public Builder SetEnableSlowMotion(bool value) {
        PrepareBuilder();
        result.hasEnableSlowMotion = true;
        result.enableSlowMotion_ = value;
        return this;
      }
      public Builder ClearEnableSlowMotion() {
        PrepareBuilder();
        result.hasEnableSlowMotion = false;
        result.enableSlowMotion_ = false;
        return this;
      }
      
      public bool HasEnableSlowMotionUseOldLogic {
        get { return result.hasEnableSlowMotionUseOldLogic; }
      }
      public bool EnableSlowMotionUseOldLogic {
        get { return result.EnableSlowMotionUseOldLogic; }
        set { SetEnableSlowMotionUseOldLogic(value); }
      }
      public Builder SetEnableSlowMotionUseOldLogic(bool value) {
        PrepareBuilder();
        result.hasEnableSlowMotionUseOldLogic = true;
        result.enableSlowMotionUseOldLogic_ = value;
        return this;
      }
      public Builder ClearEnableSlowMotionUseOldLogic() {
        PrepareBuilder();
        result.hasEnableSlowMotionUseOldLogic = false;
        result.enableSlowMotionUseOldLogic_ = false;
        return this;
      }
      
      public bool HasLowMidHighConfig {
       get { return result.hasLowMidHighConfig; }
      }
      public global::com.golf.proto.CCLowMidHighConfig LowMidHighConfig {
        get { return result.LowMidHighConfig; }
        set { SetLowMidHighConfig(value); }
      }
      public Builder SetLowMidHighConfig(global::com.golf.proto.CCLowMidHighConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLowMidHighConfig = true;
        result.lowMidHighConfig_ = value;
        return this;
      }
      public Builder SetLowMidHighConfig(global::com.golf.proto.CCLowMidHighConfig.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLowMidHighConfig = true;
        result.lowMidHighConfig_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLowMidHighConfig(global::com.golf.proto.CCLowMidHighConfig value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLowMidHighConfig &&
            result.lowMidHighConfig_ != global::com.golf.proto.CCLowMidHighConfig.DefaultInstance) {
            result.lowMidHighConfig_ = global::com.golf.proto.CCLowMidHighConfig.CreateBuilder(result.lowMidHighConfig_).MergeFrom(value).BuildPartial();
        } else {
          result.lowMidHighConfig_ = value;
        }
        result.hasLowMidHighConfig = true;
        return this;
      }
      public Builder ClearLowMidHighConfig() {
        PrepareBuilder();
        result.hasLowMidHighConfig = false;
        result.lowMidHighConfig_ = null;
        return this;
      }
      
      public bool HasEnableResendOpData {
        get { return result.hasEnableResendOpData; }
      }
      public bool EnableResendOpData {
        get { return result.EnableResendOpData; }
        set { SetEnableResendOpData(value); }
      }
      public Builder SetEnableResendOpData(bool value) {
        PrepareBuilder();
        result.hasEnableResendOpData = true;
        result.enableResendOpData_ = value;
        return this;
      }
      public Builder ClearEnableResendOpData() {
        PrepareBuilder();
        result.hasEnableResendOpData = false;
        result.enableResendOpData_ = false;
        return this;
      }
      
      public bool HasEnableCompressOpData {
        get { return result.hasEnableCompressOpData; }
      }
      public bool EnableCompressOpData {
        get { return result.EnableCompressOpData; }
        set { SetEnableCompressOpData(value); }
      }
      public Builder SetEnableCompressOpData(bool value) {
        PrepareBuilder();
        result.hasEnableCompressOpData = true;
        result.enableCompressOpData_ = value;
        return this;
      }
      public Builder ClearEnableCompressOpData() {
        PrepareBuilder();
        result.hasEnableCompressOpData = false;
        result.enableCompressOpData_ = false;
        return this;
      }
      
      public bool HasEnableReloadingWhenMsgTimeout {
        get { return result.hasEnableReloadingWhenMsgTimeout; }
      }
      public bool EnableReloadingWhenMsgTimeout {
        get { return result.EnableReloadingWhenMsgTimeout; }
        set { SetEnableReloadingWhenMsgTimeout(value); }
      }
      public Builder SetEnableReloadingWhenMsgTimeout(bool value) {
        PrepareBuilder();
        result.hasEnableReloadingWhenMsgTimeout = true;
        result.enableReloadingWhenMsgTimeout_ = value;
        return this;
      }
      public Builder ClearEnableReloadingWhenMsgTimeout() {
        PrepareBuilder();
        result.hasEnableReloadingWhenMsgTimeout = false;
        result.enableReloadingWhenMsgTimeout_ = false;
        return this;
      }
      
      public bool HasHeartMaxUnreachableTimesNotIngame {
        get { return result.hasHeartMaxUnreachableTimesNotIngame; }
      }
      public int HeartMaxUnreachableTimesNotIngame {
        get { return result.HeartMaxUnreachableTimesNotIngame; }
        set { SetHeartMaxUnreachableTimesNotIngame(value); }
      }
      public Builder SetHeartMaxUnreachableTimesNotIngame(int value) {
        PrepareBuilder();
        result.hasHeartMaxUnreachableTimesNotIngame = true;
        result.heartMaxUnreachableTimesNotIngame_ = value;
        return this;
      }
      public Builder ClearHeartMaxUnreachableTimesNotIngame() {
        PrepareBuilder();
        result.hasHeartMaxUnreachableTimesNotIngame = false;
        result.heartMaxUnreachableTimesNotIngame_ = 0;
        return this;
      }
      
      public bool HasMatchHeartMaxUnreachebleTimes {
        get { return result.hasMatchHeartMaxUnreachebleTimes; }
      }
      public int MatchHeartMaxUnreachebleTimes {
        get { return result.MatchHeartMaxUnreachebleTimes; }
        set { SetMatchHeartMaxUnreachebleTimes(value); }
      }
      public Builder SetMatchHeartMaxUnreachebleTimes(int value) {
        PrepareBuilder();
        result.hasMatchHeartMaxUnreachebleTimes = true;
        result.matchHeartMaxUnreachebleTimes_ = value;
        return this;
      }
      public Builder ClearMatchHeartMaxUnreachebleTimes() {
        PrepareBuilder();
        result.hasMatchHeartMaxUnreachebleTimes = false;
        result.matchHeartMaxUnreachebleTimes_ = 0;
        return this;
      }
      
      public bool HasMatchHeartCheckInterval {
        get { return result.hasMatchHeartCheckInterval; }
      }
      public int MatchHeartCheckInterval {
        get { return result.MatchHeartCheckInterval; }
        set { SetMatchHeartCheckInterval(value); }
      }
      public Builder SetMatchHeartCheckInterval(int value) {
        PrepareBuilder();
        result.hasMatchHeartCheckInterval = true;
        result.matchHeartCheckInterval_ = value;
        return this;
      }
      public Builder ClearMatchHeartCheckInterval() {
        PrepareBuilder();
        result.hasMatchHeartCheckInterval = false;
        result.matchHeartCheckInterval_ = 0;
        return this;
      }
      
      public bool HasUseHttpRequest {
        get { return result.hasUseHttpRequest; }
      }
      public bool UseHttpRequest {
        get { return result.UseHttpRequest; }
        set { SetUseHttpRequest(value); }
      }
      public Builder SetUseHttpRequest(bool value) {
        PrepareBuilder();
        result.hasUseHttpRequest = true;
        result.useHttpRequest_ = value;
        return this;
      }
      public Builder ClearUseHttpRequest() {
        PrepareBuilder();
        result.hasUseHttpRequest = false;
        result.useHttpRequest_ = false;
        return this;
      }
      
      public bool HasPreMatchHeartMaxUnreachebleTimes {
        get { return result.hasPreMatchHeartMaxUnreachebleTimes; }
      }
      public int PreMatchHeartMaxUnreachebleTimes {
        get { return result.PreMatchHeartMaxUnreachebleTimes; }
        set { SetPreMatchHeartMaxUnreachebleTimes(value); }
      }
      public Builder SetPreMatchHeartMaxUnreachebleTimes(int value) {
        PrepareBuilder();
        result.hasPreMatchHeartMaxUnreachebleTimes = true;
        result.preMatchHeartMaxUnreachebleTimes_ = value;
        return this;
      }
      public Builder ClearPreMatchHeartMaxUnreachebleTimes() {
        PrepareBuilder();
        result.hasPreMatchHeartMaxUnreachebleTimes = false;
        result.preMatchHeartMaxUnreachebleTimes_ = 0;
        return this;
      }
      
      public bool HasHttpIp {
        get { return result.hasHttpIp; }
      }
      public string HttpIp {
        get { return result.HttpIp; }
        set { SetHttpIp(value); }
      }
      public Builder SetHttpIp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHttpIp = true;
        result.httpIp_ = value;
        return this;
      }
      public Builder ClearHttpIp() {
        PrepareBuilder();
        result.hasHttpIp = false;
        result.httpIp_ = "";
        return this;
      }
      
      public bool HasUseNewPhysics {
        get { return result.hasUseNewPhysics; }
      }
      public bool UseNewPhysics {
        get { return result.UseNewPhysics; }
        set { SetUseNewPhysics(value); }
      }
      public Builder SetUseNewPhysics(bool value) {
        PrepareBuilder();
        result.hasUseNewPhysics = true;
        result.useNewPhysics_ = value;
        return this;
      }
      public Builder ClearUseNewPhysics() {
        PrepareBuilder();
        result.hasUseNewPhysics = false;
        result.useNewPhysics_ = false;
        return this;
      }
      
      public bool HasEnableRbtOpContinuous {
        get { return result.hasEnableRbtOpContinuous; }
      }
      public bool EnableRbtOpContinuous {
        get { return result.EnableRbtOpContinuous; }
        set { SetEnableRbtOpContinuous(value); }
      }
      public Builder SetEnableRbtOpContinuous(bool value) {
        PrepareBuilder();
        result.hasEnableRbtOpContinuous = true;
        result.enableRbtOpContinuous_ = value;
        return this;
      }
      public Builder ClearEnableRbtOpContinuous() {
        PrepareBuilder();
        result.hasEnableRbtOpContinuous = false;
        result.enableRbtOpContinuous_ = false;
        return this;
      }
    }
    static CCConfig() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLowMidHighConfig : pb::GeneratedMessageLite<CCLowMidHighConfig, CCLowMidHighConfig.Builder> {
    private CCLowMidHighConfig() { }
    private static readonly CCLowMidHighConfig defaultInstance = new CCLowMidHighConfig().MakeReadOnly();
    private static readonly string[] _cCLowMidHighConfigFieldNames = new string[] { "low_cpu_size", "low_gpu_size", "low_screen_size", "mid_cpu_size", "mid_gpu_size", "mid_screen_size" };
    private static readonly uint[] _cCLowMidHighConfigFieldTags = new uint[] { 40, 24, 10, 48, 32, 18 };
    public static CCLowMidHighConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLowMidHighConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLowMidHighConfig ThisMessage {
      get { return this; }
    }
    
    public const int LowScreenSizeFieldNumber = 1;
    private bool hasLowScreenSize;
    private string lowScreenSize_ = "";
    public bool HasLowScreenSize {
      get { return hasLowScreenSize; }
    }
    public string LowScreenSize {
      get { return lowScreenSize_; }
    }
    
    public const int MidScreenSizeFieldNumber = 2;
    private bool hasMidScreenSize;
    private string midScreenSize_ = "";
    public bool HasMidScreenSize {
      get { return hasMidScreenSize; }
    }
    public string MidScreenSize {
      get { return midScreenSize_; }
    }
    
    public const int LowGpuSizeFieldNumber = 3;
    private bool hasLowGpuSize;
    private int lowGpuSize_;
    public bool HasLowGpuSize {
      get { return hasLowGpuSize; }
    }
    public int LowGpuSize {
      get { return lowGpuSize_; }
    }
    
    public const int MidGpuSizeFieldNumber = 4;
    private bool hasMidGpuSize;
    private int midGpuSize_;
    public bool HasMidGpuSize {
      get { return hasMidGpuSize; }
    }
    public int MidGpuSize {
      get { return midGpuSize_; }
    }
    
    public const int LowCpuSizeFieldNumber = 5;
    private bool hasLowCpuSize;
    private int lowCpuSize_;
    public bool HasLowCpuSize {
      get { return hasLowCpuSize; }
    }
    public int LowCpuSize {
      get { return lowCpuSize_; }
    }
    
    public const int MidCpuSizeFieldNumber = 6;
    private bool hasMidCpuSize;
    private int midCpuSize_;
    public bool HasMidCpuSize {
      get { return hasMidCpuSize; }
    }
    public int MidCpuSize {
      get { return midCpuSize_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLowMidHighConfigFieldNames;
      if (hasLowScreenSize) {
        output.WriteString(1, field_names[2], LowScreenSize);
      }
      if (hasMidScreenSize) {
        output.WriteString(2, field_names[5], MidScreenSize);
      }
      if (hasLowGpuSize) {
        output.WriteInt32(3, field_names[1], LowGpuSize);
      }
      if (hasMidGpuSize) {
        output.WriteInt32(4, field_names[4], MidGpuSize);
      }
      if (hasLowCpuSize) {
        output.WriteInt32(5, field_names[0], LowCpuSize);
      }
      if (hasMidCpuSize) {
        output.WriteInt32(6, field_names[3], MidCpuSize);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLowScreenSize) {
        size += pb::CodedOutputStream.ComputeStringSize(1, LowScreenSize);
      }
      if (hasMidScreenSize) {
        size += pb::CodedOutputStream.ComputeStringSize(2, MidScreenSize);
      }
      if (hasLowGpuSize) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, LowGpuSize);
      }
      if (hasMidGpuSize) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, MidGpuSize);
      }
      if (hasLowCpuSize) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, LowCpuSize);
      }
      if (hasMidCpuSize) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, MidCpuSize);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasLowScreenSize) hash ^= lowScreenSize_.GetHashCode();
      if (hasMidScreenSize) hash ^= midScreenSize_.GetHashCode();
      if (hasLowGpuSize) hash ^= lowGpuSize_.GetHashCode();
      if (hasMidGpuSize) hash ^= midGpuSize_.GetHashCode();
      if (hasLowCpuSize) hash ^= lowCpuSize_.GetHashCode();
      if (hasMidCpuSize) hash ^= midCpuSize_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLowMidHighConfig other = obj as CCLowMidHighConfig;
      if (other == null) return false;
      if (hasLowScreenSize != other.hasLowScreenSize || (hasLowScreenSize && !lowScreenSize_.Equals(other.lowScreenSize_))) return false;
      if (hasMidScreenSize != other.hasMidScreenSize || (hasMidScreenSize && !midScreenSize_.Equals(other.midScreenSize_))) return false;
      if (hasLowGpuSize != other.hasLowGpuSize || (hasLowGpuSize && !lowGpuSize_.Equals(other.lowGpuSize_))) return false;
      if (hasMidGpuSize != other.hasMidGpuSize || (hasMidGpuSize && !midGpuSize_.Equals(other.midGpuSize_))) return false;
      if (hasLowCpuSize != other.hasLowCpuSize || (hasLowCpuSize && !lowCpuSize_.Equals(other.lowCpuSize_))) return false;
      if (hasMidCpuSize != other.hasMidCpuSize || (hasMidCpuSize && !midCpuSize_.Equals(other.midCpuSize_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("low_screen_size", hasLowScreenSize, lowScreenSize_, writer);
      PrintField("mid_screen_size", hasMidScreenSize, midScreenSize_, writer);
      PrintField("low_gpu_size", hasLowGpuSize, lowGpuSize_, writer);
      PrintField("mid_gpu_size", hasMidGpuSize, midGpuSize_, writer);
      PrintField("low_cpu_size", hasLowCpuSize, lowCpuSize_, writer);
      PrintField("mid_cpu_size", hasMidCpuSize, midCpuSize_, writer);
    }
    #endregion
    
    public static CCLowMidHighConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLowMidHighConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLowMidHighConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLowMidHighConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLowMidHighConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLowMidHighConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLowMidHighConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLowMidHighConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLowMidHighConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLowMidHighConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLowMidHighConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLowMidHighConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLowMidHighConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLowMidHighConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLowMidHighConfig result;
      
      private CCLowMidHighConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLowMidHighConfig original = result;
          result = new CCLowMidHighConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLowMidHighConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLowMidHighConfig DefaultInstanceForType {
        get { return global::com.golf.proto.CCLowMidHighConfig.DefaultInstance; }
      }
      
      public override CCLowMidHighConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLowMidHighConfig) {
          return MergeFrom((CCLowMidHighConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLowMidHighConfig other) {
        if (other == global::com.golf.proto.CCLowMidHighConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLowScreenSize) {
          LowScreenSize = other.LowScreenSize;
        }
        if (other.HasMidScreenSize) {
          MidScreenSize = other.MidScreenSize;
        }
        if (other.HasLowGpuSize) {
          LowGpuSize = other.LowGpuSize;
        }
        if (other.HasMidGpuSize) {
          MidGpuSize = other.MidGpuSize;
        }
        if (other.HasLowCpuSize) {
          LowCpuSize = other.LowCpuSize;
        }
        if (other.HasMidCpuSize) {
          MidCpuSize = other.MidCpuSize;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLowMidHighConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLowMidHighConfigFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLowScreenSize = input.ReadString(ref result.lowScreenSize_);
              break;
            }
            case 18: {
              result.hasMidScreenSize = input.ReadString(ref result.midScreenSize_);
              break;
            }
            case 24: {
              result.hasLowGpuSize = input.ReadInt32(ref result.lowGpuSize_);
              break;
            }
            case 32: {
              result.hasMidGpuSize = input.ReadInt32(ref result.midGpuSize_);
              break;
            }
            case 40: {
              result.hasLowCpuSize = input.ReadInt32(ref result.lowCpuSize_);
              break;
            }
            case 48: {
              result.hasMidCpuSize = input.ReadInt32(ref result.midCpuSize_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasLowScreenSize {
        get { return result.hasLowScreenSize; }
      }
      public string LowScreenSize {
        get { return result.LowScreenSize; }
        set { SetLowScreenSize(value); }
      }
      public Builder SetLowScreenSize(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLowScreenSize = true;
        result.lowScreenSize_ = value;
        return this;
      }
      public Builder ClearLowScreenSize() {
        PrepareBuilder();
        result.hasLowScreenSize = false;
        result.lowScreenSize_ = "";
        return this;
      }
      
      public bool HasMidScreenSize {
        get { return result.hasMidScreenSize; }
      }
      public string MidScreenSize {
        get { return result.MidScreenSize; }
        set { SetMidScreenSize(value); }
      }
      public Builder SetMidScreenSize(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMidScreenSize = true;
        result.midScreenSize_ = value;
        return this;
      }
      public Builder ClearMidScreenSize() {
        PrepareBuilder();
        result.hasMidScreenSize = false;
        result.midScreenSize_ = "";
        return this;
      }
      
      public bool HasLowGpuSize {
        get { return result.hasLowGpuSize; }
      }
      public int LowGpuSize {
        get { return result.LowGpuSize; }
        set { SetLowGpuSize(value); }
      }
      public Builder SetLowGpuSize(int value) {
        PrepareBuilder();
        result.hasLowGpuSize = true;
        result.lowGpuSize_ = value;
        return this;
      }
      public Builder ClearLowGpuSize() {
        PrepareBuilder();
        result.hasLowGpuSize = false;
        result.lowGpuSize_ = 0;
        return this;
      }
      
      public bool HasMidGpuSize {
        get { return result.hasMidGpuSize; }
      }
      public int MidGpuSize {
        get { return result.MidGpuSize; }
        set { SetMidGpuSize(value); }
      }
      public Builder SetMidGpuSize(int value) {
        PrepareBuilder();
        result.hasMidGpuSize = true;
        result.midGpuSize_ = value;
        return this;
      }
      public Builder ClearMidGpuSize() {
        PrepareBuilder();
        result.hasMidGpuSize = false;
        result.midGpuSize_ = 0;
        return this;
      }
      
      public bool HasLowCpuSize {
        get { return result.hasLowCpuSize; }
      }
      public int LowCpuSize {
        get { return result.LowCpuSize; }
        set { SetLowCpuSize(value); }
      }
      public Builder SetLowCpuSize(int value) {
        PrepareBuilder();
        result.hasLowCpuSize = true;
        result.lowCpuSize_ = value;
        return this;
      }
      public Builder ClearLowCpuSize() {
        PrepareBuilder();
        result.hasLowCpuSize = false;
        result.lowCpuSize_ = 0;
        return this;
      }
      
      public bool HasMidCpuSize {
        get { return result.hasMidCpuSize; }
      }
      public int MidCpuSize {
        get { return result.MidCpuSize; }
        set { SetMidCpuSize(value); }
      }
      public Builder SetMidCpuSize(int value) {
        PrepareBuilder();
        result.hasMidCpuSize = true;
        result.midCpuSize_ = value;
        return this;
      }
      public Builder ClearMidCpuSize() {
        PrepareBuilder();
        result.hasMidCpuSize = false;
        result.midCpuSize_ = 0;
        return this;
      }
    }
    static CCLowMidHighConfig() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTournamentConfig : pb::GeneratedMessageLite<CCTournamentConfig, CCTournamentConfig.Builder> {
    private CCTournamentConfig() { }
    private static readonly CCTournamentConfig defaultInstance = new CCTournamentConfig().MakeReadOnly();
    private static readonly string[] _cCTournamentConfigFieldNames = new string[] { "period", "promote_rank_scale", "sign_up_must_play_cnt", "start_period_id", "start_time", "time_scale" };
    private static readonly uint[] _cCTournamentConfigFieldTags = new uint[] { 24, 45, 48, 16, 8, 37 };
    public static CCTournamentConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTournamentConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTournamentConfig ThisMessage {
      get { return this; }
    }
    
    public const int StartTimeFieldNumber = 1;
    private bool hasStartTime;
    private long startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public long StartTime {
      get { return startTime_; }
    }
    
    public const int StartPeriodIdFieldNumber = 2;
    private bool hasStartPeriodId;
    private int startPeriodId_;
    public bool HasStartPeriodId {
      get { return hasStartPeriodId; }
    }
    public int StartPeriodId {
      get { return startPeriodId_; }
    }
    
    public const int PeriodFieldNumber = 3;
    private bool hasPeriod;
    private long period_;
    public bool HasPeriod {
      get { return hasPeriod; }
    }
    public long Period {
      get { return period_; }
    }
    
    public const int TimeScaleFieldNumber = 4;
    private bool hasTimeScale;
    private float timeScale_;
    public bool HasTimeScale {
      get { return hasTimeScale; }
    }
    public float TimeScale {
      get { return timeScale_; }
    }
    
    public const int PromoteRankScaleFieldNumber = 5;
    private bool hasPromoteRankScale;
    private float promoteRankScale_;
    public bool HasPromoteRankScale {
      get { return hasPromoteRankScale; }
    }
    public float PromoteRankScale {
      get { return promoteRankScale_; }
    }
    
    public const int SignUpMustPlayCntFieldNumber = 6;
    private bool hasSignUpMustPlayCnt;
    private int signUpMustPlayCnt_;
    public bool HasSignUpMustPlayCnt {
      get { return hasSignUpMustPlayCnt; }
    }
    public int SignUpMustPlayCnt {
      get { return signUpMustPlayCnt_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTournamentConfigFieldNames;
      if (hasStartTime) {
        output.WriteInt64(1, field_names[4], StartTime);
      }
      if (hasStartPeriodId) {
        output.WriteInt32(2, field_names[3], StartPeriodId);
      }
      if (hasPeriod) {
        output.WriteInt64(3, field_names[0], Period);
      }
      if (hasTimeScale) {
        output.WriteFloat(4, field_names[5], TimeScale);
      }
      if (hasPromoteRankScale) {
        output.WriteFloat(5, field_names[1], PromoteRankScale);
      }
      if (hasSignUpMustPlayCnt) {
        output.WriteInt32(6, field_names[2], SignUpMustPlayCnt);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, StartTime);
      }
      if (hasStartPeriodId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, StartPeriodId);
      }
      if (hasPeriod) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Period);
      }
      if (hasTimeScale) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, TimeScale);
      }
      if (hasPromoteRankScale) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, PromoteRankScale);
      }
      if (hasSignUpMustPlayCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, SignUpMustPlayCnt);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasStartTime) hash ^= startTime_.GetHashCode();
      if (hasStartPeriodId) hash ^= startPeriodId_.GetHashCode();
      if (hasPeriod) hash ^= period_.GetHashCode();
      if (hasTimeScale) hash ^= timeScale_.GetHashCode();
      if (hasPromoteRankScale) hash ^= promoteRankScale_.GetHashCode();
      if (hasSignUpMustPlayCnt) hash ^= signUpMustPlayCnt_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTournamentConfig other = obj as CCTournamentConfig;
      if (other == null) return false;
      if (hasStartTime != other.hasStartTime || (hasStartTime && !startTime_.Equals(other.startTime_))) return false;
      if (hasStartPeriodId != other.hasStartPeriodId || (hasStartPeriodId && !startPeriodId_.Equals(other.startPeriodId_))) return false;
      if (hasPeriod != other.hasPeriod || (hasPeriod && !period_.Equals(other.period_))) return false;
      if (hasTimeScale != other.hasTimeScale || (hasTimeScale && !timeScale_.Equals(other.timeScale_))) return false;
      if (hasPromoteRankScale != other.hasPromoteRankScale || (hasPromoteRankScale && !promoteRankScale_.Equals(other.promoteRankScale_))) return false;
      if (hasSignUpMustPlayCnt != other.hasSignUpMustPlayCnt || (hasSignUpMustPlayCnt && !signUpMustPlayCnt_.Equals(other.signUpMustPlayCnt_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("start_time", hasStartTime, startTime_, writer);
      PrintField("start_period_id", hasStartPeriodId, startPeriodId_, writer);
      PrintField("period", hasPeriod, period_, writer);
      PrintField("time_scale", hasTimeScale, timeScale_, writer);
      PrintField("promote_rank_scale", hasPromoteRankScale, promoteRankScale_, writer);
      PrintField("sign_up_must_play_cnt", hasSignUpMustPlayCnt, signUpMustPlayCnt_, writer);
    }
    #endregion
    
    public static CCTournamentConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTournamentConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTournamentConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTournamentConfig MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTournamentConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTournamentConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTournamentConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTournamentConfig result;
      
      private CCTournamentConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTournamentConfig original = result;
          result = new CCTournamentConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTournamentConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTournamentConfig DefaultInstanceForType {
        get { return global::com.golf.proto.CCTournamentConfig.DefaultInstance; }
      }
      
      public override CCTournamentConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTournamentConfig) {
          return MergeFrom((CCTournamentConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTournamentConfig other) {
        if (other == global::com.golf.proto.CCTournamentConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasStartPeriodId) {
          StartPeriodId = other.StartPeriodId;
        }
        if (other.HasPeriod) {
          Period = other.Period;
        }
        if (other.HasTimeScale) {
          TimeScale = other.TimeScale;
        }
        if (other.HasPromoteRankScale) {
          PromoteRankScale = other.PromoteRankScale;
        }
        if (other.HasSignUpMustPlayCnt) {
          SignUpMustPlayCnt = other.SignUpMustPlayCnt;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTournamentConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTournamentConfigFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStartTime = input.ReadInt64(ref result.startTime_);
              break;
            }
            case 16: {
              result.hasStartPeriodId = input.ReadInt32(ref result.startPeriodId_);
              break;
            }
            case 24: {
              result.hasPeriod = input.ReadInt64(ref result.period_);
              break;
            }
            case 37: {
              result.hasTimeScale = input.ReadFloat(ref result.timeScale_);
              break;
            }
            case 45: {
              result.hasPromoteRankScale = input.ReadFloat(ref result.promoteRankScale_);
              break;
            }
            case 48: {
              result.hasSignUpMustPlayCnt = input.ReadInt32(ref result.signUpMustPlayCnt_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public long StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(long value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0L;
        return this;
      }
      
      public bool HasStartPeriodId {
        get { return result.hasStartPeriodId; }
      }
      public int StartPeriodId {
        get { return result.StartPeriodId; }
        set { SetStartPeriodId(value); }
      }
      public Builder SetStartPeriodId(int value) {
        PrepareBuilder();
        result.hasStartPeriodId = true;
        result.startPeriodId_ = value;
        return this;
      }
      public Builder ClearStartPeriodId() {
        PrepareBuilder();
        result.hasStartPeriodId = false;
        result.startPeriodId_ = 0;
        return this;
      }
      
      public bool HasPeriod {
        get { return result.hasPeriod; }
      }
      public long Period {
        get { return result.Period; }
        set { SetPeriod(value); }
      }
      public Builder SetPeriod(long value) {
        PrepareBuilder();
        result.hasPeriod = true;
        result.period_ = value;
        return this;
      }
      public Builder ClearPeriod() {
        PrepareBuilder();
        result.hasPeriod = false;
        result.period_ = 0L;
        return this;
      }
      
      public bool HasTimeScale {
        get { return result.hasTimeScale; }
      }
      public float TimeScale {
        get { return result.TimeScale; }
        set { SetTimeScale(value); }
      }
      public Builder SetTimeScale(float value) {
        PrepareBuilder();
        result.hasTimeScale = true;
        result.timeScale_ = value;
        return this;
      }
      public Builder ClearTimeScale() {
        PrepareBuilder();
        result.hasTimeScale = false;
        result.timeScale_ = 0F;
        return this;
      }
      
      public bool HasPromoteRankScale {
        get { return result.hasPromoteRankScale; }
      }
      public float PromoteRankScale {
        get { return result.PromoteRankScale; }
        set { SetPromoteRankScale(value); }
      }
      public Builder SetPromoteRankScale(float value) {
        PrepareBuilder();
        result.hasPromoteRankScale = true;
        result.promoteRankScale_ = value;
        return this;
      }
      public Builder ClearPromoteRankScale() {
        PrepareBuilder();
        result.hasPromoteRankScale = false;
        result.promoteRankScale_ = 0F;
        return this;
      }
      
      public bool HasSignUpMustPlayCnt {
        get { return result.hasSignUpMustPlayCnt; }
      }
      public int SignUpMustPlayCnt {
        get { return result.SignUpMustPlayCnt; }
        set { SetSignUpMustPlayCnt(value); }
      }
      public Builder SetSignUpMustPlayCnt(int value) {
        PrepareBuilder();
        result.hasSignUpMustPlayCnt = true;
        result.signUpMustPlayCnt_ = value;
        return this;
      }
      public Builder ClearSignUpMustPlayCnt() {
        PrepareBuilder();
        result.hasSignUpMustPlayCnt = false;
        result.signUpMustPlayCnt_ = 0;
        return this;
      }
    }
    static CCTournamentConfig() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTournamentState : pb::GeneratedMessageLite<CCTournamentState, CCTournamentState.Builder> {
    private CCTournamentState() { }
    private static readonly CCTournamentState defaultInstance = new CCTournamentState().MakeReadOnly();
    private static readonly string[] _cCTournamentStateFieldNames = new string[] { "all_cnt", "end_time", "is_promoted", "is_rewarded", "need_show", "nth", "rank", "room_id", "start_time", "state", "type", "win_cnt" };
    private static readonly uint[] _cCTournamentStateFieldTags = new uint[] { 32, 80, 88, 64, 96, 16, 56, 26, 72, 48, 8, 40 };
    public static CCTournamentState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTournamentState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTournamentState ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int NthFieldNumber = 2;
    private bool hasNth;
    private int nth_;
    public bool HasNth {
      get { return hasNth; }
    }
    public int Nth {
      get { return nth_; }
    }
    
    public const int RoomIdFieldNumber = 3;
    private bool hasRoomId;
    private string roomId_ = "";
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    public string RoomId {
      get { return roomId_; }
    }
    
    public const int AllCntFieldNumber = 4;
    private bool hasAllCnt;
    private int allCnt_;
    public bool HasAllCnt {
      get { return hasAllCnt; }
    }
    public int AllCnt {
      get { return allCnt_; }
    }
    
    public const int WinCntFieldNumber = 5;
    private bool hasWinCnt;
    private int winCnt_;
    public bool HasWinCnt {
      get { return hasWinCnt; }
    }
    public int WinCnt {
      get { return winCnt_; }
    }
    
    public const int StateFieldNumber = 6;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int RankFieldNumber = 7;
    private bool hasRank;
    private int rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    public int Rank {
      get { return rank_; }
    }
    
    public const int IsRewardedFieldNumber = 8;
    private bool hasIsRewarded;
    private bool isRewarded_;
    public bool HasIsRewarded {
      get { return hasIsRewarded; }
    }
    public bool IsRewarded {
      get { return isRewarded_; }
    }
    
    public const int StartTimeFieldNumber = 9;
    private bool hasStartTime;
    private long startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public long StartTime {
      get { return startTime_; }
    }
    
    public const int EndTimeFieldNumber = 10;
    private bool hasEndTime;
    private long endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public long EndTime {
      get { return endTime_; }
    }
    
    public const int IsPromotedFieldNumber = 11;
    private bool hasIsPromoted;
    private bool isPromoted_;
    public bool HasIsPromoted {
      get { return hasIsPromoted; }
    }
    public bool IsPromoted {
      get { return isPromoted_; }
    }
    
    public const int NeedShowFieldNumber = 12;
    private bool hasNeedShow;
    private bool needShow_;
    public bool HasNeedShow {
      get { return hasNeedShow; }
    }
    public bool NeedShow {
      get { return needShow_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTournamentStateFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[10], Type);
      }
      if (hasNth) {
        output.WriteInt32(2, field_names[5], Nth);
      }
      if (hasRoomId) {
        output.WriteString(3, field_names[7], RoomId);
      }
      if (hasAllCnt) {
        output.WriteInt32(4, field_names[0], AllCnt);
      }
      if (hasWinCnt) {
        output.WriteInt32(5, field_names[11], WinCnt);
      }
      if (hasState) {
        output.WriteInt32(6, field_names[9], State);
      }
      if (hasRank) {
        output.WriteInt32(7, field_names[6], Rank);
      }
      if (hasIsRewarded) {
        output.WriteBool(8, field_names[3], IsRewarded);
      }
      if (hasStartTime) {
        output.WriteInt64(9, field_names[8], StartTime);
      }
      if (hasEndTime) {
        output.WriteInt64(10, field_names[1], EndTime);
      }
      if (hasIsPromoted) {
        output.WriteBool(11, field_names[2], IsPromoted);
      }
      if (hasNeedShow) {
        output.WriteBool(12, field_names[4], NeedShow);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasNth) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Nth);
      }
      if (hasRoomId) {
        size += pb::CodedOutputStream.ComputeStringSize(3, RoomId);
      }
      if (hasAllCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, AllCnt);
      }
      if (hasWinCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, WinCnt);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, State);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Rank);
      }
      if (hasIsRewarded) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, IsRewarded);
      }
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(9, StartTime);
      }
      if (hasEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(10, EndTime);
      }
      if (hasIsPromoted) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, IsPromoted);
      }
      if (hasNeedShow) {
        size += pb::CodedOutputStream.ComputeBoolSize(12, NeedShow);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasNth) hash ^= nth_.GetHashCode();
      if (hasRoomId) hash ^= roomId_.GetHashCode();
      if (hasAllCnt) hash ^= allCnt_.GetHashCode();
      if (hasWinCnt) hash ^= winCnt_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasRank) hash ^= rank_.GetHashCode();
      if (hasIsRewarded) hash ^= isRewarded_.GetHashCode();
      if (hasStartTime) hash ^= startTime_.GetHashCode();
      if (hasEndTime) hash ^= endTime_.GetHashCode();
      if (hasIsPromoted) hash ^= isPromoted_.GetHashCode();
      if (hasNeedShow) hash ^= needShow_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTournamentState other = obj as CCTournamentState;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasNth != other.hasNth || (hasNth && !nth_.Equals(other.nth_))) return false;
      if (hasRoomId != other.hasRoomId || (hasRoomId && !roomId_.Equals(other.roomId_))) return false;
      if (hasAllCnt != other.hasAllCnt || (hasAllCnt && !allCnt_.Equals(other.allCnt_))) return false;
      if (hasWinCnt != other.hasWinCnt || (hasWinCnt && !winCnt_.Equals(other.winCnt_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasRank != other.hasRank || (hasRank && !rank_.Equals(other.rank_))) return false;
      if (hasIsRewarded != other.hasIsRewarded || (hasIsRewarded && !isRewarded_.Equals(other.isRewarded_))) return false;
      if (hasStartTime != other.hasStartTime || (hasStartTime && !startTime_.Equals(other.startTime_))) return false;
      if (hasEndTime != other.hasEndTime || (hasEndTime && !endTime_.Equals(other.endTime_))) return false;
      if (hasIsPromoted != other.hasIsPromoted || (hasIsPromoted && !isPromoted_.Equals(other.isPromoted_))) return false;
      if (hasNeedShow != other.hasNeedShow || (hasNeedShow && !needShow_.Equals(other.needShow_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("nth", hasNth, nth_, writer);
      PrintField("room_id", hasRoomId, roomId_, writer);
      PrintField("all_cnt", hasAllCnt, allCnt_, writer);
      PrintField("win_cnt", hasWinCnt, winCnt_, writer);
      PrintField("state", hasState, state_, writer);
      PrintField("rank", hasRank, rank_, writer);
      PrintField("is_rewarded", hasIsRewarded, isRewarded_, writer);
      PrintField("start_time", hasStartTime, startTime_, writer);
      PrintField("end_time", hasEndTime, endTime_, writer);
      PrintField("is_promoted", hasIsPromoted, isPromoted_, writer);
      PrintField("need_show", hasNeedShow, needShow_, writer);
    }
    #endregion
    
    public static CCTournamentState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTournamentState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTournamentState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTournamentState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTournamentState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTournamentState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTournamentState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTournamentState result;
      
      private CCTournamentState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTournamentState original = result;
          result = new CCTournamentState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTournamentState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTournamentState DefaultInstanceForType {
        get { return global::com.golf.proto.CCTournamentState.DefaultInstance; }
      }
      
      public override CCTournamentState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTournamentState) {
          return MergeFrom((CCTournamentState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTournamentState other) {
        if (other == global::com.golf.proto.CCTournamentState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasNth) {
          Nth = other.Nth;
        }
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        if (other.HasAllCnt) {
          AllCnt = other.AllCnt;
        }
        if (other.HasWinCnt) {
          WinCnt = other.WinCnt;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasIsRewarded) {
          IsRewarded = other.IsRewarded;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        if (other.HasIsPromoted) {
          IsPromoted = other.IsPromoted;
        }
        if (other.HasNeedShow) {
          NeedShow = other.NeedShow;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTournamentStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTournamentStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasNth = input.ReadInt32(ref result.nth_);
              break;
            }
            case 26: {
              result.hasRoomId = input.ReadString(ref result.roomId_);
              break;
            }
            case 32: {
              result.hasAllCnt = input.ReadInt32(ref result.allCnt_);
              break;
            }
            case 40: {
              result.hasWinCnt = input.ReadInt32(ref result.winCnt_);
              break;
            }
            case 48: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 56: {
              result.hasRank = input.ReadInt32(ref result.rank_);
              break;
            }
            case 64: {
              result.hasIsRewarded = input.ReadBool(ref result.isRewarded_);
              break;
            }
            case 72: {
              result.hasStartTime = input.ReadInt64(ref result.startTime_);
              break;
            }
            case 80: {
              result.hasEndTime = input.ReadInt64(ref result.endTime_);
              break;
            }
            case 88: {
              result.hasIsPromoted = input.ReadBool(ref result.isPromoted_);
              break;
            }
            case 96: {
              result.hasNeedShow = input.ReadBool(ref result.needShow_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasNth {
        get { return result.hasNth; }
      }
      public int Nth {
        get { return result.Nth; }
        set { SetNth(value); }
      }
      public Builder SetNth(int value) {
        PrepareBuilder();
        result.hasNth = true;
        result.nth_ = value;
        return this;
      }
      public Builder ClearNth() {
        PrepareBuilder();
        result.hasNth = false;
        result.nth_ = 0;
        return this;
      }
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      public string RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      public Builder SetRoomId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = "";
        return this;
      }
      
      public bool HasAllCnt {
        get { return result.hasAllCnt; }
      }
      public int AllCnt {
        get { return result.AllCnt; }
        set { SetAllCnt(value); }
      }
      public Builder SetAllCnt(int value) {
        PrepareBuilder();
        result.hasAllCnt = true;
        result.allCnt_ = value;
        return this;
      }
      public Builder ClearAllCnt() {
        PrepareBuilder();
        result.hasAllCnt = false;
        result.allCnt_ = 0;
        return this;
      }
      
      public bool HasWinCnt {
        get { return result.hasWinCnt; }
      }
      public int WinCnt {
        get { return result.WinCnt; }
        set { SetWinCnt(value); }
      }
      public Builder SetWinCnt(int value) {
        PrepareBuilder();
        result.hasWinCnt = true;
        result.winCnt_ = value;
        return this;
      }
      public Builder ClearWinCnt() {
        PrepareBuilder();
        result.hasWinCnt = false;
        result.winCnt_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      public int Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(int value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      public bool HasIsRewarded {
        get { return result.hasIsRewarded; }
      }
      public bool IsRewarded {
        get { return result.IsRewarded; }
        set { SetIsRewarded(value); }
      }
      public Builder SetIsRewarded(bool value) {
        PrepareBuilder();
        result.hasIsRewarded = true;
        result.isRewarded_ = value;
        return this;
      }
      public Builder ClearIsRewarded() {
        PrepareBuilder();
        result.hasIsRewarded = false;
        result.isRewarded_ = false;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public long StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(long value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0L;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public long EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(long value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0L;
        return this;
      }
      
      public bool HasIsPromoted {
        get { return result.hasIsPromoted; }
      }
      public bool IsPromoted {
        get { return result.IsPromoted; }
        set { SetIsPromoted(value); }
      }
      public Builder SetIsPromoted(bool value) {
        PrepareBuilder();
        result.hasIsPromoted = true;
        result.isPromoted_ = value;
        return this;
      }
      public Builder ClearIsPromoted() {
        PrepareBuilder();
        result.hasIsPromoted = false;
        result.isPromoted_ = false;
        return this;
      }
      
      public bool HasNeedShow {
        get { return result.hasNeedShow; }
      }
      public bool NeedShow {
        get { return result.NeedShow; }
        set { SetNeedShow(value); }
      }
      public Builder SetNeedShow(bool value) {
        PrepareBuilder();
        result.hasNeedShow = true;
        result.needShow_ = value;
        return this;
      }
      public Builder ClearNeedShow() {
        PrepareBuilder();
        result.hasNeedShow = false;
        result.needShow_ = false;
        return this;
      }
    }
    static CCTournamentState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSignUpTournamentRequest : pb::GeneratedMessageLite<CCSignUpTournamentRequest, CCSignUpTournamentRequest.Builder> {
    private CCSignUpTournamentRequest() { }
    private static readonly CCSignUpTournamentRequest defaultInstance = new CCSignUpTournamentRequest().MakeReadOnly();
    private static readonly string[] _cCSignUpTournamentRequestFieldNames = new string[] { "grade", "id" };
    private static readonly uint[] _cCSignUpTournamentRequestFieldTags = new uint[] { 16, 10 };
    public static CCSignUpTournamentRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSignUpTournamentRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSignUpTournamentRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int GradeFieldNumber = 2;
    private bool hasGrade;
    private int grade_;
    public bool HasGrade {
      get { return hasGrade; }
    }
    public int Grade {
      get { return grade_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSignUpTournamentRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasGrade) {
        output.WriteInt32(2, field_names[0], Grade);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasGrade) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Grade);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasGrade) hash ^= grade_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSignUpTournamentRequest other = obj as CCSignUpTournamentRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasGrade != other.hasGrade || (hasGrade && !grade_.Equals(other.grade_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("grade", hasGrade, grade_, writer);
    }
    #endregion
    
    public static CCSignUpTournamentRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSignUpTournamentRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSignUpTournamentRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSignUpTournamentRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSignUpTournamentRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSignUpTournamentRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSignUpTournamentRequest result;
      
      private CCSignUpTournamentRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSignUpTournamentRequest original = result;
          result = new CCSignUpTournamentRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSignUpTournamentRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSignUpTournamentRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSignUpTournamentRequest.DefaultInstance; }
      }
      
      public override CCSignUpTournamentRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSignUpTournamentRequest) {
          return MergeFrom((CCSignUpTournamentRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSignUpTournamentRequest other) {
        if (other == global::com.golf.proto.CCSignUpTournamentRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasGrade) {
          Grade = other.Grade;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSignUpTournamentRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSignUpTournamentRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasGrade = input.ReadInt32(ref result.grade_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasGrade {
        get { return result.hasGrade; }
      }
      public int Grade {
        get { return result.Grade; }
        set { SetGrade(value); }
      }
      public Builder SetGrade(int value) {
        PrepareBuilder();
        result.hasGrade = true;
        result.grade_ = value;
        return this;
      }
      public Builder ClearGrade() {
        PrepareBuilder();
        result.hasGrade = false;
        result.grade_ = 0;
        return this;
      }
    }
    static CCSignUpTournamentRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSignUpTournamentResponse : pb::GeneratedMessageLite<CCSignUpTournamentResponse, CCSignUpTournamentResponse.Builder> {
    private CCSignUpTournamentResponse() { }
    private static readonly CCSignUpTournamentResponse defaultInstance = new CCSignUpTournamentResponse().MakeReadOnly();
    private static readonly string[] _cCSignUpTournamentResponseFieldNames = new string[] { "base_data", "grade", "result", "tnmt_state" };
    private static readonly uint[] _cCSignUpTournamentResponseFieldTags = new uint[] { 34, 16, 8, 26 };
    public static CCSignUpTournamentResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSignUpTournamentResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSignUpTournamentResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int GradeFieldNumber = 2;
    private bool hasGrade;
    private int grade_;
    public bool HasGrade {
      get { return hasGrade; }
    }
    public int Grade {
      get { return grade_; }
    }
    
    public const int TnmtStateFieldNumber = 3;
    private bool hasTnmtState;
    private global::com.golf.proto.CCTournamentState tnmtState_;
    public bool HasTnmtState {
      get { return hasTnmtState; }
    }
    public global::com.golf.proto.CCTournamentState TnmtState {
      get { return tnmtState_ ?? global::com.golf.proto.CCTournamentState.DefaultInstance; }
    }
    
    public const int BaseDataFieldNumber = 4;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSignUpTournamentResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[2], Result);
      }
      if (hasGrade) {
        output.WriteInt32(2, field_names[1], Grade);
      }
      if (hasTnmtState) {
        output.WriteMessage(3, field_names[3], TnmtState);
      }
      if (hasBaseData) {
        output.WriteMessage(4, field_names[0], BaseData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasGrade) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Grade);
      }
      if (hasTnmtState) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, TnmtState);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, BaseData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasGrade) hash ^= grade_.GetHashCode();
      if (hasTnmtState) hash ^= tnmtState_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSignUpTournamentResponse other = obj as CCSignUpTournamentResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasGrade != other.hasGrade || (hasGrade && !grade_.Equals(other.grade_))) return false;
      if (hasTnmtState != other.hasTnmtState || (hasTnmtState && !tnmtState_.Equals(other.tnmtState_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("grade", hasGrade, grade_, writer);
      PrintField("tnmt_state", hasTnmtState, tnmtState_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
    }
    #endregion
    
    public static CCSignUpTournamentResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSignUpTournamentResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSignUpTournamentResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSignUpTournamentResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSignUpTournamentResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSignUpTournamentResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSignUpTournamentResponse result;
      
      private CCSignUpTournamentResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSignUpTournamentResponse original = result;
          result = new CCSignUpTournamentResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSignUpTournamentResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSignUpTournamentResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCSignUpTournamentResponse.DefaultInstance; }
      }
      
      public override CCSignUpTournamentResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSignUpTournamentResponse) {
          return MergeFrom((CCSignUpTournamentResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSignUpTournamentResponse other) {
        if (other == global::com.golf.proto.CCSignUpTournamentResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasGrade) {
          Grade = other.Grade;
        }
        if (other.HasTnmtState) {
          MergeTnmtState(other.TnmtState);
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSignUpTournamentResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSignUpTournamentResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasGrade = input.ReadInt32(ref result.grade_);
              break;
            }
            case 26: {
              global::com.golf.proto.CCTournamentState.Builder subBuilder = global::com.golf.proto.CCTournamentState.CreateBuilder();
              if (result.hasTnmtState) {
                subBuilder.MergeFrom(TnmtState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TnmtState = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasGrade {
        get { return result.hasGrade; }
      }
      public int Grade {
        get { return result.Grade; }
        set { SetGrade(value); }
      }
      public Builder SetGrade(int value) {
        PrepareBuilder();
        result.hasGrade = true;
        result.grade_ = value;
        return this;
      }
      public Builder ClearGrade() {
        PrepareBuilder();
        result.hasGrade = false;
        result.grade_ = 0;
        return this;
      }
      
      public bool HasTnmtState {
       get { return result.hasTnmtState; }
      }
      public global::com.golf.proto.CCTournamentState TnmtState {
        get { return result.TnmtState; }
        set { SetTnmtState(value); }
      }
      public Builder SetTnmtState(global::com.golf.proto.CCTournamentState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTnmtState = true;
        result.tnmtState_ = value;
        return this;
      }
      public Builder SetTnmtState(global::com.golf.proto.CCTournamentState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTnmtState = true;
        result.tnmtState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTnmtState(global::com.golf.proto.CCTournamentState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTnmtState &&
            result.tnmtState_ != global::com.golf.proto.CCTournamentState.DefaultInstance) {
            result.tnmtState_ = global::com.golf.proto.CCTournamentState.CreateBuilder(result.tnmtState_).MergeFrom(value).BuildPartial();
        } else {
          result.tnmtState_ = value;
        }
        result.hasTnmtState = true;
        return this;
      }
      public Builder ClearTnmtState() {
        PrepareBuilder();
        result.hasTnmtState = false;
        result.tnmtState_ = null;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
    }
    static CCSignUpTournamentResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetTournamentRoomUserItemsRequest : pb::GeneratedMessageLite<CCGetTournamentRoomUserItemsRequest, CCGetTournamentRoomUserItemsRequest.Builder> {
    private CCGetTournamentRoomUserItemsRequest() { }
    private static readonly CCGetTournamentRoomUserItemsRequest defaultInstance = new CCGetTournamentRoomUserItemsRequest().MakeReadOnly();
    private static readonly string[] _cCGetTournamentRoomUserItemsRequestFieldNames = new string[] { "id", "spec" };
    private static readonly uint[] _cCGetTournamentRoomUserItemsRequestFieldTags = new uint[] { 10, 18 };
    public static CCGetTournamentRoomUserItemsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetTournamentRoomUserItemsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetTournamentRoomUserItemsRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SpecFieldNumber = 2;
    private bool hasSpec;
    private global::com.golf.proto.CCTournamentSpec spec_;
    public bool HasSpec {
      get { return hasSpec; }
    }
    public global::com.golf.proto.CCTournamentSpec Spec {
      get { return spec_ ?? global::com.golf.proto.CCTournamentSpec.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetTournamentRoomUserItemsRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSpec) {
        output.WriteMessage(2, field_names[1], Spec);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSpec) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Spec);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSpec) hash ^= spec_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetTournamentRoomUserItemsRequest other = obj as CCGetTournamentRoomUserItemsRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSpec != other.hasSpec || (hasSpec && !spec_.Equals(other.spec_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("spec", hasSpec, spec_, writer);
    }
    #endregion
    
    public static CCGetTournamentRoomUserItemsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetTournamentRoomUserItemsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetTournamentRoomUserItemsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetTournamentRoomUserItemsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetTournamentRoomUserItemsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetTournamentRoomUserItemsRequest result;
      
      private CCGetTournamentRoomUserItemsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetTournamentRoomUserItemsRequest original = result;
          result = new CCGetTournamentRoomUserItemsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetTournamentRoomUserItemsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetTournamentRoomUserItemsRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetTournamentRoomUserItemsRequest.DefaultInstance; }
      }
      
      public override CCGetTournamentRoomUserItemsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetTournamentRoomUserItemsRequest) {
          return MergeFrom((CCGetTournamentRoomUserItemsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetTournamentRoomUserItemsRequest other) {
        if (other == global::com.golf.proto.CCGetTournamentRoomUserItemsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSpec) {
          MergeSpec(other.Spec);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetTournamentRoomUserItemsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetTournamentRoomUserItemsRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCTournamentSpec.Builder subBuilder = global::com.golf.proto.CCTournamentSpec.CreateBuilder();
              if (result.hasSpec) {
                subBuilder.MergeFrom(Spec);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Spec = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSpec {
       get { return result.hasSpec; }
      }
      public global::com.golf.proto.CCTournamentSpec Spec {
        get { return result.Spec; }
        set { SetSpec(value); }
      }
      public Builder SetSpec(global::com.golf.proto.CCTournamentSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = value;
        return this;
      }
      public Builder SetSpec(global::com.golf.proto.CCTournamentSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpec(global::com.golf.proto.CCTournamentSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpec &&
            result.spec_ != global::com.golf.proto.CCTournamentSpec.DefaultInstance) {
            result.spec_ = global::com.golf.proto.CCTournamentSpec.CreateBuilder(result.spec_).MergeFrom(value).BuildPartial();
        } else {
          result.spec_ = value;
        }
        result.hasSpec = true;
        return this;
      }
      public Builder ClearSpec() {
        PrepareBuilder();
        result.hasSpec = false;
        result.spec_ = null;
        return this;
      }
    }
    static CCGetTournamentRoomUserItemsRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetTournamentRoomUserItemsResponse : pb::GeneratedMessageLite<CCGetTournamentRoomUserItemsResponse, CCGetTournamentRoomUserItemsResponse.Builder> {
    private CCGetTournamentRoomUserItemsResponse() { }
    private static readonly CCGetTournamentRoomUserItemsResponse defaultInstance = new CCGetTournamentRoomUserItemsResponse().MakeReadOnly();
    private static readonly string[] _cCGetTournamentRoomUserItemsResponseFieldNames = new string[] { "items", "result", "spec" };
    private static readonly uint[] _cCGetTournamentRoomUserItemsResponseFieldTags = new uint[] { 26, 8, 18 };
    public static CCGetTournamentRoomUserItemsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetTournamentRoomUserItemsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetTournamentRoomUserItemsResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int SpecFieldNumber = 2;
    private bool hasSpec;
    private global::com.golf.proto.CCTournamentSpec spec_;
    public bool HasSpec {
      get { return hasSpec; }
    }
    public global::com.golf.proto.CCTournamentSpec Spec {
      get { return spec_ ?? global::com.golf.proto.CCTournamentSpec.DefaultInstance; }
    }
    
    public const int ItemsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCExTournamentRoomUserItem> items_ = new pbc::PopsicleList<global::com.golf.proto.CCExTournamentRoomUserItem>();
    public scg::IList<global::com.golf.proto.CCExTournamentRoomUserItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::com.golf.proto.CCExTournamentRoomUserItem GetItems(int index) {
      return items_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetTournamentRoomUserItemsResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasSpec) {
        output.WriteMessage(2, field_names[2], Spec);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], items_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasSpec) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Spec);
      }
      foreach (global::com.golf.proto.CCExTournamentRoomUserItem element in ItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasSpec) hash ^= spec_.GetHashCode();
      foreach(global::com.golf.proto.CCExTournamentRoomUserItem i in items_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetTournamentRoomUserItemsResponse other = obj as CCGetTournamentRoomUserItemsResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasSpec != other.hasSpec || (hasSpec && !spec_.Equals(other.spec_))) return false;
      if(items_.Count != other.items_.Count) return false;
      for(int ix=0; ix < items_.Count; ix++)
        if(!items_[ix].Equals(other.items_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("spec", hasSpec, spec_, writer);
      PrintField("items", items_, writer);
    }
    #endregion
    
    public static CCGetTournamentRoomUserItemsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentRoomUserItemsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetTournamentRoomUserItemsResponse MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetTournamentRoomUserItemsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetTournamentRoomUserItemsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetTournamentRoomUserItemsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetTournamentRoomUserItemsResponse result;
      
      private CCGetTournamentRoomUserItemsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetTournamentRoomUserItemsResponse original = result;
          result = new CCGetTournamentRoomUserItemsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetTournamentRoomUserItemsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetTournamentRoomUserItemsResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetTournamentRoomUserItemsResponse.DefaultInstance; }
      }
      
      public override CCGetTournamentRoomUserItemsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetTournamentRoomUserItemsResponse) {
          return MergeFrom((CCGetTournamentRoomUserItemsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetTournamentRoomUserItemsResponse other) {
        if (other == global::com.golf.proto.CCGetTournamentRoomUserItemsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasSpec) {
          MergeSpec(other.Spec);
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetTournamentRoomUserItemsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetTournamentRoomUserItemsResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCTournamentSpec.Builder subBuilder = global::com.golf.proto.CCTournamentSpec.CreateBuilder();
              if (result.hasSpec) {
                subBuilder.MergeFrom(Spec);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Spec = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.items_, global::com.golf.proto.CCExTournamentRoomUserItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasSpec {
       get { return result.hasSpec; }
      }
      public global::com.golf.proto.CCTournamentSpec Spec {
        get { return result.Spec; }
        set { SetSpec(value); }
      }
      public Builder SetSpec(global::com.golf.proto.CCTournamentSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = value;
        return this;
      }
      public Builder SetSpec(global::com.golf.proto.CCTournamentSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpec(global::com.golf.proto.CCTournamentSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpec &&
            result.spec_ != global::com.golf.proto.CCTournamentSpec.DefaultInstance) {
            result.spec_ = global::com.golf.proto.CCTournamentSpec.CreateBuilder(result.spec_).MergeFrom(value).BuildPartial();
        } else {
          result.spec_ = value;
        }
        result.hasSpec = true;
        return this;
      }
      public Builder ClearSpec() {
        PrepareBuilder();
        result.hasSpec = false;
        result.spec_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCExTournamentRoomUserItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::com.golf.proto.CCExTournamentRoomUserItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::com.golf.proto.CCExTournamentRoomUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::com.golf.proto.CCExTournamentRoomUserItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::com.golf.proto.CCExTournamentRoomUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::com.golf.proto.CCExTournamentRoomUserItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::com.golf.proto.CCExTournamentRoomUserItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
    static CCGetTournamentRoomUserItemsResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetTournamentRewardRequest : pb::GeneratedMessageLite<CCGetTournamentRewardRequest, CCGetTournamentRewardRequest.Builder> {
    private CCGetTournamentRewardRequest() { }
    private static readonly CCGetTournamentRewardRequest defaultInstance = new CCGetTournamentRewardRequest().MakeReadOnly();
    private static readonly string[] _cCGetTournamentRewardRequestFieldNames = new string[] { "id", "spec" };
    private static readonly uint[] _cCGetTournamentRewardRequestFieldTags = new uint[] { 10, 18 };
    public static CCGetTournamentRewardRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetTournamentRewardRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetTournamentRewardRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SpecFieldNumber = 2;
    private bool hasSpec;
    private global::com.golf.proto.CCTournamentSpec spec_;
    public bool HasSpec {
      get { return hasSpec; }
    }
    public global::com.golf.proto.CCTournamentSpec Spec {
      get { return spec_ ?? global::com.golf.proto.CCTournamentSpec.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetTournamentRewardRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSpec) {
        output.WriteMessage(2, field_names[1], Spec);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSpec) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Spec);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSpec) hash ^= spec_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetTournamentRewardRequest other = obj as CCGetTournamentRewardRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSpec != other.hasSpec || (hasSpec && !spec_.Equals(other.spec_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("spec", hasSpec, spec_, writer);
    }
    #endregion
    
    public static CCGetTournamentRewardRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetTournamentRewardRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetTournamentRewardRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetTournamentRewardRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetTournamentRewardRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetTournamentRewardRequest result;
      
      private CCGetTournamentRewardRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetTournamentRewardRequest original = result;
          result = new CCGetTournamentRewardRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetTournamentRewardRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetTournamentRewardRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetTournamentRewardRequest.DefaultInstance; }
      }
      
      public override CCGetTournamentRewardRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetTournamentRewardRequest) {
          return MergeFrom((CCGetTournamentRewardRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetTournamentRewardRequest other) {
        if (other == global::com.golf.proto.CCGetTournamentRewardRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSpec) {
          MergeSpec(other.Spec);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetTournamentRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetTournamentRewardRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCTournamentSpec.Builder subBuilder = global::com.golf.proto.CCTournamentSpec.CreateBuilder();
              if (result.hasSpec) {
                subBuilder.MergeFrom(Spec);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Spec = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSpec {
       get { return result.hasSpec; }
      }
      public global::com.golf.proto.CCTournamentSpec Spec {
        get { return result.Spec; }
        set { SetSpec(value); }
      }
      public Builder SetSpec(global::com.golf.proto.CCTournamentSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = value;
        return this;
      }
      public Builder SetSpec(global::com.golf.proto.CCTournamentSpec.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSpec = true;
        result.spec_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSpec(global::com.golf.proto.CCTournamentSpec value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSpec &&
            result.spec_ != global::com.golf.proto.CCTournamentSpec.DefaultInstance) {
            result.spec_ = global::com.golf.proto.CCTournamentSpec.CreateBuilder(result.spec_).MergeFrom(value).BuildPartial();
        } else {
          result.spec_ = value;
        }
        result.hasSpec = true;
        return this;
      }
      public Builder ClearSpec() {
        PrepareBuilder();
        result.hasSpec = false;
        result.spec_ = null;
        return this;
      }
    }
    static CCGetTournamentRewardRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetTournamentRewardResponse : pb::GeneratedMessageLite<CCGetTournamentRewardResponse, CCGetTournamentRewardResponse.Builder> {
    private CCGetTournamentRewardResponse() { }
    private static readonly CCGetTournamentRewardResponse defaultInstance = new CCGetTournamentRewardResponse().MakeReadOnly();
    private static readonly string[] _cCGetTournamentRewardResponseFieldNames = new string[] { "result", "ritems", "state", "user_data" };
    private static readonly uint[] _cCGetTournamentRewardResponseFieldTags = new uint[] { 8, 26, 18, 34 };
    public static CCGetTournamentRewardResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetTournamentRewardResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetTournamentRewardResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private global::com.golf.proto.CCTournamentState state_;
    public bool HasState {
      get { return hasState; }
    }
    public global::com.golf.proto.CCTournamentState State {
      get { return state_ ?? global::com.golf.proto.CCTournamentState.DefaultInstance; }
    }
    
    public const int RitemsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public const int UserDataFieldNumber = 4;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetTournamentRewardResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasState) {
        output.WriteMessage(2, field_names[2], State);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], ritems_);
      }
      if (hasUserData) {
        output.WriteMessage(4, field_names[3], UserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, State);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, UserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetTournamentRewardResponse other = obj as CCGetTournamentRewardResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("state", hasState, state_, writer);
      PrintField("ritems", ritems_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
    }
    #endregion
    
    public static CCGetTournamentRewardResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetTournamentRewardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetTournamentRewardResponse MakeReadOnly() {
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetTournamentRewardResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetTournamentRewardResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetTournamentRewardResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetTournamentRewardResponse result;
      
      private CCGetTournamentRewardResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetTournamentRewardResponse original = result;
          result = new CCGetTournamentRewardResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetTournamentRewardResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetTournamentRewardResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetTournamentRewardResponse.DefaultInstance; }
      }
      
      public override CCGetTournamentRewardResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetTournamentRewardResponse) {
          return MergeFrom((CCGetTournamentRewardResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetTournamentRewardResponse other) {
        if (other == global::com.golf.proto.CCGetTournamentRewardResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasState) {
          MergeState(other.State);
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetTournamentRewardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetTournamentRewardResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCTournamentState.Builder subBuilder = global::com.golf.proto.CCTournamentState.CreateBuilder();
              if (result.hasState) {
                subBuilder.MergeFrom(State);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              State = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::com.golf.proto.CCTournamentState State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::com.golf.proto.CCTournamentState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder SetState(global::com.golf.proto.CCTournamentState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = builderForValue.Build();
        return this;
      }
      public Builder MergeState(global::com.golf.proto.CCTournamentState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasState &&
            result.state_ != global::com.golf.proto.CCTournamentState.DefaultInstance) {
            result.state_ = global::com.golf.proto.CCTournamentState.CreateBuilder(result.state_).MergeFrom(value).BuildPartial();
        } else {
          result.state_ = value;
        }
        result.hasState = true;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
    }
    static CCGetTournamentRewardResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTournamentSpec : pb::GeneratedMessageLite<CCTournamentSpec, CCTournamentSpec.Builder> {
    private CCTournamentSpec() { }
    private static readonly CCTournamentSpec defaultInstance = new CCTournamentSpec().MakeReadOnly();
    private static readonly string[] _cCTournamentSpecFieldNames = new string[] { "grade", "nth", "period_id", "type" };
    private static readonly uint[] _cCTournamentSpecFieldTags = new uint[] { 8, 24, 32, 16 };
    public static CCTournamentSpec DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTournamentSpec DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTournamentSpec ThisMessage {
      get { return this; }
    }
    
    public const int GradeFieldNumber = 1;
    private bool hasGrade;
    private int grade_;
    public bool HasGrade {
      get { return hasGrade; }
    }
    public int Grade {
      get { return grade_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int NthFieldNumber = 3;
    private bool hasNth;
    private int nth_;
    public bool HasNth {
      get { return hasNth; }
    }
    public int Nth {
      get { return nth_; }
    }
    
    public const int PeriodIdFieldNumber = 4;
    private bool hasPeriodId;
    private int periodId_;
    public bool HasPeriodId {
      get { return hasPeriodId; }
    }
    public int PeriodId {
      get { return periodId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTournamentSpecFieldNames;
      if (hasGrade) {
        output.WriteInt32(1, field_names[0], Grade);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[3], Type);
      }
      if (hasNth) {
        output.WriteInt32(3, field_names[1], Nth);
      }
      if (hasPeriodId) {
        output.WriteInt32(4, field_names[2], PeriodId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGrade) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Grade);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      if (hasNth) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Nth);
      }
      if (hasPeriodId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, PeriodId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasGrade) hash ^= grade_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasNth) hash ^= nth_.GetHashCode();
      if (hasPeriodId) hash ^= periodId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTournamentSpec other = obj as CCTournamentSpec;
      if (other == null) return false;
      if (hasGrade != other.hasGrade || (hasGrade && !grade_.Equals(other.grade_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasNth != other.hasNth || (hasNth && !nth_.Equals(other.nth_))) return false;
      if (hasPeriodId != other.hasPeriodId || (hasPeriodId && !periodId_.Equals(other.periodId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("grade", hasGrade, grade_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("nth", hasNth, nth_, writer);
      PrintField("period_id", hasPeriodId, periodId_, writer);
    }
    #endregion
    
    public static CCTournamentSpec ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentSpec ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentSpec ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentSpec ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentSpec ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentSpec ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentSpec ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTournamentSpec ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTournamentSpec ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentSpec ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTournamentSpec MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTournamentSpec prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTournamentSpec, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTournamentSpec cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTournamentSpec result;
      
      private CCTournamentSpec PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTournamentSpec original = result;
          result = new CCTournamentSpec();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTournamentSpec MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTournamentSpec DefaultInstanceForType {
        get { return global::com.golf.proto.CCTournamentSpec.DefaultInstance; }
      }
      
      public override CCTournamentSpec BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTournamentSpec) {
          return MergeFrom((CCTournamentSpec) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTournamentSpec other) {
        if (other == global::com.golf.proto.CCTournamentSpec.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGrade) {
          Grade = other.Grade;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasNth) {
          Nth = other.Nth;
        }
        if (other.HasPeriodId) {
          PeriodId = other.PeriodId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTournamentSpecFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTournamentSpecFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGrade = input.ReadInt32(ref result.grade_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasNth = input.ReadInt32(ref result.nth_);
              break;
            }
            case 32: {
              result.hasPeriodId = input.ReadInt32(ref result.periodId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasGrade {
        get { return result.hasGrade; }
      }
      public int Grade {
        get { return result.Grade; }
        set { SetGrade(value); }
      }
      public Builder SetGrade(int value) {
        PrepareBuilder();
        result.hasGrade = true;
        result.grade_ = value;
        return this;
      }
      public Builder ClearGrade() {
        PrepareBuilder();
        result.hasGrade = false;
        result.grade_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasNth {
        get { return result.hasNth; }
      }
      public int Nth {
        get { return result.Nth; }
        set { SetNth(value); }
      }
      public Builder SetNth(int value) {
        PrepareBuilder();
        result.hasNth = true;
        result.nth_ = value;
        return this;
      }
      public Builder ClearNth() {
        PrepareBuilder();
        result.hasNth = false;
        result.nth_ = 0;
        return this;
      }
      
      public bool HasPeriodId {
        get { return result.hasPeriodId; }
      }
      public int PeriodId {
        get { return result.PeriodId; }
        set { SetPeriodId(value); }
      }
      public Builder SetPeriodId(int value) {
        PrepareBuilder();
        result.hasPeriodId = true;
        result.periodId_ = value;
        return this;
      }
      public Builder ClearPeriodId() {
        PrepareBuilder();
        result.hasPeriodId = false;
        result.periodId_ = 0;
        return this;
      }
    }
    static CCTournamentSpec() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCExTournamentRoomUserItem : pb::GeneratedMessageLite<CCExTournamentRoomUserItem, CCExTournamentRoomUserItem.Builder> {
    private CCExTournamentRoomUserItem() { }
    private static readonly CCExTournamentRoomUserItem defaultInstance = new CCExTournamentRoomUserItem().MakeReadOnly();
    private static readonly string[] _cCExTournamentRoomUserItemFieldNames = new string[] { "s_user_data", "user_item" };
    private static readonly uint[] _cCExTournamentRoomUserItemFieldTags = new uint[] { 18, 10 };
    public static CCExTournamentRoomUserItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCExTournamentRoomUserItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCExTournamentRoomUserItem ThisMessage {
      get { return this; }
    }
    
    public const int UserItemFieldNumber = 1;
    private bool hasUserItem;
    private global::com.golf.proto.CCTournamentRoomUserItem userItem_;
    public bool HasUserItem {
      get { return hasUserItem; }
    }
    public global::com.golf.proto.CCTournamentRoomUserItem UserItem {
      get { return userItem_ ?? global::com.golf.proto.CCTournamentRoomUserItem.DefaultInstance; }
    }
    
    public const int SUserDataFieldNumber = 2;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCExTournamentRoomUserItemFieldNames;
      if (hasUserItem) {
        output.WriteMessage(1, field_names[1], UserItem);
      }
      if (hasSUserData) {
        output.WriteMessage(2, field_names[0], SUserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, UserItem);
      }
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SUserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUserItem) hash ^= userItem_.GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCExTournamentRoomUserItem other = obj as CCExTournamentRoomUserItem;
      if (other == null) return false;
      if (hasUserItem != other.hasUserItem || (hasUserItem && !userItem_.Equals(other.userItem_))) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("user_item", hasUserItem, userItem_, writer);
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
    }
    #endregion
    
    public static CCExTournamentRoomUserItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCExTournamentRoomUserItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCExTournamentRoomUserItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCExTournamentRoomUserItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCExTournamentRoomUserItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCExTournamentRoomUserItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCExTournamentRoomUserItem result;
      
      private CCExTournamentRoomUserItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCExTournamentRoomUserItem original = result;
          result = new CCExTournamentRoomUserItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCExTournamentRoomUserItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCExTournamentRoomUserItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCExTournamentRoomUserItem.DefaultInstance; }
      }
      
      public override CCExTournamentRoomUserItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCExTournamentRoomUserItem) {
          return MergeFrom((CCExTournamentRoomUserItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCExTournamentRoomUserItem other) {
        if (other == global::com.golf.proto.CCExTournamentRoomUserItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserItem) {
          MergeUserItem(other.UserItem);
        }
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCExTournamentRoomUserItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCExTournamentRoomUserItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCTournamentRoomUserItem.Builder subBuilder = global::com.golf.proto.CCTournamentRoomUserItem.CreateBuilder();
              if (result.hasUserItem) {
                subBuilder.MergeFrom(UserItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserItem = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUserItem {
       get { return result.hasUserItem; }
      }
      public global::com.golf.proto.CCTournamentRoomUserItem UserItem {
        get { return result.UserItem; }
        set { SetUserItem(value); }
      }
      public Builder SetUserItem(global::com.golf.proto.CCTournamentRoomUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserItem = true;
        result.userItem_ = value;
        return this;
      }
      public Builder SetUserItem(global::com.golf.proto.CCTournamentRoomUserItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserItem = true;
        result.userItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserItem(global::com.golf.proto.CCTournamentRoomUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserItem &&
            result.userItem_ != global::com.golf.proto.CCTournamentRoomUserItem.DefaultInstance) {
            result.userItem_ = global::com.golf.proto.CCTournamentRoomUserItem.CreateBuilder(result.userItem_).MergeFrom(value).BuildPartial();
        } else {
          result.userItem_ = value;
        }
        result.hasUserItem = true;
        return this;
      }
      public Builder ClearUserItem() {
        PrepareBuilder();
        result.hasUserItem = false;
        result.userItem_ = null;
        return this;
      }
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
    }
    static CCExTournamentRoomUserItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTournamentRoomUserItem : pb::GeneratedMessageLite<CCTournamentRoomUserItem, CCTournamentRoomUserItem.Builder> {
    private CCTournamentRoomUserItem() { }
    private static readonly CCTournamentRoomUserItem defaultInstance = new CCTournamentRoomUserItem().MakeReadOnly();
    private static readonly string[] _cCTournamentRoomUserItemFieldNames = new string[] { "c_score_datas", "cur_score", "id", "last_score", "t_score_data", "update_time", "user_id" };
    private static readonly uint[] _cCTournamentRoomUserItemFieldTags = new uint[] { 50, 24, 10, 32, 42, 56, 18 };
    public static CCTournamentRoomUserItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTournamentRoomUserItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTournamentRoomUserItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int UserIdFieldNumber = 2;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int CurScoreFieldNumber = 3;
    private bool hasCurScore;
    private long curScore_;
    public bool HasCurScore {
      get { return hasCurScore; }
    }
    public long CurScore {
      get { return curScore_; }
    }
    
    public const int LastScoreFieldNumber = 4;
    private bool hasLastScore;
    private long lastScore_;
    public bool HasLastScore {
      get { return hasLastScore; }
    }
    public long LastScore {
      get { return lastScore_; }
    }
    
    public const int TScoreDataFieldNumber = 5;
    private bool hasTScoreData;
    private global::com.golf.proto.CCTournamentSocreData tScoreData_;
    public bool HasTScoreData {
      get { return hasTScoreData; }
    }
    public global::com.golf.proto.CCTournamentSocreData TScoreData {
      get { return tScoreData_ ?? global::com.golf.proto.CCTournamentSocreData.DefaultInstance; }
    }
    
    public const int CScoreDatasFieldNumber = 6;
    private pbc::PopsicleList<global::com.golf.proto.CCContestScoreData> cScoreDatas_ = new pbc::PopsicleList<global::com.golf.proto.CCContestScoreData>();
    public scg::IList<global::com.golf.proto.CCContestScoreData> CScoreDatasList {
      get { return cScoreDatas_; }
    }
    public int CScoreDatasCount {
      get { return cScoreDatas_.Count; }
    }
    public global::com.golf.proto.CCContestScoreData GetCScoreDatas(int index) {
      return cScoreDatas_[index];
    }
    
    public const int UpdateTimeFieldNumber = 7;
    private bool hasUpdateTime;
    private long updateTime_;
    public bool HasUpdateTime {
      get { return hasUpdateTime; }
    }
    public long UpdateTime {
      get { return updateTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTournamentRoomUserItemFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[2], Id);
      }
      if (hasUserId) {
        output.WriteString(2, field_names[6], UserId);
      }
      if (hasCurScore) {
        output.WriteInt64(3, field_names[1], CurScore);
      }
      if (hasLastScore) {
        output.WriteInt64(4, field_names[3], LastScore);
      }
      if (hasTScoreData) {
        output.WriteMessage(5, field_names[4], TScoreData);
      }
      if (cScoreDatas_.Count > 0) {
        output.WriteMessageArray(6, field_names[0], cScoreDatas_);
      }
      if (hasUpdateTime) {
        output.WriteInt64(7, field_names[5], UpdateTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, UserId);
      }
      if (hasCurScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, CurScore);
      }
      if (hasLastScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, LastScore);
      }
      if (hasTScoreData) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, TScoreData);
      }
      foreach (global::com.golf.proto.CCContestScoreData element in CScoreDatasList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      if (hasUpdateTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(7, UpdateTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasCurScore) hash ^= curScore_.GetHashCode();
      if (hasLastScore) hash ^= lastScore_.GetHashCode();
      if (hasTScoreData) hash ^= tScoreData_.GetHashCode();
      foreach(global::com.golf.proto.CCContestScoreData i in cScoreDatas_)
        hash ^= i.GetHashCode();
      if (hasUpdateTime) hash ^= updateTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTournamentRoomUserItem other = obj as CCTournamentRoomUserItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasCurScore != other.hasCurScore || (hasCurScore && !curScore_.Equals(other.curScore_))) return false;
      if (hasLastScore != other.hasLastScore || (hasLastScore && !lastScore_.Equals(other.lastScore_))) return false;
      if (hasTScoreData != other.hasTScoreData || (hasTScoreData && !tScoreData_.Equals(other.tScoreData_))) return false;
      if(cScoreDatas_.Count != other.cScoreDatas_.Count) return false;
      for(int ix=0; ix < cScoreDatas_.Count; ix++)
        if(!cScoreDatas_[ix].Equals(other.cScoreDatas_[ix])) return false;
      if (hasUpdateTime != other.hasUpdateTime || (hasUpdateTime && !updateTime_.Equals(other.updateTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("user_id", hasUserId, userId_, writer);
      PrintField("cur_score", hasCurScore, curScore_, writer);
      PrintField("last_score", hasLastScore, lastScore_, writer);
      PrintField("t_score_data", hasTScoreData, tScoreData_, writer);
      PrintField("c_score_datas", cScoreDatas_, writer);
      PrintField("update_time", hasUpdateTime, updateTime_, writer);
    }
    #endregion
    
    public static CCTournamentRoomUserItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentRoomUserItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTournamentRoomUserItem MakeReadOnly() {
      cScoreDatas_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTournamentRoomUserItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTournamentRoomUserItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTournamentRoomUserItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTournamentRoomUserItem result;
      
      private CCTournamentRoomUserItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTournamentRoomUserItem original = result;
          result = new CCTournamentRoomUserItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTournamentRoomUserItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTournamentRoomUserItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCTournamentRoomUserItem.DefaultInstance; }
      }
      
      public override CCTournamentRoomUserItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTournamentRoomUserItem) {
          return MergeFrom((CCTournamentRoomUserItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTournamentRoomUserItem other) {
        if (other == global::com.golf.proto.CCTournamentRoomUserItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasCurScore) {
          CurScore = other.CurScore;
        }
        if (other.HasLastScore) {
          LastScore = other.LastScore;
        }
        if (other.HasTScoreData) {
          MergeTScoreData(other.TScoreData);
        }
        if (other.cScoreDatas_.Count != 0) {
          result.cScoreDatas_.Add(other.cScoreDatas_);
        }
        if (other.HasUpdateTime) {
          UpdateTime = other.UpdateTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTournamentRoomUserItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTournamentRoomUserItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 24: {
              result.hasCurScore = input.ReadInt64(ref result.curScore_);
              break;
            }
            case 32: {
              result.hasLastScore = input.ReadInt64(ref result.lastScore_);
              break;
            }
            case 42: {
              global::com.golf.proto.CCTournamentSocreData.Builder subBuilder = global::com.golf.proto.CCTournamentSocreData.CreateBuilder();
              if (result.hasTScoreData) {
                subBuilder.MergeFrom(TScoreData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TScoreData = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.cScoreDatas_, global::com.golf.proto.CCContestScoreData.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              result.hasUpdateTime = input.ReadInt64(ref result.updateTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasCurScore {
        get { return result.hasCurScore; }
      }
      public long CurScore {
        get { return result.CurScore; }
        set { SetCurScore(value); }
      }
      public Builder SetCurScore(long value) {
        PrepareBuilder();
        result.hasCurScore = true;
        result.curScore_ = value;
        return this;
      }
      public Builder ClearCurScore() {
        PrepareBuilder();
        result.hasCurScore = false;
        result.curScore_ = 0L;
        return this;
      }
      
      public bool HasLastScore {
        get { return result.hasLastScore; }
      }
      public long LastScore {
        get { return result.LastScore; }
        set { SetLastScore(value); }
      }
      public Builder SetLastScore(long value) {
        PrepareBuilder();
        result.hasLastScore = true;
        result.lastScore_ = value;
        return this;
      }
      public Builder ClearLastScore() {
        PrepareBuilder();
        result.hasLastScore = false;
        result.lastScore_ = 0L;
        return this;
      }
      
      public bool HasTScoreData {
       get { return result.hasTScoreData; }
      }
      public global::com.golf.proto.CCTournamentSocreData TScoreData {
        get { return result.TScoreData; }
        set { SetTScoreData(value); }
      }
      public Builder SetTScoreData(global::com.golf.proto.CCTournamentSocreData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTScoreData = true;
        result.tScoreData_ = value;
        return this;
      }
      public Builder SetTScoreData(global::com.golf.proto.CCTournamentSocreData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTScoreData = true;
        result.tScoreData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTScoreData(global::com.golf.proto.CCTournamentSocreData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTScoreData &&
            result.tScoreData_ != global::com.golf.proto.CCTournamentSocreData.DefaultInstance) {
            result.tScoreData_ = global::com.golf.proto.CCTournamentSocreData.CreateBuilder(result.tScoreData_).MergeFrom(value).BuildPartial();
        } else {
          result.tScoreData_ = value;
        }
        result.hasTScoreData = true;
        return this;
      }
      public Builder ClearTScoreData() {
        PrepareBuilder();
        result.hasTScoreData = false;
        result.tScoreData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCContestScoreData> CScoreDatasList {
        get { return PrepareBuilder().cScoreDatas_; }
      }
      public int CScoreDatasCount {
        get { return result.CScoreDatasCount; }
      }
      public global::com.golf.proto.CCContestScoreData GetCScoreDatas(int index) {
        return result.GetCScoreDatas(index);
      }
      public Builder SetCScoreDatas(int index, global::com.golf.proto.CCContestScoreData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cScoreDatas_[index] = value;
        return this;
      }
      public Builder SetCScoreDatas(int index, global::com.golf.proto.CCContestScoreData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cScoreDatas_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCScoreDatas(global::com.golf.proto.CCContestScoreData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cScoreDatas_.Add(value);
        return this;
      }
      public Builder AddCScoreDatas(global::com.golf.proto.CCContestScoreData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cScoreDatas_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCScoreDatas(scg::IEnumerable<global::com.golf.proto.CCContestScoreData> values) {
        PrepareBuilder();
        result.cScoreDatas_.Add(values);
        return this;
      }
      public Builder ClearCScoreDatas() {
        PrepareBuilder();
        result.cScoreDatas_.Clear();
        return this;
      }
      
      public bool HasUpdateTime {
        get { return result.hasUpdateTime; }
      }
      public long UpdateTime {
        get { return result.UpdateTime; }
        set { SetUpdateTime(value); }
      }
      public Builder SetUpdateTime(long value) {
        PrepareBuilder();
        result.hasUpdateTime = true;
        result.updateTime_ = value;
        return this;
      }
      public Builder ClearUpdateTime() {
        PrepareBuilder();
        result.hasUpdateTime = false;
        result.updateTime_ = 0L;
        return this;
      }
    }
    static CCTournamentRoomUserItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTournamentSocreData : pb::GeneratedMessageLite<CCTournamentSocreData, CCTournamentSocreData.Builder> {
    private CCTournamentSocreData() { }
    private static readonly CCTournamentSocreData defaultInstance = new CCTournamentSocreData().MakeReadOnly();
    private static readonly string[] _cCTournamentSocreDataFieldNames = new string[] { "albs_cnt", "bird_cnt", "club_cnt", "eagle_cnt", "hole_cnt", "par_cnt" };
    private static readonly uint[] _cCTournamentSocreDataFieldTags = new uint[] { 24, 40, 16, 32, 8, 48 };
    public static CCTournamentSocreData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTournamentSocreData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTournamentSocreData ThisMessage {
      get { return this; }
    }
    
    public const int HoleCntFieldNumber = 1;
    private bool hasHoleCnt;
    private int holeCnt_;
    public bool HasHoleCnt {
      get { return hasHoleCnt; }
    }
    public int HoleCnt {
      get { return holeCnt_; }
    }
    
    public const int ClubCntFieldNumber = 2;
    private bool hasClubCnt;
    private int clubCnt_;
    public bool HasClubCnt {
      get { return hasClubCnt; }
    }
    public int ClubCnt {
      get { return clubCnt_; }
    }
    
    public const int AlbsCntFieldNumber = 3;
    private bool hasAlbsCnt;
    private int albsCnt_;
    public bool HasAlbsCnt {
      get { return hasAlbsCnt; }
    }
    public int AlbsCnt {
      get { return albsCnt_; }
    }
    
    public const int EagleCntFieldNumber = 4;
    private bool hasEagleCnt;
    private int eagleCnt_;
    public bool HasEagleCnt {
      get { return hasEagleCnt; }
    }
    public int EagleCnt {
      get { return eagleCnt_; }
    }
    
    public const int BirdCntFieldNumber = 5;
    private bool hasBirdCnt;
    private int birdCnt_;
    public bool HasBirdCnt {
      get { return hasBirdCnt; }
    }
    public int BirdCnt {
      get { return birdCnt_; }
    }
    
    public const int ParCntFieldNumber = 6;
    private bool hasParCnt;
    private int parCnt_;
    public bool HasParCnt {
      get { return hasParCnt; }
    }
    public int ParCnt {
      get { return parCnt_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTournamentSocreDataFieldNames;
      if (hasHoleCnt) {
        output.WriteInt32(1, field_names[4], HoleCnt);
      }
      if (hasClubCnt) {
        output.WriteInt32(2, field_names[2], ClubCnt);
      }
      if (hasAlbsCnt) {
        output.WriteInt32(3, field_names[0], AlbsCnt);
      }
      if (hasEagleCnt) {
        output.WriteInt32(4, field_names[3], EagleCnt);
      }
      if (hasBirdCnt) {
        output.WriteInt32(5, field_names[1], BirdCnt);
      }
      if (hasParCnt) {
        output.WriteInt32(6, field_names[5], ParCnt);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHoleCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, HoleCnt);
      }
      if (hasClubCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ClubCnt);
      }
      if (hasAlbsCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, AlbsCnt);
      }
      if (hasEagleCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, EagleCnt);
      }
      if (hasBirdCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, BirdCnt);
      }
      if (hasParCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ParCnt);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasHoleCnt) hash ^= holeCnt_.GetHashCode();
      if (hasClubCnt) hash ^= clubCnt_.GetHashCode();
      if (hasAlbsCnt) hash ^= albsCnt_.GetHashCode();
      if (hasEagleCnt) hash ^= eagleCnt_.GetHashCode();
      if (hasBirdCnt) hash ^= birdCnt_.GetHashCode();
      if (hasParCnt) hash ^= parCnt_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTournamentSocreData other = obj as CCTournamentSocreData;
      if (other == null) return false;
      if (hasHoleCnt != other.hasHoleCnt || (hasHoleCnt && !holeCnt_.Equals(other.holeCnt_))) return false;
      if (hasClubCnt != other.hasClubCnt || (hasClubCnt && !clubCnt_.Equals(other.clubCnt_))) return false;
      if (hasAlbsCnt != other.hasAlbsCnt || (hasAlbsCnt && !albsCnt_.Equals(other.albsCnt_))) return false;
      if (hasEagleCnt != other.hasEagleCnt || (hasEagleCnt && !eagleCnt_.Equals(other.eagleCnt_))) return false;
      if (hasBirdCnt != other.hasBirdCnt || (hasBirdCnt && !birdCnt_.Equals(other.birdCnt_))) return false;
      if (hasParCnt != other.hasParCnt || (hasParCnt && !parCnt_.Equals(other.parCnt_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("hole_cnt", hasHoleCnt, holeCnt_, writer);
      PrintField("club_cnt", hasClubCnt, clubCnt_, writer);
      PrintField("albs_cnt", hasAlbsCnt, albsCnt_, writer);
      PrintField("eagle_cnt", hasEagleCnt, eagleCnt_, writer);
      PrintField("bird_cnt", hasBirdCnt, birdCnt_, writer);
      PrintField("par_cnt", hasParCnt, parCnt_, writer);
    }
    #endregion
    
    public static CCTournamentSocreData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentSocreData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentSocreData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentSocreData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentSocreData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentSocreData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentSocreData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTournamentSocreData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTournamentSocreData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentSocreData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTournamentSocreData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTournamentSocreData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTournamentSocreData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTournamentSocreData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTournamentSocreData result;
      
      private CCTournamentSocreData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTournamentSocreData original = result;
          result = new CCTournamentSocreData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTournamentSocreData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTournamentSocreData DefaultInstanceForType {
        get { return global::com.golf.proto.CCTournamentSocreData.DefaultInstance; }
      }
      
      public override CCTournamentSocreData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTournamentSocreData) {
          return MergeFrom((CCTournamentSocreData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTournamentSocreData other) {
        if (other == global::com.golf.proto.CCTournamentSocreData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHoleCnt) {
          HoleCnt = other.HoleCnt;
        }
        if (other.HasClubCnt) {
          ClubCnt = other.ClubCnt;
        }
        if (other.HasAlbsCnt) {
          AlbsCnt = other.AlbsCnt;
        }
        if (other.HasEagleCnt) {
          EagleCnt = other.EagleCnt;
        }
        if (other.HasBirdCnt) {
          BirdCnt = other.BirdCnt;
        }
        if (other.HasParCnt) {
          ParCnt = other.ParCnt;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTournamentSocreDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTournamentSocreDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHoleCnt = input.ReadInt32(ref result.holeCnt_);
              break;
            }
            case 16: {
              result.hasClubCnt = input.ReadInt32(ref result.clubCnt_);
              break;
            }
            case 24: {
              result.hasAlbsCnt = input.ReadInt32(ref result.albsCnt_);
              break;
            }
            case 32: {
              result.hasEagleCnt = input.ReadInt32(ref result.eagleCnt_);
              break;
            }
            case 40: {
              result.hasBirdCnt = input.ReadInt32(ref result.birdCnt_);
              break;
            }
            case 48: {
              result.hasParCnt = input.ReadInt32(ref result.parCnt_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasHoleCnt {
        get { return result.hasHoleCnt; }
      }
      public int HoleCnt {
        get { return result.HoleCnt; }
        set { SetHoleCnt(value); }
      }
      public Builder SetHoleCnt(int value) {
        PrepareBuilder();
        result.hasHoleCnt = true;
        result.holeCnt_ = value;
        return this;
      }
      public Builder ClearHoleCnt() {
        PrepareBuilder();
        result.hasHoleCnt = false;
        result.holeCnt_ = 0;
        return this;
      }
      
      public bool HasClubCnt {
        get { return result.hasClubCnt; }
      }
      public int ClubCnt {
        get { return result.ClubCnt; }
        set { SetClubCnt(value); }
      }
      public Builder SetClubCnt(int value) {
        PrepareBuilder();
        result.hasClubCnt = true;
        result.clubCnt_ = value;
        return this;
      }
      public Builder ClearClubCnt() {
        PrepareBuilder();
        result.hasClubCnt = false;
        result.clubCnt_ = 0;
        return this;
      }
      
      public bool HasAlbsCnt {
        get { return result.hasAlbsCnt; }
      }
      public int AlbsCnt {
        get { return result.AlbsCnt; }
        set { SetAlbsCnt(value); }
      }
      public Builder SetAlbsCnt(int value) {
        PrepareBuilder();
        result.hasAlbsCnt = true;
        result.albsCnt_ = value;
        return this;
      }
      public Builder ClearAlbsCnt() {
        PrepareBuilder();
        result.hasAlbsCnt = false;
        result.albsCnt_ = 0;
        return this;
      }
      
      public bool HasEagleCnt {
        get { return result.hasEagleCnt; }
      }
      public int EagleCnt {
        get { return result.EagleCnt; }
        set { SetEagleCnt(value); }
      }
      public Builder SetEagleCnt(int value) {
        PrepareBuilder();
        result.hasEagleCnt = true;
        result.eagleCnt_ = value;
        return this;
      }
      public Builder ClearEagleCnt() {
        PrepareBuilder();
        result.hasEagleCnt = false;
        result.eagleCnt_ = 0;
        return this;
      }
      
      public bool HasBirdCnt {
        get { return result.hasBirdCnt; }
      }
      public int BirdCnt {
        get { return result.BirdCnt; }
        set { SetBirdCnt(value); }
      }
      public Builder SetBirdCnt(int value) {
        PrepareBuilder();
        result.hasBirdCnt = true;
        result.birdCnt_ = value;
        return this;
      }
      public Builder ClearBirdCnt() {
        PrepareBuilder();
        result.hasBirdCnt = false;
        result.birdCnt_ = 0;
        return this;
      }
      
      public bool HasParCnt {
        get { return result.hasParCnt; }
      }
      public int ParCnt {
        get { return result.ParCnt; }
        set { SetParCnt(value); }
      }
      public Builder SetParCnt(int value) {
        PrepareBuilder();
        result.hasParCnt = true;
        result.parCnt_ = value;
        return this;
      }
      public Builder ClearParCnt() {
        PrepareBuilder();
        result.hasParCnt = false;
        result.parCnt_ = 0;
        return this;
      }
    }
    static CCTournamentSocreData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCContestScoreData : pb::GeneratedMessageLite<CCContestScoreData, CCContestScoreData.Builder> {
    private CCContestScoreData() { }
    private static readonly CCContestScoreData defaultInstance = new CCContestScoreData().MakeReadOnly();
    private static readonly string[] _cCContestScoreDataFieldNames = new string[] { "club_cnt", "hole_id", "hole_nth", "id", "is_win" };
    private static readonly uint[] _cCContestScoreDataFieldTags = new uint[] { 16, 32, 40, 10, 24 };
    public static CCContestScoreData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCContestScoreData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCContestScoreData ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ClubCntFieldNumber = 2;
    private bool hasClubCnt;
    private int clubCnt_;
    public bool HasClubCnt {
      get { return hasClubCnt; }
    }
    public int ClubCnt {
      get { return clubCnt_; }
    }
    
    public const int IsWinFieldNumber = 3;
    private bool hasIsWin;
    private bool isWin_;
    public bool HasIsWin {
      get { return hasIsWin; }
    }
    public bool IsWin {
      get { return isWin_; }
    }
    
    public const int HoleIdFieldNumber = 4;
    private bool hasHoleId;
    private int holeId_;
    public bool HasHoleId {
      get { return hasHoleId; }
    }
    public int HoleId {
      get { return holeId_; }
    }
    
    public const int HoleNthFieldNumber = 5;
    private bool hasHoleNth;
    private int holeNth_;
    public bool HasHoleNth {
      get { return hasHoleNth; }
    }
    public int HoleNth {
      get { return holeNth_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCContestScoreDataFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[3], Id);
      }
      if (hasClubCnt) {
        output.WriteInt32(2, field_names[0], ClubCnt);
      }
      if (hasIsWin) {
        output.WriteBool(3, field_names[4], IsWin);
      }
      if (hasHoleId) {
        output.WriteInt32(4, field_names[1], HoleId);
      }
      if (hasHoleNth) {
        output.WriteInt32(5, field_names[2], HoleNth);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasClubCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ClubCnt);
      }
      if (hasIsWin) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, IsWin);
      }
      if (hasHoleId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, HoleId);
      }
      if (hasHoleNth) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, HoleNth);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasClubCnt) hash ^= clubCnt_.GetHashCode();
      if (hasIsWin) hash ^= isWin_.GetHashCode();
      if (hasHoleId) hash ^= holeId_.GetHashCode();
      if (hasHoleNth) hash ^= holeNth_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCContestScoreData other = obj as CCContestScoreData;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasClubCnt != other.hasClubCnt || (hasClubCnt && !clubCnt_.Equals(other.clubCnt_))) return false;
      if (hasIsWin != other.hasIsWin || (hasIsWin && !isWin_.Equals(other.isWin_))) return false;
      if (hasHoleId != other.hasHoleId || (hasHoleId && !holeId_.Equals(other.holeId_))) return false;
      if (hasHoleNth != other.hasHoleNth || (hasHoleNth && !holeNth_.Equals(other.holeNth_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("club_cnt", hasClubCnt, clubCnt_, writer);
      PrintField("is_win", hasIsWin, isWin_, writer);
      PrintField("hole_id", hasHoleId, holeId_, writer);
      PrintField("hole_nth", hasHoleNth, holeNth_, writer);
    }
    #endregion
    
    public static CCContestScoreData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCContestScoreData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCContestScoreData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCContestScoreData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCContestScoreData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCContestScoreData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCContestScoreData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCContestScoreData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCContestScoreData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCContestScoreData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCContestScoreData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCContestScoreData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCContestScoreData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCContestScoreData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCContestScoreData result;
      
      private CCContestScoreData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCContestScoreData original = result;
          result = new CCContestScoreData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCContestScoreData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCContestScoreData DefaultInstanceForType {
        get { return global::com.golf.proto.CCContestScoreData.DefaultInstance; }
      }
      
      public override CCContestScoreData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCContestScoreData) {
          return MergeFrom((CCContestScoreData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCContestScoreData other) {
        if (other == global::com.golf.proto.CCContestScoreData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasClubCnt) {
          ClubCnt = other.ClubCnt;
        }
        if (other.HasIsWin) {
          IsWin = other.IsWin;
        }
        if (other.HasHoleId) {
          HoleId = other.HoleId;
        }
        if (other.HasHoleNth) {
          HoleNth = other.HoleNth;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCContestScoreDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCContestScoreDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasClubCnt = input.ReadInt32(ref result.clubCnt_);
              break;
            }
            case 24: {
              result.hasIsWin = input.ReadBool(ref result.isWin_);
              break;
            }
            case 32: {
              result.hasHoleId = input.ReadInt32(ref result.holeId_);
              break;
            }
            case 40: {
              result.hasHoleNth = input.ReadInt32(ref result.holeNth_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasClubCnt {
        get { return result.hasClubCnt; }
      }
      public int ClubCnt {
        get { return result.ClubCnt; }
        set { SetClubCnt(value); }
      }
      public Builder SetClubCnt(int value) {
        PrepareBuilder();
        result.hasClubCnt = true;
        result.clubCnt_ = value;
        return this;
      }
      public Builder ClearClubCnt() {
        PrepareBuilder();
        result.hasClubCnt = false;
        result.clubCnt_ = 0;
        return this;
      }
      
      public bool HasIsWin {
        get { return result.hasIsWin; }
      }
      public bool IsWin {
        get { return result.IsWin; }
        set { SetIsWin(value); }
      }
      public Builder SetIsWin(bool value) {
        PrepareBuilder();
        result.hasIsWin = true;
        result.isWin_ = value;
        return this;
      }
      public Builder ClearIsWin() {
        PrepareBuilder();
        result.hasIsWin = false;
        result.isWin_ = false;
        return this;
      }
      
      public bool HasHoleId {
        get { return result.hasHoleId; }
      }
      public int HoleId {
        get { return result.HoleId; }
        set { SetHoleId(value); }
      }
      public Builder SetHoleId(int value) {
        PrepareBuilder();
        result.hasHoleId = true;
        result.holeId_ = value;
        return this;
      }
      public Builder ClearHoleId() {
        PrepareBuilder();
        result.hasHoleId = false;
        result.holeId_ = 0;
        return this;
      }
      
      public bool HasHoleNth {
        get { return result.hasHoleNth; }
      }
      public int HoleNth {
        get { return result.HoleNth; }
        set { SetHoleNth(value); }
      }
      public Builder SetHoleNth(int value) {
        PrepareBuilder();
        result.hasHoleNth = true;
        result.holeNth_ = value;
        return this;
      }
      public Builder ClearHoleNth() {
        PrepareBuilder();
        result.hasHoleNth = false;
        result.holeNth_ = 0;
        return this;
      }
    }
    static CCContestScoreData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLeagueLeaderboardState : pb::GeneratedMessageLite<CCLeagueLeaderboardState, CCLeagueLeaderboardState.Builder> {
    private CCLeagueLeaderboardState() { }
    private static readonly CCLeagueLeaderboardState defaultInstance = new CCLeagueLeaderboardState().MakeReadOnly();
    private static readonly string[] _cCLeagueLeaderboardStateFieldNames = new string[] { "is_rewarded", "is_valid", "league_lv", "league_lv_final", "need_show", "npw_cnt", "rank", "room_id", "score", "score_saved", "week_id" };
    private static readonly uint[] _cCLeagueLeaderboardStateFieldTags = new uint[] { 88, 40, 16, 24, 72, 56, 32, 50, 64, 80, 8 };
    public static CCLeagueLeaderboardState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLeagueLeaderboardState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLeagueLeaderboardState ThisMessage {
      get { return this; }
    }
    
    public const int WeekIdFieldNumber = 1;
    private bool hasWeekId;
    private int weekId_;
    public bool HasWeekId {
      get { return hasWeekId; }
    }
    public int WeekId {
      get { return weekId_; }
    }
    
    public const int LeagueLvFieldNumber = 2;
    private bool hasLeagueLv;
    private int leagueLv_;
    public bool HasLeagueLv {
      get { return hasLeagueLv; }
    }
    public int LeagueLv {
      get { return leagueLv_; }
    }
    
    public const int LeagueLvFinalFieldNumber = 3;
    private bool hasLeagueLvFinal;
    private int leagueLvFinal_;
    public bool HasLeagueLvFinal {
      get { return hasLeagueLvFinal; }
    }
    public int LeagueLvFinal {
      get { return leagueLvFinal_; }
    }
    
    public const int RankFieldNumber = 4;
    private bool hasRank;
    private int rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    public int Rank {
      get { return rank_; }
    }
    
    public const int IsValidFieldNumber = 5;
    private bool hasIsValid;
    private bool isValid_;
    public bool HasIsValid {
      get { return hasIsValid; }
    }
    public bool IsValid {
      get { return isValid_; }
    }
    
    public const int RoomIdFieldNumber = 6;
    private bool hasRoomId;
    private string roomId_ = "";
    public bool HasRoomId {
      get { return hasRoomId; }
    }
    public string RoomId {
      get { return roomId_; }
    }
    
    public const int NpwCntFieldNumber = 7;
    private bool hasNpwCnt;
    private int npwCnt_;
    public bool HasNpwCnt {
      get { return hasNpwCnt; }
    }
    public int NpwCnt {
      get { return npwCnt_; }
    }
    
    public const int ScoreFieldNumber = 8;
    private bool hasScore;
    private long score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public long Score {
      get { return score_; }
    }
    
    public const int NeedShowFieldNumber = 9;
    private bool hasNeedShow;
    private bool needShow_;
    public bool HasNeedShow {
      get { return hasNeedShow; }
    }
    public bool NeedShow {
      get { return needShow_; }
    }
    
    public const int ScoreSavedFieldNumber = 10;
    private bool hasScoreSaved;
    private bool scoreSaved_;
    public bool HasScoreSaved {
      get { return hasScoreSaved; }
    }
    public bool ScoreSaved {
      get { return scoreSaved_; }
    }
    
    public const int IsRewardedFieldNumber = 11;
    private bool hasIsRewarded;
    private bool isRewarded_;
    public bool HasIsRewarded {
      get { return hasIsRewarded; }
    }
    public bool IsRewarded {
      get { return isRewarded_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLeagueLeaderboardStateFieldNames;
      if (hasWeekId) {
        output.WriteInt32(1, field_names[10], WeekId);
      }
      if (hasLeagueLv) {
        output.WriteInt32(2, field_names[2], LeagueLv);
      }
      if (hasLeagueLvFinal) {
        output.WriteInt32(3, field_names[3], LeagueLvFinal);
      }
      if (hasRank) {
        output.WriteInt32(4, field_names[6], Rank);
      }
      if (hasIsValid) {
        output.WriteBool(5, field_names[1], IsValid);
      }
      if (hasRoomId) {
        output.WriteString(6, field_names[7], RoomId);
      }
      if (hasNpwCnt) {
        output.WriteInt32(7, field_names[5], NpwCnt);
      }
      if (hasScore) {
        output.WriteInt64(8, field_names[8], Score);
      }
      if (hasNeedShow) {
        output.WriteBool(9, field_names[4], NeedShow);
      }
      if (hasScoreSaved) {
        output.WriteBool(10, field_names[9], ScoreSaved);
      }
      if (hasIsRewarded) {
        output.WriteBool(11, field_names[0], IsRewarded);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWeekId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, WeekId);
      }
      if (hasLeagueLv) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, LeagueLv);
      }
      if (hasLeagueLvFinal) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, LeagueLvFinal);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Rank);
      }
      if (hasIsValid) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, IsValid);
      }
      if (hasRoomId) {
        size += pb::CodedOutputStream.ComputeStringSize(6, RoomId);
      }
      if (hasNpwCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, NpwCnt);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, Score);
      }
      if (hasNeedShow) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, NeedShow);
      }
      if (hasScoreSaved) {
        size += pb::CodedOutputStream.ComputeBoolSize(10, ScoreSaved);
      }
      if (hasIsRewarded) {
        size += pb::CodedOutputStream.ComputeBoolSize(11, IsRewarded);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasWeekId) hash ^= weekId_.GetHashCode();
      if (hasLeagueLv) hash ^= leagueLv_.GetHashCode();
      if (hasLeagueLvFinal) hash ^= leagueLvFinal_.GetHashCode();
      if (hasRank) hash ^= rank_.GetHashCode();
      if (hasIsValid) hash ^= isValid_.GetHashCode();
      if (hasRoomId) hash ^= roomId_.GetHashCode();
      if (hasNpwCnt) hash ^= npwCnt_.GetHashCode();
      if (hasScore) hash ^= score_.GetHashCode();
      if (hasNeedShow) hash ^= needShow_.GetHashCode();
      if (hasScoreSaved) hash ^= scoreSaved_.GetHashCode();
      if (hasIsRewarded) hash ^= isRewarded_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLeagueLeaderboardState other = obj as CCLeagueLeaderboardState;
      if (other == null) return false;
      if (hasWeekId != other.hasWeekId || (hasWeekId && !weekId_.Equals(other.weekId_))) return false;
      if (hasLeagueLv != other.hasLeagueLv || (hasLeagueLv && !leagueLv_.Equals(other.leagueLv_))) return false;
      if (hasLeagueLvFinal != other.hasLeagueLvFinal || (hasLeagueLvFinal && !leagueLvFinal_.Equals(other.leagueLvFinal_))) return false;
      if (hasRank != other.hasRank || (hasRank && !rank_.Equals(other.rank_))) return false;
      if (hasIsValid != other.hasIsValid || (hasIsValid && !isValid_.Equals(other.isValid_))) return false;
      if (hasRoomId != other.hasRoomId || (hasRoomId && !roomId_.Equals(other.roomId_))) return false;
      if (hasNpwCnt != other.hasNpwCnt || (hasNpwCnt && !npwCnt_.Equals(other.npwCnt_))) return false;
      if (hasScore != other.hasScore || (hasScore && !score_.Equals(other.score_))) return false;
      if (hasNeedShow != other.hasNeedShow || (hasNeedShow && !needShow_.Equals(other.needShow_))) return false;
      if (hasScoreSaved != other.hasScoreSaved || (hasScoreSaved && !scoreSaved_.Equals(other.scoreSaved_))) return false;
      if (hasIsRewarded != other.hasIsRewarded || (hasIsRewarded && !isRewarded_.Equals(other.isRewarded_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("week_id", hasWeekId, weekId_, writer);
      PrintField("league_lv", hasLeagueLv, leagueLv_, writer);
      PrintField("league_lv_final", hasLeagueLvFinal, leagueLvFinal_, writer);
      PrintField("rank", hasRank, rank_, writer);
      PrintField("is_valid", hasIsValid, isValid_, writer);
      PrintField("room_id", hasRoomId, roomId_, writer);
      PrintField("npw_cnt", hasNpwCnt, npwCnt_, writer);
      PrintField("score", hasScore, score_, writer);
      PrintField("need_show", hasNeedShow, needShow_, writer);
      PrintField("score_saved", hasScoreSaved, scoreSaved_, writer);
      PrintField("is_rewarded", hasIsRewarded, isRewarded_, writer);
    }
    #endregion
    
    public static CCLeagueLeaderboardState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeagueLeaderboardState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLeagueLeaderboardState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLeagueLeaderboardState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLeagueLeaderboardState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLeagueLeaderboardState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLeagueLeaderboardState result;
      
      private CCLeagueLeaderboardState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLeagueLeaderboardState original = result;
          result = new CCLeagueLeaderboardState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLeagueLeaderboardState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLeagueLeaderboardState DefaultInstanceForType {
        get { return global::com.golf.proto.CCLeagueLeaderboardState.DefaultInstance; }
      }
      
      public override CCLeagueLeaderboardState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLeagueLeaderboardState) {
          return MergeFrom((CCLeagueLeaderboardState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLeagueLeaderboardState other) {
        if (other == global::com.golf.proto.CCLeagueLeaderboardState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWeekId) {
          WeekId = other.WeekId;
        }
        if (other.HasLeagueLv) {
          LeagueLv = other.LeagueLv;
        }
        if (other.HasLeagueLvFinal) {
          LeagueLvFinal = other.LeagueLvFinal;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasIsValid) {
          IsValid = other.IsValid;
        }
        if (other.HasRoomId) {
          RoomId = other.RoomId;
        }
        if (other.HasNpwCnt) {
          NpwCnt = other.NpwCnt;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasNeedShow) {
          NeedShow = other.NeedShow;
        }
        if (other.HasScoreSaved) {
          ScoreSaved = other.ScoreSaved;
        }
        if (other.HasIsRewarded) {
          IsRewarded = other.IsRewarded;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLeagueLeaderboardStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLeagueLeaderboardStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWeekId = input.ReadInt32(ref result.weekId_);
              break;
            }
            case 16: {
              result.hasLeagueLv = input.ReadInt32(ref result.leagueLv_);
              break;
            }
            case 24: {
              result.hasLeagueLvFinal = input.ReadInt32(ref result.leagueLvFinal_);
              break;
            }
            case 32: {
              result.hasRank = input.ReadInt32(ref result.rank_);
              break;
            }
            case 40: {
              result.hasIsValid = input.ReadBool(ref result.isValid_);
              break;
            }
            case 50: {
              result.hasRoomId = input.ReadString(ref result.roomId_);
              break;
            }
            case 56: {
              result.hasNpwCnt = input.ReadInt32(ref result.npwCnt_);
              break;
            }
            case 64: {
              result.hasScore = input.ReadInt64(ref result.score_);
              break;
            }
            case 72: {
              result.hasNeedShow = input.ReadBool(ref result.needShow_);
              break;
            }
            case 80: {
              result.hasScoreSaved = input.ReadBool(ref result.scoreSaved_);
              break;
            }
            case 88: {
              result.hasIsRewarded = input.ReadBool(ref result.isRewarded_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasWeekId {
        get { return result.hasWeekId; }
      }
      public int WeekId {
        get { return result.WeekId; }
        set { SetWeekId(value); }
      }
      public Builder SetWeekId(int value) {
        PrepareBuilder();
        result.hasWeekId = true;
        result.weekId_ = value;
        return this;
      }
      public Builder ClearWeekId() {
        PrepareBuilder();
        result.hasWeekId = false;
        result.weekId_ = 0;
        return this;
      }
      
      public bool HasLeagueLv {
        get { return result.hasLeagueLv; }
      }
      public int LeagueLv {
        get { return result.LeagueLv; }
        set { SetLeagueLv(value); }
      }
      public Builder SetLeagueLv(int value) {
        PrepareBuilder();
        result.hasLeagueLv = true;
        result.leagueLv_ = value;
        return this;
      }
      public Builder ClearLeagueLv() {
        PrepareBuilder();
        result.hasLeagueLv = false;
        result.leagueLv_ = 0;
        return this;
      }
      
      public bool HasLeagueLvFinal {
        get { return result.hasLeagueLvFinal; }
      }
      public int LeagueLvFinal {
        get { return result.LeagueLvFinal; }
        set { SetLeagueLvFinal(value); }
      }
      public Builder SetLeagueLvFinal(int value) {
        PrepareBuilder();
        result.hasLeagueLvFinal = true;
        result.leagueLvFinal_ = value;
        return this;
      }
      public Builder ClearLeagueLvFinal() {
        PrepareBuilder();
        result.hasLeagueLvFinal = false;
        result.leagueLvFinal_ = 0;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      public int Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(int value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      public bool HasIsValid {
        get { return result.hasIsValid; }
      }
      public bool IsValid {
        get { return result.IsValid; }
        set { SetIsValid(value); }
      }
      public Builder SetIsValid(bool value) {
        PrepareBuilder();
        result.hasIsValid = true;
        result.isValid_ = value;
        return this;
      }
      public Builder ClearIsValid() {
        PrepareBuilder();
        result.hasIsValid = false;
        result.isValid_ = false;
        return this;
      }
      
      public bool HasRoomId {
        get { return result.hasRoomId; }
      }
      public string RoomId {
        get { return result.RoomId; }
        set { SetRoomId(value); }
      }
      public Builder SetRoomId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder ClearRoomId() {
        PrepareBuilder();
        result.hasRoomId = false;
        result.roomId_ = "";
        return this;
      }
      
      public bool HasNpwCnt {
        get { return result.hasNpwCnt; }
      }
      public int NpwCnt {
        get { return result.NpwCnt; }
        set { SetNpwCnt(value); }
      }
      public Builder SetNpwCnt(int value) {
        PrepareBuilder();
        result.hasNpwCnt = true;
        result.npwCnt_ = value;
        return this;
      }
      public Builder ClearNpwCnt() {
        PrepareBuilder();
        result.hasNpwCnt = false;
        result.npwCnt_ = 0;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public long Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(long value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0L;
        return this;
      }
      
      public bool HasNeedShow {
        get { return result.hasNeedShow; }
      }
      public bool NeedShow {
        get { return result.NeedShow; }
        set { SetNeedShow(value); }
      }
      public Builder SetNeedShow(bool value) {
        PrepareBuilder();
        result.hasNeedShow = true;
        result.needShow_ = value;
        return this;
      }
      public Builder ClearNeedShow() {
        PrepareBuilder();
        result.hasNeedShow = false;
        result.needShow_ = false;
        return this;
      }
      
      public bool HasScoreSaved {
        get { return result.hasScoreSaved; }
      }
      public bool ScoreSaved {
        get { return result.ScoreSaved; }
        set { SetScoreSaved(value); }
      }
      public Builder SetScoreSaved(bool value) {
        PrepareBuilder();
        result.hasScoreSaved = true;
        result.scoreSaved_ = value;
        return this;
      }
      public Builder ClearScoreSaved() {
        PrepareBuilder();
        result.hasScoreSaved = false;
        result.scoreSaved_ = false;
        return this;
      }
      
      public bool HasIsRewarded {
        get { return result.hasIsRewarded; }
      }
      public bool IsRewarded {
        get { return result.IsRewarded; }
        set { SetIsRewarded(value); }
      }
      public Builder SetIsRewarded(bool value) {
        PrepareBuilder();
        result.hasIsRewarded = true;
        result.isRewarded_ = value;
        return this;
      }
      public Builder ClearIsRewarded() {
        PrepareBuilder();
        result.hasIsRewarded = false;
        result.isRewarded_ = false;
        return this;
      }
    }
    static CCLeagueLeaderboardState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCWorldLeaderboardState : pb::GeneratedMessageLite<CCWorldLeaderboardState, CCWorldLeaderboardState.Builder> {
    private CCWorldLeaderboardState() { }
    private static readonly CCWorldLeaderboardState defaultInstance = new CCWorldLeaderboardState().MakeReadOnly();
    private static readonly string[] _cCWorldLeaderboardStateFieldNames = new string[] { "is_rewarded", "is_valid", "rank", "score", "score_saved", "user_cnt", "week_id" };
    private static readonly uint[] _cCWorldLeaderboardStateFieldTags = new uint[] { 56, 24, 16, 32, 48, 40, 8 };
    public static CCWorldLeaderboardState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCWorldLeaderboardState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCWorldLeaderboardState ThisMessage {
      get { return this; }
    }
    
    public const int WeekIdFieldNumber = 1;
    private bool hasWeekId;
    private int weekId_;
    public bool HasWeekId {
      get { return hasWeekId; }
    }
    public int WeekId {
      get { return weekId_; }
    }
    
    public const int RankFieldNumber = 2;
    private bool hasRank;
    private int rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    public int Rank {
      get { return rank_; }
    }
    
    public const int IsValidFieldNumber = 3;
    private bool hasIsValid;
    private bool isValid_;
    public bool HasIsValid {
      get { return hasIsValid; }
    }
    public bool IsValid {
      get { return isValid_; }
    }
    
    public const int ScoreFieldNumber = 4;
    private bool hasScore;
    private long score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public long Score {
      get { return score_; }
    }
    
    public const int UserCntFieldNumber = 5;
    private bool hasUserCnt;
    private long userCnt_;
    public bool HasUserCnt {
      get { return hasUserCnt; }
    }
    public long UserCnt {
      get { return userCnt_; }
    }
    
    public const int ScoreSavedFieldNumber = 6;
    private bool hasScoreSaved;
    private bool scoreSaved_;
    public bool HasScoreSaved {
      get { return hasScoreSaved; }
    }
    public bool ScoreSaved {
      get { return scoreSaved_; }
    }
    
    public const int IsRewardedFieldNumber = 7;
    private bool hasIsRewarded;
    private bool isRewarded_;
    public bool HasIsRewarded {
      get { return hasIsRewarded; }
    }
    public bool IsRewarded {
      get { return isRewarded_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCWorldLeaderboardStateFieldNames;
      if (hasWeekId) {
        output.WriteInt32(1, field_names[6], WeekId);
      }
      if (hasRank) {
        output.WriteInt32(2, field_names[2], Rank);
      }
      if (hasIsValid) {
        output.WriteBool(3, field_names[1], IsValid);
      }
      if (hasScore) {
        output.WriteInt64(4, field_names[3], Score);
      }
      if (hasUserCnt) {
        output.WriteInt64(5, field_names[5], UserCnt);
      }
      if (hasScoreSaved) {
        output.WriteBool(6, field_names[4], ScoreSaved);
      }
      if (hasIsRewarded) {
        output.WriteBool(7, field_names[0], IsRewarded);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasWeekId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, WeekId);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Rank);
      }
      if (hasIsValid) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, IsValid);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, Score);
      }
      if (hasUserCnt) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, UserCnt);
      }
      if (hasScoreSaved) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, ScoreSaved);
      }
      if (hasIsRewarded) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, IsRewarded);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasWeekId) hash ^= weekId_.GetHashCode();
      if (hasRank) hash ^= rank_.GetHashCode();
      if (hasIsValid) hash ^= isValid_.GetHashCode();
      if (hasScore) hash ^= score_.GetHashCode();
      if (hasUserCnt) hash ^= userCnt_.GetHashCode();
      if (hasScoreSaved) hash ^= scoreSaved_.GetHashCode();
      if (hasIsRewarded) hash ^= isRewarded_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCWorldLeaderboardState other = obj as CCWorldLeaderboardState;
      if (other == null) return false;
      if (hasWeekId != other.hasWeekId || (hasWeekId && !weekId_.Equals(other.weekId_))) return false;
      if (hasRank != other.hasRank || (hasRank && !rank_.Equals(other.rank_))) return false;
      if (hasIsValid != other.hasIsValid || (hasIsValid && !isValid_.Equals(other.isValid_))) return false;
      if (hasScore != other.hasScore || (hasScore && !score_.Equals(other.score_))) return false;
      if (hasUserCnt != other.hasUserCnt || (hasUserCnt && !userCnt_.Equals(other.userCnt_))) return false;
      if (hasScoreSaved != other.hasScoreSaved || (hasScoreSaved && !scoreSaved_.Equals(other.scoreSaved_))) return false;
      if (hasIsRewarded != other.hasIsRewarded || (hasIsRewarded && !isRewarded_.Equals(other.isRewarded_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("week_id", hasWeekId, weekId_, writer);
      PrintField("rank", hasRank, rank_, writer);
      PrintField("is_valid", hasIsValid, isValid_, writer);
      PrintField("score", hasScore, score_, writer);
      PrintField("user_cnt", hasUserCnt, userCnt_, writer);
      PrintField("score_saved", hasScoreSaved, scoreSaved_, writer);
      PrintField("is_rewarded", hasIsRewarded, isRewarded_, writer);
    }
    #endregion
    
    public static CCWorldLeaderboardState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWorldLeaderboardState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCWorldLeaderboardState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCWorldLeaderboardState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCWorldLeaderboardState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCWorldLeaderboardState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCWorldLeaderboardState result;
      
      private CCWorldLeaderboardState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCWorldLeaderboardState original = result;
          result = new CCWorldLeaderboardState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCWorldLeaderboardState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCWorldLeaderboardState DefaultInstanceForType {
        get { return global::com.golf.proto.CCWorldLeaderboardState.DefaultInstance; }
      }
      
      public override CCWorldLeaderboardState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCWorldLeaderboardState) {
          return MergeFrom((CCWorldLeaderboardState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCWorldLeaderboardState other) {
        if (other == global::com.golf.proto.CCWorldLeaderboardState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWeekId) {
          WeekId = other.WeekId;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasIsValid) {
          IsValid = other.IsValid;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasUserCnt) {
          UserCnt = other.UserCnt;
        }
        if (other.HasScoreSaved) {
          ScoreSaved = other.ScoreSaved;
        }
        if (other.HasIsRewarded) {
          IsRewarded = other.IsRewarded;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCWorldLeaderboardStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCWorldLeaderboardStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWeekId = input.ReadInt32(ref result.weekId_);
              break;
            }
            case 16: {
              result.hasRank = input.ReadInt32(ref result.rank_);
              break;
            }
            case 24: {
              result.hasIsValid = input.ReadBool(ref result.isValid_);
              break;
            }
            case 32: {
              result.hasScore = input.ReadInt64(ref result.score_);
              break;
            }
            case 40: {
              result.hasUserCnt = input.ReadInt64(ref result.userCnt_);
              break;
            }
            case 48: {
              result.hasScoreSaved = input.ReadBool(ref result.scoreSaved_);
              break;
            }
            case 56: {
              result.hasIsRewarded = input.ReadBool(ref result.isRewarded_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasWeekId {
        get { return result.hasWeekId; }
      }
      public int WeekId {
        get { return result.WeekId; }
        set { SetWeekId(value); }
      }
      public Builder SetWeekId(int value) {
        PrepareBuilder();
        result.hasWeekId = true;
        result.weekId_ = value;
        return this;
      }
      public Builder ClearWeekId() {
        PrepareBuilder();
        result.hasWeekId = false;
        result.weekId_ = 0;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      public int Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(int value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      public bool HasIsValid {
        get { return result.hasIsValid; }
      }
      public bool IsValid {
        get { return result.IsValid; }
        set { SetIsValid(value); }
      }
      public Builder SetIsValid(bool value) {
        PrepareBuilder();
        result.hasIsValid = true;
        result.isValid_ = value;
        return this;
      }
      public Builder ClearIsValid() {
        PrepareBuilder();
        result.hasIsValid = false;
        result.isValid_ = false;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public long Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(long value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0L;
        return this;
      }
      
      public bool HasUserCnt {
        get { return result.hasUserCnt; }
      }
      public long UserCnt {
        get { return result.UserCnt; }
        set { SetUserCnt(value); }
      }
      public Builder SetUserCnt(long value) {
        PrepareBuilder();
        result.hasUserCnt = true;
        result.userCnt_ = value;
        return this;
      }
      public Builder ClearUserCnt() {
        PrepareBuilder();
        result.hasUserCnt = false;
        result.userCnt_ = 0L;
        return this;
      }
      
      public bool HasScoreSaved {
        get { return result.hasScoreSaved; }
      }
      public bool ScoreSaved {
        get { return result.ScoreSaved; }
        set { SetScoreSaved(value); }
      }
      public Builder SetScoreSaved(bool value) {
        PrepareBuilder();
        result.hasScoreSaved = true;
        result.scoreSaved_ = value;
        return this;
      }
      public Builder ClearScoreSaved() {
        PrepareBuilder();
        result.hasScoreSaved = false;
        result.scoreSaved_ = false;
        return this;
      }
      
      public bool HasIsRewarded {
        get { return result.hasIsRewarded; }
      }
      public bool IsRewarded {
        get { return result.IsRewarded; }
        set { SetIsRewarded(value); }
      }
      public Builder SetIsRewarded(bool value) {
        PrepareBuilder();
        result.hasIsRewarded = true;
        result.isRewarded_ = value;
        return this;
      }
      public Builder ClearIsRewarded() {
        PrepareBuilder();
        result.hasIsRewarded = false;
        result.isRewarded_ = false;
        return this;
      }
    }
    static CCWorldLeaderboardState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCFriendLeaderboardItem : pb::GeneratedMessageLite<CCFriendLeaderboardItem, CCFriendLeaderboardItem.Builder> {
    private CCFriendLeaderboardItem() { }
    private static readonly CCFriendLeaderboardItem defaultInstance = new CCFriendLeaderboardItem().MakeReadOnly();
    private static readonly string[] _cCFriendLeaderboardItemFieldNames = new string[] { "s_user_data" };
    private static readonly uint[] _cCFriendLeaderboardItemFieldTags = new uint[] { 10 };
    public static CCFriendLeaderboardItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCFriendLeaderboardItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCFriendLeaderboardItem ThisMessage {
      get { return this; }
    }
    
    public const int SUserDataFieldNumber = 1;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCFriendLeaderboardItemFieldNames;
      if (hasSUserData) {
        output.WriteMessage(1, field_names[0], SUserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, SUserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCFriendLeaderboardItem other = obj as CCFriendLeaderboardItem;
      if (other == null) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
    }
    #endregion
    
    public static CCFriendLeaderboardItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFriendLeaderboardItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCFriendLeaderboardItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCFriendLeaderboardItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCFriendLeaderboardItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCFriendLeaderboardItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCFriendLeaderboardItem result;
      
      private CCFriendLeaderboardItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCFriendLeaderboardItem original = result;
          result = new CCFriendLeaderboardItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCFriendLeaderboardItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCFriendLeaderboardItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCFriendLeaderboardItem.DefaultInstance; }
      }
      
      public override CCFriendLeaderboardItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCFriendLeaderboardItem) {
          return MergeFrom((CCFriendLeaderboardItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCFriendLeaderboardItem other) {
        if (other == global::com.golf.proto.CCFriendLeaderboardItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCFriendLeaderboardItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCFriendLeaderboardItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
    }
    static CCFriendLeaderboardItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCWorldLeaderboardItem : pb::GeneratedMessageLite<CCWorldLeaderboardItem, CCWorldLeaderboardItem.Builder> {
    private CCWorldLeaderboardItem() { }
    private static readonly CCWorldLeaderboardItem defaultInstance = new CCWorldLeaderboardItem().MakeReadOnly();
    private static readonly string[] _cCWorldLeaderboardItemFieldNames = new string[] { "s_user_data", "score" };
    private static readonly uint[] _cCWorldLeaderboardItemFieldTags = new uint[] { 10, 16 };
    public static CCWorldLeaderboardItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCWorldLeaderboardItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCWorldLeaderboardItem ThisMessage {
      get { return this; }
    }
    
    public const int SUserDataFieldNumber = 1;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public const int ScoreFieldNumber = 2;
    private bool hasScore;
    private long score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public long Score {
      get { return score_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCWorldLeaderboardItemFieldNames;
      if (hasSUserData) {
        output.WriteMessage(1, field_names[0], SUserData);
      }
      if (hasScore) {
        output.WriteInt64(2, field_names[1], Score);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, SUserData);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Score);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      if (hasScore) hash ^= score_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCWorldLeaderboardItem other = obj as CCWorldLeaderboardItem;
      if (other == null) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      if (hasScore != other.hasScore || (hasScore && !score_.Equals(other.score_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
      PrintField("score", hasScore, score_, writer);
    }
    #endregion
    
    public static CCWorldLeaderboardItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWorldLeaderboardItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCWorldLeaderboardItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCWorldLeaderboardItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCWorldLeaderboardItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCWorldLeaderboardItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCWorldLeaderboardItem result;
      
      private CCWorldLeaderboardItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCWorldLeaderboardItem original = result;
          result = new CCWorldLeaderboardItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCWorldLeaderboardItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCWorldLeaderboardItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCWorldLeaderboardItem.DefaultInstance; }
      }
      
      public override CCWorldLeaderboardItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCWorldLeaderboardItem) {
          return MergeFrom((CCWorldLeaderboardItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCWorldLeaderboardItem other) {
        if (other == global::com.golf.proto.CCWorldLeaderboardItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCWorldLeaderboardItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCWorldLeaderboardItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasScore = input.ReadInt64(ref result.score_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public long Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(long value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0L;
        return this;
      }
    }
    static CCWorldLeaderboardItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLeagueLeaderboardItem : pb::GeneratedMessageLite<CCLeagueLeaderboardItem, CCLeagueLeaderboardItem.Builder> {
    private CCLeagueLeaderboardItem() { }
    private static readonly CCLeagueLeaderboardItem defaultInstance = new CCLeagueLeaderboardItem().MakeReadOnly();
    private static readonly string[] _cCLeagueLeaderboardItemFieldNames = new string[] { "s_user_data", "score" };
    private static readonly uint[] _cCLeagueLeaderboardItemFieldTags = new uint[] { 10, 16 };
    public static CCLeagueLeaderboardItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLeagueLeaderboardItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLeagueLeaderboardItem ThisMessage {
      get { return this; }
    }
    
    public const int SUserDataFieldNumber = 1;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public const int ScoreFieldNumber = 2;
    private bool hasScore;
    private long score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public long Score {
      get { return score_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLeagueLeaderboardItemFieldNames;
      if (hasSUserData) {
        output.WriteMessage(1, field_names[0], SUserData);
      }
      if (hasScore) {
        output.WriteInt64(2, field_names[1], Score);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, SUserData);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Score);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      if (hasScore) hash ^= score_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLeagueLeaderboardItem other = obj as CCLeagueLeaderboardItem;
      if (other == null) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      if (hasScore != other.hasScore || (hasScore && !score_.Equals(other.score_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
      PrintField("score", hasScore, score_, writer);
    }
    #endregion
    
    public static CCLeagueLeaderboardItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeagueLeaderboardItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLeagueLeaderboardItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLeagueLeaderboardItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLeagueLeaderboardItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLeagueLeaderboardItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLeagueLeaderboardItem result;
      
      private CCLeagueLeaderboardItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLeagueLeaderboardItem original = result;
          result = new CCLeagueLeaderboardItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLeagueLeaderboardItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLeagueLeaderboardItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCLeagueLeaderboardItem.DefaultInstance; }
      }
      
      public override CCLeagueLeaderboardItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLeagueLeaderboardItem) {
          return MergeFrom((CCLeagueLeaderboardItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLeagueLeaderboardItem other) {
        if (other == global::com.golf.proto.CCLeagueLeaderboardItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLeagueLeaderboardItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLeagueLeaderboardItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasScore = input.ReadInt64(ref result.score_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public long Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(long value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0L;
        return this;
      }
    }
    static CCLeagueLeaderboardItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLeaderboardStatus : pb::GeneratedMessageLite<CCLeaderboardStatus, CCLeaderboardStatus.Builder> {
    private CCLeaderboardStatus() { }
    private static readonly CCLeaderboardStatus defaultInstance = new CCLeaderboardStatus().MakeReadOnly();
    private static readonly string[] _cCLeaderboardStatusFieldNames = new string[] { "cw_league_state", "cw_world_state", "lw_league_state", "lw_world_state" };
    private static readonly uint[] _cCLeaderboardStatusFieldTags = new uint[] { 18, 34, 10, 26 };
    public static CCLeaderboardStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLeaderboardStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLeaderboardStatus ThisMessage {
      get { return this; }
    }
    
    public const int LwLeagueStateFieldNumber = 1;
    private bool hasLwLeagueState;
    private global::com.golf.proto.CCLeagueLeaderboardState lwLeagueState_;
    public bool HasLwLeagueState {
      get { return hasLwLeagueState; }
    }
    public global::com.golf.proto.CCLeagueLeaderboardState LwLeagueState {
      get { return lwLeagueState_ ?? global::com.golf.proto.CCLeagueLeaderboardState.DefaultInstance; }
    }
    
    public const int CwLeagueStateFieldNumber = 2;
    private bool hasCwLeagueState;
    private global::com.golf.proto.CCLeagueLeaderboardState cwLeagueState_;
    public bool HasCwLeagueState {
      get { return hasCwLeagueState; }
    }
    public global::com.golf.proto.CCLeagueLeaderboardState CwLeagueState {
      get { return cwLeagueState_ ?? global::com.golf.proto.CCLeagueLeaderboardState.DefaultInstance; }
    }
    
    public const int LwWorldStateFieldNumber = 3;
    private bool hasLwWorldState;
    private global::com.golf.proto.CCWorldLeaderboardState lwWorldState_;
    public bool HasLwWorldState {
      get { return hasLwWorldState; }
    }
    public global::com.golf.proto.CCWorldLeaderboardState LwWorldState {
      get { return lwWorldState_ ?? global::com.golf.proto.CCWorldLeaderboardState.DefaultInstance; }
    }
    
    public const int CwWorldStateFieldNumber = 4;
    private bool hasCwWorldState;
    private global::com.golf.proto.CCWorldLeaderboardState cwWorldState_;
    public bool HasCwWorldState {
      get { return hasCwWorldState; }
    }
    public global::com.golf.proto.CCWorldLeaderboardState CwWorldState {
      get { return cwWorldState_ ?? global::com.golf.proto.CCWorldLeaderboardState.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLeaderboardStatusFieldNames;
      if (hasLwLeagueState) {
        output.WriteMessage(1, field_names[2], LwLeagueState);
      }
      if (hasCwLeagueState) {
        output.WriteMessage(2, field_names[0], CwLeagueState);
      }
      if (hasLwWorldState) {
        output.WriteMessage(3, field_names[3], LwWorldState);
      }
      if (hasCwWorldState) {
        output.WriteMessage(4, field_names[1], CwWorldState);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLwLeagueState) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, LwLeagueState);
      }
      if (hasCwLeagueState) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, CwLeagueState);
      }
      if (hasLwWorldState) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, LwWorldState);
      }
      if (hasCwWorldState) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, CwWorldState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasLwLeagueState) hash ^= lwLeagueState_.GetHashCode();
      if (hasCwLeagueState) hash ^= cwLeagueState_.GetHashCode();
      if (hasLwWorldState) hash ^= lwWorldState_.GetHashCode();
      if (hasCwWorldState) hash ^= cwWorldState_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLeaderboardStatus other = obj as CCLeaderboardStatus;
      if (other == null) return false;
      if (hasLwLeagueState != other.hasLwLeagueState || (hasLwLeagueState && !lwLeagueState_.Equals(other.lwLeagueState_))) return false;
      if (hasCwLeagueState != other.hasCwLeagueState || (hasCwLeagueState && !cwLeagueState_.Equals(other.cwLeagueState_))) return false;
      if (hasLwWorldState != other.hasLwWorldState || (hasLwWorldState && !lwWorldState_.Equals(other.lwWorldState_))) return false;
      if (hasCwWorldState != other.hasCwWorldState || (hasCwWorldState && !cwWorldState_.Equals(other.cwWorldState_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("lw_league_state", hasLwLeagueState, lwLeagueState_, writer);
      PrintField("cw_league_state", hasCwLeagueState, cwLeagueState_, writer);
      PrintField("lw_world_state", hasLwWorldState, lwWorldState_, writer);
      PrintField("cw_world_state", hasCwWorldState, cwWorldState_, writer);
    }
    #endregion
    
    public static CCLeaderboardStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeaderboardStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeaderboardStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeaderboardStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeaderboardStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeaderboardStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLeaderboardStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLeaderboardStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLeaderboardStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeaderboardStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLeaderboardStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLeaderboardStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLeaderboardStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLeaderboardStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLeaderboardStatus result;
      
      private CCLeaderboardStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLeaderboardStatus original = result;
          result = new CCLeaderboardStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLeaderboardStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLeaderboardStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCLeaderboardStatus.DefaultInstance; }
      }
      
      public override CCLeaderboardStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLeaderboardStatus) {
          return MergeFrom((CCLeaderboardStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLeaderboardStatus other) {
        if (other == global::com.golf.proto.CCLeaderboardStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLwLeagueState) {
          MergeLwLeagueState(other.LwLeagueState);
        }
        if (other.HasCwLeagueState) {
          MergeCwLeagueState(other.CwLeagueState);
        }
        if (other.HasLwWorldState) {
          MergeLwWorldState(other.LwWorldState);
        }
        if (other.HasCwWorldState) {
          MergeCwWorldState(other.CwWorldState);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLeaderboardStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLeaderboardStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCLeagueLeaderboardState.Builder subBuilder = global::com.golf.proto.CCLeagueLeaderboardState.CreateBuilder();
              if (result.hasLwLeagueState) {
                subBuilder.MergeFrom(LwLeagueState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LwLeagueState = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCLeagueLeaderboardState.Builder subBuilder = global::com.golf.proto.CCLeagueLeaderboardState.CreateBuilder();
              if (result.hasCwLeagueState) {
                subBuilder.MergeFrom(CwLeagueState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CwLeagueState = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCWorldLeaderboardState.Builder subBuilder = global::com.golf.proto.CCWorldLeaderboardState.CreateBuilder();
              if (result.hasLwWorldState) {
                subBuilder.MergeFrom(LwWorldState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LwWorldState = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCWorldLeaderboardState.Builder subBuilder = global::com.golf.proto.CCWorldLeaderboardState.CreateBuilder();
              if (result.hasCwWorldState) {
                subBuilder.MergeFrom(CwWorldState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CwWorldState = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasLwLeagueState {
       get { return result.hasLwLeagueState; }
      }
      public global::com.golf.proto.CCLeagueLeaderboardState LwLeagueState {
        get { return result.LwLeagueState; }
        set { SetLwLeagueState(value); }
      }
      public Builder SetLwLeagueState(global::com.golf.proto.CCLeagueLeaderboardState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLwLeagueState = true;
        result.lwLeagueState_ = value;
        return this;
      }
      public Builder SetLwLeagueState(global::com.golf.proto.CCLeagueLeaderboardState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLwLeagueState = true;
        result.lwLeagueState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLwLeagueState(global::com.golf.proto.CCLeagueLeaderboardState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLwLeagueState &&
            result.lwLeagueState_ != global::com.golf.proto.CCLeagueLeaderboardState.DefaultInstance) {
            result.lwLeagueState_ = global::com.golf.proto.CCLeagueLeaderboardState.CreateBuilder(result.lwLeagueState_).MergeFrom(value).BuildPartial();
        } else {
          result.lwLeagueState_ = value;
        }
        result.hasLwLeagueState = true;
        return this;
      }
      public Builder ClearLwLeagueState() {
        PrepareBuilder();
        result.hasLwLeagueState = false;
        result.lwLeagueState_ = null;
        return this;
      }
      
      public bool HasCwLeagueState {
       get { return result.hasCwLeagueState; }
      }
      public global::com.golf.proto.CCLeagueLeaderboardState CwLeagueState {
        get { return result.CwLeagueState; }
        set { SetCwLeagueState(value); }
      }
      public Builder SetCwLeagueState(global::com.golf.proto.CCLeagueLeaderboardState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCwLeagueState = true;
        result.cwLeagueState_ = value;
        return this;
      }
      public Builder SetCwLeagueState(global::com.golf.proto.CCLeagueLeaderboardState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCwLeagueState = true;
        result.cwLeagueState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCwLeagueState(global::com.golf.proto.CCLeagueLeaderboardState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCwLeagueState &&
            result.cwLeagueState_ != global::com.golf.proto.CCLeagueLeaderboardState.DefaultInstance) {
            result.cwLeagueState_ = global::com.golf.proto.CCLeagueLeaderboardState.CreateBuilder(result.cwLeagueState_).MergeFrom(value).BuildPartial();
        } else {
          result.cwLeagueState_ = value;
        }
        result.hasCwLeagueState = true;
        return this;
      }
      public Builder ClearCwLeagueState() {
        PrepareBuilder();
        result.hasCwLeagueState = false;
        result.cwLeagueState_ = null;
        return this;
      }
      
      public bool HasLwWorldState {
       get { return result.hasLwWorldState; }
      }
      public global::com.golf.proto.CCWorldLeaderboardState LwWorldState {
        get { return result.LwWorldState; }
        set { SetLwWorldState(value); }
      }
      public Builder SetLwWorldState(global::com.golf.proto.CCWorldLeaderboardState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLwWorldState = true;
        result.lwWorldState_ = value;
        return this;
      }
      public Builder SetLwWorldState(global::com.golf.proto.CCWorldLeaderboardState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLwWorldState = true;
        result.lwWorldState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLwWorldState(global::com.golf.proto.CCWorldLeaderboardState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLwWorldState &&
            result.lwWorldState_ != global::com.golf.proto.CCWorldLeaderboardState.DefaultInstance) {
            result.lwWorldState_ = global::com.golf.proto.CCWorldLeaderboardState.CreateBuilder(result.lwWorldState_).MergeFrom(value).BuildPartial();
        } else {
          result.lwWorldState_ = value;
        }
        result.hasLwWorldState = true;
        return this;
      }
      public Builder ClearLwWorldState() {
        PrepareBuilder();
        result.hasLwWorldState = false;
        result.lwWorldState_ = null;
        return this;
      }
      
      public bool HasCwWorldState {
       get { return result.hasCwWorldState; }
      }
      public global::com.golf.proto.CCWorldLeaderboardState CwWorldState {
        get { return result.CwWorldState; }
        set { SetCwWorldState(value); }
      }
      public Builder SetCwWorldState(global::com.golf.proto.CCWorldLeaderboardState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCwWorldState = true;
        result.cwWorldState_ = value;
        return this;
      }
      public Builder SetCwWorldState(global::com.golf.proto.CCWorldLeaderboardState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCwWorldState = true;
        result.cwWorldState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCwWorldState(global::com.golf.proto.CCWorldLeaderboardState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCwWorldState &&
            result.cwWorldState_ != global::com.golf.proto.CCWorldLeaderboardState.DefaultInstance) {
            result.cwWorldState_ = global::com.golf.proto.CCWorldLeaderboardState.CreateBuilder(result.cwWorldState_).MergeFrom(value).BuildPartial();
        } else {
          result.cwWorldState_ = value;
        }
        result.hasCwWorldState = true;
        return this;
      }
      public Builder ClearCwWorldState() {
        PrepareBuilder();
        result.hasCwWorldState = false;
        result.cwWorldState_ = null;
        return this;
      }
    }
    static CCLeaderboardStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetLeaderboardRequest : pb::GeneratedMessageLite<CCGetLeaderboardRequest, CCGetLeaderboardRequest.Builder> {
    private CCGetLeaderboardRequest() { }
    private static readonly CCGetLeaderboardRequest defaultInstance = new CCGetLeaderboardRequest().MakeReadOnly();
    private static readonly string[] _cCGetLeaderboardRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetLeaderboardRequestFieldTags = new uint[] { 10 };
    public static CCGetLeaderboardRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetLeaderboardRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetLeaderboardRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetLeaderboardRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetLeaderboardRequest other = obj as CCGetLeaderboardRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetLeaderboardRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetLeaderboardRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetLeaderboardRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetLeaderboardRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetLeaderboardRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetLeaderboardRequest result;
      
      private CCGetLeaderboardRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetLeaderboardRequest original = result;
          result = new CCGetLeaderboardRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetLeaderboardRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetLeaderboardRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetLeaderboardRequest.DefaultInstance; }
      }
      
      public override CCGetLeaderboardRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetLeaderboardRequest) {
          return MergeFrom((CCGetLeaderboardRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetLeaderboardRequest other) {
        if (other == global::com.golf.proto.CCGetLeaderboardRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetLeaderboardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetLeaderboardRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetLeaderboardRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetLeaderboardResponse : pb::GeneratedMessageLite<CCGetLeaderboardResponse, CCGetLeaderboardResponse.Builder> {
    private CCGetLeaderboardResponse() { }
    private static readonly CCGetLeaderboardResponse defaultInstance = new CCGetLeaderboardResponse().MakeReadOnly();
    private static readonly string[] _cCGetLeaderboardResponseFieldNames = new string[] { "end_time", "friend_items", "league_items", "lw_league_items", "result", "self_world_rank", "status", "world_items" };
    private static readonly uint[] _cCGetLeaderboardResponseFieldTags = new uint[] { 48, 26, 42, 66, 8, 56, 18, 34 };
    public static CCGetLeaderboardResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetLeaderboardResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetLeaderboardResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCLeaderboardStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCLeaderboardStatus Status {
      get { return status_ ?? global::com.golf.proto.CCLeaderboardStatus.DefaultInstance; }
    }
    
    public const int FriendItemsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCFriendLeaderboardItem> friendItems_ = new pbc::PopsicleList<global::com.golf.proto.CCFriendLeaderboardItem>();
    public scg::IList<global::com.golf.proto.CCFriendLeaderboardItem> FriendItemsList {
      get { return friendItems_; }
    }
    public int FriendItemsCount {
      get { return friendItems_.Count; }
    }
    public global::com.golf.proto.CCFriendLeaderboardItem GetFriendItems(int index) {
      return friendItems_[index];
    }
    
    public const int WorldItemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCWorldLeaderboardItem> worldItems_ = new pbc::PopsicleList<global::com.golf.proto.CCWorldLeaderboardItem>();
    public scg::IList<global::com.golf.proto.CCWorldLeaderboardItem> WorldItemsList {
      get { return worldItems_; }
    }
    public int WorldItemsCount {
      get { return worldItems_.Count; }
    }
    public global::com.golf.proto.CCWorldLeaderboardItem GetWorldItems(int index) {
      return worldItems_[index];
    }
    
    public const int LeagueItemsFieldNumber = 5;
    private pbc::PopsicleList<global::com.golf.proto.CCLeagueLeaderboardItem> leagueItems_ = new pbc::PopsicleList<global::com.golf.proto.CCLeagueLeaderboardItem>();
    public scg::IList<global::com.golf.proto.CCLeagueLeaderboardItem> LeagueItemsList {
      get { return leagueItems_; }
    }
    public int LeagueItemsCount {
      get { return leagueItems_.Count; }
    }
    public global::com.golf.proto.CCLeagueLeaderboardItem GetLeagueItems(int index) {
      return leagueItems_[index];
    }
    
    public const int EndTimeFieldNumber = 6;
    private bool hasEndTime;
    private long endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public long EndTime {
      get { return endTime_; }
    }
    
    public const int SelfWorldRankFieldNumber = 7;
    private bool hasSelfWorldRank;
    private long selfWorldRank_;
    public bool HasSelfWorldRank {
      get { return hasSelfWorldRank; }
    }
    public long SelfWorldRank {
      get { return selfWorldRank_; }
    }
    
    public const int LwLeagueItemsFieldNumber = 8;
    private pbc::PopsicleList<global::com.golf.proto.CCLeagueLeaderboardItem> lwLeagueItems_ = new pbc::PopsicleList<global::com.golf.proto.CCLeagueLeaderboardItem>();
    public scg::IList<global::com.golf.proto.CCLeagueLeaderboardItem> LwLeagueItemsList {
      get { return lwLeagueItems_; }
    }
    public int LwLeagueItemsCount {
      get { return lwLeagueItems_.Count; }
    }
    public global::com.golf.proto.CCLeagueLeaderboardItem GetLwLeagueItems(int index) {
      return lwLeagueItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetLeaderboardResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[4], Result);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[6], Status);
      }
      if (friendItems_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], friendItems_);
      }
      if (worldItems_.Count > 0) {
        output.WriteMessageArray(4, field_names[7], worldItems_);
      }
      if (leagueItems_.Count > 0) {
        output.WriteMessageArray(5, field_names[2], leagueItems_);
      }
      if (hasEndTime) {
        output.WriteInt64(6, field_names[0], EndTime);
      }
      if (hasSelfWorldRank) {
        output.WriteInt64(7, field_names[5], SelfWorldRank);
      }
      if (lwLeagueItems_.Count > 0) {
        output.WriteMessageArray(8, field_names[3], lwLeagueItems_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      foreach (global::com.golf.proto.CCFriendLeaderboardItem element in FriendItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::com.golf.proto.CCWorldLeaderboardItem element in WorldItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      foreach (global::com.golf.proto.CCLeagueLeaderboardItem element in LeagueItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      if (hasEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, EndTime);
      }
      if (hasSelfWorldRank) {
        size += pb::CodedOutputStream.ComputeInt64Size(7, SelfWorldRank);
      }
      foreach (global::com.golf.proto.CCLeagueLeaderboardItem element in LwLeagueItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      foreach(global::com.golf.proto.CCFriendLeaderboardItem i in friendItems_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCWorldLeaderboardItem i in worldItems_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCLeagueLeaderboardItem i in leagueItems_)
        hash ^= i.GetHashCode();
      if (hasEndTime) hash ^= endTime_.GetHashCode();
      if (hasSelfWorldRank) hash ^= selfWorldRank_.GetHashCode();
      foreach(global::com.golf.proto.CCLeagueLeaderboardItem i in lwLeagueItems_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetLeaderboardResponse other = obj as CCGetLeaderboardResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      if(friendItems_.Count != other.friendItems_.Count) return false;
      for(int ix=0; ix < friendItems_.Count; ix++)
        if(!friendItems_[ix].Equals(other.friendItems_[ix])) return false;
      if(worldItems_.Count != other.worldItems_.Count) return false;
      for(int ix=0; ix < worldItems_.Count; ix++)
        if(!worldItems_[ix].Equals(other.worldItems_[ix])) return false;
      if(leagueItems_.Count != other.leagueItems_.Count) return false;
      for(int ix=0; ix < leagueItems_.Count; ix++)
        if(!leagueItems_[ix].Equals(other.leagueItems_[ix])) return false;
      if (hasEndTime != other.hasEndTime || (hasEndTime && !endTime_.Equals(other.endTime_))) return false;
      if (hasSelfWorldRank != other.hasSelfWorldRank || (hasSelfWorldRank && !selfWorldRank_.Equals(other.selfWorldRank_))) return false;
      if(lwLeagueItems_.Count != other.lwLeagueItems_.Count) return false;
      for(int ix=0; ix < lwLeagueItems_.Count; ix++)
        if(!lwLeagueItems_[ix].Equals(other.lwLeagueItems_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", hasStatus, status_, writer);
      PrintField("friend_items", friendItems_, writer);
      PrintField("world_items", worldItems_, writer);
      PrintField("league_items", leagueItems_, writer);
      PrintField("end_time", hasEndTime, endTime_, writer);
      PrintField("self_world_rank", hasSelfWorldRank, selfWorldRank_, writer);
      PrintField("lw_league_items", lwLeagueItems_, writer);
    }
    #endregion
    
    public static CCGetLeaderboardResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetLeaderboardResponse MakeReadOnly() {
      friendItems_.MakeReadOnly();
      worldItems_.MakeReadOnly();
      leagueItems_.MakeReadOnly();
      lwLeagueItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetLeaderboardResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetLeaderboardResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetLeaderboardResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetLeaderboardResponse result;
      
      private CCGetLeaderboardResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetLeaderboardResponse original = result;
          result = new CCGetLeaderboardResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetLeaderboardResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetLeaderboardResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetLeaderboardResponse.DefaultInstance; }
      }
      
      public override CCGetLeaderboardResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetLeaderboardResponse) {
          return MergeFrom((CCGetLeaderboardResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetLeaderboardResponse other) {
        if (other == global::com.golf.proto.CCGetLeaderboardResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        if (other.friendItems_.Count != 0) {
          result.friendItems_.Add(other.friendItems_);
        }
        if (other.worldItems_.Count != 0) {
          result.worldItems_.Add(other.worldItems_);
        }
        if (other.leagueItems_.Count != 0) {
          result.leagueItems_.Add(other.leagueItems_);
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        if (other.HasSelfWorldRank) {
          SelfWorldRank = other.SelfWorldRank;
        }
        if (other.lwLeagueItems_.Count != 0) {
          result.lwLeagueItems_.Add(other.lwLeagueItems_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetLeaderboardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetLeaderboardResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCLeaderboardStatus.Builder subBuilder = global::com.golf.proto.CCLeaderboardStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.friendItems_, global::com.golf.proto.CCFriendLeaderboardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.worldItems_, global::com.golf.proto.CCWorldLeaderboardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.leagueItems_, global::com.golf.proto.CCLeagueLeaderboardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 48: {
              result.hasEndTime = input.ReadInt64(ref result.endTime_);
              break;
            }
            case 56: {
              result.hasSelfWorldRank = input.ReadInt64(ref result.selfWorldRank_);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.lwLeagueItems_, global::com.golf.proto.CCLeagueLeaderboardItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCLeaderboardStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCLeaderboardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCLeaderboardStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCLeaderboardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCLeaderboardStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCLeaderboardStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCFriendLeaderboardItem> FriendItemsList {
        get { return PrepareBuilder().friendItems_; }
      }
      public int FriendItemsCount {
        get { return result.FriendItemsCount; }
      }
      public global::com.golf.proto.CCFriendLeaderboardItem GetFriendItems(int index) {
        return result.GetFriendItems(index);
      }
      public Builder SetFriendItems(int index, global::com.golf.proto.CCFriendLeaderboardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friendItems_[index] = value;
        return this;
      }
      public Builder SetFriendItems(int index, global::com.golf.proto.CCFriendLeaderboardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friendItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFriendItems(global::com.golf.proto.CCFriendLeaderboardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friendItems_.Add(value);
        return this;
      }
      public Builder AddFriendItems(global::com.golf.proto.CCFriendLeaderboardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friendItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFriendItems(scg::IEnumerable<global::com.golf.proto.CCFriendLeaderboardItem> values) {
        PrepareBuilder();
        result.friendItems_.Add(values);
        return this;
      }
      public Builder ClearFriendItems() {
        PrepareBuilder();
        result.friendItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCWorldLeaderboardItem> WorldItemsList {
        get { return PrepareBuilder().worldItems_; }
      }
      public int WorldItemsCount {
        get { return result.WorldItemsCount; }
      }
      public global::com.golf.proto.CCWorldLeaderboardItem GetWorldItems(int index) {
        return result.GetWorldItems(index);
      }
      public Builder SetWorldItems(int index, global::com.golf.proto.CCWorldLeaderboardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.worldItems_[index] = value;
        return this;
      }
      public Builder SetWorldItems(int index, global::com.golf.proto.CCWorldLeaderboardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.worldItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWorldItems(global::com.golf.proto.CCWorldLeaderboardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.worldItems_.Add(value);
        return this;
      }
      public Builder AddWorldItems(global::com.golf.proto.CCWorldLeaderboardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.worldItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWorldItems(scg::IEnumerable<global::com.golf.proto.CCWorldLeaderboardItem> values) {
        PrepareBuilder();
        result.worldItems_.Add(values);
        return this;
      }
      public Builder ClearWorldItems() {
        PrepareBuilder();
        result.worldItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCLeagueLeaderboardItem> LeagueItemsList {
        get { return PrepareBuilder().leagueItems_; }
      }
      public int LeagueItemsCount {
        get { return result.LeagueItemsCount; }
      }
      public global::com.golf.proto.CCLeagueLeaderboardItem GetLeagueItems(int index) {
        return result.GetLeagueItems(index);
      }
      public Builder SetLeagueItems(int index, global::com.golf.proto.CCLeagueLeaderboardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.leagueItems_[index] = value;
        return this;
      }
      public Builder SetLeagueItems(int index, global::com.golf.proto.CCLeagueLeaderboardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.leagueItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLeagueItems(global::com.golf.proto.CCLeagueLeaderboardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.leagueItems_.Add(value);
        return this;
      }
      public Builder AddLeagueItems(global::com.golf.proto.CCLeagueLeaderboardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.leagueItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLeagueItems(scg::IEnumerable<global::com.golf.proto.CCLeagueLeaderboardItem> values) {
        PrepareBuilder();
        result.leagueItems_.Add(values);
        return this;
      }
      public Builder ClearLeagueItems() {
        PrepareBuilder();
        result.leagueItems_.Clear();
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public long EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(long value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0L;
        return this;
      }
      
      public bool HasSelfWorldRank {
        get { return result.hasSelfWorldRank; }
      }
      public long SelfWorldRank {
        get { return result.SelfWorldRank; }
        set { SetSelfWorldRank(value); }
      }
      public Builder SetSelfWorldRank(long value) {
        PrepareBuilder();
        result.hasSelfWorldRank = true;
        result.selfWorldRank_ = value;
        return this;
      }
      public Builder ClearSelfWorldRank() {
        PrepareBuilder();
        result.hasSelfWorldRank = false;
        result.selfWorldRank_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCLeagueLeaderboardItem> LwLeagueItemsList {
        get { return PrepareBuilder().lwLeagueItems_; }
      }
      public int LwLeagueItemsCount {
        get { return result.LwLeagueItemsCount; }
      }
      public global::com.golf.proto.CCLeagueLeaderboardItem GetLwLeagueItems(int index) {
        return result.GetLwLeagueItems(index);
      }
      public Builder SetLwLeagueItems(int index, global::com.golf.proto.CCLeagueLeaderboardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lwLeagueItems_[index] = value;
        return this;
      }
      public Builder SetLwLeagueItems(int index, global::com.golf.proto.CCLeagueLeaderboardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.lwLeagueItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLwLeagueItems(global::com.golf.proto.CCLeagueLeaderboardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.lwLeagueItems_.Add(value);
        return this;
      }
      public Builder AddLwLeagueItems(global::com.golf.proto.CCLeagueLeaderboardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.lwLeagueItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLwLeagueItems(scg::IEnumerable<global::com.golf.proto.CCLeagueLeaderboardItem> values) {
        PrepareBuilder();
        result.lwLeagueItems_.Add(values);
        return this;
      }
      public Builder ClearLwLeagueItems() {
        PrepareBuilder();
        result.lwLeagueItems_.Clear();
        return this;
      }
    }
    static CCGetLeaderboardResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetLeaderboardStatusRequest : pb::GeneratedMessageLite<CCGetLeaderboardStatusRequest, CCGetLeaderboardStatusRequest.Builder> {
    private CCGetLeaderboardStatusRequest() { }
    private static readonly CCGetLeaderboardStatusRequest defaultInstance = new CCGetLeaderboardStatusRequest().MakeReadOnly();
    private static readonly string[] _cCGetLeaderboardStatusRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetLeaderboardStatusRequestFieldTags = new uint[] { 10 };
    public static CCGetLeaderboardStatusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetLeaderboardStatusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetLeaderboardStatusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetLeaderboardStatusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetLeaderboardStatusRequest other = obj as CCGetLeaderboardStatusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetLeaderboardStatusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardStatusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetLeaderboardStatusRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetLeaderboardStatusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetLeaderboardStatusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetLeaderboardStatusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetLeaderboardStatusRequest result;
      
      private CCGetLeaderboardStatusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetLeaderboardStatusRequest original = result;
          result = new CCGetLeaderboardStatusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetLeaderboardStatusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetLeaderboardStatusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetLeaderboardStatusRequest.DefaultInstance; }
      }
      
      public override CCGetLeaderboardStatusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetLeaderboardStatusRequest) {
          return MergeFrom((CCGetLeaderboardStatusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetLeaderboardStatusRequest other) {
        if (other == global::com.golf.proto.CCGetLeaderboardStatusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetLeaderboardStatusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetLeaderboardStatusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetLeaderboardStatusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetLeaderboardStatusResponse : pb::GeneratedMessageLite<CCGetLeaderboardStatusResponse, CCGetLeaderboardStatusResponse.Builder> {
    private CCGetLeaderboardStatusResponse() { }
    private static readonly CCGetLeaderboardStatusResponse defaultInstance = new CCGetLeaderboardStatusResponse().MakeReadOnly();
    private static readonly string[] _cCGetLeaderboardStatusResponseFieldNames = new string[] { "base_data", "result", "status" };
    private static readonly uint[] _cCGetLeaderboardStatusResponseFieldTags = new uint[] { 26, 8, 18 };
    public static CCGetLeaderboardStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetLeaderboardStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetLeaderboardStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCLeaderboardStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCLeaderboardStatus Status {
      get { return status_ ?? global::com.golf.proto.CCLeaderboardStatus.DefaultInstance; }
    }
    
    public const int BaseDataFieldNumber = 3;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetLeaderboardStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[2], Status);
      }
      if (hasBaseData) {
        output.WriteMessage(3, field_names[0], BaseData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, BaseData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetLeaderboardStatusResponse other = obj as CCGetLeaderboardStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", hasStatus, status_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
    }
    #endregion
    
    public static CCGetLeaderboardStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetLeaderboardStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetLeaderboardStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetLeaderboardStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetLeaderboardStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetLeaderboardStatusResponse result;
      
      private CCGetLeaderboardStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetLeaderboardStatusResponse original = result;
          result = new CCGetLeaderboardStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetLeaderboardStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetLeaderboardStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetLeaderboardStatusResponse.DefaultInstance; }
      }
      
      public override CCGetLeaderboardStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetLeaderboardStatusResponse) {
          return MergeFrom((CCGetLeaderboardStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetLeaderboardStatusResponse other) {
        if (other == global::com.golf.proto.CCGetLeaderboardStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetLeaderboardStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetLeaderboardStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCLeaderboardStatus.Builder subBuilder = global::com.golf.proto.CCLeaderboardStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCLeaderboardStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCLeaderboardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCLeaderboardStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCLeaderboardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCLeaderboardStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCLeaderboardStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
    }
    static CCGetLeaderboardStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetLeaderboardRewardRequest : pb::GeneratedMessageLite<CCGetLeaderboardRewardRequest, CCGetLeaderboardRewardRequest.Builder> {
    private CCGetLeaderboardRewardRequest() { }
    private static readonly CCGetLeaderboardRewardRequest defaultInstance = new CCGetLeaderboardRewardRequest().MakeReadOnly();
    private static readonly string[] _cCGetLeaderboardRewardRequestFieldNames = new string[] { "id", "type" };
    private static readonly uint[] _cCGetLeaderboardRewardRequestFieldTags = new uint[] { 10, 16 };
    public static CCGetLeaderboardRewardRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetLeaderboardRewardRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetLeaderboardRewardRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetLeaderboardRewardRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[1], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetLeaderboardRewardRequest other = obj as CCGetLeaderboardRewardRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("type", hasType, type_, writer);
    }
    #endregion
    
    public static CCGetLeaderboardRewardRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetLeaderboardRewardRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetLeaderboardRewardRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetLeaderboardRewardRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetLeaderboardRewardRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetLeaderboardRewardRequest result;
      
      private CCGetLeaderboardRewardRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetLeaderboardRewardRequest original = result;
          result = new CCGetLeaderboardRewardRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetLeaderboardRewardRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetLeaderboardRewardRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetLeaderboardRewardRequest.DefaultInstance; }
      }
      
      public override CCGetLeaderboardRewardRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetLeaderboardRewardRequest) {
          return MergeFrom((CCGetLeaderboardRewardRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetLeaderboardRewardRequest other) {
        if (other == global::com.golf.proto.CCGetLeaderboardRewardRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetLeaderboardRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetLeaderboardRewardRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static CCGetLeaderboardRewardRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetLeaderboardRewardResponse : pb::GeneratedMessageLite<CCGetLeaderboardRewardResponse, CCGetLeaderboardRewardResponse.Builder> {
    private CCGetLeaderboardRewardResponse() { }
    private static readonly CCGetLeaderboardRewardResponse defaultInstance = new CCGetLeaderboardRewardResponse().MakeReadOnly();
    private static readonly string[] _cCGetLeaderboardRewardResponseFieldNames = new string[] { "result", "ritems", "status", "type", "user_data" };
    private static readonly uint[] _cCGetLeaderboardRewardResponseFieldTags = new uint[] { 8, 34, 26, 16, 42 };
    public static CCGetLeaderboardRewardResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetLeaderboardRewardResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetLeaderboardRewardResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int StatusFieldNumber = 3;
    private bool hasStatus;
    private global::com.golf.proto.CCLeaderboardStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCLeaderboardStatus Status {
      get { return status_ ?? global::com.golf.proto.CCLeaderboardStatus.DefaultInstance; }
    }
    
    public const int RitemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public const int UserDataFieldNumber = 5;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetLeaderboardRewardResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[3], Type);
      }
      if (hasStatus) {
        output.WriteMessage(3, field_names[2], Status);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], ritems_);
      }
      if (hasUserData) {
        output.WriteMessage(5, field_names[4], UserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Status);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, UserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetLeaderboardRewardResponse other = obj as CCGetLeaderboardRewardResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("status", hasStatus, status_, writer);
      PrintField("ritems", ritems_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
    }
    #endregion
    
    public static CCGetLeaderboardRewardResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetLeaderboardRewardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetLeaderboardRewardResponse MakeReadOnly() {
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetLeaderboardRewardResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetLeaderboardRewardResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetLeaderboardRewardResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetLeaderboardRewardResponse result;
      
      private CCGetLeaderboardRewardResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetLeaderboardRewardResponse original = result;
          result = new CCGetLeaderboardRewardResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetLeaderboardRewardResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetLeaderboardRewardResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetLeaderboardRewardResponse.DefaultInstance; }
      }
      
      public override CCGetLeaderboardRewardResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetLeaderboardRewardResponse) {
          return MergeFrom((CCGetLeaderboardRewardResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetLeaderboardRewardResponse other) {
        if (other == global::com.golf.proto.CCGetLeaderboardRewardResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetLeaderboardRewardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetLeaderboardRewardResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 26: {
              global::com.golf.proto.CCLeaderboardStatus.Builder subBuilder = global::com.golf.proto.CCLeaderboardStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCLeaderboardStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCLeaderboardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCLeaderboardStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCLeaderboardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCLeaderboardStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCLeaderboardStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
    }
    static CCGetLeaderboardRewardResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCLeaderboardResultShownRequest : pb::GeneratedMessageLite<CCLeaderboardResultShownRequest, CCLeaderboardResultShownRequest.Builder> {
    private CCLeaderboardResultShownRequest() { }
    private static readonly CCLeaderboardResultShownRequest defaultInstance = new CCLeaderboardResultShownRequest().MakeReadOnly();
    private static readonly string[] _cCLeaderboardResultShownRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCLeaderboardResultShownRequestFieldTags = new uint[] { 10 };
    public static CCLeaderboardResultShownRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCLeaderboardResultShownRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCLeaderboardResultShownRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCLeaderboardResultShownRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCLeaderboardResultShownRequest other = obj as CCLeaderboardResultShownRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCLeaderboardResultShownRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCLeaderboardResultShownRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCLeaderboardResultShownRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCLeaderboardResultShownRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCLeaderboardResultShownRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCLeaderboardResultShownRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCLeaderboardResultShownRequest result;
      
      private CCLeaderboardResultShownRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCLeaderboardResultShownRequest original = result;
          result = new CCLeaderboardResultShownRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCLeaderboardResultShownRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCLeaderboardResultShownRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCLeaderboardResultShownRequest.DefaultInstance; }
      }
      
      public override CCLeaderboardResultShownRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCLeaderboardResultShownRequest) {
          return MergeFrom((CCLeaderboardResultShownRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCLeaderboardResultShownRequest other) {
        if (other == global::com.golf.proto.CCLeaderboardResultShownRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCLeaderboardResultShownRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCLeaderboardResultShownRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCLeaderboardResultShownRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTournamentResultShownRequest : pb::GeneratedMessageLite<CCTournamentResultShownRequest, CCTournamentResultShownRequest.Builder> {
    private CCTournamentResultShownRequest() { }
    private static readonly CCTournamentResultShownRequest defaultInstance = new CCTournamentResultShownRequest().MakeReadOnly();
    private static readonly string[] _cCTournamentResultShownRequestFieldNames = new string[] { "id", "nth", "type" };
    private static readonly uint[] _cCTournamentResultShownRequestFieldTags = new uint[] { 10, 24, 16 };
    public static CCTournamentResultShownRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTournamentResultShownRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTournamentResultShownRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int NthFieldNumber = 3;
    private bool hasNth;
    private int nth_;
    public bool HasNth {
      get { return hasNth; }
    }
    public int Nth {
      get { return nth_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTournamentResultShownRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[2], Type);
      }
      if (hasNth) {
        output.WriteInt32(3, field_names[1], Nth);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      if (hasNth) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Nth);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasNth) hash ^= nth_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTournamentResultShownRequest other = obj as CCTournamentResultShownRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasNth != other.hasNth || (hasNth && !nth_.Equals(other.nth_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("nth", hasNth, nth_, writer);
    }
    #endregion
    
    public static CCTournamentResultShownRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTournamentResultShownRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTournamentResultShownRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTournamentResultShownRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTournamentResultShownRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTournamentResultShownRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTournamentResultShownRequest result;
      
      private CCTournamentResultShownRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTournamentResultShownRequest original = result;
          result = new CCTournamentResultShownRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTournamentResultShownRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTournamentResultShownRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCTournamentResultShownRequest.DefaultInstance; }
      }
      
      public override CCTournamentResultShownRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTournamentResultShownRequest) {
          return MergeFrom((CCTournamentResultShownRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTournamentResultShownRequest other) {
        if (other == global::com.golf.proto.CCTournamentResultShownRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasNth) {
          Nth = other.Nth;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTournamentResultShownRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTournamentResultShownRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasNth = input.ReadInt32(ref result.nth_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasNth {
        get { return result.hasNth; }
      }
      public int Nth {
        get { return result.Nth; }
        set { SetNth(value); }
      }
      public Builder SetNth(int value) {
        PrepareBuilder();
        result.hasNth = true;
        result.nth_ = value;
        return this;
      }
      public Builder ClearNth() {
        PrepareBuilder();
        result.hasNth = false;
        result.nth_ = 0;
        return this;
      }
    }
    static CCTournamentResultShownRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCHandleTimeBoxRequest : pb::GeneratedMessageLite<CCHandleTimeBoxRequest, CCHandleTimeBoxRequest.Builder> {
    private CCHandleTimeBoxRequest() { }
    private static readonly CCHandleTimeBoxRequest defaultInstance = new CCHandleTimeBoxRequest().MakeReadOnly();
    private static readonly string[] _cCHandleTimeBoxRequestFieldNames = new string[] { "id", "item", "loc_id", "op_type" };
    private static readonly uint[] _cCHandleTimeBoxRequestFieldTags = new uint[] { 10, 18, 32, 24 };
    public static CCHandleTimeBoxRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCHandleTimeBoxRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCHandleTimeBoxRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCItem Item {
      get { return item_ ?? global::com.golf.proto.CCItem.DefaultInstance; }
    }
    
    public const int OpTypeFieldNumber = 3;
    private bool hasOpType;
    private int opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    public int OpType {
      get { return opType_; }
    }
    
    public const int LocIdFieldNumber = 4;
    private bool hasLocId;
    private int locId_;
    public bool HasLocId {
      get { return hasLocId; }
    }
    public int LocId {
      get { return locId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCHandleTimeBoxRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[1], Item);
      }
      if (hasOpType) {
        output.WriteInt32(3, field_names[3], OpType);
      }
      if (hasLocId) {
        output.WriteInt32(4, field_names[2], LocId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasOpType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, OpType);
      }
      if (hasLocId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, LocId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasOpType) hash ^= opType_.GetHashCode();
      if (hasLocId) hash ^= locId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCHandleTimeBoxRequest other = obj as CCHandleTimeBoxRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasOpType != other.hasOpType || (hasOpType && !opType_.Equals(other.opType_))) return false;
      if (hasLocId != other.hasLocId || (hasLocId && !locId_.Equals(other.locId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item", hasItem, item_, writer);
      PrintField("op_type", hasOpType, opType_, writer);
      PrintField("loc_id", hasLocId, locId_, writer);
    }
    #endregion
    
    public static CCHandleTimeBoxRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHandleTimeBoxRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCHandleTimeBoxRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCHandleTimeBoxRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCHandleTimeBoxRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCHandleTimeBoxRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCHandleTimeBoxRequest result;
      
      private CCHandleTimeBoxRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCHandleTimeBoxRequest original = result;
          result = new CCHandleTimeBoxRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCHandleTimeBoxRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCHandleTimeBoxRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCHandleTimeBoxRequest.DefaultInstance; }
      }
      
      public override CCHandleTimeBoxRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCHandleTimeBoxRequest) {
          return MergeFrom((CCHandleTimeBoxRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCHandleTimeBoxRequest other) {
        if (other == global::com.golf.proto.CCHandleTimeBoxRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.HasLocId) {
          LocId = other.LocId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCHandleTimeBoxRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCHandleTimeBoxRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCItem.Builder subBuilder = global::com.golf.proto.CCItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasOpType = input.ReadInt32(ref result.opType_);
              break;
            }
            case 32: {
              result.hasLocId = input.ReadInt32(ref result.locId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      public int OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      public Builder SetOpType(int value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public bool HasLocId {
        get { return result.hasLocId; }
      }
      public int LocId {
        get { return result.LocId; }
        set { SetLocId(value); }
      }
      public Builder SetLocId(int value) {
        PrepareBuilder();
        result.hasLocId = true;
        result.locId_ = value;
        return this;
      }
      public Builder ClearLocId() {
        PrepareBuilder();
        result.hasLocId = false;
        result.locId_ = 0;
        return this;
      }
    }
    static CCHandleTimeBoxRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCHandleTimeBoxResponse : pb::GeneratedMessageLite<CCHandleTimeBoxResponse, CCHandleTimeBoxResponse.Builder> {
    private CCHandleTimeBoxResponse() { }
    private static readonly CCHandleTimeBoxResponse defaultInstance = new CCHandleTimeBoxResponse().MakeReadOnly();
    private static readonly string[] _cCHandleTimeBoxResponseFieldNames = new string[] { "op_type", "result", "ritems", "time_box_item", "user_data" };
    private static readonly uint[] _cCHandleTimeBoxResponseFieldTags = new uint[] { 24, 8, 34, 18, 42 };
    public static CCHandleTimeBoxResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCHandleTimeBoxResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCHandleTimeBoxResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int TimeBoxItemFieldNumber = 2;
    private bool hasTimeBoxItem;
    private global::com.golf.proto.CCTimeBoxItem timeBoxItem_;
    public bool HasTimeBoxItem {
      get { return hasTimeBoxItem; }
    }
    public global::com.golf.proto.CCTimeBoxItem TimeBoxItem {
      get { return timeBoxItem_ ?? global::com.golf.proto.CCTimeBoxItem.DefaultInstance; }
    }
    
    public const int OpTypeFieldNumber = 3;
    private bool hasOpType;
    private int opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    public int OpType {
      get { return opType_; }
    }
    
    public const int RitemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public const int UserDataFieldNumber = 5;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCHandleTimeBoxResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasTimeBoxItem) {
        output.WriteMessage(2, field_names[3], TimeBoxItem);
      }
      if (hasOpType) {
        output.WriteInt32(3, field_names[0], OpType);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(4, field_names[2], ritems_);
      }
      if (hasUserData) {
        output.WriteMessage(5, field_names[4], UserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasTimeBoxItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, TimeBoxItem);
      }
      if (hasOpType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, OpType);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, UserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasTimeBoxItem) hash ^= timeBoxItem_.GetHashCode();
      if (hasOpType) hash ^= opType_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCHandleTimeBoxResponse other = obj as CCHandleTimeBoxResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasTimeBoxItem != other.hasTimeBoxItem || (hasTimeBoxItem && !timeBoxItem_.Equals(other.timeBoxItem_))) return false;
      if (hasOpType != other.hasOpType || (hasOpType && !opType_.Equals(other.opType_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("time_box_item", hasTimeBoxItem, timeBoxItem_, writer);
      PrintField("op_type", hasOpType, opType_, writer);
      PrintField("ritems", ritems_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
    }
    #endregion
    
    public static CCHandleTimeBoxResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHandleTimeBoxResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCHandleTimeBoxResponse MakeReadOnly() {
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCHandleTimeBoxResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCHandleTimeBoxResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCHandleTimeBoxResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCHandleTimeBoxResponse result;
      
      private CCHandleTimeBoxResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCHandleTimeBoxResponse original = result;
          result = new CCHandleTimeBoxResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCHandleTimeBoxResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCHandleTimeBoxResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCHandleTimeBoxResponse.DefaultInstance; }
      }
      
      public override CCHandleTimeBoxResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCHandleTimeBoxResponse) {
          return MergeFrom((CCHandleTimeBoxResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCHandleTimeBoxResponse other) {
        if (other == global::com.golf.proto.CCHandleTimeBoxResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasTimeBoxItem) {
          MergeTimeBoxItem(other.TimeBoxItem);
        }
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCHandleTimeBoxResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCHandleTimeBoxResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCTimeBoxItem.Builder subBuilder = global::com.golf.proto.CCTimeBoxItem.CreateBuilder();
              if (result.hasTimeBoxItem) {
                subBuilder.MergeFrom(TimeBoxItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TimeBoxItem = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasOpType = input.ReadInt32(ref result.opType_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasTimeBoxItem {
       get { return result.hasTimeBoxItem; }
      }
      public global::com.golf.proto.CCTimeBoxItem TimeBoxItem {
        get { return result.TimeBoxItem; }
        set { SetTimeBoxItem(value); }
      }
      public Builder SetTimeBoxItem(global::com.golf.proto.CCTimeBoxItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeBoxItem = true;
        result.timeBoxItem_ = value;
        return this;
      }
      public Builder SetTimeBoxItem(global::com.golf.proto.CCTimeBoxItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTimeBoxItem = true;
        result.timeBoxItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTimeBoxItem(global::com.golf.proto.CCTimeBoxItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTimeBoxItem &&
            result.timeBoxItem_ != global::com.golf.proto.CCTimeBoxItem.DefaultInstance) {
            result.timeBoxItem_ = global::com.golf.proto.CCTimeBoxItem.CreateBuilder(result.timeBoxItem_).MergeFrom(value).BuildPartial();
        } else {
          result.timeBoxItem_ = value;
        }
        result.hasTimeBoxItem = true;
        return this;
      }
      public Builder ClearTimeBoxItem() {
        PrepareBuilder();
        result.hasTimeBoxItem = false;
        result.timeBoxItem_ = null;
        return this;
      }
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      public int OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      public Builder SetOpType(int value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
    }
    static CCHandleTimeBoxResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCEquipClubRequest : pb::GeneratedMessageLite<CCEquipClubRequest, CCEquipClubRequest.Builder> {
    private CCEquipClubRequest() { }
    private static readonly CCEquipClubRequest defaultInstance = new CCEquipClubRequest().MakeReadOnly();
    private static readonly string[] _cCEquipClubRequestFieldNames = new string[] { "club_id", "id" };
    private static readonly uint[] _cCEquipClubRequestFieldTags = new uint[] { 16, 10 };
    public static CCEquipClubRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCEquipClubRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCEquipClubRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ClubIdFieldNumber = 2;
    private bool hasClubId;
    private int clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public int ClubId {
      get { return clubId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCEquipClubRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasClubId) {
        output.WriteInt32(2, field_names[0], ClubId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasClubId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ClubId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasClubId) hash ^= clubId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCEquipClubRequest other = obj as CCEquipClubRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasClubId != other.hasClubId || (hasClubId && !clubId_.Equals(other.clubId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("club_id", hasClubId, clubId_, writer);
    }
    #endregion
    
    public static CCEquipClubRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCEquipClubRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCEquipClubRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCEquipClubRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCEquipClubRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCEquipClubRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCEquipClubRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCEquipClubRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCEquipClubRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCEquipClubRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCEquipClubRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCEquipClubRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCEquipClubRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCEquipClubRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCEquipClubRequest result;
      
      private CCEquipClubRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCEquipClubRequest original = result;
          result = new CCEquipClubRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCEquipClubRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCEquipClubRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCEquipClubRequest.DefaultInstance; }
      }
      
      public override CCEquipClubRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCEquipClubRequest) {
          return MergeFrom((CCEquipClubRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCEquipClubRequest other) {
        if (other == global::com.golf.proto.CCEquipClubRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCEquipClubRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCEquipClubRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasClubId = input.ReadInt32(ref result.clubId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public int ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(int value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0;
        return this;
      }
    }
    static CCEquipClubRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCEquipClubResponse : pb::GeneratedMessageLite<CCEquipClubResponse, CCEquipClubResponse.Builder> {
    private CCEquipClubResponse() { }
    private static readonly CCEquipClubResponse defaultInstance = new CCEquipClubResponse().MakeReadOnly();
    private static readonly string[] _cCEquipClubResponseFieldNames = new string[] { "base_data", "result" };
    private static readonly uint[] _cCEquipClubResponseFieldTags = new uint[] { 18, 8 };
    public static CCEquipClubResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCEquipClubResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCEquipClubResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int BaseDataFieldNumber = 2;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCEquipClubResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasBaseData) {
        output.WriteMessage(2, field_names[0], BaseData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BaseData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCEquipClubResponse other = obj as CCEquipClubResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
    }
    #endregion
    
    public static CCEquipClubResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCEquipClubResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCEquipClubResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCEquipClubResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCEquipClubResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCEquipClubResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCEquipClubResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCEquipClubResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCEquipClubResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCEquipClubResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCEquipClubResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCEquipClubResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCEquipClubResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCEquipClubResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCEquipClubResponse result;
      
      private CCEquipClubResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCEquipClubResponse original = result;
          result = new CCEquipClubResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCEquipClubResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCEquipClubResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCEquipClubResponse.DefaultInstance; }
      }
      
      public override CCEquipClubResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCEquipClubResponse) {
          return MergeFrom((CCEquipClubResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCEquipClubResponse other) {
        if (other == global::com.golf.proto.CCEquipClubResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCEquipClubResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCEquipClubResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
    }
    static CCEquipClubResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUpgradeClubRequest : pb::GeneratedMessageLite<CCUpgradeClubRequest, CCUpgradeClubRequest.Builder> {
    private CCUpgradeClubRequest() { }
    private static readonly CCUpgradeClubRequest defaultInstance = new CCUpgradeClubRequest().MakeReadOnly();
    private static readonly string[] _cCUpgradeClubRequestFieldNames = new string[] { "club_id", "id" };
    private static readonly uint[] _cCUpgradeClubRequestFieldTags = new uint[] { 16, 10 };
    public static CCUpgradeClubRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUpgradeClubRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUpgradeClubRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ClubIdFieldNumber = 2;
    private bool hasClubId;
    private int clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public int ClubId {
      get { return clubId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUpgradeClubRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasClubId) {
        output.WriteInt32(2, field_names[0], ClubId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasClubId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ClubId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasClubId) hash ^= clubId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUpgradeClubRequest other = obj as CCUpgradeClubRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasClubId != other.hasClubId || (hasClubId && !clubId_.Equals(other.clubId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("club_id", hasClubId, clubId_, writer);
    }
    #endregion
    
    public static CCUpgradeClubRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpgradeClubRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUpgradeClubRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUpgradeClubRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUpgradeClubRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUpgradeClubRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUpgradeClubRequest result;
      
      private CCUpgradeClubRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUpgradeClubRequest original = result;
          result = new CCUpgradeClubRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUpgradeClubRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUpgradeClubRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCUpgradeClubRequest.DefaultInstance; }
      }
      
      public override CCUpgradeClubRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUpgradeClubRequest) {
          return MergeFrom((CCUpgradeClubRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUpgradeClubRequest other) {
        if (other == global::com.golf.proto.CCUpgradeClubRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUpgradeClubRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUpgradeClubRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasClubId = input.ReadInt32(ref result.clubId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public int ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(int value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0;
        return this;
      }
    }
    static CCUpgradeClubRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUpgradeClubResponse : pb::GeneratedMessageLite<CCUpgradeClubResponse, CCUpgradeClubResponse.Builder> {
    private CCUpgradeClubResponse() { }
    private static readonly CCUpgradeClubResponse defaultInstance = new CCUpgradeClubResponse().MakeReadOnly();
    private static readonly string[] _cCUpgradeClubResponseFieldNames = new string[] { "club_id", "result", "user_data" };
    private static readonly uint[] _cCUpgradeClubResponseFieldTags = new uint[] { 24, 8, 18 };
    public static CCUpgradeClubResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUpgradeClubResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUpgradeClubResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int UserDataFieldNumber = 2;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int ClubIdFieldNumber = 3;
    private bool hasClubId;
    private int clubId_;
    public bool HasClubId {
      get { return hasClubId; }
    }
    public int ClubId {
      get { return clubId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUpgradeClubResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasUserData) {
        output.WriteMessage(2, field_names[2], UserData);
      }
      if (hasClubId) {
        output.WriteInt32(3, field_names[0], ClubId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserData);
      }
      if (hasClubId) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, ClubId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      if (hasClubId) hash ^= clubId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUpgradeClubResponse other = obj as CCUpgradeClubResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if (hasClubId != other.hasClubId || (hasClubId && !clubId_.Equals(other.clubId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("club_id", hasClubId, clubId_, writer);
    }
    #endregion
    
    public static CCUpgradeClubResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpgradeClubResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUpgradeClubResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUpgradeClubResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUpgradeClubResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUpgradeClubResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUpgradeClubResponse result;
      
      private CCUpgradeClubResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUpgradeClubResponse original = result;
          result = new CCUpgradeClubResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUpgradeClubResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUpgradeClubResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCUpgradeClubResponse.DefaultInstance; }
      }
      
      public override CCUpgradeClubResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUpgradeClubResponse) {
          return MergeFrom((CCUpgradeClubResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUpgradeClubResponse other) {
        if (other == global::com.golf.proto.CCUpgradeClubResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.HasClubId) {
          ClubId = other.ClubId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUpgradeClubResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUpgradeClubResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasClubId = input.ReadInt32(ref result.clubId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public bool HasClubId {
        get { return result.hasClubId; }
      }
      public int ClubId {
        get { return result.ClubId; }
        set { SetClubId(value); }
      }
      public Builder SetClubId(int value) {
        PrepareBuilder();
        result.hasClubId = true;
        result.clubId_ = value;
        return this;
      }
      public Builder ClearClubId() {
        PrepareBuilder();
        result.hasClubId = false;
        result.clubId_ = 0;
        return this;
      }
    }
    static CCUpgradeClubResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCEquipBallRequest : pb::GeneratedMessageLite<CCEquipBallRequest, CCEquipBallRequest.Builder> {
    private CCEquipBallRequest() { }
    private static readonly CCEquipBallRequest defaultInstance = new CCEquipBallRequest().MakeReadOnly();
    private static readonly string[] _cCEquipBallRequestFieldNames = new string[] { "ball_id", "id" };
    private static readonly uint[] _cCEquipBallRequestFieldTags = new uint[] { 16, 10 };
    public static CCEquipBallRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCEquipBallRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCEquipBallRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int BallIdFieldNumber = 2;
    private bool hasBallId;
    private int ballId_;
    public bool HasBallId {
      get { return hasBallId; }
    }
    public int BallId {
      get { return ballId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCEquipBallRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasBallId) {
        output.WriteInt32(2, field_names[0], BallId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasBallId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, BallId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasBallId) hash ^= ballId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCEquipBallRequest other = obj as CCEquipBallRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasBallId != other.hasBallId || (hasBallId && !ballId_.Equals(other.ballId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("ball_id", hasBallId, ballId_, writer);
    }
    #endregion
    
    public static CCEquipBallRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCEquipBallRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCEquipBallRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCEquipBallRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCEquipBallRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCEquipBallRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCEquipBallRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCEquipBallRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCEquipBallRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCEquipBallRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCEquipBallRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCEquipBallRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCEquipBallRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCEquipBallRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCEquipBallRequest result;
      
      private CCEquipBallRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCEquipBallRequest original = result;
          result = new CCEquipBallRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCEquipBallRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCEquipBallRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCEquipBallRequest.DefaultInstance; }
      }
      
      public override CCEquipBallRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCEquipBallRequest) {
          return MergeFrom((CCEquipBallRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCEquipBallRequest other) {
        if (other == global::com.golf.proto.CCEquipBallRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasBallId) {
          BallId = other.BallId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCEquipBallRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCEquipBallRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasBallId = input.ReadInt32(ref result.ballId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasBallId {
        get { return result.hasBallId; }
      }
      public int BallId {
        get { return result.BallId; }
        set { SetBallId(value); }
      }
      public Builder SetBallId(int value) {
        PrepareBuilder();
        result.hasBallId = true;
        result.ballId_ = value;
        return this;
      }
      public Builder ClearBallId() {
        PrepareBuilder();
        result.hasBallId = false;
        result.ballId_ = 0;
        return this;
      }
    }
    static CCEquipBallRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCEquipBallResponse : pb::GeneratedMessageLite<CCEquipBallResponse, CCEquipBallResponse.Builder> {
    private CCEquipBallResponse() { }
    private static readonly CCEquipBallResponse defaultInstance = new CCEquipBallResponse().MakeReadOnly();
    private static readonly string[] _cCEquipBallResponseFieldNames = new string[] { "asset_data", "base_data", "result" };
    private static readonly uint[] _cCEquipBallResponseFieldTags = new uint[] { 26, 18, 8 };
    public static CCEquipBallResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCEquipBallResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCEquipBallResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int BaseDataFieldNumber = 2;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public const int AssetDataFieldNumber = 3;
    private bool hasAssetData;
    private global::com.golf.proto.CCAssetData assetData_;
    public bool HasAssetData {
      get { return hasAssetData; }
    }
    public global::com.golf.proto.CCAssetData AssetData {
      get { return assetData_ ?? global::com.golf.proto.CCAssetData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCEquipBallResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[2], Result);
      }
      if (hasBaseData) {
        output.WriteMessage(2, field_names[1], BaseData);
      }
      if (hasAssetData) {
        output.WriteMessage(3, field_names[0], AssetData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BaseData);
      }
      if (hasAssetData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, AssetData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      if (hasAssetData) hash ^= assetData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCEquipBallResponse other = obj as CCEquipBallResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      if (hasAssetData != other.hasAssetData || (hasAssetData && !assetData_.Equals(other.assetData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
      PrintField("asset_data", hasAssetData, assetData_, writer);
    }
    #endregion
    
    public static CCEquipBallResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCEquipBallResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCEquipBallResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCEquipBallResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCEquipBallResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCEquipBallResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCEquipBallResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCEquipBallResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCEquipBallResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCEquipBallResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCEquipBallResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCEquipBallResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCEquipBallResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCEquipBallResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCEquipBallResponse result;
      
      private CCEquipBallResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCEquipBallResponse original = result;
          result = new CCEquipBallResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCEquipBallResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCEquipBallResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCEquipBallResponse.DefaultInstance; }
      }
      
      public override CCEquipBallResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCEquipBallResponse) {
          return MergeFrom((CCEquipBallResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCEquipBallResponse other) {
        if (other == global::com.golf.proto.CCEquipBallResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        if (other.HasAssetData) {
          MergeAssetData(other.AssetData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCEquipBallResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCEquipBallResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCAssetData.Builder subBuilder = global::com.golf.proto.CCAssetData.CreateBuilder();
              if (result.hasAssetData) {
                subBuilder.MergeFrom(AssetData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AssetData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
      
      public bool HasAssetData {
       get { return result.hasAssetData; }
      }
      public global::com.golf.proto.CCAssetData AssetData {
        get { return result.AssetData; }
        set { SetAssetData(value); }
      }
      public Builder SetAssetData(global::com.golf.proto.CCAssetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAssetData = true;
        result.assetData_ = value;
        return this;
      }
      public Builder SetAssetData(global::com.golf.proto.CCAssetData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAssetData = true;
        result.assetData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAssetData(global::com.golf.proto.CCAssetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAssetData &&
            result.assetData_ != global::com.golf.proto.CCAssetData.DefaultInstance) {
            result.assetData_ = global::com.golf.proto.CCAssetData.CreateBuilder(result.assetData_).MergeFrom(value).BuildPartial();
        } else {
          result.assetData_ = value;
        }
        result.hasAssetData = true;
        return this;
      }
      public Builder ClearAssetData() {
        PrepareBuilder();
        result.hasAssetData = false;
        result.assetData_ = null;
        return this;
      }
    }
    static CCEquipBallResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSelectBallRequest : pb::GeneratedMessageLite<CCSelectBallRequest, CCSelectBallRequest.Builder> {
    private CCSelectBallRequest() { }
    private static readonly CCSelectBallRequest defaultInstance = new CCSelectBallRequest().MakeReadOnly();
    private static readonly string[] _cCSelectBallRequestFieldNames = new string[] { "ball_id", "id", "time" };
    private static readonly uint[] _cCSelectBallRequestFieldTags = new uint[] { 16, 10, 24 };
    public static CCSelectBallRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSelectBallRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSelectBallRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int BallIdFieldNumber = 2;
    private bool hasBallId;
    private int ballId_;
    public bool HasBallId {
      get { return hasBallId; }
    }
    public int BallId {
      get { return ballId_; }
    }
    
    public const int TimeFieldNumber = 3;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSelectBallRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasBallId) {
        output.WriteInt32(2, field_names[0], BallId);
      }
      if (hasTime) {
        output.WriteInt64(3, field_names[2], Time);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasBallId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, BallId);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Time);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasBallId) hash ^= ballId_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSelectBallRequest other = obj as CCSelectBallRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasBallId != other.hasBallId || (hasBallId && !ballId_.Equals(other.ballId_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("ball_id", hasBallId, ballId_, writer);
      PrintField("time", hasTime, time_, writer);
    }
    #endregion
    
    public static CCSelectBallRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectBallRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectBallRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectBallRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSelectBallRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSelectBallRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectBallRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSelectBallRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSelectBallRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSelectBallRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSelectBallRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSelectBallRequest result;
      
      private CCSelectBallRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSelectBallRequest original = result;
          result = new CCSelectBallRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSelectBallRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSelectBallRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSelectBallRequest.DefaultInstance; }
      }
      
      public override CCSelectBallRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSelectBallRequest) {
          return MergeFrom((CCSelectBallRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSelectBallRequest other) {
        if (other == global::com.golf.proto.CCSelectBallRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasBallId) {
          BallId = other.BallId;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSelectBallRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSelectBallRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasBallId = input.ReadInt32(ref result.ballId_);
              break;
            }
            case 24: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasBallId {
        get { return result.hasBallId; }
      }
      public int BallId {
        get { return result.BallId; }
        set { SetBallId(value); }
      }
      public Builder SetBallId(int value) {
        PrepareBuilder();
        result.hasBallId = true;
        result.ballId_ = value;
        return this;
      }
      public Builder ClearBallId() {
        PrepareBuilder();
        result.hasBallId = false;
        result.ballId_ = 0;
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
    }
    static CCSelectBallRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSelectBallResponse : pb::GeneratedMessageLite<CCSelectBallResponse, CCSelectBallResponse.Builder> {
    private CCSelectBallResponse() { }
    private static readonly CCSelectBallResponse defaultInstance = new CCSelectBallResponse().MakeReadOnly();
    private static readonly string[] _cCSelectBallResponseFieldNames = new string[] { "asset_data", "base_data", "result", "select_ball_state" };
    private static readonly uint[] _cCSelectBallResponseFieldTags = new uint[] { 26, 18, 8, 34 };
    public static CCSelectBallResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSelectBallResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSelectBallResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int BaseDataFieldNumber = 2;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public const int AssetDataFieldNumber = 3;
    private bool hasAssetData;
    private global::com.golf.proto.CCAssetData assetData_;
    public bool HasAssetData {
      get { return hasAssetData; }
    }
    public global::com.golf.proto.CCAssetData AssetData {
      get { return assetData_ ?? global::com.golf.proto.CCAssetData.DefaultInstance; }
    }
    
    public const int SelectBallStateFieldNumber = 4;
    private bool hasSelectBallState;
    private global::com.golf.proto.CCSelectBallState selectBallState_;
    public bool HasSelectBallState {
      get { return hasSelectBallState; }
    }
    public global::com.golf.proto.CCSelectBallState SelectBallState {
      get { return selectBallState_ ?? global::com.golf.proto.CCSelectBallState.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSelectBallResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[2], Result);
      }
      if (hasBaseData) {
        output.WriteMessage(2, field_names[1], BaseData);
      }
      if (hasAssetData) {
        output.WriteMessage(3, field_names[0], AssetData);
      }
      if (hasSelectBallState) {
        output.WriteMessage(4, field_names[3], SelectBallState);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BaseData);
      }
      if (hasAssetData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, AssetData);
      }
      if (hasSelectBallState) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, SelectBallState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      if (hasAssetData) hash ^= assetData_.GetHashCode();
      if (hasSelectBallState) hash ^= selectBallState_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSelectBallResponse other = obj as CCSelectBallResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      if (hasAssetData != other.hasAssetData || (hasAssetData && !assetData_.Equals(other.assetData_))) return false;
      if (hasSelectBallState != other.hasSelectBallState || (hasSelectBallState && !selectBallState_.Equals(other.selectBallState_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
      PrintField("asset_data", hasAssetData, assetData_, writer);
      PrintField("select_ball_state", hasSelectBallState, selectBallState_, writer);
    }
    #endregion
    
    public static CCSelectBallResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectBallResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectBallResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectBallResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSelectBallResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSelectBallResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectBallResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSelectBallResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSelectBallResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSelectBallResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSelectBallResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSelectBallResponse result;
      
      private CCSelectBallResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSelectBallResponse original = result;
          result = new CCSelectBallResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSelectBallResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSelectBallResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCSelectBallResponse.DefaultInstance; }
      }
      
      public override CCSelectBallResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSelectBallResponse) {
          return MergeFrom((CCSelectBallResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSelectBallResponse other) {
        if (other == global::com.golf.proto.CCSelectBallResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        if (other.HasAssetData) {
          MergeAssetData(other.AssetData);
        }
        if (other.HasSelectBallState) {
          MergeSelectBallState(other.SelectBallState);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSelectBallResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSelectBallResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCAssetData.Builder subBuilder = global::com.golf.proto.CCAssetData.CreateBuilder();
              if (result.hasAssetData) {
                subBuilder.MergeFrom(AssetData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AssetData = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCSelectBallState.Builder subBuilder = global::com.golf.proto.CCSelectBallState.CreateBuilder();
              if (result.hasSelectBallState) {
                subBuilder.MergeFrom(SelectBallState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SelectBallState = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
      
      public bool HasAssetData {
       get { return result.hasAssetData; }
      }
      public global::com.golf.proto.CCAssetData AssetData {
        get { return result.AssetData; }
        set { SetAssetData(value); }
      }
      public Builder SetAssetData(global::com.golf.proto.CCAssetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAssetData = true;
        result.assetData_ = value;
        return this;
      }
      public Builder SetAssetData(global::com.golf.proto.CCAssetData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAssetData = true;
        result.assetData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAssetData(global::com.golf.proto.CCAssetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAssetData &&
            result.assetData_ != global::com.golf.proto.CCAssetData.DefaultInstance) {
            result.assetData_ = global::com.golf.proto.CCAssetData.CreateBuilder(result.assetData_).MergeFrom(value).BuildPartial();
        } else {
          result.assetData_ = value;
        }
        result.hasAssetData = true;
        return this;
      }
      public Builder ClearAssetData() {
        PrepareBuilder();
        result.hasAssetData = false;
        result.assetData_ = null;
        return this;
      }
      
      public bool HasSelectBallState {
       get { return result.hasSelectBallState; }
      }
      public global::com.golf.proto.CCSelectBallState SelectBallState {
        get { return result.SelectBallState; }
        set { SetSelectBallState(value); }
      }
      public Builder SetSelectBallState(global::com.golf.proto.CCSelectBallState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSelectBallState = true;
        result.selectBallState_ = value;
        return this;
      }
      public Builder SetSelectBallState(global::com.golf.proto.CCSelectBallState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSelectBallState = true;
        result.selectBallState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSelectBallState(global::com.golf.proto.CCSelectBallState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSelectBallState &&
            result.selectBallState_ != global::com.golf.proto.CCSelectBallState.DefaultInstance) {
            result.selectBallState_ = global::com.golf.proto.CCSelectBallState.CreateBuilder(result.selectBallState_).MergeFrom(value).BuildPartial();
        } else {
          result.selectBallState_ = value;
        }
        result.hasSelectBallState = true;
        return this;
      }
      public Builder ClearSelectBallState() {
        PrepareBuilder();
        result.hasSelectBallState = false;
        result.selectBallState_ = null;
        return this;
      }
    }
    static CCSelectBallResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPvpSelectBallResponse : pb::GeneratedMessageLite<CCPvpSelectBallResponse, CCPvpSelectBallResponse.Builder> {
    private CCPvpSelectBallResponse() { }
    private static readonly CCPvpSelectBallResponse defaultInstance = new CCPvpSelectBallResponse().MakeReadOnly();
    private static readonly string[] _cCPvpSelectBallResponseFieldNames = new string[] { "request", "select_ball_state" };
    private static readonly uint[] _cCPvpSelectBallResponseFieldTags = new uint[] { 10, 18 };
    public static CCPvpSelectBallResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPvpSelectBallResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPvpSelectBallResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCSelectBallRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCSelectBallRequest Request {
      get { return request_ ?? global::com.golf.proto.CCSelectBallRequest.DefaultInstance; }
    }
    
    public const int SelectBallStateFieldNumber = 2;
    private bool hasSelectBallState;
    private global::com.golf.proto.CCSelectBallState selectBallState_;
    public bool HasSelectBallState {
      get { return hasSelectBallState; }
    }
    public global::com.golf.proto.CCSelectBallState SelectBallState {
      get { return selectBallState_ ?? global::com.golf.proto.CCSelectBallState.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPvpSelectBallResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
      if (hasSelectBallState) {
        output.WriteMessage(2, field_names[1], SelectBallState);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      if (hasSelectBallState) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SelectBallState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      if (hasSelectBallState) hash ^= selectBallState_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPvpSelectBallResponse other = obj as CCPvpSelectBallResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      if (hasSelectBallState != other.hasSelectBallState || (hasSelectBallState && !selectBallState_.Equals(other.selectBallState_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
      PrintField("select_ball_state", hasSelectBallState, selectBallState_, writer);
    }
    #endregion
    
    public static CCPvpSelectBallResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPvpSelectBallResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPvpSelectBallResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPvpSelectBallResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPvpSelectBallResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPvpSelectBallResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPvpSelectBallResponse result;
      
      private CCPvpSelectBallResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPvpSelectBallResponse original = result;
          result = new CCPvpSelectBallResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPvpSelectBallResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPvpSelectBallResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPvpSelectBallResponse.DefaultInstance; }
      }
      
      public override CCPvpSelectBallResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPvpSelectBallResponse) {
          return MergeFrom((CCPvpSelectBallResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPvpSelectBallResponse other) {
        if (other == global::com.golf.proto.CCPvpSelectBallResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        if (other.HasSelectBallState) {
          MergeSelectBallState(other.SelectBallState);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPvpSelectBallResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPvpSelectBallResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCSelectBallRequest.Builder subBuilder = global::com.golf.proto.CCSelectBallRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCSelectBallState.Builder subBuilder = global::com.golf.proto.CCSelectBallState.CreateBuilder();
              if (result.hasSelectBallState) {
                subBuilder.MergeFrom(SelectBallState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SelectBallState = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCSelectBallRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCSelectBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCSelectBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCSelectBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCSelectBallRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCSelectBallRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
      
      public bool HasSelectBallState {
       get { return result.hasSelectBallState; }
      }
      public global::com.golf.proto.CCSelectBallState SelectBallState {
        get { return result.SelectBallState; }
        set { SetSelectBallState(value); }
      }
      public Builder SetSelectBallState(global::com.golf.proto.CCSelectBallState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSelectBallState = true;
        result.selectBallState_ = value;
        return this;
      }
      public Builder SetSelectBallState(global::com.golf.proto.CCSelectBallState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSelectBallState = true;
        result.selectBallState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSelectBallState(global::com.golf.proto.CCSelectBallState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSelectBallState &&
            result.selectBallState_ != global::com.golf.proto.CCSelectBallState.DefaultInstance) {
            result.selectBallState_ = global::com.golf.proto.CCSelectBallState.CreateBuilder(result.selectBallState_).MergeFrom(value).BuildPartial();
        } else {
          result.selectBallState_ = value;
        }
        result.hasSelectBallState = true;
        return this;
      }
      public Builder ClearSelectBallState() {
        PrepareBuilder();
        result.hasSelectBallState = false;
        result.selectBallState_ = null;
        return this;
      }
    }
    static CCPvpSelectBallResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSelectBallState : pb::GeneratedMessageLite<CCSelectBallState, CCSelectBallState.Builder> {
    private CCSelectBallState() { }
    private static readonly CCSelectBallState defaultInstance = new CCSelectBallState().MakeReadOnly();
    private static readonly string[] _cCSelectBallStateFieldNames = new string[] { "id", "state" };
    private static readonly uint[] _cCSelectBallStateFieldTags = new uint[] { 8, 16 };
    public static CCSelectBallState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSelectBallState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSelectBallState ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSelectBallStateFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasState) {
        output.WriteInt32(2, field_names[1], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSelectBallState other = obj as CCSelectBallState;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCSelectBallState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectBallState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectBallState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectBallState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSelectBallState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSelectBallState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSelectBallState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectBallState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSelectBallState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSelectBallState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSelectBallState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSelectBallState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSelectBallState result;
      
      private CCSelectBallState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSelectBallState original = result;
          result = new CCSelectBallState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSelectBallState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSelectBallState DefaultInstanceForType {
        get { return global::com.golf.proto.CCSelectBallState.DefaultInstance; }
      }
      
      public override CCSelectBallState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSelectBallState) {
          return MergeFrom((CCSelectBallState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSelectBallState other) {
        if (other == global::com.golf.proto.CCSelectBallState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSelectBallStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSelectBallStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCSelectBallState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAdjustBallRequest : pb::GeneratedMessageLite<CCAdjustBallRequest, CCAdjustBallRequest.Builder> {
    private CCAdjustBallRequest() { }
    private static readonly CCAdjustBallRequest defaultInstance = new CCAdjustBallRequest().MakeReadOnly();
    private static readonly string[] _cCAdjustBallRequestFieldNames = new string[] { "hit_point", "id", "time", "type" };
    private static readonly uint[] _cCAdjustBallRequestFieldTags = new uint[] { 26, 10, 32, 16 };
    public static CCAdjustBallRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAdjustBallRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAdjustBallRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int HitPointFieldNumber = 3;
    private bool hasHitPoint;
    private global::com.golf.proto.CCVec3FloatToLong hitPoint_;
    public bool HasHitPoint {
      get { return hasHitPoint; }
    }
    public global::com.golf.proto.CCVec3FloatToLong HitPoint {
      get { return hitPoint_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int TimeFieldNumber = 4;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAdjustBallRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[3], Type);
      }
      if (hasHitPoint) {
        output.WriteMessage(3, field_names[0], HitPoint);
      }
      if (hasTime) {
        output.WriteInt64(4, field_names[2], Time);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      if (hasHitPoint) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, HitPoint);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, Time);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasHitPoint) hash ^= hitPoint_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAdjustBallRequest other = obj as CCAdjustBallRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasHitPoint != other.hasHitPoint || (hasHitPoint && !hitPoint_.Equals(other.hitPoint_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("hit_point", hasHitPoint, hitPoint_, writer);
      PrintField("time", hasTime, time_, writer);
    }
    #endregion
    
    public static CCAdjustBallRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustBallRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustBallRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustBallRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustBallRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustBallRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustBallRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAdjustBallRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAdjustBallRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustBallRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAdjustBallRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAdjustBallRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAdjustBallRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAdjustBallRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAdjustBallRequest result;
      
      private CCAdjustBallRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAdjustBallRequest original = result;
          result = new CCAdjustBallRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAdjustBallRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAdjustBallRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCAdjustBallRequest.DefaultInstance; }
      }
      
      public override CCAdjustBallRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAdjustBallRequest) {
          return MergeFrom((CCAdjustBallRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAdjustBallRequest other) {
        if (other == global::com.golf.proto.CCAdjustBallRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasHitPoint) {
          MergeHitPoint(other.HitPoint);
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAdjustBallRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAdjustBallRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 26: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasHitPoint) {
                subBuilder.MergeFrom(HitPoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HitPoint = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasHitPoint {
       get { return result.hasHitPoint; }
      }
      public global::com.golf.proto.CCVec3FloatToLong HitPoint {
        get { return result.HitPoint; }
        set { SetHitPoint(value); }
      }
      public Builder SetHitPoint(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHitPoint = true;
        result.hitPoint_ = value;
        return this;
      }
      public Builder SetHitPoint(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHitPoint = true;
        result.hitPoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHitPoint(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHitPoint &&
            result.hitPoint_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.hitPoint_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.hitPoint_).MergeFrom(value).BuildPartial();
        } else {
          result.hitPoint_ = value;
        }
        result.hasHitPoint = true;
        return this;
      }
      public Builder ClearHitPoint() {
        PrepareBuilder();
        result.hasHitPoint = false;
        result.hitPoint_ = null;
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
    }
    static CCAdjustBallRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAdjustBallResponse : pb::GeneratedMessageLite<CCAdjustBallResponse, CCAdjustBallResponse.Builder> {
    private CCAdjustBallResponse() { }
    private static readonly CCAdjustBallResponse defaultInstance = new CCAdjustBallResponse().MakeReadOnly();
    private static readonly string[] _cCAdjustBallResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _cCAdjustBallResponseFieldTags = new uint[] { 8 };
    public static CCAdjustBallResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAdjustBallResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAdjustBallResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAdjustBallResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAdjustBallResponse other = obj as CCAdjustBallResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
    }
    #endregion
    
    public static CCAdjustBallResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustBallResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustBallResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAdjustBallResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustBallResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustBallResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAdjustBallResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAdjustBallResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAdjustBallResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAdjustBallResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAdjustBallResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAdjustBallResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAdjustBallResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAdjustBallResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAdjustBallResponse result;
      
      private CCAdjustBallResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAdjustBallResponse original = result;
          result = new CCAdjustBallResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAdjustBallResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAdjustBallResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCAdjustBallResponse.DefaultInstance; }
      }
      
      public override CCAdjustBallResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAdjustBallResponse) {
          return MergeFrom((CCAdjustBallResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAdjustBallResponse other) {
        if (other == global::com.golf.proto.CCAdjustBallResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAdjustBallResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAdjustBallResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static CCAdjustBallResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPvpAdjustBallResponse : pb::GeneratedMessageLite<CCPvpAdjustBallResponse, CCPvpAdjustBallResponse.Builder> {
    private CCPvpAdjustBallResponse() { }
    private static readonly CCPvpAdjustBallResponse defaultInstance = new CCPvpAdjustBallResponse().MakeReadOnly();
    private static readonly string[] _cCPvpAdjustBallResponseFieldNames = new string[] { "request" };
    private static readonly uint[] _cCPvpAdjustBallResponseFieldTags = new uint[] { 10 };
    public static CCPvpAdjustBallResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPvpAdjustBallResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPvpAdjustBallResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCAdjustBallRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCAdjustBallRequest Request {
      get { return request_ ?? global::com.golf.proto.CCAdjustBallRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPvpAdjustBallResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPvpAdjustBallResponse other = obj as CCPvpAdjustBallResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
    }
    #endregion
    
    public static CCPvpAdjustBallResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPvpAdjustBallResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPvpAdjustBallResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPvpAdjustBallResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPvpAdjustBallResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPvpAdjustBallResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPvpAdjustBallResponse result;
      
      private CCPvpAdjustBallResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPvpAdjustBallResponse original = result;
          result = new CCPvpAdjustBallResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPvpAdjustBallResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPvpAdjustBallResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPvpAdjustBallResponse.DefaultInstance; }
      }
      
      public override CCPvpAdjustBallResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPvpAdjustBallResponse) {
          return MergeFrom((CCPvpAdjustBallResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPvpAdjustBallResponse other) {
        if (other == global::com.golf.proto.CCPvpAdjustBallResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPvpAdjustBallResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPvpAdjustBallResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCAdjustBallRequest.Builder subBuilder = global::com.golf.proto.CCAdjustBallRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCAdjustBallRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCAdjustBallRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCAdjustBallRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCAdjustBallRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCAdjustBallRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
    }
    static CCPvpAdjustBallResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBuyItemRequest : pb::GeneratedMessageLite<CCBuyItemRequest, CCBuyItemRequest.Builder> {
    private CCBuyItemRequest() { }
    private static readonly CCBuyItemRequest defaultInstance = new CCBuyItemRequest().MakeReadOnly();
    private static readonly string[] _cCBuyItemRequestFieldNames = new string[] { "bill_data", "id", "item", "reason" };
    private static readonly uint[] _cCBuyItemRequestFieldTags = new uint[] { 26, 10, 18, 32 };
    public static CCBuyItemRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBuyItemRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBuyItemRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCItem Item {
      get { return item_ ?? global::com.golf.proto.CCItem.DefaultInstance; }
    }
    
    public const int BillDataFieldNumber = 3;
    private bool hasBillData;
    private global::com.golf.proto.CCBillData billData_;
    public bool HasBillData {
      get { return hasBillData; }
    }
    public global::com.golf.proto.CCBillData BillData {
      get { return billData_ ?? global::com.golf.proto.CCBillData.DefaultInstance; }
    }
    
    public const int ReasonFieldNumber = 4;
    private bool hasReason;
    private int reason_;
    public bool HasReason {
      get { return hasReason; }
    }
    public int Reason {
      get { return reason_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBuyItemRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[2], Item);
      }
      if (hasBillData) {
        output.WriteMessage(3, field_names[0], BillData);
      }
      if (hasReason) {
        output.WriteInt32(4, field_names[3], Reason);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasBillData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, BillData);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Reason);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasBillData) hash ^= billData_.GetHashCode();
      if (hasReason) hash ^= reason_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBuyItemRequest other = obj as CCBuyItemRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasBillData != other.hasBillData || (hasBillData && !billData_.Equals(other.billData_))) return false;
      if (hasReason != other.hasReason || (hasReason && !reason_.Equals(other.reason_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item", hasItem, item_, writer);
      PrintField("bill_data", hasBillData, billData_, writer);
      PrintField("reason", hasReason, reason_, writer);
    }
    #endregion
    
    public static CCBuyItemRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBuyItemRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBuyItemRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBuyItemRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBuyItemRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBuyItemRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBuyItemRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBuyItemRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBuyItemRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBuyItemRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBuyItemRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBuyItemRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBuyItemRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBuyItemRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBuyItemRequest result;
      
      private CCBuyItemRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBuyItemRequest original = result;
          result = new CCBuyItemRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBuyItemRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBuyItemRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCBuyItemRequest.DefaultInstance; }
      }
      
      public override CCBuyItemRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBuyItemRequest) {
          return MergeFrom((CCBuyItemRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBuyItemRequest other) {
        if (other == global::com.golf.proto.CCBuyItemRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasBillData) {
          MergeBillData(other.BillData);
        }
        if (other.HasReason) {
          Reason = other.Reason;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBuyItemRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBuyItemRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCItem.Builder subBuilder = global::com.golf.proto.CCItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCBillData.Builder subBuilder = global::com.golf.proto.CCBillData.CreateBuilder();
              if (result.hasBillData) {
                subBuilder.MergeFrom(BillData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BillData = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasReason = input.ReadInt32(ref result.reason_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasBillData {
       get { return result.hasBillData; }
      }
      public global::com.golf.proto.CCBillData BillData {
        get { return result.BillData; }
        set { SetBillData(value); }
      }
      public Builder SetBillData(global::com.golf.proto.CCBillData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBillData = true;
        result.billData_ = value;
        return this;
      }
      public Builder SetBillData(global::com.golf.proto.CCBillData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBillData = true;
        result.billData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBillData(global::com.golf.proto.CCBillData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBillData &&
            result.billData_ != global::com.golf.proto.CCBillData.DefaultInstance) {
            result.billData_ = global::com.golf.proto.CCBillData.CreateBuilder(result.billData_).MergeFrom(value).BuildPartial();
        } else {
          result.billData_ = value;
        }
        result.hasBillData = true;
        return this;
      }
      public Builder ClearBillData() {
        PrepareBuilder();
        result.hasBillData = false;
        result.billData_ = null;
        return this;
      }
      
      public bool HasReason {
        get { return result.hasReason; }
      }
      public int Reason {
        get { return result.Reason; }
        set { SetReason(value); }
      }
      public Builder SetReason(int value) {
        PrepareBuilder();
        result.hasReason = true;
        result.reason_ = value;
        return this;
      }
      public Builder ClearReason() {
        PrepareBuilder();
        result.hasReason = false;
        result.reason_ = 0;
        return this;
      }
    }
    static CCBuyItemRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBuyItemResponse : pb::GeneratedMessageLite<CCBuyItemResponse, CCBuyItemResponse.Builder> {
    private CCBuyItemResponse() { }
    private static readonly CCBuyItemResponse defaultInstance = new CCBuyItemResponse().MakeReadOnly();
    private static readonly string[] _cCBuyItemResponseFieldNames = new string[] { "bill_data", "result", "ritems", "user_data" };
    private static readonly uint[] _cCBuyItemResponseFieldTags = new uint[] { 34, 8, 26, 18 };
    public static CCBuyItemResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBuyItemResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBuyItemResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int UserDataFieldNumber = 2;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int RitemsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public const int BillDataFieldNumber = 4;
    private bool hasBillData;
    private global::com.golf.proto.CCBillData billData_;
    public bool HasBillData {
      get { return hasBillData; }
    }
    public global::com.golf.proto.CCBillData BillData {
      get { return billData_ ?? global::com.golf.proto.CCBillData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBuyItemResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasUserData) {
        output.WriteMessage(2, field_names[3], UserData);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], ritems_);
      }
      if (hasBillData) {
        output.WriteMessage(4, field_names[0], BillData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserData);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasBillData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, BillData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      if (hasBillData) hash ^= billData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBuyItemResponse other = obj as CCBuyItemResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      if (hasBillData != other.hasBillData || (hasBillData && !billData_.Equals(other.billData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("ritems", ritems_, writer);
      PrintField("bill_data", hasBillData, billData_, writer);
    }
    #endregion
    
    public static CCBuyItemResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBuyItemResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBuyItemResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBuyItemResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBuyItemResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBuyItemResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBuyItemResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBuyItemResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBuyItemResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBuyItemResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBuyItemResponse MakeReadOnly() {
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBuyItemResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBuyItemResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBuyItemResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBuyItemResponse result;
      
      private CCBuyItemResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBuyItemResponse original = result;
          result = new CCBuyItemResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBuyItemResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBuyItemResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCBuyItemResponse.DefaultInstance; }
      }
      
      public override CCBuyItemResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBuyItemResponse) {
          return MergeFrom((CCBuyItemResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBuyItemResponse other) {
        if (other == global::com.golf.proto.CCBuyItemResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        if (other.HasBillData) {
          MergeBillData(other.BillData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBuyItemResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBuyItemResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              global::com.golf.proto.CCBillData.Builder subBuilder = global::com.golf.proto.CCBillData.CreateBuilder();
              if (result.hasBillData) {
                subBuilder.MergeFrom(BillData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BillData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
      
      public bool HasBillData {
       get { return result.hasBillData; }
      }
      public global::com.golf.proto.CCBillData BillData {
        get { return result.BillData; }
        set { SetBillData(value); }
      }
      public Builder SetBillData(global::com.golf.proto.CCBillData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBillData = true;
        result.billData_ = value;
        return this;
      }
      public Builder SetBillData(global::com.golf.proto.CCBillData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBillData = true;
        result.billData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBillData(global::com.golf.proto.CCBillData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBillData &&
            result.billData_ != global::com.golf.proto.CCBillData.DefaultInstance) {
            result.billData_ = global::com.golf.proto.CCBillData.CreateBuilder(result.billData_).MergeFrom(value).BuildPartial();
        } else {
          result.billData_ = value;
        }
        result.hasBillData = true;
        return this;
      }
      public Builder ClearBillData() {
        PrepareBuilder();
        result.hasBillData = false;
        result.billData_ = null;
        return this;
      }
    }
    static CCBuyItemResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBillData : pb::GeneratedMessageLite<CCBillData, CCBillData.Builder> {
    private CCBillData() { }
    private static readonly CCBillData defaultInstance = new CCBillData().MakeReadOnly();
    private static readonly string[] _cCBillDataFieldNames = new string[] { "package_name", "payload", "product_id", "token" };
    private static readonly uint[] _cCBillDataFieldTags = new uint[] { 10, 34, 18, 26 };
    public static CCBillData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBillData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBillData ThisMessage {
      get { return this; }
    }
    
    public const int PackageNameFieldNumber = 1;
    private bool hasPackageName;
    private string packageName_ = "";
    public bool HasPackageName {
      get { return hasPackageName; }
    }
    public string PackageName {
      get { return packageName_; }
    }
    
    public const int ProductIdFieldNumber = 2;
    private bool hasProductId;
    private string productId_ = "";
    public bool HasProductId {
      get { return hasProductId; }
    }
    public string ProductId {
      get { return productId_; }
    }
    
    public const int TokenFieldNumber = 3;
    private bool hasToken;
    private string token_ = "";
    public bool HasToken {
      get { return hasToken; }
    }
    public string Token {
      get { return token_; }
    }
    
    public const int PayloadFieldNumber = 4;
    private bool hasPayload;
    private string payload_ = "";
    public bool HasPayload {
      get { return hasPayload; }
    }
    public string Payload {
      get { return payload_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBillDataFieldNames;
      if (hasPackageName) {
        output.WriteString(1, field_names[0], PackageName);
      }
      if (hasProductId) {
        output.WriteString(2, field_names[2], ProductId);
      }
      if (hasToken) {
        output.WriteString(3, field_names[3], Token);
      }
      if (hasPayload) {
        output.WriteString(4, field_names[1], Payload);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPackageName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PackageName);
      }
      if (hasProductId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, ProductId);
      }
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Token);
      }
      if (hasPayload) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Payload);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasPackageName) hash ^= packageName_.GetHashCode();
      if (hasProductId) hash ^= productId_.GetHashCode();
      if (hasToken) hash ^= token_.GetHashCode();
      if (hasPayload) hash ^= payload_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBillData other = obj as CCBillData;
      if (other == null) return false;
      if (hasPackageName != other.hasPackageName || (hasPackageName && !packageName_.Equals(other.packageName_))) return false;
      if (hasProductId != other.hasProductId || (hasProductId && !productId_.Equals(other.productId_))) return false;
      if (hasToken != other.hasToken || (hasToken && !token_.Equals(other.token_))) return false;
      if (hasPayload != other.hasPayload || (hasPayload && !payload_.Equals(other.payload_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("package_name", hasPackageName, packageName_, writer);
      PrintField("product_id", hasProductId, productId_, writer);
      PrintField("token", hasToken, token_, writer);
      PrintField("payload", hasPayload, payload_, writer);
    }
    #endregion
    
    public static CCBillData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBillData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBillData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBillData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBillData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBillData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBillData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBillData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBillData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBillData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBillData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBillData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBillData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBillData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBillData result;
      
      private CCBillData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBillData original = result;
          result = new CCBillData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBillData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBillData DefaultInstanceForType {
        get { return global::com.golf.proto.CCBillData.DefaultInstance; }
      }
      
      public override CCBillData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBillData) {
          return MergeFrom((CCBillData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBillData other) {
        if (other == global::com.golf.proto.CCBillData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPackageName) {
          PackageName = other.PackageName;
        }
        if (other.HasProductId) {
          ProductId = other.ProductId;
        }
        if (other.HasToken) {
          Token = other.Token;
        }
        if (other.HasPayload) {
          Payload = other.Payload;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBillDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBillDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPackageName = input.ReadString(ref result.packageName_);
              break;
            }
            case 18: {
              result.hasProductId = input.ReadString(ref result.productId_);
              break;
            }
            case 26: {
              result.hasToken = input.ReadString(ref result.token_);
              break;
            }
            case 34: {
              result.hasPayload = input.ReadString(ref result.payload_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasPackageName {
        get { return result.hasPackageName; }
      }
      public string PackageName {
        get { return result.PackageName; }
        set { SetPackageName(value); }
      }
      public Builder SetPackageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPackageName = true;
        result.packageName_ = value;
        return this;
      }
      public Builder ClearPackageName() {
        PrepareBuilder();
        result.hasPackageName = false;
        result.packageName_ = "";
        return this;
      }
      
      public bool HasProductId {
        get { return result.hasProductId; }
      }
      public string ProductId {
        get { return result.ProductId; }
        set { SetProductId(value); }
      }
      public Builder SetProductId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProductId = true;
        result.productId_ = value;
        return this;
      }
      public Builder ClearProductId() {
        PrepareBuilder();
        result.hasProductId = false;
        result.productId_ = "";
        return this;
      }
      
      public bool HasToken {
        get { return result.hasToken; }
      }
      public string Token {
        get { return result.Token; }
        set { SetToken(value); }
      }
      public Builder SetToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder ClearToken() {
        PrepareBuilder();
        result.hasToken = false;
        result.token_ = "";
        return this;
      }
      
      public bool HasPayload {
        get { return result.hasPayload; }
      }
      public string Payload {
        get { return result.Payload; }
        set { SetPayload(value); }
      }
      public Builder SetPayload(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayload = true;
        result.payload_ = value;
        return this;
      }
      public Builder ClearPayload() {
        PrepareBuilder();
        result.hasPayload = false;
        result.payload_ = "";
        return this;
      }
    }
    static CCBillData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRefreshStoreDailySpecialRequest : pb::GeneratedMessageLite<CCRefreshStoreDailySpecialRequest, CCRefreshStoreDailySpecialRequest.Builder> {
    private CCRefreshStoreDailySpecialRequest() { }
    private static readonly CCRefreshStoreDailySpecialRequest defaultInstance = new CCRefreshStoreDailySpecialRequest().MakeReadOnly();
    private static readonly string[] _cCRefreshStoreDailySpecialRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCRefreshStoreDailySpecialRequestFieldTags = new uint[] { 10 };
    public static CCRefreshStoreDailySpecialRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRefreshStoreDailySpecialRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRefreshStoreDailySpecialRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRefreshStoreDailySpecialRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRefreshStoreDailySpecialRequest other = obj as CCRefreshStoreDailySpecialRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCRefreshStoreDailySpecialRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRefreshStoreDailySpecialRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRefreshStoreDailySpecialRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRefreshStoreDailySpecialRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRefreshStoreDailySpecialRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRefreshStoreDailySpecialRequest result;
      
      private CCRefreshStoreDailySpecialRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRefreshStoreDailySpecialRequest original = result;
          result = new CCRefreshStoreDailySpecialRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRefreshStoreDailySpecialRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRefreshStoreDailySpecialRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCRefreshStoreDailySpecialRequest.DefaultInstance; }
      }
      
      public override CCRefreshStoreDailySpecialRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRefreshStoreDailySpecialRequest) {
          return MergeFrom((CCRefreshStoreDailySpecialRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRefreshStoreDailySpecialRequest other) {
        if (other == global::com.golf.proto.CCRefreshStoreDailySpecialRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRefreshStoreDailySpecialRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRefreshStoreDailySpecialRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCRefreshStoreDailySpecialRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRefreshStoreDailySpecialResponse : pb::GeneratedMessageLite<CCRefreshStoreDailySpecialResponse, CCRefreshStoreDailySpecialResponse.Builder> {
    private CCRefreshStoreDailySpecialResponse() { }
    private static readonly CCRefreshStoreDailySpecialResponse defaultInstance = new CCRefreshStoreDailySpecialResponse().MakeReadOnly();
    private static readonly string[] _cCRefreshStoreDailySpecialResponseFieldNames = new string[] { "asset_data", "result" };
    private static readonly uint[] _cCRefreshStoreDailySpecialResponseFieldTags = new uint[] { 18, 8 };
    public static CCRefreshStoreDailySpecialResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRefreshStoreDailySpecialResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRefreshStoreDailySpecialResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int AssetDataFieldNumber = 2;
    private bool hasAssetData;
    private global::com.golf.proto.CCAssetData assetData_;
    public bool HasAssetData {
      get { return hasAssetData; }
    }
    public global::com.golf.proto.CCAssetData AssetData {
      get { return assetData_ ?? global::com.golf.proto.CCAssetData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRefreshStoreDailySpecialResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasAssetData) {
        output.WriteMessage(2, field_names[0], AssetData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasAssetData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, AssetData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasAssetData) hash ^= assetData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRefreshStoreDailySpecialResponse other = obj as CCRefreshStoreDailySpecialResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasAssetData != other.hasAssetData || (hasAssetData && !assetData_.Equals(other.assetData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("asset_data", hasAssetData, assetData_, writer);
    }
    #endregion
    
    public static CCRefreshStoreDailySpecialResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRefreshStoreDailySpecialResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRefreshStoreDailySpecialResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRefreshStoreDailySpecialResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRefreshStoreDailySpecialResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRefreshStoreDailySpecialResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRefreshStoreDailySpecialResponse result;
      
      private CCRefreshStoreDailySpecialResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRefreshStoreDailySpecialResponse original = result;
          result = new CCRefreshStoreDailySpecialResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRefreshStoreDailySpecialResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRefreshStoreDailySpecialResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCRefreshStoreDailySpecialResponse.DefaultInstance; }
      }
      
      public override CCRefreshStoreDailySpecialResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRefreshStoreDailySpecialResponse) {
          return MergeFrom((CCRefreshStoreDailySpecialResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRefreshStoreDailySpecialResponse other) {
        if (other == global::com.golf.proto.CCRefreshStoreDailySpecialResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasAssetData) {
          MergeAssetData(other.AssetData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRefreshStoreDailySpecialResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRefreshStoreDailySpecialResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCAssetData.Builder subBuilder = global::com.golf.proto.CCAssetData.CreateBuilder();
              if (result.hasAssetData) {
                subBuilder.MergeFrom(AssetData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AssetData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasAssetData {
       get { return result.hasAssetData; }
      }
      public global::com.golf.proto.CCAssetData AssetData {
        get { return result.AssetData; }
        set { SetAssetData(value); }
      }
      public Builder SetAssetData(global::com.golf.proto.CCAssetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAssetData = true;
        result.assetData_ = value;
        return this;
      }
      public Builder SetAssetData(global::com.golf.proto.CCAssetData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAssetData = true;
        result.assetData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAssetData(global::com.golf.proto.CCAssetData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAssetData &&
            result.assetData_ != global::com.golf.proto.CCAssetData.DefaultInstance) {
            result.assetData_ = global::com.golf.proto.CCAssetData.CreateBuilder(result.assetData_).MergeFrom(value).BuildPartial();
        } else {
          result.assetData_ = value;
        }
        result.hasAssetData = true;
        return this;
      }
      public Builder ClearAssetData() {
        PrepareBuilder();
        result.hasAssetData = false;
        result.assetData_ = null;
        return this;
      }
    }
    static CCRefreshStoreDailySpecialResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRoundPrepareRequest : pb::GeneratedMessageLite<CCRoundPrepareRequest, CCRoundPrepareRequest.Builder> {
    private CCRoundPrepareRequest() { }
    private static readonly CCRoundPrepareRequest defaultInstance = new CCRoundPrepareRequest().MakeReadOnly();
    private static readonly string[] _cCRoundPrepareRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCRoundPrepareRequestFieldTags = new uint[] { 10 };
    public static CCRoundPrepareRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRoundPrepareRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRoundPrepareRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRoundPrepareRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRoundPrepareRequest other = obj as CCRoundPrepareRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCRoundPrepareRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoundPrepareRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRoundPrepareRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRoundPrepareRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRoundPrepareRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRoundPrepareRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRoundPrepareRequest result;
      
      private CCRoundPrepareRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRoundPrepareRequest original = result;
          result = new CCRoundPrepareRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRoundPrepareRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRoundPrepareRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCRoundPrepareRequest.DefaultInstance; }
      }
      
      public override CCRoundPrepareRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRoundPrepareRequest) {
          return MergeFrom((CCRoundPrepareRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRoundPrepareRequest other) {
        if (other == global::com.golf.proto.CCRoundPrepareRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRoundPrepareRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRoundPrepareRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCRoundPrepareRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRoundPrepareResponse : pb::GeneratedMessageLite<CCRoundPrepareResponse, CCRoundPrepareResponse.Builder> {
    private CCRoundPrepareResponse() { }
    private static readonly CCRoundPrepareResponse defaultInstance = new CCRoundPrepareResponse().MakeReadOnly();
    private static readonly string[] _cCRoundPrepareResponseFieldNames = new string[] { "result", "round_end_time", "round_op_end_time", "round_start_time", "turn" };
    private static readonly uint[] _cCRoundPrepareResponseFieldTags = new uint[] { 8, 32, 48, 40, 16 };
    public static CCRoundPrepareResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRoundPrepareResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRoundPrepareResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int TurnFieldNumber = 2;
    private bool hasTurn;
    private int turn_;
    public bool HasTurn {
      get { return hasTurn; }
    }
    public int Turn {
      get { return turn_; }
    }
    
    public const int RoundEndTimeFieldNumber = 4;
    private bool hasRoundEndTime;
    private long roundEndTime_;
    public bool HasRoundEndTime {
      get { return hasRoundEndTime; }
    }
    public long RoundEndTime {
      get { return roundEndTime_; }
    }
    
    public const int RoundStartTimeFieldNumber = 5;
    private bool hasRoundStartTime;
    private long roundStartTime_;
    public bool HasRoundStartTime {
      get { return hasRoundStartTime; }
    }
    public long RoundStartTime {
      get { return roundStartTime_; }
    }
    
    public const int RoundOpEndTimeFieldNumber = 6;
    private bool hasRoundOpEndTime;
    private long roundOpEndTime_;
    public bool HasRoundOpEndTime {
      get { return hasRoundOpEndTime; }
    }
    public long RoundOpEndTime {
      get { return roundOpEndTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRoundPrepareResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasTurn) {
        output.WriteInt32(2, field_names[4], Turn);
      }
      if (hasRoundEndTime) {
        output.WriteInt64(4, field_names[1], RoundEndTime);
      }
      if (hasRoundStartTime) {
        output.WriteInt64(5, field_names[3], RoundStartTime);
      }
      if (hasRoundOpEndTime) {
        output.WriteInt64(6, field_names[2], RoundOpEndTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasTurn) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Turn);
      }
      if (hasRoundEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, RoundEndTime);
      }
      if (hasRoundStartTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, RoundStartTime);
      }
      if (hasRoundOpEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, RoundOpEndTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasTurn) hash ^= turn_.GetHashCode();
      if (hasRoundEndTime) hash ^= roundEndTime_.GetHashCode();
      if (hasRoundStartTime) hash ^= roundStartTime_.GetHashCode();
      if (hasRoundOpEndTime) hash ^= roundOpEndTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRoundPrepareResponse other = obj as CCRoundPrepareResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasTurn != other.hasTurn || (hasTurn && !turn_.Equals(other.turn_))) return false;
      if (hasRoundEndTime != other.hasRoundEndTime || (hasRoundEndTime && !roundEndTime_.Equals(other.roundEndTime_))) return false;
      if (hasRoundStartTime != other.hasRoundStartTime || (hasRoundStartTime && !roundStartTime_.Equals(other.roundStartTime_))) return false;
      if (hasRoundOpEndTime != other.hasRoundOpEndTime || (hasRoundOpEndTime && !roundOpEndTime_.Equals(other.roundOpEndTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("turn", hasTurn, turn_, writer);
      PrintField("round_end_time", hasRoundEndTime, roundEndTime_, writer);
      PrintField("round_start_time", hasRoundStartTime, roundStartTime_, writer);
      PrintField("round_op_end_time", hasRoundOpEndTime, roundOpEndTime_, writer);
    }
    #endregion
    
    public static CCRoundPrepareResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoundPrepareResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRoundPrepareResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRoundPrepareResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRoundPrepareResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRoundPrepareResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRoundPrepareResponse result;
      
      private CCRoundPrepareResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRoundPrepareResponse original = result;
          result = new CCRoundPrepareResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRoundPrepareResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRoundPrepareResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCRoundPrepareResponse.DefaultInstance; }
      }
      
      public override CCRoundPrepareResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRoundPrepareResponse) {
          return MergeFrom((CCRoundPrepareResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRoundPrepareResponse other) {
        if (other == global::com.golf.proto.CCRoundPrepareResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasTurn) {
          Turn = other.Turn;
        }
        if (other.HasRoundEndTime) {
          RoundEndTime = other.RoundEndTime;
        }
        if (other.HasRoundStartTime) {
          RoundStartTime = other.RoundStartTime;
        }
        if (other.HasRoundOpEndTime) {
          RoundOpEndTime = other.RoundOpEndTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRoundPrepareResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRoundPrepareResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasTurn = input.ReadInt32(ref result.turn_);
              break;
            }
            case 32: {
              result.hasRoundEndTime = input.ReadInt64(ref result.roundEndTime_);
              break;
            }
            case 40: {
              result.hasRoundStartTime = input.ReadInt64(ref result.roundStartTime_);
              break;
            }
            case 48: {
              result.hasRoundOpEndTime = input.ReadInt64(ref result.roundOpEndTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasTurn {
        get { return result.hasTurn; }
      }
      public int Turn {
        get { return result.Turn; }
        set { SetTurn(value); }
      }
      public Builder SetTurn(int value) {
        PrepareBuilder();
        result.hasTurn = true;
        result.turn_ = value;
        return this;
      }
      public Builder ClearTurn() {
        PrepareBuilder();
        result.hasTurn = false;
        result.turn_ = 0;
        return this;
      }
      
      public bool HasRoundEndTime {
        get { return result.hasRoundEndTime; }
      }
      public long RoundEndTime {
        get { return result.RoundEndTime; }
        set { SetRoundEndTime(value); }
      }
      public Builder SetRoundEndTime(long value) {
        PrepareBuilder();
        result.hasRoundEndTime = true;
        result.roundEndTime_ = value;
        return this;
      }
      public Builder ClearRoundEndTime() {
        PrepareBuilder();
        result.hasRoundEndTime = false;
        result.roundEndTime_ = 0L;
        return this;
      }
      
      public bool HasRoundStartTime {
        get { return result.hasRoundStartTime; }
      }
      public long RoundStartTime {
        get { return result.RoundStartTime; }
        set { SetRoundStartTime(value); }
      }
      public Builder SetRoundStartTime(long value) {
        PrepareBuilder();
        result.hasRoundStartTime = true;
        result.roundStartTime_ = value;
        return this;
      }
      public Builder ClearRoundStartTime() {
        PrepareBuilder();
        result.hasRoundStartTime = false;
        result.roundStartTime_ = 0L;
        return this;
      }
      
      public bool HasRoundOpEndTime {
        get { return result.hasRoundOpEndTime; }
      }
      public long RoundOpEndTime {
        get { return result.RoundOpEndTime; }
        set { SetRoundOpEndTime(value); }
      }
      public Builder SetRoundOpEndTime(long value) {
        PrepareBuilder();
        result.hasRoundOpEndTime = true;
        result.roundOpEndTime_ = value;
        return this;
      }
      public Builder ClearRoundOpEndTime() {
        PrepareBuilder();
        result.hasRoundOpEndTime = false;
        result.roundOpEndTime_ = 0L;
        return this;
      }
    }
    static CCRoundPrepareResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCWaitOppoRequest : pb::GeneratedMessageLite<CCWaitOppoRequest, CCWaitOppoRequest.Builder> {
    private CCWaitOppoRequest() { }
    private static readonly CCWaitOppoRequest defaultInstance = new CCWaitOppoRequest().MakeReadOnly();
    private static readonly string[] _cCWaitOppoRequestFieldNames = new string[] { "id", "type" };
    private static readonly uint[] _cCWaitOppoRequestFieldTags = new uint[] { 10, 16 };
    public static CCWaitOppoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCWaitOppoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCWaitOppoRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCWaitOppoRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[1], Type);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCWaitOppoRequest other = obj as CCWaitOppoRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("type", hasType, type_, writer);
    }
    #endregion
    
    public static CCWaitOppoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWaitOppoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWaitOppoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWaitOppoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWaitOppoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWaitOppoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCWaitOppoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCWaitOppoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCWaitOppoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWaitOppoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCWaitOppoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCWaitOppoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCWaitOppoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCWaitOppoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCWaitOppoRequest result;
      
      private CCWaitOppoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCWaitOppoRequest original = result;
          result = new CCWaitOppoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCWaitOppoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCWaitOppoRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCWaitOppoRequest.DefaultInstance; }
      }
      
      public override CCWaitOppoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCWaitOppoRequest) {
          return MergeFrom((CCWaitOppoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCWaitOppoRequest other) {
        if (other == global::com.golf.proto.CCWaitOppoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCWaitOppoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCWaitOppoRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static CCWaitOppoRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCWaitOppoResponse : pb::GeneratedMessageLite<CCWaitOppoResponse, CCWaitOppoResponse.Builder> {
    private CCWaitOppoResponse() { }
    private static readonly CCWaitOppoResponse defaultInstance = new CCWaitOppoResponse().MakeReadOnly();
    private static readonly string[] _cCWaitOppoResponseFieldNames = new string[] { "end_time", "result", "type" };
    private static readonly uint[] _cCWaitOppoResponseFieldTags = new uint[] { 24, 8, 16 };
    public static CCWaitOppoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCWaitOppoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCWaitOppoResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int EndTimeFieldNumber = 3;
    private bool hasEndTime;
    private long endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public long EndTime {
      get { return endTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCWaitOppoResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[2], Type);
      }
      if (hasEndTime) {
        output.WriteInt64(3, field_names[0], EndTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
      }
      if (hasEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, EndTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasEndTime) hash ^= endTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCWaitOppoResponse other = obj as CCWaitOppoResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasEndTime != other.hasEndTime || (hasEndTime && !endTime_.Equals(other.endTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("end_time", hasEndTime, endTime_, writer);
    }
    #endregion
    
    public static CCWaitOppoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWaitOppoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWaitOppoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWaitOppoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWaitOppoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWaitOppoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCWaitOppoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCWaitOppoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCWaitOppoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWaitOppoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCWaitOppoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCWaitOppoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCWaitOppoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCWaitOppoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCWaitOppoResponse result;
      
      private CCWaitOppoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCWaitOppoResponse original = result;
          result = new CCWaitOppoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCWaitOppoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCWaitOppoResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCWaitOppoResponse.DefaultInstance; }
      }
      
      public override CCWaitOppoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCWaitOppoResponse) {
          return MergeFrom((CCWaitOppoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCWaitOppoResponse other) {
        if (other == global::com.golf.proto.CCWaitOppoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCWaitOppoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCWaitOppoResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasEndTime = input.ReadInt64(ref result.endTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public long EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(long value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0L;
        return this;
      }
    }
    static CCWaitOppoResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChatRequest : pb::GeneratedMessageLite<CCChatRequest, CCChatRequest.Builder> {
    private CCChatRequest() { }
    private static readonly CCChatRequest defaultInstance = new CCChatRequest().MakeReadOnly();
    private static readonly string[] _cCChatRequestFieldNames = new string[] { "id", "msg_id", "msg_type", "time" };
    private static readonly uint[] _cCChatRequestFieldTags = new uint[] { 10, 32, 24, 16 };
    public static CCChatRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChatRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChatRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TimeFieldNumber = 2;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public const int MsgTypeFieldNumber = 3;
    private bool hasMsgType;
    private int msgType_;
    public bool HasMsgType {
      get { return hasMsgType; }
    }
    public int MsgType {
      get { return msgType_; }
    }
    
    public const int MsgIdFieldNumber = 4;
    private bool hasMsgId;
    private int msgId_;
    public bool HasMsgId {
      get { return hasMsgId; }
    }
    public int MsgId {
      get { return msgId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChatRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasTime) {
        output.WriteInt64(2, field_names[3], Time);
      }
      if (hasMsgType) {
        output.WriteInt32(3, field_names[2], MsgType);
      }
      if (hasMsgId) {
        output.WriteInt32(4, field_names[1], MsgId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Time);
      }
      if (hasMsgType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, MsgType);
      }
      if (hasMsgId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, MsgId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      if (hasMsgType) hash ^= msgType_.GetHashCode();
      if (hasMsgId) hash ^= msgId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChatRequest other = obj as CCChatRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      if (hasMsgType != other.hasMsgType || (hasMsgType && !msgType_.Equals(other.msgType_))) return false;
      if (hasMsgId != other.hasMsgId || (hasMsgId && !msgId_.Equals(other.msgId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("time", hasTime, time_, writer);
      PrintField("msg_type", hasMsgType, msgType_, writer);
      PrintField("msg_id", hasMsgId, msgId_, writer);
    }
    #endregion
    
    public static CCChatRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChatRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChatRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChatRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChatRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChatRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChatRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChatRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChatRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChatRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChatRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChatRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChatRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChatRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChatRequest result;
      
      private CCChatRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChatRequest original = result;
          result = new CCChatRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChatRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChatRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCChatRequest.DefaultInstance; }
      }
      
      public override CCChatRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChatRequest) {
          return MergeFrom((CCChatRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChatRequest other) {
        if (other == global::com.golf.proto.CCChatRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasMsgType) {
          MsgType = other.MsgType;
        }
        if (other.HasMsgId) {
          MsgId = other.MsgId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChatRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChatRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
            case 24: {
              result.hasMsgType = input.ReadInt32(ref result.msgType_);
              break;
            }
            case 32: {
              result.hasMsgId = input.ReadInt32(ref result.msgId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
      
      public bool HasMsgType {
        get { return result.hasMsgType; }
      }
      public int MsgType {
        get { return result.MsgType; }
        set { SetMsgType(value); }
      }
      public Builder SetMsgType(int value) {
        PrepareBuilder();
        result.hasMsgType = true;
        result.msgType_ = value;
        return this;
      }
      public Builder ClearMsgType() {
        PrepareBuilder();
        result.hasMsgType = false;
        result.msgType_ = 0;
        return this;
      }
      
      public bool HasMsgId {
        get { return result.hasMsgId; }
      }
      public int MsgId {
        get { return result.MsgId; }
        set { SetMsgId(value); }
      }
      public Builder SetMsgId(int value) {
        PrepareBuilder();
        result.hasMsgId = true;
        result.msgId_ = value;
        return this;
      }
      public Builder ClearMsgId() {
        PrepareBuilder();
        result.hasMsgId = false;
        result.msgId_ = 0;
        return this;
      }
    }
    static CCChatRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChatResponse : pb::GeneratedMessageLite<CCChatResponse, CCChatResponse.Builder> {
    private CCChatResponse() { }
    private static readonly CCChatResponse defaultInstance = new CCChatResponse().MakeReadOnly();
    private static readonly string[] _cCChatResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _cCChatResponseFieldTags = new uint[] { 8 };
    public static CCChatResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChatResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChatResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChatResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChatResponse other = obj as CCChatResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
    }
    #endregion
    
    public static CCChatResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChatResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChatResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChatResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChatResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChatResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChatResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChatResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChatResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChatResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChatResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChatResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChatResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChatResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChatResponse result;
      
      private CCChatResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChatResponse original = result;
          result = new CCChatResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChatResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChatResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCChatResponse.DefaultInstance; }
      }
      
      public override CCChatResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChatResponse) {
          return MergeFrom((CCChatResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChatResponse other) {
        if (other == global::com.golf.proto.CCChatResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChatResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChatResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static CCChatResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPvpChatResponse : pb::GeneratedMessageLite<CCPvpChatResponse, CCPvpChatResponse.Builder> {
    private CCPvpChatResponse() { }
    private static readonly CCPvpChatResponse defaultInstance = new CCPvpChatResponse().MakeReadOnly();
    private static readonly string[] _cCPvpChatResponseFieldNames = new string[] { "request" };
    private static readonly uint[] _cCPvpChatResponseFieldTags = new uint[] { 10 };
    public static CCPvpChatResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPvpChatResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPvpChatResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCChatRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCChatRequest Request {
      get { return request_ ?? global::com.golf.proto.CCChatRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPvpChatResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPvpChatResponse other = obj as CCPvpChatResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
    }
    #endregion
    
    public static CCPvpChatResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPvpChatResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPvpChatResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPvpChatResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPvpChatResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPvpChatResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPvpChatResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPvpChatResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPvpChatResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPvpChatResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPvpChatResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPvpChatResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPvpChatResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPvpChatResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPvpChatResponse result;
      
      private CCPvpChatResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPvpChatResponse original = result;
          result = new CCPvpChatResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPvpChatResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPvpChatResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPvpChatResponse.DefaultInstance; }
      }
      
      public override CCPvpChatResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPvpChatResponse) {
          return MergeFrom((CCPvpChatResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPvpChatResponse other) {
        if (other == global::com.golf.proto.CCPvpChatResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPvpChatResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPvpChatResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCChatRequest.Builder subBuilder = global::com.golf.proto.CCChatRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCChatRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCChatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCChatRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCChatRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCChatRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCChatRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
    }
    static CCPvpChatResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeReplayNameRequest : pb::GeneratedMessageLite<CCChangeReplayNameRequest, CCChangeReplayNameRequest.Builder> {
    private CCChangeReplayNameRequest() { }
    private static readonly CCChangeReplayNameRequest defaultInstance = new CCChangeReplayNameRequest().MakeReadOnly();
    private static readonly string[] _cCChangeReplayNameRequestFieldNames = new string[] { "comb_id", "id", "name" };
    private static readonly uint[] _cCChangeReplayNameRequestFieldTags = new uint[] { 18, 10, 26 };
    public static CCChangeReplayNameRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeReplayNameRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeReplayNameRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int CombIdFieldNumber = 2;
    private bool hasCombId;
    private string combId_ = "";
    public bool HasCombId {
      get { return hasCombId; }
    }
    public string CombId {
      get { return combId_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeReplayNameRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasCombId) {
        output.WriteString(2, field_names[0], CombId);
      }
      if (hasName) {
        output.WriteString(3, field_names[2], Name);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasCombId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CombId);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasCombId) hash ^= combId_.GetHashCode();
      if (hasName) hash ^= name_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeReplayNameRequest other = obj as CCChangeReplayNameRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasCombId != other.hasCombId || (hasCombId && !combId_.Equals(other.combId_))) return false;
      if (hasName != other.hasName || (hasName && !name_.Equals(other.name_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("comb_id", hasCombId, combId_, writer);
      PrintField("name", hasName, name_, writer);
    }
    #endregion
    
    public static CCChangeReplayNameRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeReplayNameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeReplayNameRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeReplayNameRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeReplayNameRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeReplayNameRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeReplayNameRequest result;
      
      private CCChangeReplayNameRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeReplayNameRequest original = result;
          result = new CCChangeReplayNameRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeReplayNameRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeReplayNameRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeReplayNameRequest.DefaultInstance; }
      }
      
      public override CCChangeReplayNameRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeReplayNameRequest) {
          return MergeFrom((CCChangeReplayNameRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeReplayNameRequest other) {
        if (other == global::com.golf.proto.CCChangeReplayNameRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCombId) {
          CombId = other.CombId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeReplayNameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeReplayNameRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasCombId = input.ReadString(ref result.combId_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasCombId {
        get { return result.hasCombId; }
      }
      public string CombId {
        get { return result.CombId; }
        set { SetCombId(value); }
      }
      public Builder SetCombId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombId = true;
        result.combId_ = value;
        return this;
      }
      public Builder ClearCombId() {
        PrepareBuilder();
        result.hasCombId = false;
        result.combId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static CCChangeReplayNameRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeReplayNameResponse : pb::GeneratedMessageLite<CCChangeReplayNameResponse, CCChangeReplayNameResponse.Builder> {
    private CCChangeReplayNameResponse() { }
    private static readonly CCChangeReplayNameResponse defaultInstance = new CCChangeReplayNameResponse().MakeReadOnly();
    private static readonly string[] _cCChangeReplayNameResponseFieldNames = new string[] { "comb_id", "result" };
    private static readonly uint[] _cCChangeReplayNameResponseFieldTags = new uint[] { 18, 8 };
    public static CCChangeReplayNameResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeReplayNameResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeReplayNameResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int CombIdFieldNumber = 2;
    private bool hasCombId;
    private string combId_ = "";
    public bool HasCombId {
      get { return hasCombId; }
    }
    public string CombId {
      get { return combId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeReplayNameResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasCombId) {
        output.WriteString(2, field_names[0], CombId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasCombId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CombId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasCombId) hash ^= combId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeReplayNameResponse other = obj as CCChangeReplayNameResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasCombId != other.hasCombId || (hasCombId && !combId_.Equals(other.combId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("comb_id", hasCombId, combId_, writer);
    }
    #endregion
    
    public static CCChangeReplayNameResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeReplayNameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeReplayNameResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeReplayNameResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeReplayNameResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeReplayNameResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeReplayNameResponse result;
      
      private CCChangeReplayNameResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeReplayNameResponse original = result;
          result = new CCChangeReplayNameResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeReplayNameResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeReplayNameResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeReplayNameResponse.DefaultInstance; }
      }
      
      public override CCChangeReplayNameResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeReplayNameResponse) {
          return MergeFrom((CCChangeReplayNameResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeReplayNameResponse other) {
        if (other == global::com.golf.proto.CCChangeReplayNameResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasCombId) {
          CombId = other.CombId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeReplayNameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeReplayNameResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              result.hasCombId = input.ReadString(ref result.combId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasCombId {
        get { return result.hasCombId; }
      }
      public string CombId {
        get { return result.CombId; }
        set { SetCombId(value); }
      }
      public Builder SetCombId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombId = true;
        result.combId_ = value;
        return this;
      }
      public Builder ClearCombId() {
        PrepareBuilder();
        result.hasCombId = false;
        result.combId_ = "";
        return this;
      }
    }
    static CCChangeReplayNameResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCFavoriteReplayRequest : pb::GeneratedMessageLite<CCFavoriteReplayRequest, CCFavoriteReplayRequest.Builder> {
    private CCFavoriteReplayRequest() { }
    private static readonly CCFavoriteReplayRequest defaultInstance = new CCFavoriteReplayRequest().MakeReadOnly();
    private static readonly string[] _cCFavoriteReplayRequestFieldNames = new string[] { "comb_id", "id" };
    private static readonly uint[] _cCFavoriteReplayRequestFieldTags = new uint[] { 18, 10 };
    public static CCFavoriteReplayRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCFavoriteReplayRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCFavoriteReplayRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int CombIdFieldNumber = 2;
    private bool hasCombId;
    private string combId_ = "";
    public bool HasCombId {
      get { return hasCombId; }
    }
    public string CombId {
      get { return combId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCFavoriteReplayRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasCombId) {
        output.WriteString(2, field_names[0], CombId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasCombId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CombId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasCombId) hash ^= combId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCFavoriteReplayRequest other = obj as CCFavoriteReplayRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasCombId != other.hasCombId || (hasCombId && !combId_.Equals(other.combId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("comb_id", hasCombId, combId_, writer);
    }
    #endregion
    
    public static CCFavoriteReplayRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFavoriteReplayRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCFavoriteReplayRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCFavoriteReplayRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCFavoriteReplayRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCFavoriteReplayRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCFavoriteReplayRequest result;
      
      private CCFavoriteReplayRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCFavoriteReplayRequest original = result;
          result = new CCFavoriteReplayRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCFavoriteReplayRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCFavoriteReplayRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCFavoriteReplayRequest.DefaultInstance; }
      }
      
      public override CCFavoriteReplayRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCFavoriteReplayRequest) {
          return MergeFrom((CCFavoriteReplayRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCFavoriteReplayRequest other) {
        if (other == global::com.golf.proto.CCFavoriteReplayRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCombId) {
          CombId = other.CombId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCFavoriteReplayRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCFavoriteReplayRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasCombId = input.ReadString(ref result.combId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasCombId {
        get { return result.hasCombId; }
      }
      public string CombId {
        get { return result.CombId; }
        set { SetCombId(value); }
      }
      public Builder SetCombId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombId = true;
        result.combId_ = value;
        return this;
      }
      public Builder ClearCombId() {
        PrepareBuilder();
        result.hasCombId = false;
        result.combId_ = "";
        return this;
      }
    }
    static CCFavoriteReplayRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCFavoriteReplayResponse : pb::GeneratedMessageLite<CCFavoriteReplayResponse, CCFavoriteReplayResponse.Builder> {
    private CCFavoriteReplayResponse() { }
    private static readonly CCFavoriteReplayResponse defaultInstance = new CCFavoriteReplayResponse().MakeReadOnly();
    private static readonly string[] _cCFavoriteReplayResponseFieldNames = new string[] { "comb_id", "result" };
    private static readonly uint[] _cCFavoriteReplayResponseFieldTags = new uint[] { 18, 8 };
    public static CCFavoriteReplayResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCFavoriteReplayResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCFavoriteReplayResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int CombIdFieldNumber = 2;
    private bool hasCombId;
    private string combId_ = "";
    public bool HasCombId {
      get { return hasCombId; }
    }
    public string CombId {
      get { return combId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCFavoriteReplayResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasCombId) {
        output.WriteString(2, field_names[0], CombId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasCombId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, CombId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasCombId) hash ^= combId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCFavoriteReplayResponse other = obj as CCFavoriteReplayResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasCombId != other.hasCombId || (hasCombId && !combId_.Equals(other.combId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("comb_id", hasCombId, combId_, writer);
    }
    #endregion
    
    public static CCFavoriteReplayResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFavoriteReplayResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCFavoriteReplayResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCFavoriteReplayResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCFavoriteReplayResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCFavoriteReplayResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCFavoriteReplayResponse result;
      
      private CCFavoriteReplayResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCFavoriteReplayResponse original = result;
          result = new CCFavoriteReplayResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCFavoriteReplayResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCFavoriteReplayResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCFavoriteReplayResponse.DefaultInstance; }
      }
      
      public override CCFavoriteReplayResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCFavoriteReplayResponse) {
          return MergeFrom((CCFavoriteReplayResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCFavoriteReplayResponse other) {
        if (other == global::com.golf.proto.CCFavoriteReplayResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasCombId) {
          CombId = other.CombId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCFavoriteReplayResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCFavoriteReplayResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              result.hasCombId = input.ReadString(ref result.combId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasCombId {
        get { return result.hasCombId; }
      }
      public string CombId {
        get { return result.CombId; }
        set { SetCombId(value); }
      }
      public Builder SetCombId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCombId = true;
        result.combId_ = value;
        return this;
      }
      public Builder ClearCombId() {
        PrepareBuilder();
        result.hasCombId = false;
        result.combId_ = "";
        return this;
      }
    }
    static CCFavoriteReplayResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUnFavoriteReplayRequest : pb::GeneratedMessageLite<CCUnFavoriteReplayRequest, CCUnFavoriteReplayRequest.Builder> {
    private CCUnFavoriteReplayRequest() { }
    private static readonly CCUnFavoriteReplayRequest defaultInstance = new CCUnFavoriteReplayRequest().MakeReadOnly();
    private static readonly string[] _cCUnFavoriteReplayRequestFieldNames = new string[] { "comb_ids", "id" };
    private static readonly uint[] _cCUnFavoriteReplayRequestFieldTags = new uint[] { 18, 10 };
    public static CCUnFavoriteReplayRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUnFavoriteReplayRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUnFavoriteReplayRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int CombIdsFieldNumber = 2;
    private pbc::PopsicleList<string> combIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> CombIdsList {
      get { return pbc::Lists.AsReadOnly(combIds_); }
    }
    public int CombIdsCount {
      get { return combIds_.Count; }
    }
    public string GetCombIds(int index) {
      return combIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUnFavoriteReplayRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (combIds_.Count > 0) {
        output.WriteStringArray(2, field_names[0], combIds_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      {
        int dataSize = 0;
        foreach (string element in CombIdsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * combIds_.Count;
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      foreach(string i in combIds_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUnFavoriteReplayRequest other = obj as CCUnFavoriteReplayRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if(combIds_.Count != other.combIds_.Count) return false;
      for(int ix=0; ix < combIds_.Count; ix++)
        if(!combIds_[ix].Equals(other.combIds_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("comb_ids", combIds_, writer);
    }
    #endregion
    
    public static CCUnFavoriteReplayRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUnFavoriteReplayRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUnFavoriteReplayRequest MakeReadOnly() {
      combIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUnFavoriteReplayRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUnFavoriteReplayRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUnFavoriteReplayRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUnFavoriteReplayRequest result;
      
      private CCUnFavoriteReplayRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUnFavoriteReplayRequest original = result;
          result = new CCUnFavoriteReplayRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUnFavoriteReplayRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUnFavoriteReplayRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCUnFavoriteReplayRequest.DefaultInstance; }
      }
      
      public override CCUnFavoriteReplayRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUnFavoriteReplayRequest) {
          return MergeFrom((CCUnFavoriteReplayRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUnFavoriteReplayRequest other) {
        if (other == global::com.golf.proto.CCUnFavoriteReplayRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.combIds_.Count != 0) {
          result.combIds_.Add(other.combIds_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUnFavoriteReplayRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUnFavoriteReplayRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.combIds_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> CombIdsList {
        get { return PrepareBuilder().combIds_; }
      }
      public int CombIdsCount {
        get { return result.CombIdsCount; }
      }
      public string GetCombIds(int index) {
        return result.GetCombIds(index);
      }
      public Builder SetCombIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.combIds_[index] = value;
        return this;
      }
      public Builder AddCombIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.combIds_.Add(value);
        return this;
      }
      public Builder AddRangeCombIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.combIds_.Add(values);
        return this;
      }
      public Builder ClearCombIds() {
        PrepareBuilder();
        result.combIds_.Clear();
        return this;
      }
    }
    static CCUnFavoriteReplayRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUnFavoriteReplayResponse : pb::GeneratedMessageLite<CCUnFavoriteReplayResponse, CCUnFavoriteReplayResponse.Builder> {
    private CCUnFavoriteReplayResponse() { }
    private static readonly CCUnFavoriteReplayResponse defaultInstance = new CCUnFavoriteReplayResponse().MakeReadOnly();
    private static readonly string[] _cCUnFavoriteReplayResponseFieldNames = new string[] { "comb_ids", "result" };
    private static readonly uint[] _cCUnFavoriteReplayResponseFieldTags = new uint[] { 18, 8 };
    public static CCUnFavoriteReplayResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUnFavoriteReplayResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUnFavoriteReplayResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int CombIdsFieldNumber = 2;
    private pbc::PopsicleList<string> combIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> CombIdsList {
      get { return pbc::Lists.AsReadOnly(combIds_); }
    }
    public int CombIdsCount {
      get { return combIds_.Count; }
    }
    public string GetCombIds(int index) {
      return combIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUnFavoriteReplayResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (combIds_.Count > 0) {
        output.WriteStringArray(2, field_names[0], combIds_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      {
        int dataSize = 0;
        foreach (string element in CombIdsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * combIds_.Count;
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(string i in combIds_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUnFavoriteReplayResponse other = obj as CCUnFavoriteReplayResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(combIds_.Count != other.combIds_.Count) return false;
      for(int ix=0; ix < combIds_.Count; ix++)
        if(!combIds_[ix].Equals(other.combIds_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("comb_ids", combIds_, writer);
    }
    #endregion
    
    public static CCUnFavoriteReplayResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUnFavoriteReplayResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUnFavoriteReplayResponse MakeReadOnly() {
      combIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUnFavoriteReplayResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUnFavoriteReplayResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUnFavoriteReplayResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUnFavoriteReplayResponse result;
      
      private CCUnFavoriteReplayResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUnFavoriteReplayResponse original = result;
          result = new CCUnFavoriteReplayResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUnFavoriteReplayResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUnFavoriteReplayResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCUnFavoriteReplayResponse.DefaultInstance; }
      }
      
      public override CCUnFavoriteReplayResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUnFavoriteReplayResponse) {
          return MergeFrom((CCUnFavoriteReplayResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUnFavoriteReplayResponse other) {
        if (other == global::com.golf.proto.CCUnFavoriteReplayResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.combIds_.Count != 0) {
          result.combIds_.Add(other.combIds_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUnFavoriteReplayResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUnFavoriteReplayResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.combIds_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> CombIdsList {
        get { return PrepareBuilder().combIds_; }
      }
      public int CombIdsCount {
        get { return result.CombIdsCount; }
      }
      public string GetCombIds(int index) {
        return result.GetCombIds(index);
      }
      public Builder SetCombIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.combIds_[index] = value;
        return this;
      }
      public Builder AddCombIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.combIds_.Add(value);
        return this;
      }
      public Builder AddRangeCombIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.combIds_.Add(values);
        return this;
      }
      public Builder ClearCombIds() {
        PrepareBuilder();
        result.combIds_.Clear();
        return this;
      }
    }
    static CCUnFavoriteReplayResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetRobotOperateRequest : pb::GeneratedMessageLite<CCGetRobotOperateRequest, CCGetRobotOperateRequest.Builder> {
    private CCGetRobotOperateRequest() { }
    private static readonly CCGetRobotOperateRequest defaultInstance = new CCGetRobotOperateRequest().MakeReadOnly();
    private static readonly string[] _cCGetRobotOperateRequestFieldNames = new string[] { "id", "is_extra", "round_cnt" };
    private static readonly uint[] _cCGetRobotOperateRequestFieldTags = new uint[] { 10, 24, 16 };
    public static CCGetRobotOperateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetRobotOperateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetRobotOperateRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int RoundCntFieldNumber = 2;
    private bool hasRoundCnt;
    private int roundCnt_;
    public bool HasRoundCnt {
      get { return hasRoundCnt; }
    }
    public int RoundCnt {
      get { return roundCnt_; }
    }
    
    public const int IsExtraFieldNumber = 3;
    private bool hasIsExtra;
    private bool isExtra_;
    public bool HasIsExtra {
      get { return hasIsExtra; }
    }
    public bool IsExtra {
      get { return isExtra_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetRobotOperateRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasRoundCnt) {
        output.WriteInt32(2, field_names[2], RoundCnt);
      }
      if (hasIsExtra) {
        output.WriteBool(3, field_names[1], IsExtra);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasRoundCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, RoundCnt);
      }
      if (hasIsExtra) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, IsExtra);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasRoundCnt) hash ^= roundCnt_.GetHashCode();
      if (hasIsExtra) hash ^= isExtra_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetRobotOperateRequest other = obj as CCGetRobotOperateRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasRoundCnt != other.hasRoundCnt || (hasRoundCnt && !roundCnt_.Equals(other.roundCnt_))) return false;
      if (hasIsExtra != other.hasIsExtra || (hasIsExtra && !isExtra_.Equals(other.isExtra_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("round_cnt", hasRoundCnt, roundCnt_, writer);
      PrintField("is_extra", hasIsExtra, isExtra_, writer);
    }
    #endregion
    
    public static CCGetRobotOperateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRobotOperateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetRobotOperateRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetRobotOperateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetRobotOperateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetRobotOperateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetRobotOperateRequest result;
      
      private CCGetRobotOperateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetRobotOperateRequest original = result;
          result = new CCGetRobotOperateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetRobotOperateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetRobotOperateRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetRobotOperateRequest.DefaultInstance; }
      }
      
      public override CCGetRobotOperateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetRobotOperateRequest) {
          return MergeFrom((CCGetRobotOperateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetRobotOperateRequest other) {
        if (other == global::com.golf.proto.CCGetRobotOperateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasRoundCnt) {
          RoundCnt = other.RoundCnt;
        }
        if (other.HasIsExtra) {
          IsExtra = other.IsExtra;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetRobotOperateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetRobotOperateRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasRoundCnt = input.ReadInt32(ref result.roundCnt_);
              break;
            }
            case 24: {
              result.hasIsExtra = input.ReadBool(ref result.isExtra_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasRoundCnt {
        get { return result.hasRoundCnt; }
      }
      public int RoundCnt {
        get { return result.RoundCnt; }
        set { SetRoundCnt(value); }
      }
      public Builder SetRoundCnt(int value) {
        PrepareBuilder();
        result.hasRoundCnt = true;
        result.roundCnt_ = value;
        return this;
      }
      public Builder ClearRoundCnt() {
        PrepareBuilder();
        result.hasRoundCnt = false;
        result.roundCnt_ = 0;
        return this;
      }
      
      public bool HasIsExtra {
        get { return result.hasIsExtra; }
      }
      public bool IsExtra {
        get { return result.IsExtra; }
        set { SetIsExtra(value); }
      }
      public Builder SetIsExtra(bool value) {
        PrepareBuilder();
        result.hasIsExtra = true;
        result.isExtra_ = value;
        return this;
      }
      public Builder ClearIsExtra() {
        PrepareBuilder();
        result.hasIsExtra = false;
        result.isExtra_ = false;
        return this;
      }
    }
    static CCGetRobotOperateRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetRobotOperateResponse : pb::GeneratedMessageLite<CCGetRobotOperateResponse, CCGetRobotOperateResponse.Builder> {
    private CCGetRobotOperateResponse() { }
    private static readonly CCGetRobotOperateResponse defaultInstance = new CCGetRobotOperateResponse().MakeReadOnly();
    private static readonly string[] _cCGetRobotOperateResponseFieldNames = new string[] { "data", "result" };
    private static readonly uint[] _cCGetRobotOperateResponseFieldTags = new uint[] { 18, 8 };
    public static CCGetRobotOperateResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetRobotOperateResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetRobotOperateResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private global::com.golf.proto.CCOperateData data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::com.golf.proto.CCOperateData Data {
      get { return data_ ?? global::com.golf.proto.CCOperateData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetRobotOperateResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasData) {
        output.WriteMessage(2, field_names[0], Data);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Data);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasData) hash ^= data_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetRobotOperateResponse other = obj as CCGetRobotOperateResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasData != other.hasData || (hasData && !data_.Equals(other.data_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("data", hasData, data_, writer);
    }
    #endregion
    
    public static CCGetRobotOperateResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRobotOperateResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetRobotOperateResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetRobotOperateResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetRobotOperateResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetRobotOperateResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetRobotOperateResponse result;
      
      private CCGetRobotOperateResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetRobotOperateResponse original = result;
          result = new CCGetRobotOperateResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetRobotOperateResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetRobotOperateResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetRobotOperateResponse.DefaultInstance; }
      }
      
      public override CCGetRobotOperateResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetRobotOperateResponse) {
          return MergeFrom((CCGetRobotOperateResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetRobotOperateResponse other) {
        if (other == global::com.golf.proto.CCGetRobotOperateResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasData) {
          MergeData(other.Data);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetRobotOperateResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetRobotOperateResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCOperateData.Builder subBuilder = global::com.golf.proto.CCOperateData.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::com.golf.proto.CCOperateData Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::com.golf.proto.CCOperateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::com.golf.proto.CCOperateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::com.golf.proto.CCOperateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::com.golf.proto.CCOperateData.DefaultInstance) {
            result.data_ = global::com.golf.proto.CCOperateData.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
    }
    static CCGetRobotOperateResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetUserInfoRequest : pb::GeneratedMessageLite<CCGetUserInfoRequest, CCGetUserInfoRequest.Builder> {
    private CCGetUserInfoRequest() { }
    private static readonly CCGetUserInfoRequest defaultInstance = new CCGetUserInfoRequest().MakeReadOnly();
    private static readonly string[] _cCGetUserInfoRequestFieldNames = new string[] { "id", "tgt_id" };
    private static readonly uint[] _cCGetUserInfoRequestFieldTags = new uint[] { 10, 18 };
    public static CCGetUserInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetUserInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetUserInfoRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TgtIdFieldNumber = 2;
    private bool hasTgtId;
    private string tgtId_ = "";
    public bool HasTgtId {
      get { return hasTgtId; }
    }
    public string TgtId {
      get { return tgtId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetUserInfoRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasTgtId) {
        output.WriteString(2, field_names[1], TgtId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasTgtId) {
        size += pb::CodedOutputStream.ComputeStringSize(2, TgtId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasTgtId) hash ^= tgtId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetUserInfoRequest other = obj as CCGetUserInfoRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasTgtId != other.hasTgtId || (hasTgtId && !tgtId_.Equals(other.tgtId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("tgt_id", hasTgtId, tgtId_, writer);
    }
    #endregion
    
    public static CCGetUserInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetUserInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetUserInfoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetUserInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetUserInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetUserInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetUserInfoRequest result;
      
      private CCGetUserInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetUserInfoRequest original = result;
          result = new CCGetUserInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetUserInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetUserInfoRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetUserInfoRequest.DefaultInstance; }
      }
      
      public override CCGetUserInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetUserInfoRequest) {
          return MergeFrom((CCGetUserInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetUserInfoRequest other) {
        if (other == global::com.golf.proto.CCGetUserInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTgtId) {
          TgtId = other.TgtId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetUserInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetUserInfoRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasTgtId = input.ReadString(ref result.tgtId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTgtId {
        get { return result.hasTgtId; }
      }
      public string TgtId {
        get { return result.TgtId; }
        set { SetTgtId(value); }
      }
      public Builder SetTgtId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTgtId = true;
        result.tgtId_ = value;
        return this;
      }
      public Builder ClearTgtId() {
        PrepareBuilder();
        result.hasTgtId = false;
        result.tgtId_ = "";
        return this;
      }
    }
    static CCGetUserInfoRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetUserInfoResponse : pb::GeneratedMessageLite<CCGetUserInfoResponse, CCGetUserInfoResponse.Builder> {
    private CCGetUserInfoResponse() { }
    private static readonly CCGetUserInfoResponse defaultInstance = new CCGetUserInfoResponse().MakeReadOnly();
    private static readonly string[] _cCGetUserInfoResponseFieldNames = new string[] { "c_statis_status", "history_rank_status", "result", "s_user_data" };
    private static readonly uint[] _cCGetUserInfoResponseFieldTags = new uint[] { 26, 34, 8, 18 };
    public static CCGetUserInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetUserInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetUserInfoResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int SUserDataFieldNumber = 2;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public const int CStatisStatusFieldNumber = 3;
    private bool hasCStatisStatus;
    private global::com.golf.proto.CCContestStatisStatus cStatisStatus_;
    public bool HasCStatisStatus {
      get { return hasCStatisStatus; }
    }
    public global::com.golf.proto.CCContestStatisStatus CStatisStatus {
      get { return cStatisStatus_ ?? global::com.golf.proto.CCContestStatisStatus.DefaultInstance; }
    }
    
    public const int HistoryRankStatusFieldNumber = 4;
    private bool hasHistoryRankStatus;
    private global::com.golf.proto.CCHistoryRankStatus historyRankStatus_;
    public bool HasHistoryRankStatus {
      get { return hasHistoryRankStatus; }
    }
    public global::com.golf.proto.CCHistoryRankStatus HistoryRankStatus {
      get { return historyRankStatus_ ?? global::com.golf.proto.CCHistoryRankStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetUserInfoResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[2], Result);
      }
      if (hasSUserData) {
        output.WriteMessage(2, field_names[3], SUserData);
      }
      if (hasCStatisStatus) {
        output.WriteMessage(3, field_names[0], CStatisStatus);
      }
      if (hasHistoryRankStatus) {
        output.WriteMessage(4, field_names[1], HistoryRankStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SUserData);
      }
      if (hasCStatisStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, CStatisStatus);
      }
      if (hasHistoryRankStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, HistoryRankStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      if (hasCStatisStatus) hash ^= cStatisStatus_.GetHashCode();
      if (hasHistoryRankStatus) hash ^= historyRankStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetUserInfoResponse other = obj as CCGetUserInfoResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      if (hasCStatisStatus != other.hasCStatisStatus || (hasCStatisStatus && !cStatisStatus_.Equals(other.cStatisStatus_))) return false;
      if (hasHistoryRankStatus != other.hasHistoryRankStatus || (hasHistoryRankStatus && !historyRankStatus_.Equals(other.historyRankStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
      PrintField("c_statis_status", hasCStatisStatus, cStatisStatus_, writer);
      PrintField("history_rank_status", hasHistoryRankStatus, historyRankStatus_, writer);
    }
    #endregion
    
    public static CCGetUserInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetUserInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetUserInfoResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetUserInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetUserInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetUserInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetUserInfoResponse result;
      
      private CCGetUserInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetUserInfoResponse original = result;
          result = new CCGetUserInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetUserInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetUserInfoResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetUserInfoResponse.DefaultInstance; }
      }
      
      public override CCGetUserInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetUserInfoResponse) {
          return MergeFrom((CCGetUserInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetUserInfoResponse other) {
        if (other == global::com.golf.proto.CCGetUserInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        if (other.HasCStatisStatus) {
          MergeCStatisStatus(other.CStatisStatus);
        }
        if (other.HasHistoryRankStatus) {
          MergeHistoryRankStatus(other.HistoryRankStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetUserInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetUserInfoResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCContestStatisStatus.Builder subBuilder = global::com.golf.proto.CCContestStatisStatus.CreateBuilder();
              if (result.hasCStatisStatus) {
                subBuilder.MergeFrom(CStatisStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CStatisStatus = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCHistoryRankStatus.Builder subBuilder = global::com.golf.proto.CCHistoryRankStatus.CreateBuilder();
              if (result.hasHistoryRankStatus) {
                subBuilder.MergeFrom(HistoryRankStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HistoryRankStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
      
      public bool HasCStatisStatus {
       get { return result.hasCStatisStatus; }
      }
      public global::com.golf.proto.CCContestStatisStatus CStatisStatus {
        get { return result.CStatisStatus; }
        set { SetCStatisStatus(value); }
      }
      public Builder SetCStatisStatus(global::com.golf.proto.CCContestStatisStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCStatisStatus = true;
        result.cStatisStatus_ = value;
        return this;
      }
      public Builder SetCStatisStatus(global::com.golf.proto.CCContestStatisStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCStatisStatus = true;
        result.cStatisStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCStatisStatus(global::com.golf.proto.CCContestStatisStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCStatisStatus &&
            result.cStatisStatus_ != global::com.golf.proto.CCContestStatisStatus.DefaultInstance) {
            result.cStatisStatus_ = global::com.golf.proto.CCContestStatisStatus.CreateBuilder(result.cStatisStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.cStatisStatus_ = value;
        }
        result.hasCStatisStatus = true;
        return this;
      }
      public Builder ClearCStatisStatus() {
        PrepareBuilder();
        result.hasCStatisStatus = false;
        result.cStatisStatus_ = null;
        return this;
      }
      
      public bool HasHistoryRankStatus {
       get { return result.hasHistoryRankStatus; }
      }
      public global::com.golf.proto.CCHistoryRankStatus HistoryRankStatus {
        get { return result.HistoryRankStatus; }
        set { SetHistoryRankStatus(value); }
      }
      public Builder SetHistoryRankStatus(global::com.golf.proto.CCHistoryRankStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHistoryRankStatus = true;
        result.historyRankStatus_ = value;
        return this;
      }
      public Builder SetHistoryRankStatus(global::com.golf.proto.CCHistoryRankStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHistoryRankStatus = true;
        result.historyRankStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHistoryRankStatus(global::com.golf.proto.CCHistoryRankStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHistoryRankStatus &&
            result.historyRankStatus_ != global::com.golf.proto.CCHistoryRankStatus.DefaultInstance) {
            result.historyRankStatus_ = global::com.golf.proto.CCHistoryRankStatus.CreateBuilder(result.historyRankStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.historyRankStatus_ = value;
        }
        result.hasHistoryRankStatus = true;
        return this;
      }
      public Builder ClearHistoryRankStatus() {
        PrepareBuilder();
        result.hasHistoryRankStatus = false;
        result.historyRankStatus_ = null;
        return this;
      }
    }
    static CCGetUserInfoResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCContestStatisStatus : pb::GeneratedMessageLite<CCContestStatisStatus, CCContestStatisStatus.Builder> {
    private CCContestStatisStatus() { }
    private static readonly CCContestStatisStatus defaultInstance = new CCContestStatisStatus().MakeReadOnly();
    private static readonly string[] _cCContestStatisStatusFieldNames = new string[] { "albs_cnt", "all_cnt", "bird_cnt", "eagle_cnt", "first_max_dst", "hole_cnt", "holes_in_one", "max_win_streak", "par_cnt", "win_cnt", "win_streak", "wins_10" };
    private static readonly uint[] _cCContestStatisStatusFieldTags = new uint[] { 64, 8, 80, 72, 48, 56, 96, 32, 88, 16, 24, 42 };
    public static CCContestStatisStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCContestStatisStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCContestStatisStatus ThisMessage {
      get { return this; }
    }
    
    public const int AllCntFieldNumber = 1;
    private bool hasAllCnt;
    private int allCnt_;
    public bool HasAllCnt {
      get { return hasAllCnt; }
    }
    public int AllCnt {
      get { return allCnt_; }
    }
    
    public const int WinCntFieldNumber = 2;
    private bool hasWinCnt;
    private int winCnt_;
    public bool HasWinCnt {
      get { return hasWinCnt; }
    }
    public int WinCnt {
      get { return winCnt_; }
    }
    
    public const int WinStreakFieldNumber = 3;
    private bool hasWinStreak;
    private int winStreak_;
    public bool HasWinStreak {
      get { return hasWinStreak; }
    }
    public int WinStreak {
      get { return winStreak_; }
    }
    
    public const int MaxWinStreakFieldNumber = 4;
    private bool hasMaxWinStreak;
    private int maxWinStreak_;
    public bool HasMaxWinStreak {
      get { return hasMaxWinStreak; }
    }
    public int MaxWinStreak {
      get { return maxWinStreak_; }
    }
    
    public const int Wins10FieldNumber = 5;
    private bool hasWins10;
    private string wins10_ = "";
    public bool HasWins10 {
      get { return hasWins10; }
    }
    public string Wins10 {
      get { return wins10_; }
    }
    
    public const int FirstMaxDstFieldNumber = 6;
    private bool hasFirstMaxDst;
    private long firstMaxDst_;
    public bool HasFirstMaxDst {
      get { return hasFirstMaxDst; }
    }
    public long FirstMaxDst {
      get { return firstMaxDst_; }
    }
    
    public const int HoleCntFieldNumber = 7;
    private bool hasHoleCnt;
    private int holeCnt_;
    public bool HasHoleCnt {
      get { return hasHoleCnt; }
    }
    public int HoleCnt {
      get { return holeCnt_; }
    }
    
    public const int AlbsCntFieldNumber = 8;
    private bool hasAlbsCnt;
    private int albsCnt_;
    public bool HasAlbsCnt {
      get { return hasAlbsCnt; }
    }
    public int AlbsCnt {
      get { return albsCnt_; }
    }
    
    public const int EagleCntFieldNumber = 9;
    private bool hasEagleCnt;
    private int eagleCnt_;
    public bool HasEagleCnt {
      get { return hasEagleCnt; }
    }
    public int EagleCnt {
      get { return eagleCnt_; }
    }
    
    public const int BirdCntFieldNumber = 10;
    private bool hasBirdCnt;
    private int birdCnt_;
    public bool HasBirdCnt {
      get { return hasBirdCnt; }
    }
    public int BirdCnt {
      get { return birdCnt_; }
    }
    
    public const int ParCntFieldNumber = 11;
    private bool hasParCnt;
    private int parCnt_;
    public bool HasParCnt {
      get { return hasParCnt; }
    }
    public int ParCnt {
      get { return parCnt_; }
    }
    
    public const int HolesInOneFieldNumber = 12;
    private bool hasHolesInOne;
    private int holesInOne_;
    public bool HasHolesInOne {
      get { return hasHolesInOne; }
    }
    public int HolesInOne {
      get { return holesInOne_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCContestStatisStatusFieldNames;
      if (hasAllCnt) {
        output.WriteInt32(1, field_names[1], AllCnt);
      }
      if (hasWinCnt) {
        output.WriteInt32(2, field_names[9], WinCnt);
      }
      if (hasWinStreak) {
        output.WriteInt32(3, field_names[10], WinStreak);
      }
      if (hasMaxWinStreak) {
        output.WriteInt32(4, field_names[7], MaxWinStreak);
      }
      if (hasWins10) {
        output.WriteString(5, field_names[11], Wins10);
      }
      if (hasFirstMaxDst) {
        output.WriteInt64(6, field_names[4], FirstMaxDst);
      }
      if (hasHoleCnt) {
        output.WriteInt32(7, field_names[5], HoleCnt);
      }
      if (hasAlbsCnt) {
        output.WriteInt32(8, field_names[0], AlbsCnt);
      }
      if (hasEagleCnt) {
        output.WriteInt32(9, field_names[3], EagleCnt);
      }
      if (hasBirdCnt) {
        output.WriteInt32(10, field_names[2], BirdCnt);
      }
      if (hasParCnt) {
        output.WriteInt32(11, field_names[8], ParCnt);
      }
      if (hasHolesInOne) {
        output.WriteInt32(12, field_names[6], HolesInOne);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAllCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, AllCnt);
      }
      if (hasWinCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, WinCnt);
      }
      if (hasWinStreak) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, WinStreak);
      }
      if (hasMaxWinStreak) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, MaxWinStreak);
      }
      if (hasWins10) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Wins10);
      }
      if (hasFirstMaxDst) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, FirstMaxDst);
      }
      if (hasHoleCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, HoleCnt);
      }
      if (hasAlbsCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, AlbsCnt);
      }
      if (hasEagleCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, EagleCnt);
      }
      if (hasBirdCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, BirdCnt);
      }
      if (hasParCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, ParCnt);
      }
      if (hasHolesInOne) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, HolesInOne);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasAllCnt) hash ^= allCnt_.GetHashCode();
      if (hasWinCnt) hash ^= winCnt_.GetHashCode();
      if (hasWinStreak) hash ^= winStreak_.GetHashCode();
      if (hasMaxWinStreak) hash ^= maxWinStreak_.GetHashCode();
      if (hasWins10) hash ^= wins10_.GetHashCode();
      if (hasFirstMaxDst) hash ^= firstMaxDst_.GetHashCode();
      if (hasHoleCnt) hash ^= holeCnt_.GetHashCode();
      if (hasAlbsCnt) hash ^= albsCnt_.GetHashCode();
      if (hasEagleCnt) hash ^= eagleCnt_.GetHashCode();
      if (hasBirdCnt) hash ^= birdCnt_.GetHashCode();
      if (hasParCnt) hash ^= parCnt_.GetHashCode();
      if (hasHolesInOne) hash ^= holesInOne_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCContestStatisStatus other = obj as CCContestStatisStatus;
      if (other == null) return false;
      if (hasAllCnt != other.hasAllCnt || (hasAllCnt && !allCnt_.Equals(other.allCnt_))) return false;
      if (hasWinCnt != other.hasWinCnt || (hasWinCnt && !winCnt_.Equals(other.winCnt_))) return false;
      if (hasWinStreak != other.hasWinStreak || (hasWinStreak && !winStreak_.Equals(other.winStreak_))) return false;
      if (hasMaxWinStreak != other.hasMaxWinStreak || (hasMaxWinStreak && !maxWinStreak_.Equals(other.maxWinStreak_))) return false;
      if (hasWins10 != other.hasWins10 || (hasWins10 && !wins10_.Equals(other.wins10_))) return false;
      if (hasFirstMaxDst != other.hasFirstMaxDst || (hasFirstMaxDst && !firstMaxDst_.Equals(other.firstMaxDst_))) return false;
      if (hasHoleCnt != other.hasHoleCnt || (hasHoleCnt && !holeCnt_.Equals(other.holeCnt_))) return false;
      if (hasAlbsCnt != other.hasAlbsCnt || (hasAlbsCnt && !albsCnt_.Equals(other.albsCnt_))) return false;
      if (hasEagleCnt != other.hasEagleCnt || (hasEagleCnt && !eagleCnt_.Equals(other.eagleCnt_))) return false;
      if (hasBirdCnt != other.hasBirdCnt || (hasBirdCnt && !birdCnt_.Equals(other.birdCnt_))) return false;
      if (hasParCnt != other.hasParCnt || (hasParCnt && !parCnt_.Equals(other.parCnt_))) return false;
      if (hasHolesInOne != other.hasHolesInOne || (hasHolesInOne && !holesInOne_.Equals(other.holesInOne_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("all_cnt", hasAllCnt, allCnt_, writer);
      PrintField("win_cnt", hasWinCnt, winCnt_, writer);
      PrintField("win_streak", hasWinStreak, winStreak_, writer);
      PrintField("max_win_streak", hasMaxWinStreak, maxWinStreak_, writer);
      PrintField("wins_10", hasWins10, wins10_, writer);
      PrintField("first_max_dst", hasFirstMaxDst, firstMaxDst_, writer);
      PrintField("hole_cnt", hasHoleCnt, holeCnt_, writer);
      PrintField("albs_cnt", hasAlbsCnt, albsCnt_, writer);
      PrintField("eagle_cnt", hasEagleCnt, eagleCnt_, writer);
      PrintField("bird_cnt", hasBirdCnt, birdCnt_, writer);
      PrintField("par_cnt", hasParCnt, parCnt_, writer);
      PrintField("holes_in_one", hasHolesInOne, holesInOne_, writer);
    }
    #endregion
    
    public static CCContestStatisStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCContestStatisStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCContestStatisStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCContestStatisStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCContestStatisStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCContestStatisStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCContestStatisStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCContestStatisStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCContestStatisStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCContestStatisStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCContestStatisStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCContestStatisStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCContestStatisStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCContestStatisStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCContestStatisStatus result;
      
      private CCContestStatisStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCContestStatisStatus original = result;
          result = new CCContestStatisStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCContestStatisStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCContestStatisStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCContestStatisStatus.DefaultInstance; }
      }
      
      public override CCContestStatisStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCContestStatisStatus) {
          return MergeFrom((CCContestStatisStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCContestStatisStatus other) {
        if (other == global::com.golf.proto.CCContestStatisStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAllCnt) {
          AllCnt = other.AllCnt;
        }
        if (other.HasWinCnt) {
          WinCnt = other.WinCnt;
        }
        if (other.HasWinStreak) {
          WinStreak = other.WinStreak;
        }
        if (other.HasMaxWinStreak) {
          MaxWinStreak = other.MaxWinStreak;
        }
        if (other.HasWins10) {
          Wins10 = other.Wins10;
        }
        if (other.HasFirstMaxDst) {
          FirstMaxDst = other.FirstMaxDst;
        }
        if (other.HasHoleCnt) {
          HoleCnt = other.HoleCnt;
        }
        if (other.HasAlbsCnt) {
          AlbsCnt = other.AlbsCnt;
        }
        if (other.HasEagleCnt) {
          EagleCnt = other.EagleCnt;
        }
        if (other.HasBirdCnt) {
          BirdCnt = other.BirdCnt;
        }
        if (other.HasParCnt) {
          ParCnt = other.ParCnt;
        }
        if (other.HasHolesInOne) {
          HolesInOne = other.HolesInOne;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCContestStatisStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCContestStatisStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAllCnt = input.ReadInt32(ref result.allCnt_);
              break;
            }
            case 16: {
              result.hasWinCnt = input.ReadInt32(ref result.winCnt_);
              break;
            }
            case 24: {
              result.hasWinStreak = input.ReadInt32(ref result.winStreak_);
              break;
            }
            case 32: {
              result.hasMaxWinStreak = input.ReadInt32(ref result.maxWinStreak_);
              break;
            }
            case 42: {
              result.hasWins10 = input.ReadString(ref result.wins10_);
              break;
            }
            case 48: {
              result.hasFirstMaxDst = input.ReadInt64(ref result.firstMaxDst_);
              break;
            }
            case 56: {
              result.hasHoleCnt = input.ReadInt32(ref result.holeCnt_);
              break;
            }
            case 64: {
              result.hasAlbsCnt = input.ReadInt32(ref result.albsCnt_);
              break;
            }
            case 72: {
              result.hasEagleCnt = input.ReadInt32(ref result.eagleCnt_);
              break;
            }
            case 80: {
              result.hasBirdCnt = input.ReadInt32(ref result.birdCnt_);
              break;
            }
            case 88: {
              result.hasParCnt = input.ReadInt32(ref result.parCnt_);
              break;
            }
            case 96: {
              result.hasHolesInOne = input.ReadInt32(ref result.holesInOne_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasAllCnt {
        get { return result.hasAllCnt; }
      }
      public int AllCnt {
        get { return result.AllCnt; }
        set { SetAllCnt(value); }
      }
      public Builder SetAllCnt(int value) {
        PrepareBuilder();
        result.hasAllCnt = true;
        result.allCnt_ = value;
        return this;
      }
      public Builder ClearAllCnt() {
        PrepareBuilder();
        result.hasAllCnt = false;
        result.allCnt_ = 0;
        return this;
      }
      
      public bool HasWinCnt {
        get { return result.hasWinCnt; }
      }
      public int WinCnt {
        get { return result.WinCnt; }
        set { SetWinCnt(value); }
      }
      public Builder SetWinCnt(int value) {
        PrepareBuilder();
        result.hasWinCnt = true;
        result.winCnt_ = value;
        return this;
      }
      public Builder ClearWinCnt() {
        PrepareBuilder();
        result.hasWinCnt = false;
        result.winCnt_ = 0;
        return this;
      }
      
      public bool HasWinStreak {
        get { return result.hasWinStreak; }
      }
      public int WinStreak {
        get { return result.WinStreak; }
        set { SetWinStreak(value); }
      }
      public Builder SetWinStreak(int value) {
        PrepareBuilder();
        result.hasWinStreak = true;
        result.winStreak_ = value;
        return this;
      }
      public Builder ClearWinStreak() {
        PrepareBuilder();
        result.hasWinStreak = false;
        result.winStreak_ = 0;
        return this;
      }
      
      public bool HasMaxWinStreak {
        get { return result.hasMaxWinStreak; }
      }
      public int MaxWinStreak {
        get { return result.MaxWinStreak; }
        set { SetMaxWinStreak(value); }
      }
      public Builder SetMaxWinStreak(int value) {
        PrepareBuilder();
        result.hasMaxWinStreak = true;
        result.maxWinStreak_ = value;
        return this;
      }
      public Builder ClearMaxWinStreak() {
        PrepareBuilder();
        result.hasMaxWinStreak = false;
        result.maxWinStreak_ = 0;
        return this;
      }
      
      public bool HasWins10 {
        get { return result.hasWins10; }
      }
      public string Wins10 {
        get { return result.Wins10; }
        set { SetWins10(value); }
      }
      public Builder SetWins10(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWins10 = true;
        result.wins10_ = value;
        return this;
      }
      public Builder ClearWins10() {
        PrepareBuilder();
        result.hasWins10 = false;
        result.wins10_ = "";
        return this;
      }
      
      public bool HasFirstMaxDst {
        get { return result.hasFirstMaxDst; }
      }
      public long FirstMaxDst {
        get { return result.FirstMaxDst; }
        set { SetFirstMaxDst(value); }
      }
      public Builder SetFirstMaxDst(long value) {
        PrepareBuilder();
        result.hasFirstMaxDst = true;
        result.firstMaxDst_ = value;
        return this;
      }
      public Builder ClearFirstMaxDst() {
        PrepareBuilder();
        result.hasFirstMaxDst = false;
        result.firstMaxDst_ = 0L;
        return this;
      }
      
      public bool HasHoleCnt {
        get { return result.hasHoleCnt; }
      }
      public int HoleCnt {
        get { return result.HoleCnt; }
        set { SetHoleCnt(value); }
      }
      public Builder SetHoleCnt(int value) {
        PrepareBuilder();
        result.hasHoleCnt = true;
        result.holeCnt_ = value;
        return this;
      }
      public Builder ClearHoleCnt() {
        PrepareBuilder();
        result.hasHoleCnt = false;
        result.holeCnt_ = 0;
        return this;
      }
      
      public bool HasAlbsCnt {
        get { return result.hasAlbsCnt; }
      }
      public int AlbsCnt {
        get { return result.AlbsCnt; }
        set { SetAlbsCnt(value); }
      }
      public Builder SetAlbsCnt(int value) {
        PrepareBuilder();
        result.hasAlbsCnt = true;
        result.albsCnt_ = value;
        return this;
      }
      public Builder ClearAlbsCnt() {
        PrepareBuilder();
        result.hasAlbsCnt = false;
        result.albsCnt_ = 0;
        return this;
      }
      
      public bool HasEagleCnt {
        get { return result.hasEagleCnt; }
      }
      public int EagleCnt {
        get { return result.EagleCnt; }
        set { SetEagleCnt(value); }
      }
      public Builder SetEagleCnt(int value) {
        PrepareBuilder();
        result.hasEagleCnt = true;
        result.eagleCnt_ = value;
        return this;
      }
      public Builder ClearEagleCnt() {
        PrepareBuilder();
        result.hasEagleCnt = false;
        result.eagleCnt_ = 0;
        return this;
      }
      
      public bool HasBirdCnt {
        get { return result.hasBirdCnt; }
      }
      public int BirdCnt {
        get { return result.BirdCnt; }
        set { SetBirdCnt(value); }
      }
      public Builder SetBirdCnt(int value) {
        PrepareBuilder();
        result.hasBirdCnt = true;
        result.birdCnt_ = value;
        return this;
      }
      public Builder ClearBirdCnt() {
        PrepareBuilder();
        result.hasBirdCnt = false;
        result.birdCnt_ = 0;
        return this;
      }
      
      public bool HasParCnt {
        get { return result.hasParCnt; }
      }
      public int ParCnt {
        get { return result.ParCnt; }
        set { SetParCnt(value); }
      }
      public Builder SetParCnt(int value) {
        PrepareBuilder();
        result.hasParCnt = true;
        result.parCnt_ = value;
        return this;
      }
      public Builder ClearParCnt() {
        PrepareBuilder();
        result.hasParCnt = false;
        result.parCnt_ = 0;
        return this;
      }
      
      public bool HasHolesInOne {
        get { return result.hasHolesInOne; }
      }
      public int HolesInOne {
        get { return result.HolesInOne; }
        set { SetHolesInOne(value); }
      }
      public Builder SetHolesInOne(int value) {
        PrepareBuilder();
        result.hasHolesInOne = true;
        result.holesInOne_ = value;
        return this;
      }
      public Builder ClearHolesInOne() {
        PrepareBuilder();
        result.hasHolesInOne = false;
        result.holesInOne_ = 0;
        return this;
      }
    }
    static CCContestStatisStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRoundResultStatus : pb::GeneratedMessageLite<CCRoundResultStatus, CCRoundResultStatus.Builder> {
    private CCRoundResultStatus() { }
    private static readonly CCRoundResultStatus defaultInstance = new CCRoundResultStatus().MakeReadOnly();
    private static readonly string[] _cCRoundResultStatusFieldNames = new string[] { "ball_status_ex", "confirm_state", "strick_rs" };
    private static readonly uint[] _cCRoundResultStatusFieldTags = new uint[] { 10, 24, 18 };
    public static CCRoundResultStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRoundResultStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRoundResultStatus ThisMessage {
      get { return this; }
    }
    
    public const int BallStatusExFieldNumber = 1;
    private bool hasBallStatusEx;
    private global::com.golf.proto.CCBallStatusEx ballStatusEx_;
    public bool HasBallStatusEx {
      get { return hasBallStatusEx; }
    }
    public global::com.golf.proto.CCBallStatusEx BallStatusEx {
      get { return ballStatusEx_ ?? global::com.golf.proto.CCBallStatusEx.DefaultInstance; }
    }
    
    public const int StrickRsFieldNumber = 2;
    private bool hasStrickRs;
    private global::com.golf.proto.CCStrickResultStatus strickRs_;
    public bool HasStrickRs {
      get { return hasStrickRs; }
    }
    public global::com.golf.proto.CCStrickResultStatus StrickRs {
      get { return strickRs_ ?? global::com.golf.proto.CCStrickResultStatus.DefaultInstance; }
    }
    
    public const int ConfirmStateFieldNumber = 3;
    private bool hasConfirmState;
    private int confirmState_;
    public bool HasConfirmState {
      get { return hasConfirmState; }
    }
    public int ConfirmState {
      get { return confirmState_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRoundResultStatusFieldNames;
      if (hasBallStatusEx) {
        output.WriteMessage(1, field_names[0], BallStatusEx);
      }
      if (hasStrickRs) {
        output.WriteMessage(2, field_names[2], StrickRs);
      }
      if (hasConfirmState) {
        output.WriteInt32(3, field_names[1], ConfirmState);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBallStatusEx) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, BallStatusEx);
      }
      if (hasStrickRs) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, StrickRs);
      }
      if (hasConfirmState) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, ConfirmState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBallStatusEx) hash ^= ballStatusEx_.GetHashCode();
      if (hasStrickRs) hash ^= strickRs_.GetHashCode();
      if (hasConfirmState) hash ^= confirmState_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRoundResultStatus other = obj as CCRoundResultStatus;
      if (other == null) return false;
      if (hasBallStatusEx != other.hasBallStatusEx || (hasBallStatusEx && !ballStatusEx_.Equals(other.ballStatusEx_))) return false;
      if (hasStrickRs != other.hasStrickRs || (hasStrickRs && !strickRs_.Equals(other.strickRs_))) return false;
      if (hasConfirmState != other.hasConfirmState || (hasConfirmState && !confirmState_.Equals(other.confirmState_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("ball_status_ex", hasBallStatusEx, ballStatusEx_, writer);
      PrintField("strick_rs", hasStrickRs, strickRs_, writer);
      PrintField("confirm_state", hasConfirmState, confirmState_, writer);
    }
    #endregion
    
    public static CCRoundResultStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoundResultStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoundResultStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoundResultStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoundResultStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoundResultStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRoundResultStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRoundResultStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRoundResultStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoundResultStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRoundResultStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRoundResultStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRoundResultStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRoundResultStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRoundResultStatus result;
      
      private CCRoundResultStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRoundResultStatus original = result;
          result = new CCRoundResultStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRoundResultStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRoundResultStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCRoundResultStatus.DefaultInstance; }
      }
      
      public override CCRoundResultStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRoundResultStatus) {
          return MergeFrom((CCRoundResultStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRoundResultStatus other) {
        if (other == global::com.golf.proto.CCRoundResultStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBallStatusEx) {
          MergeBallStatusEx(other.BallStatusEx);
        }
        if (other.HasStrickRs) {
          MergeStrickRs(other.StrickRs);
        }
        if (other.HasConfirmState) {
          ConfirmState = other.ConfirmState;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRoundResultStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRoundResultStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCBallStatusEx.Builder subBuilder = global::com.golf.proto.CCBallStatusEx.CreateBuilder();
              if (result.hasBallStatusEx) {
                subBuilder.MergeFrom(BallStatusEx);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BallStatusEx = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCStrickResultStatus.Builder subBuilder = global::com.golf.proto.CCStrickResultStatus.CreateBuilder();
              if (result.hasStrickRs) {
                subBuilder.MergeFrom(StrickRs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StrickRs = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasConfirmState = input.ReadInt32(ref result.confirmState_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBallStatusEx {
       get { return result.hasBallStatusEx; }
      }
      public global::com.golf.proto.CCBallStatusEx BallStatusEx {
        get { return result.BallStatusEx; }
        set { SetBallStatusEx(value); }
      }
      public Builder SetBallStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBallStatusEx = true;
        result.ballStatusEx_ = value;
        return this;
      }
      public Builder SetBallStatusEx(global::com.golf.proto.CCBallStatusEx.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBallStatusEx = true;
        result.ballStatusEx_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBallStatusEx(global::com.golf.proto.CCBallStatusEx value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBallStatusEx &&
            result.ballStatusEx_ != global::com.golf.proto.CCBallStatusEx.DefaultInstance) {
            result.ballStatusEx_ = global::com.golf.proto.CCBallStatusEx.CreateBuilder(result.ballStatusEx_).MergeFrom(value).BuildPartial();
        } else {
          result.ballStatusEx_ = value;
        }
        result.hasBallStatusEx = true;
        return this;
      }
      public Builder ClearBallStatusEx() {
        PrepareBuilder();
        result.hasBallStatusEx = false;
        result.ballStatusEx_ = null;
        return this;
      }
      
      public bool HasStrickRs {
       get { return result.hasStrickRs; }
      }
      public global::com.golf.proto.CCStrickResultStatus StrickRs {
        get { return result.StrickRs; }
        set { SetStrickRs(value); }
      }
      public Builder SetStrickRs(global::com.golf.proto.CCStrickResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrickRs = true;
        result.strickRs_ = value;
        return this;
      }
      public Builder SetStrickRs(global::com.golf.proto.CCStrickResultStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStrickRs = true;
        result.strickRs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStrickRs(global::com.golf.proto.CCStrickResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStrickRs &&
            result.strickRs_ != global::com.golf.proto.CCStrickResultStatus.DefaultInstance) {
            result.strickRs_ = global::com.golf.proto.CCStrickResultStatus.CreateBuilder(result.strickRs_).MergeFrom(value).BuildPartial();
        } else {
          result.strickRs_ = value;
        }
        result.hasStrickRs = true;
        return this;
      }
      public Builder ClearStrickRs() {
        PrepareBuilder();
        result.hasStrickRs = false;
        result.strickRs_ = null;
        return this;
      }
      
      public bool HasConfirmState {
        get { return result.hasConfirmState; }
      }
      public int ConfirmState {
        get { return result.ConfirmState; }
        set { SetConfirmState(value); }
      }
      public Builder SetConfirmState(int value) {
        PrepareBuilder();
        result.hasConfirmState = true;
        result.confirmState_ = value;
        return this;
      }
      public Builder ClearConfirmState() {
        PrepareBuilder();
        result.hasConfirmState = false;
        result.confirmState_ = 0;
        return this;
      }
    }
    static CCRoundResultStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCStrickResultStatus : pb::GeneratedMessageLite<CCStrickResultStatus, CCStrickResultStatus.Builder> {
    private CCStrickResultStatus() { }
    private static readonly CCStrickResultStatus defaultInstance = new CCStrickResultStatus().MakeReadOnly();
    private static readonly string[] _cCStrickResultStatusFieldNames = new string[] { "ball_area", "has_bounced", "scene_name", "start_on_green", "strick_type" };
    private static readonly uint[] _cCStrickResultStatusFieldTags = new uint[] { 32, 16, 42, 24, 8 };
    public static CCStrickResultStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCStrickResultStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCStrickResultStatus ThisMessage {
      get { return this; }
    }
    
    public const int StrickTypeFieldNumber = 1;
    private bool hasStrickType;
    private int strickType_;
    public bool HasStrickType {
      get { return hasStrickType; }
    }
    public int StrickType {
      get { return strickType_; }
    }
    
    public const int HasBouncedFieldNumber = 2;
    private bool hasHasBounced;
    private bool hasBounced_;
    public bool HasHasBounced {
      get { return hasHasBounced; }
    }
    public bool HasBounced {
      get { return hasBounced_; }
    }
    
    public const int StartOnGreenFieldNumber = 3;
    private bool hasStartOnGreen;
    private bool startOnGreen_;
    public bool HasStartOnGreen {
      get { return hasStartOnGreen; }
    }
    public bool StartOnGreen {
      get { return startOnGreen_; }
    }
    
    public const int BallAreaFieldNumber = 4;
    private bool hasBallArea;
    private int ballArea_;
    public bool HasBallArea {
      get { return hasBallArea; }
    }
    public int BallArea {
      get { return ballArea_; }
    }
    
    public const int SceneNameFieldNumber = 5;
    private bool hasSceneName;
    private string sceneName_ = "";
    public bool HasSceneName {
      get { return hasSceneName; }
    }
    public string SceneName {
      get { return sceneName_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCStrickResultStatusFieldNames;
      if (hasStrickType) {
        output.WriteInt32(1, field_names[4], StrickType);
      }
      if (hasHasBounced) {
        output.WriteBool(2, field_names[1], HasBounced);
      }
      if (hasStartOnGreen) {
        output.WriteBool(3, field_names[3], StartOnGreen);
      }
      if (hasBallArea) {
        output.WriteInt32(4, field_names[0], BallArea);
      }
      if (hasSceneName) {
        output.WriteString(5, field_names[2], SceneName);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStrickType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, StrickType);
      }
      if (hasHasBounced) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, HasBounced);
      }
      if (hasStartOnGreen) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, StartOnGreen);
      }
      if (hasBallArea) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, BallArea);
      }
      if (hasSceneName) {
        size += pb::CodedOutputStream.ComputeStringSize(5, SceneName);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasStrickType) hash ^= strickType_.GetHashCode();
      if (hasHasBounced) hash ^= hasBounced_.GetHashCode();
      if (hasStartOnGreen) hash ^= startOnGreen_.GetHashCode();
      if (hasBallArea) hash ^= ballArea_.GetHashCode();
      if (hasSceneName) hash ^= sceneName_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCStrickResultStatus other = obj as CCStrickResultStatus;
      if (other == null) return false;
      if (hasStrickType != other.hasStrickType || (hasStrickType && !strickType_.Equals(other.strickType_))) return false;
      if (hasHasBounced != other.hasHasBounced || (hasHasBounced && !hasBounced_.Equals(other.hasBounced_))) return false;
      if (hasStartOnGreen != other.hasStartOnGreen || (hasStartOnGreen && !startOnGreen_.Equals(other.startOnGreen_))) return false;
      if (hasBallArea != other.hasBallArea || (hasBallArea && !ballArea_.Equals(other.ballArea_))) return false;
      if (hasSceneName != other.hasSceneName || (hasSceneName && !sceneName_.Equals(other.sceneName_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("strick_type", hasStrickType, strickType_, writer);
      PrintField("has_bounced", hasHasBounced, hasBounced_, writer);
      PrintField("start_on_green", hasStartOnGreen, startOnGreen_, writer);
      PrintField("ball_area", hasBallArea, ballArea_, writer);
      PrintField("scene_name", hasSceneName, sceneName_, writer);
    }
    #endregion
    
    public static CCStrickResultStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickResultStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickResultStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickResultStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickResultStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickResultStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCStrickResultStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCStrickResultStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCStrickResultStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickResultStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCStrickResultStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCStrickResultStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCStrickResultStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCStrickResultStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCStrickResultStatus result;
      
      private CCStrickResultStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCStrickResultStatus original = result;
          result = new CCStrickResultStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCStrickResultStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCStrickResultStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCStrickResultStatus.DefaultInstance; }
      }
      
      public override CCStrickResultStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCStrickResultStatus) {
          return MergeFrom((CCStrickResultStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCStrickResultStatus other) {
        if (other == global::com.golf.proto.CCStrickResultStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStrickType) {
          StrickType = other.StrickType;
        }
        if (other.HasHasBounced) {
          HasBounced = other.HasBounced;
        }
        if (other.HasStartOnGreen) {
          StartOnGreen = other.StartOnGreen;
        }
        if (other.HasBallArea) {
          BallArea = other.BallArea;
        }
        if (other.HasSceneName) {
          SceneName = other.SceneName;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCStrickResultStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCStrickResultStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStrickType = input.ReadInt32(ref result.strickType_);
              break;
            }
            case 16: {
              result.hasHasBounced = input.ReadBool(ref result.hasBounced_);
              break;
            }
            case 24: {
              result.hasStartOnGreen = input.ReadBool(ref result.startOnGreen_);
              break;
            }
            case 32: {
              result.hasBallArea = input.ReadInt32(ref result.ballArea_);
              break;
            }
            case 42: {
              result.hasSceneName = input.ReadString(ref result.sceneName_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasStrickType {
        get { return result.hasStrickType; }
      }
      public int StrickType {
        get { return result.StrickType; }
        set { SetStrickType(value); }
      }
      public Builder SetStrickType(int value) {
        PrepareBuilder();
        result.hasStrickType = true;
        result.strickType_ = value;
        return this;
      }
      public Builder ClearStrickType() {
        PrepareBuilder();
        result.hasStrickType = false;
        result.strickType_ = 0;
        return this;
      }
      
      public bool HasHasBounced {
        get { return result.hasHasBounced; }
      }
      public bool HasBounced {
        get { return result.HasBounced; }
        set { SetHasBounced(value); }
      }
      public Builder SetHasBounced(bool value) {
        PrepareBuilder();
        result.hasHasBounced = true;
        result.hasBounced_ = value;
        return this;
      }
      public Builder ClearHasBounced() {
        PrepareBuilder();
        result.hasHasBounced = false;
        result.hasBounced_ = false;
        return this;
      }
      
      public bool HasStartOnGreen {
        get { return result.hasStartOnGreen; }
      }
      public bool StartOnGreen {
        get { return result.StartOnGreen; }
        set { SetStartOnGreen(value); }
      }
      public Builder SetStartOnGreen(bool value) {
        PrepareBuilder();
        result.hasStartOnGreen = true;
        result.startOnGreen_ = value;
        return this;
      }
      public Builder ClearStartOnGreen() {
        PrepareBuilder();
        result.hasStartOnGreen = false;
        result.startOnGreen_ = false;
        return this;
      }
      
      public bool HasBallArea {
        get { return result.hasBallArea; }
      }
      public int BallArea {
        get { return result.BallArea; }
        set { SetBallArea(value); }
      }
      public Builder SetBallArea(int value) {
        PrepareBuilder();
        result.hasBallArea = true;
        result.ballArea_ = value;
        return this;
      }
      public Builder ClearBallArea() {
        PrepareBuilder();
        result.hasBallArea = false;
        result.ballArea_ = 0;
        return this;
      }
      
      public bool HasSceneName {
        get { return result.hasSceneName; }
      }
      public string SceneName {
        get { return result.SceneName; }
        set { SetSceneName(value); }
      }
      public Builder SetSceneName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSceneName = true;
        result.sceneName_ = value;
        return this;
      }
      public Builder ClearSceneName() {
        PrepareBuilder();
        result.hasSceneName = false;
        result.sceneName_ = "";
        return this;
      }
    }
    static CCStrickResultStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCStrickStatus : pb::GeneratedMessageLite<CCStrickStatus, CCStrickStatus.Builder> {
    private CCStrickStatus() { }
    private static readonly CCStrickStatus defaultInstance = new CCStrickStatus().MakeReadOnly();
    private static readonly string[] _cCStrickStatusFieldNames = new string[] { "has_stricked", "strick_data" };
    private static readonly uint[] _cCStrickStatusFieldTags = new uint[] { 8, 18 };
    public static CCStrickStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCStrickStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCStrickStatus ThisMessage {
      get { return this; }
    }
    
    public const int HasStrickedFieldNumber = 1;
    private bool hasHasStricked;
    private bool hasStricked_;
    public bool HasHasStricked {
      get { return hasHasStricked; }
    }
    public bool HasStricked {
      get { return hasStricked_; }
    }
    
    public const int StrickDataFieldNumber = 2;
    private bool hasStrickData;
    private global::com.golf.proto.CCStrickData strickData_;
    public bool HasStrickData {
      get { return hasStrickData; }
    }
    public global::com.golf.proto.CCStrickData StrickData {
      get { return strickData_ ?? global::com.golf.proto.CCStrickData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCStrickStatusFieldNames;
      if (hasHasStricked) {
        output.WriteBool(1, field_names[0], HasStricked);
      }
      if (hasStrickData) {
        output.WriteMessage(2, field_names[1], StrickData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHasStricked) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, HasStricked);
      }
      if (hasStrickData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, StrickData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasHasStricked) hash ^= hasStricked_.GetHashCode();
      if (hasStrickData) hash ^= strickData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCStrickStatus other = obj as CCStrickStatus;
      if (other == null) return false;
      if (hasHasStricked != other.hasHasStricked || (hasHasStricked && !hasStricked_.Equals(other.hasStricked_))) return false;
      if (hasStrickData != other.hasStrickData || (hasStrickData && !strickData_.Equals(other.strickData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("has_stricked", hasHasStricked, hasStricked_, writer);
      PrintField("strick_data", hasStrickData, strickData_, writer);
    }
    #endregion
    
    public static CCStrickStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStrickStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStrickStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCStrickStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCStrickStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCStrickStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStrickStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCStrickStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCStrickStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCStrickStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCStrickStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCStrickStatus result;
      
      private CCStrickStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCStrickStatus original = result;
          result = new CCStrickStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCStrickStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCStrickStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCStrickStatus.DefaultInstance; }
      }
      
      public override CCStrickStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCStrickStatus) {
          return MergeFrom((CCStrickStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCStrickStatus other) {
        if (other == global::com.golf.proto.CCStrickStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHasStricked) {
          HasStricked = other.HasStricked;
        }
        if (other.HasStrickData) {
          MergeStrickData(other.StrickData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCStrickStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCStrickStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasHasStricked = input.ReadBool(ref result.hasStricked_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCStrickData.Builder subBuilder = global::com.golf.proto.CCStrickData.CreateBuilder();
              if (result.hasStrickData) {
                subBuilder.MergeFrom(StrickData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StrickData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasHasStricked {
        get { return result.hasHasStricked; }
      }
      public bool HasStricked {
        get { return result.HasStricked; }
        set { SetHasStricked(value); }
      }
      public Builder SetHasStricked(bool value) {
        PrepareBuilder();
        result.hasHasStricked = true;
        result.hasStricked_ = value;
        return this;
      }
      public Builder ClearHasStricked() {
        PrepareBuilder();
        result.hasHasStricked = false;
        result.hasStricked_ = false;
        return this;
      }
      
      public bool HasStrickData {
       get { return result.hasStrickData; }
      }
      public global::com.golf.proto.CCStrickData StrickData {
        get { return result.StrickData; }
        set { SetStrickData(value); }
      }
      public Builder SetStrickData(global::com.golf.proto.CCStrickData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrickData = true;
        result.strickData_ = value;
        return this;
      }
      public Builder SetStrickData(global::com.golf.proto.CCStrickData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStrickData = true;
        result.strickData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStrickData(global::com.golf.proto.CCStrickData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStrickData &&
            result.strickData_ != global::com.golf.proto.CCStrickData.DefaultInstance) {
            result.strickData_ = global::com.golf.proto.CCStrickData.CreateBuilder(result.strickData_).MergeFrom(value).BuildPartial();
        } else {
          result.strickData_ = value;
        }
        result.hasStrickData = true;
        return this;
      }
      public Builder ClearStrickData() {
        PrepareBuilder();
        result.hasStrickData = false;
        result.strickData_ = null;
        return this;
      }
    }
    static CCStrickStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCConfirmRoundResultRequest : pb::GeneratedMessageLite<CCConfirmRoundResultRequest, CCConfirmRoundResultRequest.Builder> {
    private CCConfirmRoundResultRequest() { }
    private static readonly CCConfirmRoundResultRequest defaultInstance = new CCConfirmRoundResultRequest().MakeReadOnly();
    private static readonly string[] _cCConfirmRoundResultRequestFieldNames = new string[] { "id", "rrs" };
    private static readonly uint[] _cCConfirmRoundResultRequestFieldTags = new uint[] { 10, 18 };
    public static CCConfirmRoundResultRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCConfirmRoundResultRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCConfirmRoundResultRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int RrsFieldNumber = 2;
    private bool hasRrs;
    private global::com.golf.proto.CCRoundResultStatus rrs_;
    public bool HasRrs {
      get { return hasRrs; }
    }
    public global::com.golf.proto.CCRoundResultStatus Rrs {
      get { return rrs_ ?? global::com.golf.proto.CCRoundResultStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCConfirmRoundResultRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasRrs) {
        output.WriteMessage(2, field_names[1], Rrs);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasRrs) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Rrs);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasRrs) hash ^= rrs_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCConfirmRoundResultRequest other = obj as CCConfirmRoundResultRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasRrs != other.hasRrs || (hasRrs && !rrs_.Equals(other.rrs_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("rrs", hasRrs, rrs_, writer);
    }
    #endregion
    
    public static CCConfirmRoundResultRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCConfirmRoundResultRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCConfirmRoundResultRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCConfirmRoundResultRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCConfirmRoundResultRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCConfirmRoundResultRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCConfirmRoundResultRequest result;
      
      private CCConfirmRoundResultRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCConfirmRoundResultRequest original = result;
          result = new CCConfirmRoundResultRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCConfirmRoundResultRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCConfirmRoundResultRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCConfirmRoundResultRequest.DefaultInstance; }
      }
      
      public override CCConfirmRoundResultRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCConfirmRoundResultRequest) {
          return MergeFrom((CCConfirmRoundResultRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCConfirmRoundResultRequest other) {
        if (other == global::com.golf.proto.CCConfirmRoundResultRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasRrs) {
          MergeRrs(other.Rrs);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCConfirmRoundResultRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCConfirmRoundResultRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCRoundResultStatus.Builder subBuilder = global::com.golf.proto.CCRoundResultStatus.CreateBuilder();
              if (result.hasRrs) {
                subBuilder.MergeFrom(Rrs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rrs = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasRrs {
       get { return result.hasRrs; }
      }
      public global::com.golf.proto.CCRoundResultStatus Rrs {
        get { return result.Rrs; }
        set { SetRrs(value); }
      }
      public Builder SetRrs(global::com.golf.proto.CCRoundResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRrs = true;
        result.rrs_ = value;
        return this;
      }
      public Builder SetRrs(global::com.golf.proto.CCRoundResultStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRrs = true;
        result.rrs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRrs(global::com.golf.proto.CCRoundResultStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRrs &&
            result.rrs_ != global::com.golf.proto.CCRoundResultStatus.DefaultInstance) {
            result.rrs_ = global::com.golf.proto.CCRoundResultStatus.CreateBuilder(result.rrs_).MergeFrom(value).BuildPartial();
        } else {
          result.rrs_ = value;
        }
        result.hasRrs = true;
        return this;
      }
      public Builder ClearRrs() {
        PrepareBuilder();
        result.hasRrs = false;
        result.rrs_ = null;
        return this;
      }
    }
    static CCConfirmRoundResultRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCConfirmRoundResultResponse : pb::GeneratedMessageLite<CCConfirmRoundResultResponse, CCConfirmRoundResultResponse.Builder> {
    private CCConfirmRoundResultResponse() { }
    private static readonly CCConfirmRoundResultResponse defaultInstance = new CCConfirmRoundResultResponse().MakeReadOnly();
    private static readonly string[] _cCConfirmRoundResultResponseFieldNames = new string[] { "crr_state", "result" };
    private static readonly uint[] _cCConfirmRoundResultResponseFieldTags = new uint[] { 16, 8 };
    public static CCConfirmRoundResultResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCConfirmRoundResultResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCConfirmRoundResultResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int CrrStateFieldNumber = 2;
    private bool hasCrrState;
    private int crrState_;
    public bool HasCrrState {
      get { return hasCrrState; }
    }
    public int CrrState {
      get { return crrState_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCConfirmRoundResultResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasCrrState) {
        output.WriteInt32(2, field_names[0], CrrState);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasCrrState) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CrrState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasCrrState) hash ^= crrState_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCConfirmRoundResultResponse other = obj as CCConfirmRoundResultResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasCrrState != other.hasCrrState || (hasCrrState && !crrState_.Equals(other.crrState_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("crr_state", hasCrrState, crrState_, writer);
    }
    #endregion
    
    public static CCConfirmRoundResultResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCConfirmRoundResultResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCConfirmRoundResultResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCConfirmRoundResultResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCConfirmRoundResultResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCConfirmRoundResultResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCConfirmRoundResultResponse result;
      
      private CCConfirmRoundResultResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCConfirmRoundResultResponse original = result;
          result = new CCConfirmRoundResultResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCConfirmRoundResultResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCConfirmRoundResultResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCConfirmRoundResultResponse.DefaultInstance; }
      }
      
      public override CCConfirmRoundResultResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCConfirmRoundResultResponse) {
          return MergeFrom((CCConfirmRoundResultResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCConfirmRoundResultResponse other) {
        if (other == global::com.golf.proto.CCConfirmRoundResultResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasCrrState) {
          CrrState = other.CrrState;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCConfirmRoundResultResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCConfirmRoundResultResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasCrrState = input.ReadInt32(ref result.crrState_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasCrrState {
        get { return result.hasCrrState; }
      }
      public int CrrState {
        get { return result.CrrState; }
        set { SetCrrState(value); }
      }
      public Builder SetCrrState(int value) {
        PrepareBuilder();
        result.hasCrrState = true;
        result.crrState_ = value;
        return this;
      }
      public Builder ClearCrrState() {
        PrepareBuilder();
        result.hasCrrState = false;
        result.crrState_ = 0;
        return this;
      }
    }
    static CCConfirmRoundResultResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCForceGameOverResponse : pb::GeneratedMessageLite<CCForceGameOverResponse, CCForceGameOverResponse.Builder> {
    private CCForceGameOverResponse() { }
    private static readonly CCForceGameOverResponse defaultInstance = new CCForceGameOverResponse().MakeReadOnly();
    private static readonly string[] _cCForceGameOverResponseFieldNames = new string[] { "des", "result", "title" };
    private static readonly uint[] _cCForceGameOverResponseFieldTags = new uint[] { 26, 8, 18 };
    public static CCForceGameOverResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCForceGameOverResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCForceGameOverResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int TitleFieldNumber = 2;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int DesFieldNumber = 3;
    private bool hasDes;
    private string des_ = "";
    public bool HasDes {
      get { return hasDes; }
    }
    public string Des {
      get { return des_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCForceGameOverResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasTitle) {
        output.WriteString(2, field_names[2], Title);
      }
      if (hasDes) {
        output.WriteString(3, field_names[0], Des);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Title);
      }
      if (hasDes) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Des);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasTitle) hash ^= title_.GetHashCode();
      if (hasDes) hash ^= des_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCForceGameOverResponse other = obj as CCForceGameOverResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasTitle != other.hasTitle || (hasTitle && !title_.Equals(other.title_))) return false;
      if (hasDes != other.hasDes || (hasDes && !des_.Equals(other.des_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("title", hasTitle, title_, writer);
      PrintField("des", hasDes, des_, writer);
    }
    #endregion
    
    public static CCForceGameOverResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCForceGameOverResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCForceGameOverResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCForceGameOverResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCForceGameOverResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCForceGameOverResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCForceGameOverResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCForceGameOverResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCForceGameOverResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCForceGameOverResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCForceGameOverResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCForceGameOverResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCForceGameOverResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCForceGameOverResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCForceGameOverResponse result;
      
      private CCForceGameOverResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCForceGameOverResponse original = result;
          result = new CCForceGameOverResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCForceGameOverResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCForceGameOverResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCForceGameOverResponse.DefaultInstance; }
      }
      
      public override CCForceGameOverResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCForceGameOverResponse) {
          return MergeFrom((CCForceGameOverResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCForceGameOverResponse other) {
        if (other == global::com.golf.proto.CCForceGameOverResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasDes) {
          Des = other.Des;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCForceGameOverResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCForceGameOverResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 26: {
              result.hasDes = input.ReadString(ref result.des_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasDes {
        get { return result.hasDes; }
      }
      public string Des {
        get { return result.Des; }
        set { SetDes(value); }
      }
      public Builder SetDes(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDes = true;
        result.des_ = value;
        return this;
      }
      public Builder ClearDes() {
        PrepareBuilder();
        result.hasDes = false;
        result.des_ = "";
        return this;
      }
    }
    static CCForceGameOverResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetAchRequest : pb::GeneratedMessageLite<CCGetAchRequest, CCGetAchRequest.Builder> {
    private CCGetAchRequest() { }
    private static readonly CCGetAchRequest defaultInstance = new CCGetAchRequest().MakeReadOnly();
    private static readonly string[] _cCGetAchRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetAchRequestFieldTags = new uint[] { 10 };
    public static CCGetAchRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetAchRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetAchRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetAchRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetAchRequest other = obj as CCGetAchRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetAchRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetAchRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetAchRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetAchRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetAchRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetAchRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetAchRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetAchRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetAchRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetAchRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetAchRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetAchRequest result;
      
      private CCGetAchRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetAchRequest original = result;
          result = new CCGetAchRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetAchRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetAchRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetAchRequest.DefaultInstance; }
      }
      
      public override CCGetAchRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetAchRequest) {
          return MergeFrom((CCGetAchRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetAchRequest other) {
        if (other == global::com.golf.proto.CCGetAchRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetAchRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetAchRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetAchRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetAchResponse : pb::GeneratedMessageLite<CCGetAchResponse, CCGetAchResponse.Builder> {
    private CCGetAchResponse() { }
    private static readonly CCGetAchResponse defaultInstance = new CCGetAchResponse().MakeReadOnly();
    private static readonly string[] _cCGetAchResponseFieldNames = new string[] { "ach_states", "result", "server_push" };
    private static readonly uint[] _cCGetAchResponseFieldTags = new uint[] { 18, 8, 24 };
    public static CCGetAchResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetAchResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetAchResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int AchStatesFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCAchState> achStates_ = new pbc::PopsicleList<global::com.golf.proto.CCAchState>();
    public scg::IList<global::com.golf.proto.CCAchState> AchStatesList {
      get { return achStates_; }
    }
    public int AchStatesCount {
      get { return achStates_.Count; }
    }
    public global::com.golf.proto.CCAchState GetAchStates(int index) {
      return achStates_[index];
    }
    
    public const int ServerPushFieldNumber = 3;
    private bool hasServerPush;
    private bool serverPush_;
    public bool HasServerPush {
      get { return hasServerPush; }
    }
    public bool ServerPush {
      get { return serverPush_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetAchResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (achStates_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], achStates_);
      }
      if (hasServerPush) {
        output.WriteBool(3, field_names[2], ServerPush);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      foreach (global::com.golf.proto.CCAchState element in AchStatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasServerPush) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ServerPush);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(global::com.golf.proto.CCAchState i in achStates_)
        hash ^= i.GetHashCode();
      if (hasServerPush) hash ^= serverPush_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetAchResponse other = obj as CCGetAchResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(achStates_.Count != other.achStates_.Count) return false;
      for(int ix=0; ix < achStates_.Count; ix++)
        if(!achStates_[ix].Equals(other.achStates_[ix])) return false;
      if (hasServerPush != other.hasServerPush || (hasServerPush && !serverPush_.Equals(other.serverPush_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("ach_states", achStates_, writer);
      PrintField("server_push", hasServerPush, serverPush_, writer);
    }
    #endregion
    
    public static CCGetAchResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetAchResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetAchResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetAchResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetAchResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetAchResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetAchResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetAchResponse MakeReadOnly() {
      achStates_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetAchResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetAchResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetAchResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetAchResponse result;
      
      private CCGetAchResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetAchResponse original = result;
          result = new CCGetAchResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetAchResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetAchResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetAchResponse.DefaultInstance; }
      }
      
      public override CCGetAchResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetAchResponse) {
          return MergeFrom((CCGetAchResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetAchResponse other) {
        if (other == global::com.golf.proto.CCGetAchResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.achStates_.Count != 0) {
          result.achStates_.Add(other.achStates_);
        }
        if (other.HasServerPush) {
          ServerPush = other.ServerPush;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetAchResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetAchResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.achStates_, global::com.golf.proto.CCAchState.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasServerPush = input.ReadBool(ref result.serverPush_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCAchState> AchStatesList {
        get { return PrepareBuilder().achStates_; }
      }
      public int AchStatesCount {
        get { return result.AchStatesCount; }
      }
      public global::com.golf.proto.CCAchState GetAchStates(int index) {
        return result.GetAchStates(index);
      }
      public Builder SetAchStates(int index, global::com.golf.proto.CCAchState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achStates_[index] = value;
        return this;
      }
      public Builder SetAchStates(int index, global::com.golf.proto.CCAchState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achStates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchStates(global::com.golf.proto.CCAchState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achStates_.Add(value);
        return this;
      }
      public Builder AddAchStates(global::com.golf.proto.CCAchState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achStates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchStates(scg::IEnumerable<global::com.golf.proto.CCAchState> values) {
        PrepareBuilder();
        result.achStates_.Add(values);
        return this;
      }
      public Builder ClearAchStates() {
        PrepareBuilder();
        result.achStates_.Clear();
        return this;
      }
      
      public bool HasServerPush {
        get { return result.hasServerPush; }
      }
      public bool ServerPush {
        get { return result.ServerPush; }
        set { SetServerPush(value); }
      }
      public Builder SetServerPush(bool value) {
        PrepareBuilder();
        result.hasServerPush = true;
        result.serverPush_ = value;
        return this;
      }
      public Builder ClearServerPush() {
        PrepareBuilder();
        result.hasServerPush = false;
        result.serverPush_ = false;
        return this;
      }
    }
    static CCGetAchResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetAchRewardRequest : pb::GeneratedMessageLite<CCGetAchRewardRequest, CCGetAchRewardRequest.Builder> {
    private CCGetAchRewardRequest() { }
    private static readonly CCGetAchRewardRequest defaultInstance = new CCGetAchRewardRequest().MakeReadOnly();
    private static readonly string[] _cCGetAchRewardRequestFieldNames = new string[] { "ach_id", "id" };
    private static readonly uint[] _cCGetAchRewardRequestFieldTags = new uint[] { 16, 10 };
    public static CCGetAchRewardRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetAchRewardRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetAchRewardRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int AchIdFieldNumber = 2;
    private bool hasAchId;
    private int achId_;
    public bool HasAchId {
      get { return hasAchId; }
    }
    public int AchId {
      get { return achId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetAchRewardRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasAchId) {
        output.WriteInt32(2, field_names[0], AchId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasAchId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, AchId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasAchId) hash ^= achId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetAchRewardRequest other = obj as CCGetAchRewardRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasAchId != other.hasAchId || (hasAchId && !achId_.Equals(other.achId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("ach_id", hasAchId, achId_, writer);
    }
    #endregion
    
    public static CCGetAchRewardRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetAchRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetAchRewardRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetAchRewardRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetAchRewardRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetAchRewardRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetAchRewardRequest result;
      
      private CCGetAchRewardRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetAchRewardRequest original = result;
          result = new CCGetAchRewardRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetAchRewardRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetAchRewardRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetAchRewardRequest.DefaultInstance; }
      }
      
      public override CCGetAchRewardRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetAchRewardRequest) {
          return MergeFrom((CCGetAchRewardRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetAchRewardRequest other) {
        if (other == global::com.golf.proto.CCGetAchRewardRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasAchId) {
          AchId = other.AchId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetAchRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetAchRewardRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasAchId = input.ReadInt32(ref result.achId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasAchId {
        get { return result.hasAchId; }
      }
      public int AchId {
        get { return result.AchId; }
        set { SetAchId(value); }
      }
      public Builder SetAchId(int value) {
        PrepareBuilder();
        result.hasAchId = true;
        result.achId_ = value;
        return this;
      }
      public Builder ClearAchId() {
        PrepareBuilder();
        result.hasAchId = false;
        result.achId_ = 0;
        return this;
      }
    }
    static CCGetAchRewardRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetAchRewardResponse : pb::GeneratedMessageLite<CCGetAchRewardResponse, CCGetAchRewardResponse.Builder> {
    private CCGetAchRewardResponse() { }
    private static readonly CCGetAchRewardResponse defaultInstance = new CCGetAchRewardResponse().MakeReadOnly();
    private static readonly string[] _cCGetAchRewardResponseFieldNames = new string[] { "ach_states", "result", "ritems", "user_data" };
    private static readonly uint[] _cCGetAchRewardResponseFieldTags = new uint[] { 18, 8, 34, 26 };
    public static CCGetAchRewardResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetAchRewardResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetAchRewardResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int AchStatesFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCAchState> achStates_ = new pbc::PopsicleList<global::com.golf.proto.CCAchState>();
    public scg::IList<global::com.golf.proto.CCAchState> AchStatesList {
      get { return achStates_; }
    }
    public int AchStatesCount {
      get { return achStates_.Count; }
    }
    public global::com.golf.proto.CCAchState GetAchStates(int index) {
      return achStates_[index];
    }
    
    public const int UserDataFieldNumber = 3;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int RitemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetAchRewardResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (achStates_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], achStates_);
      }
      if (hasUserData) {
        output.WriteMessage(3, field_names[3], UserData);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(4, field_names[2], ritems_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      foreach (global::com.golf.proto.CCAchState element in AchStatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, UserData);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(global::com.golf.proto.CCAchState i in achStates_)
        hash ^= i.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetAchRewardResponse other = obj as CCGetAchRewardResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(achStates_.Count != other.achStates_.Count) return false;
      for(int ix=0; ix < achStates_.Count; ix++)
        if(!achStates_[ix].Equals(other.achStates_[ix])) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("ach_states", achStates_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("ritems", ritems_, writer);
    }
    #endregion
    
    public static CCGetAchRewardResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetAchRewardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetAchRewardResponse MakeReadOnly() {
      achStates_.MakeReadOnly();
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetAchRewardResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetAchRewardResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetAchRewardResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetAchRewardResponse result;
      
      private CCGetAchRewardResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetAchRewardResponse original = result;
          result = new CCGetAchRewardResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetAchRewardResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetAchRewardResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetAchRewardResponse.DefaultInstance; }
      }
      
      public override CCGetAchRewardResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetAchRewardResponse) {
          return MergeFrom((CCGetAchRewardResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetAchRewardResponse other) {
        if (other == global::com.golf.proto.CCGetAchRewardResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.achStates_.Count != 0) {
          result.achStates_.Add(other.achStates_);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetAchRewardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetAchRewardResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.achStates_, global::com.golf.proto.CCAchState.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCAchState> AchStatesList {
        get { return PrepareBuilder().achStates_; }
      }
      public int AchStatesCount {
        get { return result.AchStatesCount; }
      }
      public global::com.golf.proto.CCAchState GetAchStates(int index) {
        return result.GetAchStates(index);
      }
      public Builder SetAchStates(int index, global::com.golf.proto.CCAchState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achStates_[index] = value;
        return this;
      }
      public Builder SetAchStates(int index, global::com.golf.proto.CCAchState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achStates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAchStates(global::com.golf.proto.CCAchState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.achStates_.Add(value);
        return this;
      }
      public Builder AddAchStates(global::com.golf.proto.CCAchState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.achStates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAchStates(scg::IEnumerable<global::com.golf.proto.CCAchState> values) {
        PrepareBuilder();
        result.achStates_.Add(values);
        return this;
      }
      public Builder ClearAchStates() {
        PrepareBuilder();
        result.achStates_.Clear();
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
    }
    static CCGetAchRewardResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCAchState : pb::GeneratedMessageLite<CCAchState, CCAchState.Builder> {
    private CCAchState() { }
    private static readonly CCAchState defaultInstance = new CCAchState().MakeReadOnly();
    private static readonly string[] _cCAchStateFieldNames = new string[] { "completed", "id", "progress", "rewarded", "state" };
    private static readonly uint[] _cCAchStateFieldTags = new uint[] { 24, 8, 16, 32, 40 };
    public static CCAchState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCAchState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCAchState ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int ProgressFieldNumber = 2;
    private bool hasProgress;
    private long progress_;
    public bool HasProgress {
      get { return hasProgress; }
    }
    public long Progress {
      get { return progress_; }
    }
    
    public const int CompletedFieldNumber = 3;
    private bool hasCompleted;
    private bool completed_;
    public bool HasCompleted {
      get { return hasCompleted; }
    }
    public bool Completed {
      get { return completed_; }
    }
    
    public const int RewardedFieldNumber = 4;
    private bool hasRewarded;
    private bool rewarded_;
    public bool HasRewarded {
      get { return hasRewarded; }
    }
    public bool Rewarded {
      get { return rewarded_; }
    }
    
    public const int StateFieldNumber = 5;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCAchStateFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasProgress) {
        output.WriteInt64(2, field_names[2], Progress);
      }
      if (hasCompleted) {
        output.WriteBool(3, field_names[0], Completed);
      }
      if (hasRewarded) {
        output.WriteBool(4, field_names[3], Rewarded);
      }
      if (hasState) {
        output.WriteInt32(5, field_names[4], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasProgress) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, Progress);
      }
      if (hasCompleted) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Completed);
      }
      if (hasRewarded) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Rewarded);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasProgress) hash ^= progress_.GetHashCode();
      if (hasCompleted) hash ^= completed_.GetHashCode();
      if (hasRewarded) hash ^= rewarded_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCAchState other = obj as CCAchState;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasProgress != other.hasProgress || (hasProgress && !progress_.Equals(other.progress_))) return false;
      if (hasCompleted != other.hasCompleted || (hasCompleted && !completed_.Equals(other.completed_))) return false;
      if (hasRewarded != other.hasRewarded || (hasRewarded && !rewarded_.Equals(other.rewarded_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("progress", hasProgress, progress_, writer);
      PrintField("completed", hasCompleted, completed_, writer);
      PrintField("rewarded", hasRewarded, rewarded_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCAchState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAchState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAchState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCAchState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCAchState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAchState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCAchState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCAchState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCAchState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCAchState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCAchState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCAchState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCAchState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCAchState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCAchState result;
      
      private CCAchState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCAchState original = result;
          result = new CCAchState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCAchState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCAchState DefaultInstanceForType {
        get { return global::com.golf.proto.CCAchState.DefaultInstance; }
      }
      
      public override CCAchState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCAchState) {
          return MergeFrom((CCAchState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCAchState other) {
        if (other == global::com.golf.proto.CCAchState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasProgress) {
          Progress = other.Progress;
        }
        if (other.HasCompleted) {
          Completed = other.Completed;
        }
        if (other.HasRewarded) {
          Rewarded = other.Rewarded;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCAchStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCAchStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasProgress = input.ReadInt64(ref result.progress_);
              break;
            }
            case 24: {
              result.hasCompleted = input.ReadBool(ref result.completed_);
              break;
            }
            case 32: {
              result.hasRewarded = input.ReadBool(ref result.rewarded_);
              break;
            }
            case 40: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasProgress {
        get { return result.hasProgress; }
      }
      public long Progress {
        get { return result.Progress; }
        set { SetProgress(value); }
      }
      public Builder SetProgress(long value) {
        PrepareBuilder();
        result.hasProgress = true;
        result.progress_ = value;
        return this;
      }
      public Builder ClearProgress() {
        PrepareBuilder();
        result.hasProgress = false;
        result.progress_ = 0L;
        return this;
      }
      
      public bool HasCompleted {
        get { return result.hasCompleted; }
      }
      public bool Completed {
        get { return result.Completed; }
        set { SetCompleted(value); }
      }
      public Builder SetCompleted(bool value) {
        PrepareBuilder();
        result.hasCompleted = true;
        result.completed_ = value;
        return this;
      }
      public Builder ClearCompleted() {
        PrepareBuilder();
        result.hasCompleted = false;
        result.completed_ = false;
        return this;
      }
      
      public bool HasRewarded {
        get { return result.hasRewarded; }
      }
      public bool Rewarded {
        get { return result.Rewarded; }
        set { SetRewarded(value); }
      }
      public Builder SetRewarded(bool value) {
        PrepareBuilder();
        result.hasRewarded = true;
        result.rewarded_ = value;
        return this;
      }
      public Builder ClearRewarded() {
        PrepareBuilder();
        result.hasRewarded = false;
        result.rewarded_ = false;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCAchState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetPromotionRequest : pb::GeneratedMessageLite<CCGetPromotionRequest, CCGetPromotionRequest.Builder> {
    private CCGetPromotionRequest() { }
    private static readonly CCGetPromotionRequest defaultInstance = new CCGetPromotionRequest().MakeReadOnly();
    private static readonly string[] _cCGetPromotionRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetPromotionRequestFieldTags = new uint[] { 10 };
    public static CCGetPromotionRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetPromotionRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetPromotionRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetPromotionRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetPromotionRequest other = obj as CCGetPromotionRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetPromotionRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetPromotionRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetPromotionRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetPromotionRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetPromotionRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetPromotionRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetPromotionRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetPromotionRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetPromotionRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetPromotionRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetPromotionRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetPromotionRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetPromotionRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetPromotionRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetPromotionRequest result;
      
      private CCGetPromotionRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetPromotionRequest original = result;
          result = new CCGetPromotionRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetPromotionRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetPromotionRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetPromotionRequest.DefaultInstance; }
      }
      
      public override CCGetPromotionRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetPromotionRequest) {
          return MergeFrom((CCGetPromotionRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetPromotionRequest other) {
        if (other == global::com.golf.proto.CCGetPromotionRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetPromotionRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetPromotionRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetPromotionRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetPromotionResponse : pb::GeneratedMessageLite<CCGetPromotionResponse, CCGetPromotionResponse.Builder> {
    private CCGetPromotionResponse() { }
    private static readonly CCGetPromotionResponse defaultInstance = new CCGetPromotionResponse().MakeReadOnly();
    private static readonly string[] _cCGetPromotionResponseFieldNames = new string[] { "items", "result", "server_push" };
    private static readonly uint[] _cCGetPromotionResponseFieldTags = new uint[] { 18, 8, 24 };
    public static CCGetPromotionResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetPromotionResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetPromotionResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ItemsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCPromotionItem> items_ = new pbc::PopsicleList<global::com.golf.proto.CCPromotionItem>();
    public scg::IList<global::com.golf.proto.CCPromotionItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::com.golf.proto.CCPromotionItem GetItems(int index) {
      return items_[index];
    }
    
    public const int ServerPushFieldNumber = 3;
    private bool hasServerPush;
    private bool serverPush_;
    public bool HasServerPush {
      get { return hasServerPush; }
    }
    public bool ServerPush {
      get { return serverPush_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetPromotionResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], items_);
      }
      if (hasServerPush) {
        output.WriteBool(3, field_names[2], ServerPush);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      foreach (global::com.golf.proto.CCPromotionItem element in ItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasServerPush) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ServerPush);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(global::com.golf.proto.CCPromotionItem i in items_)
        hash ^= i.GetHashCode();
      if (hasServerPush) hash ^= serverPush_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetPromotionResponse other = obj as CCGetPromotionResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(items_.Count != other.items_.Count) return false;
      for(int ix=0; ix < items_.Count; ix++)
        if(!items_[ix].Equals(other.items_[ix])) return false;
      if (hasServerPush != other.hasServerPush || (hasServerPush && !serverPush_.Equals(other.serverPush_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("items", items_, writer);
      PrintField("server_push", hasServerPush, serverPush_, writer);
    }
    #endregion
    
    public static CCGetPromotionResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetPromotionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetPromotionResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetPromotionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetPromotionResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetPromotionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetPromotionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetPromotionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetPromotionResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetPromotionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetPromotionResponse MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetPromotionResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetPromotionResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetPromotionResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetPromotionResponse result;
      
      private CCGetPromotionResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetPromotionResponse original = result;
          result = new CCGetPromotionResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetPromotionResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetPromotionResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetPromotionResponse.DefaultInstance; }
      }
      
      public override CCGetPromotionResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetPromotionResponse) {
          return MergeFrom((CCGetPromotionResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetPromotionResponse other) {
        if (other == global::com.golf.proto.CCGetPromotionResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasServerPush) {
          ServerPush = other.ServerPush;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetPromotionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetPromotionResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.items_, global::com.golf.proto.CCPromotionItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasServerPush = input.ReadBool(ref result.serverPush_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCPromotionItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::com.golf.proto.CCPromotionItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::com.golf.proto.CCPromotionItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::com.golf.proto.CCPromotionItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::com.golf.proto.CCPromotionItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::com.golf.proto.CCPromotionItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::com.golf.proto.CCPromotionItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasServerPush {
        get { return result.hasServerPush; }
      }
      public bool ServerPush {
        get { return result.ServerPush; }
        set { SetServerPush(value); }
      }
      public Builder SetServerPush(bool value) {
        PrepareBuilder();
        result.hasServerPush = true;
        result.serverPush_ = value;
        return this;
      }
      public Builder ClearServerPush() {
        PrepareBuilder();
        result.hasServerPush = false;
        result.serverPush_ = false;
        return this;
      }
    }
    static CCGetPromotionResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPromotionItem : pb::GeneratedMessageLite<CCPromotionItem, CCPromotionItem.Builder> {
    private CCPromotionItem() { }
    private static readonly CCPromotionItem defaultInstance = new CCPromotionItem().MakeReadOnly();
    private static readonly string[] _cCPromotionItemFieldNames = new string[] { "end_time", "id", "start_time", "type" };
    private static readonly uint[] _cCPromotionItemFieldTags = new uint[] { 32, 16, 24, 8 };
    public static CCPromotionItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPromotionItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPromotionItem ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int StartTimeFieldNumber = 3;
    private bool hasStartTime;
    private long startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public long StartTime {
      get { return startTime_; }
    }
    
    public const int EndTimeFieldNumber = 4;
    private bool hasEndTime;
    private long endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public long EndTime {
      get { return endTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPromotionItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[3], Type);
      }
      if (hasId) {
        output.WriteInt32(2, field_names[1], Id);
      }
      if (hasStartTime) {
        output.WriteInt64(3, field_names[2], StartTime);
      }
      if (hasEndTime) {
        output.WriteInt64(4, field_names[0], EndTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
      }
      if (hasStartTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, StartTime);
      }
      if (hasEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, EndTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasStartTime) hash ^= startTime_.GetHashCode();
      if (hasEndTime) hash ^= endTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPromotionItem other = obj as CCPromotionItem;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasStartTime != other.hasStartTime || (hasStartTime && !startTime_.Equals(other.startTime_))) return false;
      if (hasEndTime != other.hasEndTime || (hasEndTime && !endTime_.Equals(other.endTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("id", hasId, id_, writer);
      PrintField("start_time", hasStartTime, startTime_, writer);
      PrintField("end_time", hasEndTime, endTime_, writer);
    }
    #endregion
    
    public static CCPromotionItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPromotionItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPromotionItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPromotionItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPromotionItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPromotionItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPromotionItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPromotionItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPromotionItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPromotionItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPromotionItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPromotionItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPromotionItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPromotionItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPromotionItem result;
      
      private CCPromotionItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPromotionItem original = result;
          result = new CCPromotionItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPromotionItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPromotionItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCPromotionItem.DefaultInstance; }
      }
      
      public override CCPromotionItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPromotionItem) {
          return MergeFrom((CCPromotionItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPromotionItem other) {
        if (other == global::com.golf.proto.CCPromotionItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPromotionItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPromotionItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 24: {
              result.hasStartTime = input.ReadInt64(ref result.startTime_);
              break;
            }
            case 32: {
              result.hasEndTime = input.ReadInt64(ref result.endTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public long StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(long value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0L;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public long EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(long value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0L;
        return this;
      }
    }
    static CCPromotionItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetMailsRequest : pb::GeneratedMessageLite<CCGetMailsRequest, CCGetMailsRequest.Builder> {
    private CCGetMailsRequest() { }
    private static readonly CCGetMailsRequest defaultInstance = new CCGetMailsRequest().MakeReadOnly();
    private static readonly string[] _cCGetMailsRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetMailsRequestFieldTags = new uint[] { 10 };
    public static CCGetMailsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetMailsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetMailsRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetMailsRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetMailsRequest other = obj as CCGetMailsRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetMailsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetMailsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetMailsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetMailsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetMailsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetMailsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetMailsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetMailsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetMailsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetMailsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetMailsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetMailsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetMailsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetMailsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetMailsRequest result;
      
      private CCGetMailsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetMailsRequest original = result;
          result = new CCGetMailsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetMailsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetMailsRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetMailsRequest.DefaultInstance; }
      }
      
      public override CCGetMailsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetMailsRequest) {
          return MergeFrom((CCGetMailsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetMailsRequest other) {
        if (other == global::com.golf.proto.CCGetMailsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetMailsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetMailsRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetMailsRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetMailsResponse : pb::GeneratedMessageLite<CCGetMailsResponse, CCGetMailsResponse.Builder> {
    private CCGetMailsResponse() { }
    private static readonly CCGetMailsResponse defaultInstance = new CCGetMailsResponse().MakeReadOnly();
    private static readonly string[] _cCGetMailsResponseFieldNames = new string[] { "exitems", "result", "server_push" };
    private static readonly uint[] _cCGetMailsResponseFieldTags = new uint[] { 18, 8, 24 };
    public static CCGetMailsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetMailsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetMailsResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ExitemsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCExMailItem> exitems_ = new pbc::PopsicleList<global::com.golf.proto.CCExMailItem>();
    public scg::IList<global::com.golf.proto.CCExMailItem> ExitemsList {
      get { return exitems_; }
    }
    public int ExitemsCount {
      get { return exitems_.Count; }
    }
    public global::com.golf.proto.CCExMailItem GetExitems(int index) {
      return exitems_[index];
    }
    
    public const int ServerPushFieldNumber = 3;
    private bool hasServerPush;
    private bool serverPush_;
    public bool HasServerPush {
      get { return hasServerPush; }
    }
    public bool ServerPush {
      get { return serverPush_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetMailsResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (exitems_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], exitems_);
      }
      if (hasServerPush) {
        output.WriteBool(3, field_names[2], ServerPush);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      foreach (global::com.golf.proto.CCExMailItem element in ExitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasServerPush) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ServerPush);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(global::com.golf.proto.CCExMailItem i in exitems_)
        hash ^= i.GetHashCode();
      if (hasServerPush) hash ^= serverPush_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetMailsResponse other = obj as CCGetMailsResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(exitems_.Count != other.exitems_.Count) return false;
      for(int ix=0; ix < exitems_.Count; ix++)
        if(!exitems_[ix].Equals(other.exitems_[ix])) return false;
      if (hasServerPush != other.hasServerPush || (hasServerPush && !serverPush_.Equals(other.serverPush_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("exitems", exitems_, writer);
      PrintField("server_push", hasServerPush, serverPush_, writer);
    }
    #endregion
    
    public static CCGetMailsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetMailsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetMailsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetMailsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetMailsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetMailsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetMailsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetMailsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetMailsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetMailsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetMailsResponse MakeReadOnly() {
      exitems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetMailsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetMailsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetMailsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetMailsResponse result;
      
      private CCGetMailsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetMailsResponse original = result;
          result = new CCGetMailsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetMailsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetMailsResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetMailsResponse.DefaultInstance; }
      }
      
      public override CCGetMailsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetMailsResponse) {
          return MergeFrom((CCGetMailsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetMailsResponse other) {
        if (other == global::com.golf.proto.CCGetMailsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.exitems_.Count != 0) {
          result.exitems_.Add(other.exitems_);
        }
        if (other.HasServerPush) {
          ServerPush = other.ServerPush;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetMailsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetMailsResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.exitems_, global::com.golf.proto.CCExMailItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasServerPush = input.ReadBool(ref result.serverPush_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCExMailItem> ExitemsList {
        get { return PrepareBuilder().exitems_; }
      }
      public int ExitemsCount {
        get { return result.ExitemsCount; }
      }
      public global::com.golf.proto.CCExMailItem GetExitems(int index) {
        return result.GetExitems(index);
      }
      public Builder SetExitems(int index, global::com.golf.proto.CCExMailItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exitems_[index] = value;
        return this;
      }
      public Builder SetExitems(int index, global::com.golf.proto.CCExMailItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exitems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddExitems(global::com.golf.proto.CCExMailItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exitems_.Add(value);
        return this;
      }
      public Builder AddExitems(global::com.golf.proto.CCExMailItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exitems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeExitems(scg::IEnumerable<global::com.golf.proto.CCExMailItem> values) {
        PrepareBuilder();
        result.exitems_.Add(values);
        return this;
      }
      public Builder ClearExitems() {
        PrepareBuilder();
        result.exitems_.Clear();
        return this;
      }
      
      public bool HasServerPush {
        get { return result.hasServerPush; }
      }
      public bool ServerPush {
        get { return result.ServerPush; }
        set { SetServerPush(value); }
      }
      public Builder SetServerPush(bool value) {
        PrepareBuilder();
        result.hasServerPush = true;
        result.serverPush_ = value;
        return this;
      }
      public Builder ClearServerPush() {
        PrepareBuilder();
        result.hasServerPush = false;
        result.serverPush_ = false;
        return this;
      }
    }
    static CCGetMailsResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCHandleMailsRequest : pb::GeneratedMessageLite<CCHandleMailsRequest, CCHandleMailsRequest.Builder> {
    private CCHandleMailsRequest() { }
    private static readonly CCHandleMailsRequest defaultInstance = new CCHandleMailsRequest().MakeReadOnly();
    private static readonly string[] _cCHandleMailsRequestFieldNames = new string[] { "handle_type", "id", "mail_ids", "mail_type" };
    private static readonly uint[] _cCHandleMailsRequestFieldTags = new uint[] { 16, 10, 32, 24 };
    public static CCHandleMailsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCHandleMailsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCHandleMailsRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int HandleTypeFieldNumber = 2;
    private bool hasHandleType;
    private int handleType_;
    public bool HasHandleType {
      get { return hasHandleType; }
    }
    public int HandleType {
      get { return handleType_; }
    }
    
    public const int MailTypeFieldNumber = 3;
    private bool hasMailType;
    private int mailType_;
    public bool HasMailType {
      get { return hasMailType; }
    }
    public int MailType {
      get { return mailType_; }
    }
    
    public const int MailIdsFieldNumber = 4;
    private pbc::PopsicleList<long> mailIds_ = new pbc::PopsicleList<long>();
    public scg::IList<long> MailIdsList {
      get { return pbc::Lists.AsReadOnly(mailIds_); }
    }
    public int MailIdsCount {
      get { return mailIds_.Count; }
    }
    public long GetMailIds(int index) {
      return mailIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCHandleMailsRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasHandleType) {
        output.WriteInt32(2, field_names[0], HandleType);
      }
      if (hasMailType) {
        output.WriteInt32(3, field_names[3], MailType);
      }
      if (mailIds_.Count > 0) {
        output.WriteInt64Array(4, field_names[2], mailIds_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasHandleType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, HandleType);
      }
      if (hasMailType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, MailType);
      }
      {
        int dataSize = 0;
        foreach (long element in MailIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * mailIds_.Count;
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasHandleType) hash ^= handleType_.GetHashCode();
      if (hasMailType) hash ^= mailType_.GetHashCode();
      foreach(long i in mailIds_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCHandleMailsRequest other = obj as CCHandleMailsRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasHandleType != other.hasHandleType || (hasHandleType && !handleType_.Equals(other.handleType_))) return false;
      if (hasMailType != other.hasMailType || (hasMailType && !mailType_.Equals(other.mailType_))) return false;
      if(mailIds_.Count != other.mailIds_.Count) return false;
      for(int ix=0; ix < mailIds_.Count; ix++)
        if(!mailIds_[ix].Equals(other.mailIds_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("handle_type", hasHandleType, handleType_, writer);
      PrintField("mail_type", hasMailType, mailType_, writer);
      PrintField("mail_ids", mailIds_, writer);
    }
    #endregion
    
    public static CCHandleMailsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHandleMailsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHandleMailsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHandleMailsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHandleMailsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHandleMailsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCHandleMailsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCHandleMailsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCHandleMailsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHandleMailsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCHandleMailsRequest MakeReadOnly() {
      mailIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCHandleMailsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCHandleMailsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCHandleMailsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCHandleMailsRequest result;
      
      private CCHandleMailsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCHandleMailsRequest original = result;
          result = new CCHandleMailsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCHandleMailsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCHandleMailsRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCHandleMailsRequest.DefaultInstance; }
      }
      
      public override CCHandleMailsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCHandleMailsRequest) {
          return MergeFrom((CCHandleMailsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCHandleMailsRequest other) {
        if (other == global::com.golf.proto.CCHandleMailsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasHandleType) {
          HandleType = other.HandleType;
        }
        if (other.HasMailType) {
          MailType = other.MailType;
        }
        if (other.mailIds_.Count != 0) {
          result.mailIds_.Add(other.mailIds_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCHandleMailsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCHandleMailsRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasHandleType = input.ReadInt32(ref result.handleType_);
              break;
            }
            case 24: {
              result.hasMailType = input.ReadInt32(ref result.mailType_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt64Array(tag, field_name, result.mailIds_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasHandleType {
        get { return result.hasHandleType; }
      }
      public int HandleType {
        get { return result.HandleType; }
        set { SetHandleType(value); }
      }
      public Builder SetHandleType(int value) {
        PrepareBuilder();
        result.hasHandleType = true;
        result.handleType_ = value;
        return this;
      }
      public Builder ClearHandleType() {
        PrepareBuilder();
        result.hasHandleType = false;
        result.handleType_ = 0;
        return this;
      }
      
      public bool HasMailType {
        get { return result.hasMailType; }
      }
      public int MailType {
        get { return result.MailType; }
        set { SetMailType(value); }
      }
      public Builder SetMailType(int value) {
        PrepareBuilder();
        result.hasMailType = true;
        result.mailType_ = value;
        return this;
      }
      public Builder ClearMailType() {
        PrepareBuilder();
        result.hasMailType = false;
        result.mailType_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<long> MailIdsList {
        get { return PrepareBuilder().mailIds_; }
      }
      public int MailIdsCount {
        get { return result.MailIdsCount; }
      }
      public long GetMailIds(int index) {
        return result.GetMailIds(index);
      }
      public Builder SetMailIds(int index, long value) {
        PrepareBuilder();
        result.mailIds_[index] = value;
        return this;
      }
      public Builder AddMailIds(long value) {
        PrepareBuilder();
        result.mailIds_.Add(value);
        return this;
      }
      public Builder AddRangeMailIds(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.mailIds_.Add(values);
        return this;
      }
      public Builder ClearMailIds() {
        PrepareBuilder();
        result.mailIds_.Clear();
        return this;
      }
    }
    static CCHandleMailsRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCHandleMailsResponse : pb::GeneratedMessageLite<CCHandleMailsResponse, CCHandleMailsResponse.Builder> {
    private CCHandleMailsResponse() { }
    private static readonly CCHandleMailsResponse defaultInstance = new CCHandleMailsResponse().MakeReadOnly();
    private static readonly string[] _cCHandleMailsResponseFieldNames = new string[] { "handle_type", "mail_ids", "mail_type", "result", "ritems", "user_data" };
    private static readonly uint[] _cCHandleMailsResponseFieldTags = new uint[] { 16, 32, 24, 8, 50, 42 };
    public static CCHandleMailsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCHandleMailsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCHandleMailsResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int HandleTypeFieldNumber = 2;
    private bool hasHandleType;
    private int handleType_;
    public bool HasHandleType {
      get { return hasHandleType; }
    }
    public int HandleType {
      get { return handleType_; }
    }
    
    public const int MailTypeFieldNumber = 3;
    private bool hasMailType;
    private int mailType_;
    public bool HasMailType {
      get { return hasMailType; }
    }
    public int MailType {
      get { return mailType_; }
    }
    
    public const int MailIdsFieldNumber = 4;
    private pbc::PopsicleList<long> mailIds_ = new pbc::PopsicleList<long>();
    public scg::IList<long> MailIdsList {
      get { return pbc::Lists.AsReadOnly(mailIds_); }
    }
    public int MailIdsCount {
      get { return mailIds_.Count; }
    }
    public long GetMailIds(int index) {
      return mailIds_[index];
    }
    
    public const int UserDataFieldNumber = 5;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int RitemsFieldNumber = 6;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCHandleMailsResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[3], Result);
      }
      if (hasHandleType) {
        output.WriteInt32(2, field_names[0], HandleType);
      }
      if (hasMailType) {
        output.WriteInt32(3, field_names[2], MailType);
      }
      if (mailIds_.Count > 0) {
        output.WriteInt64Array(4, field_names[1], mailIds_);
      }
      if (hasUserData) {
        output.WriteMessage(5, field_names[5], UserData);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(6, field_names[4], ritems_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasHandleType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, HandleType);
      }
      if (hasMailType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, MailType);
      }
      {
        int dataSize = 0;
        foreach (long element in MailIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * mailIds_.Count;
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, UserData);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasHandleType) hash ^= handleType_.GetHashCode();
      if (hasMailType) hash ^= mailType_.GetHashCode();
      foreach(long i in mailIds_)
        hash ^= i.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCHandleMailsResponse other = obj as CCHandleMailsResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasHandleType != other.hasHandleType || (hasHandleType && !handleType_.Equals(other.handleType_))) return false;
      if (hasMailType != other.hasMailType || (hasMailType && !mailType_.Equals(other.mailType_))) return false;
      if(mailIds_.Count != other.mailIds_.Count) return false;
      for(int ix=0; ix < mailIds_.Count; ix++)
        if(!mailIds_[ix].Equals(other.mailIds_[ix])) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("handle_type", hasHandleType, handleType_, writer);
      PrintField("mail_type", hasMailType, mailType_, writer);
      PrintField("mail_ids", mailIds_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("ritems", ritems_, writer);
    }
    #endregion
    
    public static CCHandleMailsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHandleMailsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHandleMailsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHandleMailsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHandleMailsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHandleMailsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCHandleMailsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCHandleMailsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCHandleMailsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHandleMailsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCHandleMailsResponse MakeReadOnly() {
      mailIds_.MakeReadOnly();
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCHandleMailsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCHandleMailsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCHandleMailsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCHandleMailsResponse result;
      
      private CCHandleMailsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCHandleMailsResponse original = result;
          result = new CCHandleMailsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCHandleMailsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCHandleMailsResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCHandleMailsResponse.DefaultInstance; }
      }
      
      public override CCHandleMailsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCHandleMailsResponse) {
          return MergeFrom((CCHandleMailsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCHandleMailsResponse other) {
        if (other == global::com.golf.proto.CCHandleMailsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasHandleType) {
          HandleType = other.HandleType;
        }
        if (other.HasMailType) {
          MailType = other.MailType;
        }
        if (other.mailIds_.Count != 0) {
          result.mailIds_.Add(other.mailIds_);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCHandleMailsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCHandleMailsResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasHandleType = input.ReadInt32(ref result.handleType_);
              break;
            }
            case 24: {
              result.hasMailType = input.ReadInt32(ref result.mailType_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt64Array(tag, field_name, result.mailIds_);
              break;
            }
            case 42: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasHandleType {
        get { return result.hasHandleType; }
      }
      public int HandleType {
        get { return result.HandleType; }
        set { SetHandleType(value); }
      }
      public Builder SetHandleType(int value) {
        PrepareBuilder();
        result.hasHandleType = true;
        result.handleType_ = value;
        return this;
      }
      public Builder ClearHandleType() {
        PrepareBuilder();
        result.hasHandleType = false;
        result.handleType_ = 0;
        return this;
      }
      
      public bool HasMailType {
        get { return result.hasMailType; }
      }
      public int MailType {
        get { return result.MailType; }
        set { SetMailType(value); }
      }
      public Builder SetMailType(int value) {
        PrepareBuilder();
        result.hasMailType = true;
        result.mailType_ = value;
        return this;
      }
      public Builder ClearMailType() {
        PrepareBuilder();
        result.hasMailType = false;
        result.mailType_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<long> MailIdsList {
        get { return PrepareBuilder().mailIds_; }
      }
      public int MailIdsCount {
        get { return result.MailIdsCount; }
      }
      public long GetMailIds(int index) {
        return result.GetMailIds(index);
      }
      public Builder SetMailIds(int index, long value) {
        PrepareBuilder();
        result.mailIds_[index] = value;
        return this;
      }
      public Builder AddMailIds(long value) {
        PrepareBuilder();
        result.mailIds_.Add(value);
        return this;
      }
      public Builder AddRangeMailIds(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.mailIds_.Add(values);
        return this;
      }
      public Builder ClearMailIds() {
        PrepareBuilder();
        result.mailIds_.Clear();
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
    }
    static CCHandleMailsResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCExMailItem : pb::GeneratedMessageLite<CCExMailItem, CCExMailItem.Builder> {
    private CCExMailItem() { }
    private static readonly CCExMailItem defaultInstance = new CCExMailItem().MakeReadOnly();
    private static readonly string[] _cCExMailItemFieldNames = new string[] { "item", "s_user_data" };
    private static readonly uint[] _cCExMailItemFieldTags = new uint[] { 10, 18 };
    public static CCExMailItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCExMailItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCExMailItem ThisMessage {
      get { return this; }
    }
    
    public const int ItemFieldNumber = 1;
    private bool hasItem;
    private global::com.golf.proto.CCMailItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCMailItem Item {
      get { return item_ ?? global::com.golf.proto.CCMailItem.DefaultInstance; }
    }
    
    public const int SUserDataFieldNumber = 2;
    private bool hasSUserData;
    private global::com.golf.proto.CCSimpleUserData sUserData_;
    public bool HasSUserData {
      get { return hasSUserData; }
    }
    public global::com.golf.proto.CCSimpleUserData SUserData {
      get { return sUserData_ ?? global::com.golf.proto.CCSimpleUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCExMailItemFieldNames;
      if (hasItem) {
        output.WriteMessage(1, field_names[0], Item);
      }
      if (hasSUserData) {
        output.WriteMessage(2, field_names[1], SUserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Item);
      }
      if (hasSUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SUserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasSUserData) hash ^= sUserData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCExMailItem other = obj as CCExMailItem;
      if (other == null) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasSUserData != other.hasSUserData || (hasSUserData && !sUserData_.Equals(other.sUserData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("item", hasItem, item_, writer);
      PrintField("s_user_data", hasSUserData, sUserData_, writer);
    }
    #endregion
    
    public static CCExMailItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCExMailItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCExMailItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCExMailItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCExMailItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCExMailItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCExMailItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCExMailItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCExMailItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCExMailItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCExMailItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCExMailItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCExMailItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCExMailItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCExMailItem result;
      
      private CCExMailItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCExMailItem original = result;
          result = new CCExMailItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCExMailItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCExMailItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCExMailItem.DefaultInstance; }
      }
      
      public override CCExMailItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCExMailItem) {
          return MergeFrom((CCExMailItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCExMailItem other) {
        if (other == global::com.golf.proto.CCExMailItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasSUserData) {
          MergeSUserData(other.SUserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCExMailItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCExMailItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCMailItem.Builder subBuilder = global::com.golf.proto.CCMailItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCSimpleUserData.Builder subBuilder = global::com.golf.proto.CCSimpleUserData.CreateBuilder();
              if (result.hasSUserData) {
                subBuilder.MergeFrom(SUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SUserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCMailItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCMailItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCMailItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCMailItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCMailItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCMailItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasSUserData {
       get { return result.hasSUserData; }
      }
      public global::com.golf.proto.CCSimpleUserData SUserData {
        get { return result.SUserData; }
        set { SetSUserData(value); }
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = value;
        return this;
      }
      public Builder SetSUserData(global::com.golf.proto.CCSimpleUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSUserData = true;
        result.sUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSUserData(global::com.golf.proto.CCSimpleUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSUserData &&
            result.sUserData_ != global::com.golf.proto.CCSimpleUserData.DefaultInstance) {
            result.sUserData_ = global::com.golf.proto.CCSimpleUserData.CreateBuilder(result.sUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.sUserData_ = value;
        }
        result.hasSUserData = true;
        return this;
      }
      public Builder ClearSUserData() {
        PrepareBuilder();
        result.hasSUserData = false;
        result.sUserData_ = null;
        return this;
      }
    }
    static CCExMailItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMailItem : pb::GeneratedMessageLite<CCMailItem, CCMailItem.Builder> {
    private CCMailItem() { }
    private static readonly CCMailItem defaultInstance = new CCMailItem().MakeReadOnly();
    private static readonly string[] _cCMailItemFieldNames = new string[] { "attachment", "content", "delete_type", "mail_id", "sender_id", "sender_name", "state", "subject", "type", "valid_et" };
    private static readonly uint[] _cCMailItemFieldTags = new uint[] { 42, 34, 72, 16, 50, 58, 80, 26, 8, 64 };
    public static CCMailItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMailItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMailItem ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int MailIdFieldNumber = 2;
    private bool hasMailId;
    private long mailId_;
    public bool HasMailId {
      get { return hasMailId; }
    }
    public long MailId {
      get { return mailId_; }
    }
    
    public const int SubjectFieldNumber = 3;
    private bool hasSubject;
    private string subject_ = "";
    public bool HasSubject {
      get { return hasSubject; }
    }
    public string Subject {
      get { return subject_; }
    }
    
    public const int ContentFieldNumber = 4;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int AttachmentFieldNumber = 5;
    private pbc::PopsicleList<global::com.golf.proto.CCItem> attachment_ = new pbc::PopsicleList<global::com.golf.proto.CCItem>();
    public scg::IList<global::com.golf.proto.CCItem> AttachmentList {
      get { return attachment_; }
    }
    public int AttachmentCount {
      get { return attachment_.Count; }
    }
    public global::com.golf.proto.CCItem GetAttachment(int index) {
      return attachment_[index];
    }
    
    public const int SenderIdFieldNumber = 6;
    private bool hasSenderId;
    private string senderId_ = "";
    public bool HasSenderId {
      get { return hasSenderId; }
    }
    public string SenderId {
      get { return senderId_; }
    }
    
    public const int SenderNameFieldNumber = 7;
    private bool hasSenderName;
    private string senderName_ = "";
    public bool HasSenderName {
      get { return hasSenderName; }
    }
    public string SenderName {
      get { return senderName_; }
    }
    
    public const int ValidEtFieldNumber = 8;
    private bool hasValidEt;
    private long validEt_;
    public bool HasValidEt {
      get { return hasValidEt; }
    }
    public long ValidEt {
      get { return validEt_; }
    }
    
    public const int DeleteTypeFieldNumber = 9;
    private bool hasDeleteType;
    private int deleteType_;
    public bool HasDeleteType {
      get { return hasDeleteType; }
    }
    public int DeleteType {
      get { return deleteType_; }
    }
    
    public const int StateFieldNumber = 10;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMailItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[8], Type);
      }
      if (hasMailId) {
        output.WriteInt64(2, field_names[3], MailId);
      }
      if (hasSubject) {
        output.WriteString(3, field_names[7], Subject);
      }
      if (hasContent) {
        output.WriteString(4, field_names[1], Content);
      }
      if (attachment_.Count > 0) {
        output.WriteMessageArray(5, field_names[0], attachment_);
      }
      if (hasSenderId) {
        output.WriteString(6, field_names[4], SenderId);
      }
      if (hasSenderName) {
        output.WriteString(7, field_names[5], SenderName);
      }
      if (hasValidEt) {
        output.WriteInt64(8, field_names[9], ValidEt);
      }
      if (hasDeleteType) {
        output.WriteInt32(9, field_names[2], DeleteType);
      }
      if (hasState) {
        output.WriteInt32(10, field_names[6], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasMailId) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, MailId);
      }
      if (hasSubject) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Subject);
      }
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Content);
      }
      foreach (global::com.golf.proto.CCItem element in AttachmentList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      if (hasSenderId) {
        size += pb::CodedOutputStream.ComputeStringSize(6, SenderId);
      }
      if (hasSenderName) {
        size += pb::CodedOutputStream.ComputeStringSize(7, SenderName);
      }
      if (hasValidEt) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, ValidEt);
      }
      if (hasDeleteType) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, DeleteType);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasMailId) hash ^= mailId_.GetHashCode();
      if (hasSubject) hash ^= subject_.GetHashCode();
      if (hasContent) hash ^= content_.GetHashCode();
      foreach(global::com.golf.proto.CCItem i in attachment_)
        hash ^= i.GetHashCode();
      if (hasSenderId) hash ^= senderId_.GetHashCode();
      if (hasSenderName) hash ^= senderName_.GetHashCode();
      if (hasValidEt) hash ^= validEt_.GetHashCode();
      if (hasDeleteType) hash ^= deleteType_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMailItem other = obj as CCMailItem;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasMailId != other.hasMailId || (hasMailId && !mailId_.Equals(other.mailId_))) return false;
      if (hasSubject != other.hasSubject || (hasSubject && !subject_.Equals(other.subject_))) return false;
      if (hasContent != other.hasContent || (hasContent && !content_.Equals(other.content_))) return false;
      if(attachment_.Count != other.attachment_.Count) return false;
      for(int ix=0; ix < attachment_.Count; ix++)
        if(!attachment_[ix].Equals(other.attachment_[ix])) return false;
      if (hasSenderId != other.hasSenderId || (hasSenderId && !senderId_.Equals(other.senderId_))) return false;
      if (hasSenderName != other.hasSenderName || (hasSenderName && !senderName_.Equals(other.senderName_))) return false;
      if (hasValidEt != other.hasValidEt || (hasValidEt && !validEt_.Equals(other.validEt_))) return false;
      if (hasDeleteType != other.hasDeleteType || (hasDeleteType && !deleteType_.Equals(other.deleteType_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("mail_id", hasMailId, mailId_, writer);
      PrintField("subject", hasSubject, subject_, writer);
      PrintField("content", hasContent, content_, writer);
      PrintField("attachment", attachment_, writer);
      PrintField("sender_id", hasSenderId, senderId_, writer);
      PrintField("sender_name", hasSenderName, senderName_, writer);
      PrintField("valid_et", hasValidEt, validEt_, writer);
      PrintField("delete_type", hasDeleteType, deleteType_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCMailItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMailItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMailItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMailItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMailItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMailItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMailItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMailItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMailItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMailItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMailItem MakeReadOnly() {
      attachment_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMailItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMailItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMailItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMailItem result;
      
      private CCMailItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMailItem original = result;
          result = new CCMailItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMailItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMailItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCMailItem.DefaultInstance; }
      }
      
      public override CCMailItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMailItem) {
          return MergeFrom((CCMailItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMailItem other) {
        if (other == global::com.golf.proto.CCMailItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasMailId) {
          MailId = other.MailId;
        }
        if (other.HasSubject) {
          Subject = other.Subject;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.attachment_.Count != 0) {
          result.attachment_.Add(other.attachment_);
        }
        if (other.HasSenderId) {
          SenderId = other.SenderId;
        }
        if (other.HasSenderName) {
          SenderName = other.SenderName;
        }
        if (other.HasValidEt) {
          ValidEt = other.ValidEt;
        }
        if (other.HasDeleteType) {
          DeleteType = other.DeleteType;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMailItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMailItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasMailId = input.ReadInt64(ref result.mailId_);
              break;
            }
            case 26: {
              result.hasSubject = input.ReadString(ref result.subject_);
              break;
            }
            case 34: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.attachment_, global::com.golf.proto.CCItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              result.hasSenderId = input.ReadString(ref result.senderId_);
              break;
            }
            case 58: {
              result.hasSenderName = input.ReadString(ref result.senderName_);
              break;
            }
            case 64: {
              result.hasValidEt = input.ReadInt64(ref result.validEt_);
              break;
            }
            case 72: {
              result.hasDeleteType = input.ReadInt32(ref result.deleteType_);
              break;
            }
            case 80: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasMailId {
        get { return result.hasMailId; }
      }
      public long MailId {
        get { return result.MailId; }
        set { SetMailId(value); }
      }
      public Builder SetMailId(long value) {
        PrepareBuilder();
        result.hasMailId = true;
        result.mailId_ = value;
        return this;
      }
      public Builder ClearMailId() {
        PrepareBuilder();
        result.hasMailId = false;
        result.mailId_ = 0L;
        return this;
      }
      
      public bool HasSubject {
        get { return result.hasSubject; }
      }
      public string Subject {
        get { return result.Subject; }
        set { SetSubject(value); }
      }
      public Builder SetSubject(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSubject = true;
        result.subject_ = value;
        return this;
      }
      public Builder ClearSubject() {
        PrepareBuilder();
        result.hasSubject = false;
        result.subject_ = "";
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCItem> AttachmentList {
        get { return PrepareBuilder().attachment_; }
      }
      public int AttachmentCount {
        get { return result.AttachmentCount; }
      }
      public global::com.golf.proto.CCItem GetAttachment(int index) {
        return result.GetAttachment(index);
      }
      public Builder SetAttachment(int index, global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachment_[index] = value;
        return this;
      }
      public Builder SetAttachment(int index, global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachment_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachment(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachment_.Add(value);
        return this;
      }
      public Builder AddAttachment(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachment_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachment(scg::IEnumerable<global::com.golf.proto.CCItem> values) {
        PrepareBuilder();
        result.attachment_.Add(values);
        return this;
      }
      public Builder ClearAttachment() {
        PrepareBuilder();
        result.attachment_.Clear();
        return this;
      }
      
      public bool HasSenderId {
        get { return result.hasSenderId; }
      }
      public string SenderId {
        get { return result.SenderId; }
        set { SetSenderId(value); }
      }
      public Builder SetSenderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderId = true;
        result.senderId_ = value;
        return this;
      }
      public Builder ClearSenderId() {
        PrepareBuilder();
        result.hasSenderId = false;
        result.senderId_ = "";
        return this;
      }
      
      public bool HasSenderName {
        get { return result.hasSenderName; }
      }
      public string SenderName {
        get { return result.SenderName; }
        set { SetSenderName(value); }
      }
      public Builder SetSenderName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderName = true;
        result.senderName_ = value;
        return this;
      }
      public Builder ClearSenderName() {
        PrepareBuilder();
        result.hasSenderName = false;
        result.senderName_ = "";
        return this;
      }
      
      public bool HasValidEt {
        get { return result.hasValidEt; }
      }
      public long ValidEt {
        get { return result.ValidEt; }
        set { SetValidEt(value); }
      }
      public Builder SetValidEt(long value) {
        PrepareBuilder();
        result.hasValidEt = true;
        result.validEt_ = value;
        return this;
      }
      public Builder ClearValidEt() {
        PrepareBuilder();
        result.hasValidEt = false;
        result.validEt_ = 0L;
        return this;
      }
      
      public bool HasDeleteType {
        get { return result.hasDeleteType; }
      }
      public int DeleteType {
        get { return result.DeleteType; }
        set { SetDeleteType(value); }
      }
      public Builder SetDeleteType(int value) {
        PrepareBuilder();
        result.hasDeleteType = true;
        result.deleteType_ = value;
        return this;
      }
      public Builder ClearDeleteType() {
        PrepareBuilder();
        result.hasDeleteType = false;
        result.deleteType_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCMailItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetFreeBonusStatusRequest : pb::GeneratedMessageLite<CCGetFreeBonusStatusRequest, CCGetFreeBonusStatusRequest.Builder> {
    private CCGetFreeBonusStatusRequest() { }
    private static readonly CCGetFreeBonusStatusRequest defaultInstance = new CCGetFreeBonusStatusRequest().MakeReadOnly();
    private static readonly string[] _cCGetFreeBonusStatusRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetFreeBonusStatusRequestFieldTags = new uint[] { 10 };
    public static CCGetFreeBonusStatusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetFreeBonusStatusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetFreeBonusStatusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetFreeBonusStatusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetFreeBonusStatusRequest other = obj as CCGetFreeBonusStatusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetFreeBonusStatusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetFreeBonusStatusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetFreeBonusStatusRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetFreeBonusStatusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetFreeBonusStatusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetFreeBonusStatusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetFreeBonusStatusRequest result;
      
      private CCGetFreeBonusStatusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetFreeBonusStatusRequest original = result;
          result = new CCGetFreeBonusStatusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetFreeBonusStatusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetFreeBonusStatusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetFreeBonusStatusRequest.DefaultInstance; }
      }
      
      public override CCGetFreeBonusStatusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetFreeBonusStatusRequest) {
          return MergeFrom((CCGetFreeBonusStatusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetFreeBonusStatusRequest other) {
        if (other == global::com.golf.proto.CCGetFreeBonusStatusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetFreeBonusStatusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetFreeBonusStatusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetFreeBonusStatusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetFreeBonusStatusResponse : pb::GeneratedMessageLite<CCGetFreeBonusStatusResponse, CCGetFreeBonusStatusResponse.Builder> {
    private CCGetFreeBonusStatusResponse() { }
    private static readonly CCGetFreeBonusStatusResponse defaultInstance = new CCGetFreeBonusStatusResponse().MakeReadOnly();
    private static readonly string[] _cCGetFreeBonusStatusResponseFieldNames = new string[] { "result", "status" };
    private static readonly uint[] _cCGetFreeBonusStatusResponseFieldTags = new uint[] { 8, 18 };
    public static CCGetFreeBonusStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetFreeBonusStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetFreeBonusStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCFreeBonusStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCFreeBonusStatus Status {
      get { return status_ ?? global::com.golf.proto.CCFreeBonusStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetFreeBonusStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[1], Status);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetFreeBonusStatusResponse other = obj as CCGetFreeBonusStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", hasStatus, status_, writer);
    }
    #endregion
    
    public static CCGetFreeBonusStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetFreeBonusStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetFreeBonusStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetFreeBonusStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetFreeBonusStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetFreeBonusStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetFreeBonusStatusResponse result;
      
      private CCGetFreeBonusStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetFreeBonusStatusResponse original = result;
          result = new CCGetFreeBonusStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetFreeBonusStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetFreeBonusStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetFreeBonusStatusResponse.DefaultInstance; }
      }
      
      public override CCGetFreeBonusStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetFreeBonusStatusResponse) {
          return MergeFrom((CCGetFreeBonusStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetFreeBonusStatusResponse other) {
        if (other == global::com.golf.proto.CCGetFreeBonusStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetFreeBonusStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetFreeBonusStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCFreeBonusStatus.Builder subBuilder = global::com.golf.proto.CCFreeBonusStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCFreeBonusStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCFreeBonusStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCFreeBonusStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCFreeBonusStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCFreeBonusStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCFreeBonusStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
    }
    static CCGetFreeBonusStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCFreeBonusStatus : pb::GeneratedMessageLite<CCFreeBonusStatus, CCFreeBonusStatus.Builder> {
    private CCFreeBonusStatus() { }
    private static readonly CCFreeBonusStatus defaultInstance = new CCFreeBonusStatus().MakeReadOnly();
    private static readonly string[] _cCFreeBonusStatusFieldNames = new string[] { "day7_states", "free_coin_state", "free_fb_state", "free_video_reset_st", "free_video_states" };
    private static readonly uint[] _cCFreeBonusStatusFieldTags = new uint[] { 10, 18, 42, 32, 26 };
    public static CCFreeBonusStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCFreeBonusStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCFreeBonusStatus ThisMessage {
      get { return this; }
    }
    
    public const int Day7StatesFieldNumber = 1;
    private pbc::PopsicleList<global::com.golf.proto.CCFreeBonusItemState> day7States_ = new pbc::PopsicleList<global::com.golf.proto.CCFreeBonusItemState>();
    public scg::IList<global::com.golf.proto.CCFreeBonusItemState> Day7StatesList {
      get { return day7States_; }
    }
    public int Day7StatesCount {
      get { return day7States_.Count; }
    }
    public global::com.golf.proto.CCFreeBonusItemState GetDay7States(int index) {
      return day7States_[index];
    }
    
    public const int FreeCoinStateFieldNumber = 2;
    private bool hasFreeCoinState;
    private global::com.golf.proto.CCFreeBonusItemState freeCoinState_;
    public bool HasFreeCoinState {
      get { return hasFreeCoinState; }
    }
    public global::com.golf.proto.CCFreeBonusItemState FreeCoinState {
      get { return freeCoinState_ ?? global::com.golf.proto.CCFreeBonusItemState.DefaultInstance; }
    }
    
    public const int FreeVideoStatesFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCFreeBonusItemState> freeVideoStates_ = new pbc::PopsicleList<global::com.golf.proto.CCFreeBonusItemState>();
    public scg::IList<global::com.golf.proto.CCFreeBonusItemState> FreeVideoStatesList {
      get { return freeVideoStates_; }
    }
    public int FreeVideoStatesCount {
      get { return freeVideoStates_.Count; }
    }
    public global::com.golf.proto.CCFreeBonusItemState GetFreeVideoStates(int index) {
      return freeVideoStates_[index];
    }
    
    public const int FreeVideoResetStFieldNumber = 4;
    private bool hasFreeVideoResetSt;
    private long freeVideoResetSt_;
    public bool HasFreeVideoResetSt {
      get { return hasFreeVideoResetSt; }
    }
    public long FreeVideoResetSt {
      get { return freeVideoResetSt_; }
    }
    
    public const int FreeFbStateFieldNumber = 5;
    private bool hasFreeFbState;
    private global::com.golf.proto.CCFreeBonusItemState freeFbState_;
    public bool HasFreeFbState {
      get { return hasFreeFbState; }
    }
    public global::com.golf.proto.CCFreeBonusItemState FreeFbState {
      get { return freeFbState_ ?? global::com.golf.proto.CCFreeBonusItemState.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCFreeBonusStatusFieldNames;
      if (day7States_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], day7States_);
      }
      if (hasFreeCoinState) {
        output.WriteMessage(2, field_names[1], FreeCoinState);
      }
      if (freeVideoStates_.Count > 0) {
        output.WriteMessageArray(3, field_names[4], freeVideoStates_);
      }
      if (hasFreeVideoResetSt) {
        output.WriteInt64(4, field_names[3], FreeVideoResetSt);
      }
      if (hasFreeFbState) {
        output.WriteMessage(5, field_names[2], FreeFbState);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::com.golf.proto.CCFreeBonusItemState element in Day7StatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasFreeCoinState) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, FreeCoinState);
      }
      foreach (global::com.golf.proto.CCFreeBonusItemState element in FreeVideoStatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasFreeVideoResetSt) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, FreeVideoResetSt);
      }
      if (hasFreeFbState) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, FreeFbState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.golf.proto.CCFreeBonusItemState i in day7States_)
        hash ^= i.GetHashCode();
      if (hasFreeCoinState) hash ^= freeCoinState_.GetHashCode();
      foreach(global::com.golf.proto.CCFreeBonusItemState i in freeVideoStates_)
        hash ^= i.GetHashCode();
      if (hasFreeVideoResetSt) hash ^= freeVideoResetSt_.GetHashCode();
      if (hasFreeFbState) hash ^= freeFbState_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCFreeBonusStatus other = obj as CCFreeBonusStatus;
      if (other == null) return false;
      if(day7States_.Count != other.day7States_.Count) return false;
      for(int ix=0; ix < day7States_.Count; ix++)
        if(!day7States_[ix].Equals(other.day7States_[ix])) return false;
      if (hasFreeCoinState != other.hasFreeCoinState || (hasFreeCoinState && !freeCoinState_.Equals(other.freeCoinState_))) return false;
      if(freeVideoStates_.Count != other.freeVideoStates_.Count) return false;
      for(int ix=0; ix < freeVideoStates_.Count; ix++)
        if(!freeVideoStates_[ix].Equals(other.freeVideoStates_[ix])) return false;
      if (hasFreeVideoResetSt != other.hasFreeVideoResetSt || (hasFreeVideoResetSt && !freeVideoResetSt_.Equals(other.freeVideoResetSt_))) return false;
      if (hasFreeFbState != other.hasFreeFbState || (hasFreeFbState && !freeFbState_.Equals(other.freeFbState_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("day7_states", day7States_, writer);
      PrintField("free_coin_state", hasFreeCoinState, freeCoinState_, writer);
      PrintField("free_video_states", freeVideoStates_, writer);
      PrintField("free_video_reset_st", hasFreeVideoResetSt, freeVideoResetSt_, writer);
      PrintField("free_fb_state", hasFreeFbState, freeFbState_, writer);
    }
    #endregion
    
    public static CCFreeBonusStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFreeBonusStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFreeBonusStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFreeBonusStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFreeBonusStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFreeBonusStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCFreeBonusStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCFreeBonusStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCFreeBonusStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFreeBonusStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCFreeBonusStatus MakeReadOnly() {
      day7States_.MakeReadOnly();
      freeVideoStates_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCFreeBonusStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCFreeBonusStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCFreeBonusStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCFreeBonusStatus result;
      
      private CCFreeBonusStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCFreeBonusStatus original = result;
          result = new CCFreeBonusStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCFreeBonusStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCFreeBonusStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCFreeBonusStatus.DefaultInstance; }
      }
      
      public override CCFreeBonusStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCFreeBonusStatus) {
          return MergeFrom((CCFreeBonusStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCFreeBonusStatus other) {
        if (other == global::com.golf.proto.CCFreeBonusStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.day7States_.Count != 0) {
          result.day7States_.Add(other.day7States_);
        }
        if (other.HasFreeCoinState) {
          MergeFreeCoinState(other.FreeCoinState);
        }
        if (other.freeVideoStates_.Count != 0) {
          result.freeVideoStates_.Add(other.freeVideoStates_);
        }
        if (other.HasFreeVideoResetSt) {
          FreeVideoResetSt = other.FreeVideoResetSt;
        }
        if (other.HasFreeFbState) {
          MergeFreeFbState(other.FreeFbState);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCFreeBonusStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCFreeBonusStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.day7States_, global::com.golf.proto.CCFreeBonusItemState.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::com.golf.proto.CCFreeBonusItemState.Builder subBuilder = global::com.golf.proto.CCFreeBonusItemState.CreateBuilder();
              if (result.hasFreeCoinState) {
                subBuilder.MergeFrom(FreeCoinState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FreeCoinState = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.freeVideoStates_, global::com.golf.proto.CCFreeBonusItemState.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasFreeVideoResetSt = input.ReadInt64(ref result.freeVideoResetSt_);
              break;
            }
            case 42: {
              global::com.golf.proto.CCFreeBonusItemState.Builder subBuilder = global::com.golf.proto.CCFreeBonusItemState.CreateBuilder();
              if (result.hasFreeFbState) {
                subBuilder.MergeFrom(FreeFbState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FreeFbState = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.golf.proto.CCFreeBonusItemState> Day7StatesList {
        get { return PrepareBuilder().day7States_; }
      }
      public int Day7StatesCount {
        get { return result.Day7StatesCount; }
      }
      public global::com.golf.proto.CCFreeBonusItemState GetDay7States(int index) {
        return result.GetDay7States(index);
      }
      public Builder SetDay7States(int index, global::com.golf.proto.CCFreeBonusItemState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.day7States_[index] = value;
        return this;
      }
      public Builder SetDay7States(int index, global::com.golf.proto.CCFreeBonusItemState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.day7States_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDay7States(global::com.golf.proto.CCFreeBonusItemState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.day7States_.Add(value);
        return this;
      }
      public Builder AddDay7States(global::com.golf.proto.CCFreeBonusItemState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.day7States_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDay7States(scg::IEnumerable<global::com.golf.proto.CCFreeBonusItemState> values) {
        PrepareBuilder();
        result.day7States_.Add(values);
        return this;
      }
      public Builder ClearDay7States() {
        PrepareBuilder();
        result.day7States_.Clear();
        return this;
      }
      
      public bool HasFreeCoinState {
       get { return result.hasFreeCoinState; }
      }
      public global::com.golf.proto.CCFreeBonusItemState FreeCoinState {
        get { return result.FreeCoinState; }
        set { SetFreeCoinState(value); }
      }
      public Builder SetFreeCoinState(global::com.golf.proto.CCFreeBonusItemState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFreeCoinState = true;
        result.freeCoinState_ = value;
        return this;
      }
      public Builder SetFreeCoinState(global::com.golf.proto.CCFreeBonusItemState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFreeCoinState = true;
        result.freeCoinState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFreeCoinState(global::com.golf.proto.CCFreeBonusItemState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFreeCoinState &&
            result.freeCoinState_ != global::com.golf.proto.CCFreeBonusItemState.DefaultInstance) {
            result.freeCoinState_ = global::com.golf.proto.CCFreeBonusItemState.CreateBuilder(result.freeCoinState_).MergeFrom(value).BuildPartial();
        } else {
          result.freeCoinState_ = value;
        }
        result.hasFreeCoinState = true;
        return this;
      }
      public Builder ClearFreeCoinState() {
        PrepareBuilder();
        result.hasFreeCoinState = false;
        result.freeCoinState_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCFreeBonusItemState> FreeVideoStatesList {
        get { return PrepareBuilder().freeVideoStates_; }
      }
      public int FreeVideoStatesCount {
        get { return result.FreeVideoStatesCount; }
      }
      public global::com.golf.proto.CCFreeBonusItemState GetFreeVideoStates(int index) {
        return result.GetFreeVideoStates(index);
      }
      public Builder SetFreeVideoStates(int index, global::com.golf.proto.CCFreeBonusItemState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.freeVideoStates_[index] = value;
        return this;
      }
      public Builder SetFreeVideoStates(int index, global::com.golf.proto.CCFreeBonusItemState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.freeVideoStates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFreeVideoStates(global::com.golf.proto.CCFreeBonusItemState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.freeVideoStates_.Add(value);
        return this;
      }
      public Builder AddFreeVideoStates(global::com.golf.proto.CCFreeBonusItemState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.freeVideoStates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFreeVideoStates(scg::IEnumerable<global::com.golf.proto.CCFreeBonusItemState> values) {
        PrepareBuilder();
        result.freeVideoStates_.Add(values);
        return this;
      }
      public Builder ClearFreeVideoStates() {
        PrepareBuilder();
        result.freeVideoStates_.Clear();
        return this;
      }
      
      public bool HasFreeVideoResetSt {
        get { return result.hasFreeVideoResetSt; }
      }
      public long FreeVideoResetSt {
        get { return result.FreeVideoResetSt; }
        set { SetFreeVideoResetSt(value); }
      }
      public Builder SetFreeVideoResetSt(long value) {
        PrepareBuilder();
        result.hasFreeVideoResetSt = true;
        result.freeVideoResetSt_ = value;
        return this;
      }
      public Builder ClearFreeVideoResetSt() {
        PrepareBuilder();
        result.hasFreeVideoResetSt = false;
        result.freeVideoResetSt_ = 0L;
        return this;
      }
      
      public bool HasFreeFbState {
       get { return result.hasFreeFbState; }
      }
      public global::com.golf.proto.CCFreeBonusItemState FreeFbState {
        get { return result.FreeFbState; }
        set { SetFreeFbState(value); }
      }
      public Builder SetFreeFbState(global::com.golf.proto.CCFreeBonusItemState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFreeFbState = true;
        result.freeFbState_ = value;
        return this;
      }
      public Builder SetFreeFbState(global::com.golf.proto.CCFreeBonusItemState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFreeFbState = true;
        result.freeFbState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFreeFbState(global::com.golf.proto.CCFreeBonusItemState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFreeFbState &&
            result.freeFbState_ != global::com.golf.proto.CCFreeBonusItemState.DefaultInstance) {
            result.freeFbState_ = global::com.golf.proto.CCFreeBonusItemState.CreateBuilder(result.freeFbState_).MergeFrom(value).BuildPartial();
        } else {
          result.freeFbState_ = value;
        }
        result.hasFreeFbState = true;
        return this;
      }
      public Builder ClearFreeFbState() {
        PrepareBuilder();
        result.hasFreeFbState = false;
        result.freeFbState_ = null;
        return this;
      }
    }
    static CCFreeBonusStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCFreeBonusItemState : pb::GeneratedMessageLite<CCFreeBonusItemState, CCFreeBonusItemState.Builder> {
    private CCFreeBonusItemState() { }
    private static readonly CCFreeBonusItemState defaultInstance = new CCFreeBonusItemState().MakeReadOnly();
    private static readonly string[] _cCFreeBonusItemStateFieldNames = new string[] { "cnt", "id", "state", "ulk_time" };
    private static readonly uint[] _cCFreeBonusItemStateFieldTags = new uint[] { 16, 8, 24, 32 };
    public static CCFreeBonusItemState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCFreeBonusItemState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCFreeBonusItemState ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int CntFieldNumber = 2;
    private bool hasCnt;
    private int cnt_;
    public bool HasCnt {
      get { return hasCnt; }
    }
    public int Cnt {
      get { return cnt_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int UlkTimeFieldNumber = 4;
    private bool hasUlkTime;
    private long ulkTime_;
    public bool HasUlkTime {
      get { return hasUlkTime; }
    }
    public long UlkTime {
      get { return ulkTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCFreeBonusItemStateFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasCnt) {
        output.WriteInt32(2, field_names[0], Cnt);
      }
      if (hasState) {
        output.WriteInt32(3, field_names[2], State);
      }
      if (hasUlkTime) {
        output.WriteInt64(4, field_names[3], UlkTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Cnt);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, State);
      }
      if (hasUlkTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, UlkTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasCnt) hash ^= cnt_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      if (hasUlkTime) hash ^= ulkTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCFreeBonusItemState other = obj as CCFreeBonusItemState;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasCnt != other.hasCnt || (hasCnt && !cnt_.Equals(other.cnt_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      if (hasUlkTime != other.hasUlkTime || (hasUlkTime && !ulkTime_.Equals(other.ulkTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("cnt", hasCnt, cnt_, writer);
      PrintField("state", hasState, state_, writer);
      PrintField("ulk_time", hasUlkTime, ulkTime_, writer);
    }
    #endregion
    
    public static CCFreeBonusItemState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFreeBonusItemState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFreeBonusItemState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCFreeBonusItemState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCFreeBonusItemState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFreeBonusItemState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCFreeBonusItemState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCFreeBonusItemState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCFreeBonusItemState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCFreeBonusItemState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCFreeBonusItemState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCFreeBonusItemState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCFreeBonusItemState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCFreeBonusItemState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCFreeBonusItemState result;
      
      private CCFreeBonusItemState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCFreeBonusItemState original = result;
          result = new CCFreeBonusItemState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCFreeBonusItemState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCFreeBonusItemState DefaultInstanceForType {
        get { return global::com.golf.proto.CCFreeBonusItemState.DefaultInstance; }
      }
      
      public override CCFreeBonusItemState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCFreeBonusItemState) {
          return MergeFrom((CCFreeBonusItemState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCFreeBonusItemState other) {
        if (other == global::com.golf.proto.CCFreeBonusItemState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCnt) {
          Cnt = other.Cnt;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasUlkTime) {
          UlkTime = other.UlkTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCFreeBonusItemStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCFreeBonusItemStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasCnt = input.ReadInt32(ref result.cnt_);
              break;
            }
            case 24: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 32: {
              result.hasUlkTime = input.ReadInt64(ref result.ulkTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasCnt {
        get { return result.hasCnt; }
      }
      public int Cnt {
        get { return result.Cnt; }
        set { SetCnt(value); }
      }
      public Builder SetCnt(int value) {
        PrepareBuilder();
        result.hasCnt = true;
        result.cnt_ = value;
        return this;
      }
      public Builder ClearCnt() {
        PrepareBuilder();
        result.hasCnt = false;
        result.cnt_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasUlkTime {
        get { return result.hasUlkTime; }
      }
      public long UlkTime {
        get { return result.UlkTime; }
        set { SetUlkTime(value); }
      }
      public Builder SetUlkTime(long value) {
        PrepareBuilder();
        result.hasUlkTime = true;
        result.ulkTime_ = value;
        return this;
      }
      public Builder ClearUlkTime() {
        PrepareBuilder();
        result.hasUlkTime = false;
        result.ulkTime_ = 0L;
        return this;
      }
    }
    static CCFreeBonusItemState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetFreeBonusRequest : pb::GeneratedMessageLite<CCGetFreeBonusRequest, CCGetFreeBonusRequest.Builder> {
    private CCGetFreeBonusRequest() { }
    private static readonly CCGetFreeBonusRequest defaultInstance = new CCGetFreeBonusRequest().MakeReadOnly();
    private static readonly string[] _cCGetFreeBonusRequestFieldNames = new string[] { "id", "item_id" };
    private static readonly uint[] _cCGetFreeBonusRequestFieldTags = new uint[] { 10, 24 };
    public static CCGetFreeBonusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetFreeBonusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetFreeBonusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemIdFieldNumber = 3;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetFreeBonusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasItemId) {
        output.WriteInt32(3, field_names[1], ItemId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, ItemId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItemId) hash ^= itemId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetFreeBonusRequest other = obj as CCGetFreeBonusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItemId != other.hasItemId || (hasItemId && !itemId_.Equals(other.itemId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item_id", hasItemId, itemId_, writer);
    }
    #endregion
    
    public static CCGetFreeBonusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetFreeBonusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetFreeBonusRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetFreeBonusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetFreeBonusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetFreeBonusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetFreeBonusRequest result;
      
      private CCGetFreeBonusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetFreeBonusRequest original = result;
          result = new CCGetFreeBonusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetFreeBonusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetFreeBonusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetFreeBonusRequest.DefaultInstance; }
      }
      
      public override CCGetFreeBonusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetFreeBonusRequest) {
          return MergeFrom((CCGetFreeBonusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetFreeBonusRequest other) {
        if (other == global::com.golf.proto.CCGetFreeBonusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetFreeBonusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetFreeBonusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 24: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
    }
    static CCGetFreeBonusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetFreeBonusResponse : pb::GeneratedMessageLite<CCGetFreeBonusResponse, CCGetFreeBonusResponse.Builder> {
    private CCGetFreeBonusResponse() { }
    private static readonly CCGetFreeBonusResponse defaultInstance = new CCGetFreeBonusResponse().MakeReadOnly();
    private static readonly string[] _cCGetFreeBonusResponseFieldNames = new string[] { "item_id", "result", "ritems", "status", "user_data" };
    private static readonly uint[] _cCGetFreeBonusResponseFieldTags = new uint[] { 40, 8, 34, 18, 26 };
    public static CCGetFreeBonusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetFreeBonusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetFreeBonusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCFreeBonusStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCFreeBonusStatus Status {
      get { return status_ ?? global::com.golf.proto.CCFreeBonusStatus.DefaultInstance; }
    }
    
    public const int UserDataFieldNumber = 3;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int RitemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public const int ItemIdFieldNumber = 5;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetFreeBonusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[3], Status);
      }
      if (hasUserData) {
        output.WriteMessage(3, field_names[4], UserData);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(4, field_names[2], ritems_);
      }
      if (hasItemId) {
        output.WriteInt32(5, field_names[0], ItemId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, UserData);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ItemId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      if (hasItemId) hash ^= itemId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetFreeBonusResponse other = obj as CCGetFreeBonusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      if (hasItemId != other.hasItemId || (hasItemId && !itemId_.Equals(other.itemId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", hasStatus, status_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("ritems", ritems_, writer);
      PrintField("item_id", hasItemId, itemId_, writer);
    }
    #endregion
    
    public static CCGetFreeBonusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetFreeBonusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetFreeBonusResponse MakeReadOnly() {
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetFreeBonusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetFreeBonusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetFreeBonusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetFreeBonusResponse result;
      
      private CCGetFreeBonusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetFreeBonusResponse original = result;
          result = new CCGetFreeBonusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetFreeBonusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetFreeBonusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetFreeBonusResponse.DefaultInstance; }
      }
      
      public override CCGetFreeBonusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetFreeBonusResponse) {
          return MergeFrom((CCGetFreeBonusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetFreeBonusResponse other) {
        if (other == global::com.golf.proto.CCGetFreeBonusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetFreeBonusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetFreeBonusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCFreeBonusStatus.Builder subBuilder = global::com.golf.proto.CCFreeBonusStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 40: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCFreeBonusStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCFreeBonusStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCFreeBonusStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCFreeBonusStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCFreeBonusStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCFreeBonusStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
    }
    static CCGetFreeBonusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetVsModeRoomStatusRequest : pb::GeneratedMessageLite<CCGetVsModeRoomStatusRequest, CCGetVsModeRoomStatusRequest.Builder> {
    private CCGetVsModeRoomStatusRequest() { }
    private static readonly CCGetVsModeRoomStatusRequest defaultInstance = new CCGetVsModeRoomStatusRequest().MakeReadOnly();
    private static readonly string[] _cCGetVsModeRoomStatusRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetVsModeRoomStatusRequestFieldTags = new uint[] { 10 };
    public static CCGetVsModeRoomStatusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetVsModeRoomStatusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetVsModeRoomStatusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetVsModeRoomStatusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetVsModeRoomStatusRequest other = obj as CCGetVsModeRoomStatusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetVsModeRoomStatusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetVsModeRoomStatusRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetVsModeRoomStatusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetVsModeRoomStatusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetVsModeRoomStatusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetVsModeRoomStatusRequest result;
      
      private CCGetVsModeRoomStatusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetVsModeRoomStatusRequest original = result;
          result = new CCGetVsModeRoomStatusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetVsModeRoomStatusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetVsModeRoomStatusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetVsModeRoomStatusRequest.DefaultInstance; }
      }
      
      public override CCGetVsModeRoomStatusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetVsModeRoomStatusRequest) {
          return MergeFrom((CCGetVsModeRoomStatusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetVsModeRoomStatusRequest other) {
        if (other == global::com.golf.proto.CCGetVsModeRoomStatusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetVsModeRoomStatusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetVsModeRoomStatusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetVsModeRoomStatusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetVsModeRoomStatusResponse : pb::GeneratedMessageLite<CCGetVsModeRoomStatusResponse, CCGetVsModeRoomStatusResponse.Builder> {
    private CCGetVsModeRoomStatusResponse() { }
    private static readonly CCGetVsModeRoomStatusResponse defaultInstance = new CCGetVsModeRoomStatusResponse().MakeReadOnly();
    private static readonly string[] _cCGetVsModeRoomStatusResponseFieldNames = new string[] { "result", "status" };
    private static readonly uint[] _cCGetVsModeRoomStatusResponseFieldTags = new uint[] { 8, 18 };
    public static CCGetVsModeRoomStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetVsModeRoomStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetVsModeRoomStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCVsModeRoomStatus> status_ = new pbc::PopsicleList<global::com.golf.proto.CCVsModeRoomStatus>();
    public scg::IList<global::com.golf.proto.CCVsModeRoomStatus> StatusList {
      get { return status_; }
    }
    public int StatusCount {
      get { return status_.Count; }
    }
    public global::com.golf.proto.CCVsModeRoomStatus GetStatus(int index) {
      return status_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetVsModeRoomStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (status_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], status_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      foreach (global::com.golf.proto.CCVsModeRoomStatus element in StatusList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(global::com.golf.proto.CCVsModeRoomStatus i in status_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetVsModeRoomStatusResponse other = obj as CCGetVsModeRoomStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(status_.Count != other.status_.Count) return false;
      for(int ix=0; ix < status_.Count; ix++)
        if(!status_[ix].Equals(other.status_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", status_, writer);
    }
    #endregion
    
    public static CCGetVsModeRoomStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVsModeRoomStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetVsModeRoomStatusResponse MakeReadOnly() {
      status_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetVsModeRoomStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetVsModeRoomStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetVsModeRoomStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetVsModeRoomStatusResponse result;
      
      private CCGetVsModeRoomStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetVsModeRoomStatusResponse original = result;
          result = new CCGetVsModeRoomStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetVsModeRoomStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetVsModeRoomStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetVsModeRoomStatusResponse.DefaultInstance; }
      }
      
      public override CCGetVsModeRoomStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetVsModeRoomStatusResponse) {
          return MergeFrom((CCGetVsModeRoomStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetVsModeRoomStatusResponse other) {
        if (other == global::com.golf.proto.CCGetVsModeRoomStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.status_.Count != 0) {
          result.status_.Add(other.status_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetVsModeRoomStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetVsModeRoomStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.status_, global::com.golf.proto.CCVsModeRoomStatus.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCVsModeRoomStatus> StatusList {
        get { return PrepareBuilder().status_; }
      }
      public int StatusCount {
        get { return result.StatusCount; }
      }
      public global::com.golf.proto.CCVsModeRoomStatus GetStatus(int index) {
        return result.GetStatus(index);
      }
      public Builder SetStatus(int index, global::com.golf.proto.CCVsModeRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.status_[index] = value;
        return this;
      }
      public Builder SetStatus(int index, global::com.golf.proto.CCVsModeRoomStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.status_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddStatus(global::com.golf.proto.CCVsModeRoomStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.status_.Add(value);
        return this;
      }
      public Builder AddStatus(global::com.golf.proto.CCVsModeRoomStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.status_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeStatus(scg::IEnumerable<global::com.golf.proto.CCVsModeRoomStatus> values) {
        PrepareBuilder();
        result.status_.Add(values);
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.status_.Clear();
        return this;
      }
    }
    static CCGetVsModeRoomStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCVsModeRoomStatus : pb::GeneratedMessageLite<CCVsModeRoomStatus, CCVsModeRoomStatus.Builder> {
    private CCVsModeRoomStatus() { }
    private static readonly CCVsModeRoomStatus defaultInstance = new CCVsModeRoomStatus().MakeReadOnly();
    private static readonly string[] _cCVsModeRoomStatusFieldNames = new string[] { "cnt", "estimated_match_time", "vs_mode_id" };
    private static readonly uint[] _cCVsModeRoomStatusFieldTags = new uint[] { 16, 24, 8 };
    public static CCVsModeRoomStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCVsModeRoomStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCVsModeRoomStatus ThisMessage {
      get { return this; }
    }
    
    public const int VsModeIdFieldNumber = 1;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public const int CntFieldNumber = 2;
    private bool hasCnt;
    private int cnt_;
    public bool HasCnt {
      get { return hasCnt; }
    }
    public int Cnt {
      get { return cnt_; }
    }
    
    public const int EstimatedMatchTimeFieldNumber = 3;
    private bool hasEstimatedMatchTime;
    private int estimatedMatchTime_;
    public bool HasEstimatedMatchTime {
      get { return hasEstimatedMatchTime; }
    }
    public int EstimatedMatchTime {
      get { return estimatedMatchTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCVsModeRoomStatusFieldNames;
      if (hasVsModeId) {
        output.WriteInt32(1, field_names[2], VsModeId);
      }
      if (hasCnt) {
        output.WriteInt32(2, field_names[0], Cnt);
      }
      if (hasEstimatedMatchTime) {
        output.WriteInt32(3, field_names[1], EstimatedMatchTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, VsModeId);
      }
      if (hasCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Cnt);
      }
      if (hasEstimatedMatchTime) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, EstimatedMatchTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      if (hasCnt) hash ^= cnt_.GetHashCode();
      if (hasEstimatedMatchTime) hash ^= estimatedMatchTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCVsModeRoomStatus other = obj as CCVsModeRoomStatus;
      if (other == null) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      if (hasCnt != other.hasCnt || (hasCnt && !cnt_.Equals(other.cnt_))) return false;
      if (hasEstimatedMatchTime != other.hasEstimatedMatchTime || (hasEstimatedMatchTime && !estimatedMatchTime_.Equals(other.estimatedMatchTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
      PrintField("cnt", hasCnt, cnt_, writer);
      PrintField("estimated_match_time", hasEstimatedMatchTime, estimatedMatchTime_, writer);
    }
    #endregion
    
    public static CCVsModeRoomStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCVsModeRoomStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCVsModeRoomStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCVsModeRoomStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCVsModeRoomStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCVsModeRoomStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCVsModeRoomStatus result;
      
      private CCVsModeRoomStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCVsModeRoomStatus original = result;
          result = new CCVsModeRoomStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCVsModeRoomStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCVsModeRoomStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCVsModeRoomStatus.DefaultInstance; }
      }
      
      public override CCVsModeRoomStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCVsModeRoomStatus) {
          return MergeFrom((CCVsModeRoomStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCVsModeRoomStatus other) {
        if (other == global::com.golf.proto.CCVsModeRoomStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        if (other.HasCnt) {
          Cnt = other.Cnt;
        }
        if (other.HasEstimatedMatchTime) {
          EstimatedMatchTime = other.EstimatedMatchTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCVsModeRoomStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCVsModeRoomStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
            case 16: {
              result.hasCnt = input.ReadInt32(ref result.cnt_);
              break;
            }
            case 24: {
              result.hasEstimatedMatchTime = input.ReadInt32(ref result.estimatedMatchTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
      
      public bool HasCnt {
        get { return result.hasCnt; }
      }
      public int Cnt {
        get { return result.Cnt; }
        set { SetCnt(value); }
      }
      public Builder SetCnt(int value) {
        PrepareBuilder();
        result.hasCnt = true;
        result.cnt_ = value;
        return this;
      }
      public Builder ClearCnt() {
        PrepareBuilder();
        result.hasCnt = false;
        result.cnt_ = 0;
        return this;
      }
      
      public bool HasEstimatedMatchTime {
        get { return result.hasEstimatedMatchTime; }
      }
      public int EstimatedMatchTime {
        get { return result.EstimatedMatchTime; }
        set { SetEstimatedMatchTime(value); }
      }
      public Builder SetEstimatedMatchTime(int value) {
        PrepareBuilder();
        result.hasEstimatedMatchTime = true;
        result.estimatedMatchTime_ = value;
        return this;
      }
      public Builder ClearEstimatedMatchTime() {
        PrepareBuilder();
        result.hasEstimatedMatchTime = false;
        result.estimatedMatchTime_ = 0;
        return this;
      }
    }
    static CCVsModeRoomStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCNoticeResponse : pb::GeneratedMessageLite<CCNoticeResponse, CCNoticeResponse.Builder> {
    private CCNoticeResponse() { }
    private static readonly CCNoticeResponse defaultInstance = new CCNoticeResponse().MakeReadOnly();
    private static readonly string[] _cCNoticeResponseFieldNames = new string[] { "item", "result" };
    private static readonly uint[] _cCNoticeResponseFieldTags = new uint[] { 18, 8 };
    public static CCNoticeResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCNoticeResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCNoticeResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCNoticeItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCNoticeItem Item {
      get { return item_ ?? global::com.golf.proto.CCNoticeItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCNoticeResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[0], Item);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCNoticeResponse other = obj as CCNoticeResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("item", hasItem, item_, writer);
    }
    #endregion
    
    public static CCNoticeResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNoticeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNoticeResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNoticeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNoticeResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNoticeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCNoticeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCNoticeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCNoticeResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNoticeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCNoticeResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCNoticeResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCNoticeResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCNoticeResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCNoticeResponse result;
      
      private CCNoticeResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCNoticeResponse original = result;
          result = new CCNoticeResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCNoticeResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCNoticeResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCNoticeResponse.DefaultInstance; }
      }
      
      public override CCNoticeResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCNoticeResponse) {
          return MergeFrom((CCNoticeResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCNoticeResponse other) {
        if (other == global::com.golf.proto.CCNoticeResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCNoticeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCNoticeResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCNoticeItem.Builder subBuilder = global::com.golf.proto.CCNoticeItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCNoticeItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCNoticeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCNoticeItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCNoticeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCNoticeItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCNoticeItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
    }
    static CCNoticeResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCNoticeItem : pb::GeneratedMessageLite<CCNoticeItem, CCNoticeItem.Builder> {
    private CCNoticeItem() { }
    private static readonly CCNoticeItem defaultInstance = new CCNoticeItem().MakeReadOnly();
    private static readonly string[] _cCNoticeItemFieldNames = new string[] { "content", "done_type", "end_time_content", "end_time_done_type", "show_type", "title", "type" };
    private static readonly uint[] _cCNoticeItemFieldTags = new uint[] { 26, 56, 34, 40, 48, 18, 8 };
    public static CCNoticeItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCNoticeItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCNoticeItem ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int TitleFieldNumber = 2;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int ContentFieldNumber = 3;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int EndTimeContentFieldNumber = 4;
    private bool hasEndTimeContent;
    private string endTimeContent_ = "";
    public bool HasEndTimeContent {
      get { return hasEndTimeContent; }
    }
    public string EndTimeContent {
      get { return endTimeContent_; }
    }
    
    public const int EndTimeDoneTypeFieldNumber = 5;
    private bool hasEndTimeDoneType;
    private int endTimeDoneType_;
    public bool HasEndTimeDoneType {
      get { return hasEndTimeDoneType; }
    }
    public int EndTimeDoneType {
      get { return endTimeDoneType_; }
    }
    
    public const int ShowTypeFieldNumber = 6;
    private bool hasShowType;
    private int showType_;
    public bool HasShowType {
      get { return hasShowType; }
    }
    public int ShowType {
      get { return showType_; }
    }
    
    public const int DoneTypeFieldNumber = 7;
    private bool hasDoneType;
    private int doneType_;
    public bool HasDoneType {
      get { return hasDoneType; }
    }
    public int DoneType {
      get { return doneType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCNoticeItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[6], Type);
      }
      if (hasTitle) {
        output.WriteString(2, field_names[5], Title);
      }
      if (hasContent) {
        output.WriteString(3, field_names[0], Content);
      }
      if (hasEndTimeContent) {
        output.WriteString(4, field_names[2], EndTimeContent);
      }
      if (hasEndTimeDoneType) {
        output.WriteInt32(5, field_names[3], EndTimeDoneType);
      }
      if (hasShowType) {
        output.WriteInt32(6, field_names[4], ShowType);
      }
      if (hasDoneType) {
        output.WriteInt32(7, field_names[1], DoneType);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Title);
      }
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Content);
      }
      if (hasEndTimeContent) {
        size += pb::CodedOutputStream.ComputeStringSize(4, EndTimeContent);
      }
      if (hasEndTimeDoneType) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, EndTimeDoneType);
      }
      if (hasShowType) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ShowType);
      }
      if (hasDoneType) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, DoneType);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasTitle) hash ^= title_.GetHashCode();
      if (hasContent) hash ^= content_.GetHashCode();
      if (hasEndTimeContent) hash ^= endTimeContent_.GetHashCode();
      if (hasEndTimeDoneType) hash ^= endTimeDoneType_.GetHashCode();
      if (hasShowType) hash ^= showType_.GetHashCode();
      if (hasDoneType) hash ^= doneType_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCNoticeItem other = obj as CCNoticeItem;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasTitle != other.hasTitle || (hasTitle && !title_.Equals(other.title_))) return false;
      if (hasContent != other.hasContent || (hasContent && !content_.Equals(other.content_))) return false;
      if (hasEndTimeContent != other.hasEndTimeContent || (hasEndTimeContent && !endTimeContent_.Equals(other.endTimeContent_))) return false;
      if (hasEndTimeDoneType != other.hasEndTimeDoneType || (hasEndTimeDoneType && !endTimeDoneType_.Equals(other.endTimeDoneType_))) return false;
      if (hasShowType != other.hasShowType || (hasShowType && !showType_.Equals(other.showType_))) return false;
      if (hasDoneType != other.hasDoneType || (hasDoneType && !doneType_.Equals(other.doneType_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("title", hasTitle, title_, writer);
      PrintField("content", hasContent, content_, writer);
      PrintField("end_time_content", hasEndTimeContent, endTimeContent_, writer);
      PrintField("end_time_done_type", hasEndTimeDoneType, endTimeDoneType_, writer);
      PrintField("show_type", hasShowType, showType_, writer);
      PrintField("done_type", hasDoneType, doneType_, writer);
    }
    #endregion
    
    public static CCNoticeItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNoticeItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNoticeItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNoticeItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNoticeItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNoticeItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCNoticeItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCNoticeItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCNoticeItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNoticeItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCNoticeItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCNoticeItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCNoticeItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCNoticeItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCNoticeItem result;
      
      private CCNoticeItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCNoticeItem original = result;
          result = new CCNoticeItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCNoticeItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCNoticeItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCNoticeItem.DefaultInstance; }
      }
      
      public override CCNoticeItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCNoticeItem) {
          return MergeFrom((CCNoticeItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCNoticeItem other) {
        if (other == global::com.golf.proto.CCNoticeItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.HasEndTimeContent) {
          EndTimeContent = other.EndTimeContent;
        }
        if (other.HasEndTimeDoneType) {
          EndTimeDoneType = other.EndTimeDoneType;
        }
        if (other.HasShowType) {
          ShowType = other.ShowType;
        }
        if (other.HasDoneType) {
          DoneType = other.DoneType;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCNoticeItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCNoticeItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 18: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 26: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 34: {
              result.hasEndTimeContent = input.ReadString(ref result.endTimeContent_);
              break;
            }
            case 40: {
              result.hasEndTimeDoneType = input.ReadInt32(ref result.endTimeDoneType_);
              break;
            }
            case 48: {
              result.hasShowType = input.ReadInt32(ref result.showType_);
              break;
            }
            case 56: {
              result.hasDoneType = input.ReadInt32(ref result.doneType_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public bool HasEndTimeContent {
        get { return result.hasEndTimeContent; }
      }
      public string EndTimeContent {
        get { return result.EndTimeContent; }
        set { SetEndTimeContent(value); }
      }
      public Builder SetEndTimeContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEndTimeContent = true;
        result.endTimeContent_ = value;
        return this;
      }
      public Builder ClearEndTimeContent() {
        PrepareBuilder();
        result.hasEndTimeContent = false;
        result.endTimeContent_ = "";
        return this;
      }
      
      public bool HasEndTimeDoneType {
        get { return result.hasEndTimeDoneType; }
      }
      public int EndTimeDoneType {
        get { return result.EndTimeDoneType; }
        set { SetEndTimeDoneType(value); }
      }
      public Builder SetEndTimeDoneType(int value) {
        PrepareBuilder();
        result.hasEndTimeDoneType = true;
        result.endTimeDoneType_ = value;
        return this;
      }
      public Builder ClearEndTimeDoneType() {
        PrepareBuilder();
        result.hasEndTimeDoneType = false;
        result.endTimeDoneType_ = 0;
        return this;
      }
      
      public bool HasShowType {
        get { return result.hasShowType; }
      }
      public int ShowType {
        get { return result.ShowType; }
        set { SetShowType(value); }
      }
      public Builder SetShowType(int value) {
        PrepareBuilder();
        result.hasShowType = true;
        result.showType_ = value;
        return this;
      }
      public Builder ClearShowType() {
        PrepareBuilder();
        result.hasShowType = false;
        result.showType_ = 0;
        return this;
      }
      
      public bool HasDoneType {
        get { return result.hasDoneType; }
      }
      public int DoneType {
        get { return result.DoneType; }
        set { SetDoneType(value); }
      }
      public Builder SetDoneType(int value) {
        PrepareBuilder();
        result.hasDoneType = true;
        result.doneType_ = value;
        return this;
      }
      public Builder ClearDoneType() {
        PrepareBuilder();
        result.hasDoneType = false;
        result.doneType_ = 0;
        return this;
      }
    }
    static CCNoticeItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSelectSuitRequest : pb::GeneratedMessageLite<CCSelectSuitRequest, CCSelectSuitRequest.Builder> {
    private CCSelectSuitRequest() { }
    private static readonly CCSelectSuitRequest defaultInstance = new CCSelectSuitRequest().MakeReadOnly();
    private static readonly string[] _cCSelectSuitRequestFieldNames = new string[] { "id", "suit_id" };
    private static readonly uint[] _cCSelectSuitRequestFieldTags = new uint[] { 10, 16 };
    public static CCSelectSuitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSelectSuitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSelectSuitRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SuitIdFieldNumber = 2;
    private bool hasSuitId;
    private int suitId_;
    public bool HasSuitId {
      get { return hasSuitId; }
    }
    public int SuitId {
      get { return suitId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSelectSuitRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSuitId) {
        output.WriteInt32(2, field_names[1], SuitId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSuitId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SuitId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSuitId) hash ^= suitId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSelectSuitRequest other = obj as CCSelectSuitRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSuitId != other.hasSuitId || (hasSuitId && !suitId_.Equals(other.suitId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("suit_id", hasSuitId, suitId_, writer);
    }
    #endregion
    
    public static CCSelectSuitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectSuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectSuitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectSuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectSuitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectSuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSelectSuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSelectSuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSelectSuitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectSuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSelectSuitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSelectSuitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSelectSuitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSelectSuitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSelectSuitRequest result;
      
      private CCSelectSuitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSelectSuitRequest original = result;
          result = new CCSelectSuitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSelectSuitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSelectSuitRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSelectSuitRequest.DefaultInstance; }
      }
      
      public override CCSelectSuitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSelectSuitRequest) {
          return MergeFrom((CCSelectSuitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSelectSuitRequest other) {
        if (other == global::com.golf.proto.CCSelectSuitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSuitId) {
          SuitId = other.SuitId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSelectSuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSelectSuitRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasSuitId = input.ReadInt32(ref result.suitId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSuitId {
        get { return result.hasSuitId; }
      }
      public int SuitId {
        get { return result.SuitId; }
        set { SetSuitId(value); }
      }
      public Builder SetSuitId(int value) {
        PrepareBuilder();
        result.hasSuitId = true;
        result.suitId_ = value;
        return this;
      }
      public Builder ClearSuitId() {
        PrepareBuilder();
        result.hasSuitId = false;
        result.suitId_ = 0;
        return this;
      }
    }
    static CCSelectSuitRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUpdateSuitRequest : pb::GeneratedMessageLite<CCUpdateSuitRequest, CCUpdateSuitRequest.Builder> {
    private CCUpdateSuitRequest() { }
    private static readonly CCUpdateSuitRequest defaultInstance = new CCUpdateSuitRequest().MakeReadOnly();
    private static readonly string[] _cCUpdateSuitRequestFieldNames = new string[] { "id", "part", "sex", "suit_id" };
    private static readonly uint[] _cCUpdateSuitRequestFieldTags = new uint[] { 10, 34, 24, 16 };
    public static CCUpdateSuitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUpdateSuitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUpdateSuitRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SuitIdFieldNumber = 2;
    private bool hasSuitId;
    private int suitId_;
    public bool HasSuitId {
      get { return hasSuitId; }
    }
    public int SuitId {
      get { return suitId_; }
    }
    
    public const int SexFieldNumber = 3;
    private bool hasSex;
    private int sex_;
    public bool HasSex {
      get { return hasSex; }
    }
    public int Sex {
      get { return sex_; }
    }
    
    public const int PartFieldNumber = 4;
    private bool hasPart;
    private global::com.golf.proto.CCSuitPartItem part_;
    public bool HasPart {
      get { return hasPart; }
    }
    public global::com.golf.proto.CCSuitPartItem Part {
      get { return part_ ?? global::com.golf.proto.CCSuitPartItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUpdateSuitRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSuitId) {
        output.WriteInt32(2, field_names[3], SuitId);
      }
      if (hasSex) {
        output.WriteInt32(3, field_names[2], Sex);
      }
      if (hasPart) {
        output.WriteMessage(4, field_names[1], Part);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSuitId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SuitId);
      }
      if (hasSex) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Sex);
      }
      if (hasPart) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Part);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSuitId) hash ^= suitId_.GetHashCode();
      if (hasSex) hash ^= sex_.GetHashCode();
      if (hasPart) hash ^= part_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUpdateSuitRequest other = obj as CCUpdateSuitRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSuitId != other.hasSuitId || (hasSuitId && !suitId_.Equals(other.suitId_))) return false;
      if (hasSex != other.hasSex || (hasSex && !sex_.Equals(other.sex_))) return false;
      if (hasPart != other.hasPart || (hasPart && !part_.Equals(other.part_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("suit_id", hasSuitId, suitId_, writer);
      PrintField("sex", hasSex, sex_, writer);
      PrintField("part", hasPart, part_, writer);
    }
    #endregion
    
    public static CCUpdateSuitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateSuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUpdateSuitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUpdateSuitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUpdateSuitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUpdateSuitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUpdateSuitRequest result;
      
      private CCUpdateSuitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUpdateSuitRequest original = result;
          result = new CCUpdateSuitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUpdateSuitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUpdateSuitRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCUpdateSuitRequest.DefaultInstance; }
      }
      
      public override CCUpdateSuitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUpdateSuitRequest) {
          return MergeFrom((CCUpdateSuitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUpdateSuitRequest other) {
        if (other == global::com.golf.proto.CCUpdateSuitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSuitId) {
          SuitId = other.SuitId;
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.HasPart) {
          MergePart(other.Part);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUpdateSuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUpdateSuitRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasSuitId = input.ReadInt32(ref result.suitId_);
              break;
            }
            case 24: {
              result.hasSex = input.ReadInt32(ref result.sex_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCSuitPartItem.Builder subBuilder = global::com.golf.proto.CCSuitPartItem.CreateBuilder();
              if (result.hasPart) {
                subBuilder.MergeFrom(Part);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Part = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSuitId {
        get { return result.hasSuitId; }
      }
      public int SuitId {
        get { return result.SuitId; }
        set { SetSuitId(value); }
      }
      public Builder SetSuitId(int value) {
        PrepareBuilder();
        result.hasSuitId = true;
        result.suitId_ = value;
        return this;
      }
      public Builder ClearSuitId() {
        PrepareBuilder();
        result.hasSuitId = false;
        result.suitId_ = 0;
        return this;
      }
      
      public bool HasSex {
        get { return result.hasSex; }
      }
      public int Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      public Builder SetSex(int value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }
      
      public bool HasPart {
       get { return result.hasPart; }
      }
      public global::com.golf.proto.CCSuitPartItem Part {
        get { return result.Part; }
        set { SetPart(value); }
      }
      public Builder SetPart(global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPart = true;
        result.part_ = value;
        return this;
      }
      public Builder SetPart(global::com.golf.proto.CCSuitPartItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPart = true;
        result.part_ = builderForValue.Build();
        return this;
      }
      public Builder MergePart(global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPart &&
            result.part_ != global::com.golf.proto.CCSuitPartItem.DefaultInstance) {
            result.part_ = global::com.golf.proto.CCSuitPartItem.CreateBuilder(result.part_).MergeFrom(value).BuildPartial();
        } else {
          result.part_ = value;
        }
        result.hasPart = true;
        return this;
      }
      public Builder ClearPart() {
        PrepareBuilder();
        result.hasPart = false;
        result.part_ = null;
        return this;
      }
    }
    static CCUpdateSuitRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUpdateSuitResponse : pb::GeneratedMessageLite<CCUpdateSuitResponse, CCUpdateSuitResponse.Builder> {
    private CCUpdateSuitResponse() { }
    private static readonly CCUpdateSuitResponse defaultInstance = new CCUpdateSuitResponse().MakeReadOnly();
    private static readonly string[] _cCUpdateSuitResponseFieldNames = new string[] { "part", "result", "sex", "suit_id" };
    private static readonly uint[] _cCUpdateSuitResponseFieldTags = new uint[] { 34, 8, 24, 16 };
    public static CCUpdateSuitResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUpdateSuitResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUpdateSuitResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int SuitIdFieldNumber = 2;
    private bool hasSuitId;
    private int suitId_;
    public bool HasSuitId {
      get { return hasSuitId; }
    }
    public int SuitId {
      get { return suitId_; }
    }
    
    public const int SexFieldNumber = 3;
    private bool hasSex;
    private int sex_;
    public bool HasSex {
      get { return hasSex; }
    }
    public int Sex {
      get { return sex_; }
    }
    
    public const int PartFieldNumber = 4;
    private bool hasPart;
    private global::com.golf.proto.CCSuitPartItem part_;
    public bool HasPart {
      get { return hasPart; }
    }
    public global::com.golf.proto.CCSuitPartItem Part {
      get { return part_ ?? global::com.golf.proto.CCSuitPartItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUpdateSuitResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasSuitId) {
        output.WriteInt32(2, field_names[3], SuitId);
      }
      if (hasSex) {
        output.WriteInt32(3, field_names[2], Sex);
      }
      if (hasPart) {
        output.WriteMessage(4, field_names[0], Part);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasSuitId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SuitId);
      }
      if (hasSex) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Sex);
      }
      if (hasPart) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Part);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasSuitId) hash ^= suitId_.GetHashCode();
      if (hasSex) hash ^= sex_.GetHashCode();
      if (hasPart) hash ^= part_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUpdateSuitResponse other = obj as CCUpdateSuitResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasSuitId != other.hasSuitId || (hasSuitId && !suitId_.Equals(other.suitId_))) return false;
      if (hasSex != other.hasSex || (hasSex && !sex_.Equals(other.sex_))) return false;
      if (hasPart != other.hasPart || (hasPart && !part_.Equals(other.part_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("suit_id", hasSuitId, suitId_, writer);
      PrintField("sex", hasSex, sex_, writer);
      PrintField("part", hasPart, part_, writer);
    }
    #endregion
    
    public static CCUpdateSuitResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateSuitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUpdateSuitResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUpdateSuitResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUpdateSuitResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUpdateSuitResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUpdateSuitResponse result;
      
      private CCUpdateSuitResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUpdateSuitResponse original = result;
          result = new CCUpdateSuitResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUpdateSuitResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUpdateSuitResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCUpdateSuitResponse.DefaultInstance; }
      }
      
      public override CCUpdateSuitResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUpdateSuitResponse) {
          return MergeFrom((CCUpdateSuitResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUpdateSuitResponse other) {
        if (other == global::com.golf.proto.CCUpdateSuitResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasSuitId) {
          SuitId = other.SuitId;
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.HasPart) {
          MergePart(other.Part);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUpdateSuitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUpdateSuitResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasSuitId = input.ReadInt32(ref result.suitId_);
              break;
            }
            case 24: {
              result.hasSex = input.ReadInt32(ref result.sex_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCSuitPartItem.Builder subBuilder = global::com.golf.proto.CCSuitPartItem.CreateBuilder();
              if (result.hasPart) {
                subBuilder.MergeFrom(Part);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Part = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasSuitId {
        get { return result.hasSuitId; }
      }
      public int SuitId {
        get { return result.SuitId; }
        set { SetSuitId(value); }
      }
      public Builder SetSuitId(int value) {
        PrepareBuilder();
        result.hasSuitId = true;
        result.suitId_ = value;
        return this;
      }
      public Builder ClearSuitId() {
        PrepareBuilder();
        result.hasSuitId = false;
        result.suitId_ = 0;
        return this;
      }
      
      public bool HasSex {
        get { return result.hasSex; }
      }
      public int Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      public Builder SetSex(int value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }
      
      public bool HasPart {
       get { return result.hasPart; }
      }
      public global::com.golf.proto.CCSuitPartItem Part {
        get { return result.Part; }
        set { SetPart(value); }
      }
      public Builder SetPart(global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPart = true;
        result.part_ = value;
        return this;
      }
      public Builder SetPart(global::com.golf.proto.CCSuitPartItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPart = true;
        result.part_ = builderForValue.Build();
        return this;
      }
      public Builder MergePart(global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPart &&
            result.part_ != global::com.golf.proto.CCSuitPartItem.DefaultInstance) {
            result.part_ = global::com.golf.proto.CCSuitPartItem.CreateBuilder(result.part_).MergeFrom(value).BuildPartial();
        } else {
          result.part_ = value;
        }
        result.hasPart = true;
        return this;
      }
      public Builder ClearPart() {
        PrepareBuilder();
        result.hasPart = false;
        result.part_ = null;
        return this;
      }
    }
    static CCUpdateSuitResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSuitPartItem : pb::GeneratedMessageLite<CCSuitPartItem, CCSuitPartItem.Builder> {
    private CCSuitPartItem() { }
    private static readonly CCSuitPartItem defaultInstance = new CCSuitPartItem().MakeReadOnly();
    private static readonly string[] _cCSuitPartItemFieldNames = new string[] { "id", "num", "state", "type" };
    private static readonly uint[] _cCSuitPartItemFieldTags = new uint[] { 16, 24, 32, 8 };
    public static CCSuitPartItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSuitPartItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSuitPartItem ThisMessage {
      get { return this; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int IdFieldNumber = 2;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NumFieldNumber = 3;
    private bool hasNum;
    private int num_;
    public bool HasNum {
      get { return hasNum; }
    }
    public int Num {
      get { return num_; }
    }
    
    public const int StateFieldNumber = 4;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSuitPartItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[3], Type);
      }
      if (hasId) {
        output.WriteInt32(2, field_names[0], Id);
      }
      if (hasNum) {
        output.WriteInt32(3, field_names[1], Num);
      }
      if (hasState) {
        output.WriteInt32(4, field_names[2], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
      }
      if (hasNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Num);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasType) hash ^= type_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasNum) hash ^= num_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSuitPartItem other = obj as CCSuitPartItem;
      if (other == null) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasNum != other.hasNum || (hasNum && !num_.Equals(other.num_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("type", hasType, type_, writer);
      PrintField("id", hasId, id_, writer);
      PrintField("num", hasNum, num_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCSuitPartItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSuitPartItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSuitPartItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSuitPartItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSuitPartItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSuitPartItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSuitPartItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSuitPartItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSuitPartItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSuitPartItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSuitPartItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSuitPartItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSuitPartItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSuitPartItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSuitPartItem result;
      
      private CCSuitPartItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSuitPartItem original = result;
          result = new CCSuitPartItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSuitPartItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSuitPartItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCSuitPartItem.DefaultInstance; }
      }
      
      public override CCSuitPartItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSuitPartItem) {
          return MergeFrom((CCSuitPartItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSuitPartItem other) {
        if (other == global::com.golf.proto.CCSuitPartItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasNum) {
          Num = other.Num;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSuitPartItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSuitPartItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 24: {
              result.hasNum = input.ReadInt32(ref result.num_);
              break;
            }
            case 32: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCSuitPartItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSuitItem : pb::GeneratedMessageLite<CCSuitItem, CCSuitItem.Builder> {
    private CCSuitItem() { }
    private static readonly CCSuitItem defaultInstance = new CCSuitItem().MakeReadOnly();
    private static readonly string[] _cCSuitItemFieldNames = new string[] { "id", "parts", "sex" };
    private static readonly uint[] _cCSuitItemFieldTags = new uint[] { 8, 26, 16 };
    public static CCSuitItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSuitItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSuitItem ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int SexFieldNumber = 2;
    private bool hasSex;
    private int sex_;
    public bool HasSex {
      get { return hasSex; }
    }
    public int Sex {
      get { return sex_; }
    }
    
    public const int PartsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCSuitPartItem> parts_ = new pbc::PopsicleList<global::com.golf.proto.CCSuitPartItem>();
    public scg::IList<global::com.golf.proto.CCSuitPartItem> PartsList {
      get { return parts_; }
    }
    public int PartsCount {
      get { return parts_.Count; }
    }
    public global::com.golf.proto.CCSuitPartItem GetParts(int index) {
      return parts_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSuitItemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[0], Id);
      }
      if (hasSex) {
        output.WriteInt32(2, field_names[2], Sex);
      }
      if (parts_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], parts_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasSex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Sex);
      }
      foreach (global::com.golf.proto.CCSuitPartItem element in PartsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSex) hash ^= sex_.GetHashCode();
      foreach(global::com.golf.proto.CCSuitPartItem i in parts_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSuitItem other = obj as CCSuitItem;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSex != other.hasSex || (hasSex && !sex_.Equals(other.sex_))) return false;
      if(parts_.Count != other.parts_.Count) return false;
      for(int ix=0; ix < parts_.Count; ix++)
        if(!parts_[ix].Equals(other.parts_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("sex", hasSex, sex_, writer);
      PrintField("parts", parts_, writer);
    }
    #endregion
    
    public static CCSuitItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSuitItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSuitItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSuitItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSuitItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSuitItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSuitItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSuitItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSuitItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSuitItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSuitItem MakeReadOnly() {
      parts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSuitItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSuitItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSuitItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSuitItem result;
      
      private CCSuitItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSuitItem original = result;
          result = new CCSuitItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSuitItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSuitItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCSuitItem.DefaultInstance; }
      }
      
      public override CCSuitItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSuitItem) {
          return MergeFrom((CCSuitItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSuitItem other) {
        if (other == global::com.golf.proto.CCSuitItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.parts_.Count != 0) {
          result.parts_.Add(other.parts_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSuitItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSuitItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasSex = input.ReadInt32(ref result.sex_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.parts_, global::com.golf.proto.CCSuitPartItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasSex {
        get { return result.hasSex; }
      }
      public int Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      public Builder SetSex(int value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCSuitPartItem> PartsList {
        get { return PrepareBuilder().parts_; }
      }
      public int PartsCount {
        get { return result.PartsCount; }
      }
      public global::com.golf.proto.CCSuitPartItem GetParts(int index) {
        return result.GetParts(index);
      }
      public Builder SetParts(int index, global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parts_[index] = value;
        return this;
      }
      public Builder SetParts(int index, global::com.golf.proto.CCSuitPartItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.parts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParts(global::com.golf.proto.CCSuitPartItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parts_.Add(value);
        return this;
      }
      public Builder AddParts(global::com.golf.proto.CCSuitPartItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.parts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParts(scg::IEnumerable<global::com.golf.proto.CCSuitPartItem> values) {
        PrepareBuilder();
        result.parts_.Add(values);
        return this;
      }
      public Builder ClearParts() {
        PrepareBuilder();
        result.parts_.Clear();
        return this;
      }
    }
    static CCSuitItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSuitData : pb::GeneratedMessageLite<CCSuitData, CCSuitData.Builder> {
    private CCSuitData() { }
    private static readonly CCSuitData defaultInstance = new CCSuitData().MakeReadOnly();
    private static readonly string[] _cCSuitDataFieldNames = new string[] { "cur_id", "suits" };
    private static readonly uint[] _cCSuitDataFieldTags = new uint[] { 16, 26 };
    public static CCSuitData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSuitData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSuitData ThisMessage {
      get { return this; }
    }
    
    public const int CurIdFieldNumber = 2;
    private bool hasCurId;
    private int curId_;
    public bool HasCurId {
      get { return hasCurId; }
    }
    public int CurId {
      get { return curId_; }
    }
    
    public const int SuitsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCSuitItem> suits_ = new pbc::PopsicleList<global::com.golf.proto.CCSuitItem>();
    public scg::IList<global::com.golf.proto.CCSuitItem> SuitsList {
      get { return suits_; }
    }
    public int SuitsCount {
      get { return suits_.Count; }
    }
    public global::com.golf.proto.CCSuitItem GetSuits(int index) {
      return suits_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSuitDataFieldNames;
      if (hasCurId) {
        output.WriteInt32(2, field_names[0], CurId);
      }
      if (suits_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], suits_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, CurId);
      }
      foreach (global::com.golf.proto.CCSuitItem element in SuitsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasCurId) hash ^= curId_.GetHashCode();
      foreach(global::com.golf.proto.CCSuitItem i in suits_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSuitData other = obj as CCSuitData;
      if (other == null) return false;
      if (hasCurId != other.hasCurId || (hasCurId && !curId_.Equals(other.curId_))) return false;
      if(suits_.Count != other.suits_.Count) return false;
      for(int ix=0; ix < suits_.Count; ix++)
        if(!suits_[ix].Equals(other.suits_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("cur_id", hasCurId, curId_, writer);
      PrintField("suits", suits_, writer);
    }
    #endregion
    
    public static CCSuitData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSuitData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSuitData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSuitData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSuitData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSuitData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSuitData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSuitData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSuitData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSuitData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSuitData MakeReadOnly() {
      suits_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSuitData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSuitData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSuitData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSuitData result;
      
      private CCSuitData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSuitData original = result;
          result = new CCSuitData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSuitData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSuitData DefaultInstanceForType {
        get { return global::com.golf.proto.CCSuitData.DefaultInstance; }
      }
      
      public override CCSuitData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSuitData) {
          return MergeFrom((CCSuitData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSuitData other) {
        if (other == global::com.golf.proto.CCSuitData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurId) {
          CurId = other.CurId;
        }
        if (other.suits_.Count != 0) {
          result.suits_.Add(other.suits_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSuitDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSuitDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              result.hasCurId = input.ReadInt32(ref result.curId_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.suits_, global::com.golf.proto.CCSuitItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasCurId {
        get { return result.hasCurId; }
      }
      public int CurId {
        get { return result.CurId; }
        set { SetCurId(value); }
      }
      public Builder SetCurId(int value) {
        PrepareBuilder();
        result.hasCurId = true;
        result.curId_ = value;
        return this;
      }
      public Builder ClearCurId() {
        PrepareBuilder();
        result.hasCurId = false;
        result.curId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCSuitItem> SuitsList {
        get { return PrepareBuilder().suits_; }
      }
      public int SuitsCount {
        get { return result.SuitsCount; }
      }
      public global::com.golf.proto.CCSuitItem GetSuits(int index) {
        return result.GetSuits(index);
      }
      public Builder SetSuits(int index, global::com.golf.proto.CCSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.suits_[index] = value;
        return this;
      }
      public Builder SetSuits(int index, global::com.golf.proto.CCSuitItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.suits_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSuits(global::com.golf.proto.CCSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.suits_.Add(value);
        return this;
      }
      public Builder AddSuits(global::com.golf.proto.CCSuitItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.suits_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSuits(scg::IEnumerable<global::com.golf.proto.CCSuitItem> values) {
        PrepareBuilder();
        result.suits_.Add(values);
        return this;
      }
      public Builder ClearSuits() {
        PrepareBuilder();
        result.suits_.Clear();
        return this;
      }
    }
    static CCSuitData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOpenBoxRequest : pb::GeneratedMessageLite<CCOpenBoxRequest, CCOpenBoxRequest.Builder> {
    private CCOpenBoxRequest() { }
    private static readonly CCOpenBoxRequest defaultInstance = new CCOpenBoxRequest().MakeReadOnly();
    private static readonly string[] _cCOpenBoxRequestFieldNames = new string[] { "id", "item" };
    private static readonly uint[] _cCOpenBoxRequestFieldTags = new uint[] { 10, 18 };
    public static CCOpenBoxRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOpenBoxRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOpenBoxRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCItem Item {
      get { return item_ ?? global::com.golf.proto.CCItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOpenBoxRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[1], Item);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOpenBoxRequest other = obj as CCOpenBoxRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item", hasItem, item_, writer);
    }
    #endregion
    
    public static CCOpenBoxRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOpenBoxRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOpenBoxRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOpenBoxRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOpenBoxRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOpenBoxRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOpenBoxRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOpenBoxRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOpenBoxRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOpenBoxRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOpenBoxRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOpenBoxRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOpenBoxRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOpenBoxRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOpenBoxRequest result;
      
      private CCOpenBoxRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOpenBoxRequest original = result;
          result = new CCOpenBoxRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOpenBoxRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOpenBoxRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCOpenBoxRequest.DefaultInstance; }
      }
      
      public override CCOpenBoxRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOpenBoxRequest) {
          return MergeFrom((CCOpenBoxRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOpenBoxRequest other) {
        if (other == global::com.golf.proto.CCOpenBoxRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOpenBoxRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOpenBoxRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCItem.Builder subBuilder = global::com.golf.proto.CCItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
    }
    static CCOpenBoxRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOpenBoxResponse : pb::GeneratedMessageLite<CCOpenBoxResponse, CCOpenBoxResponse.Builder> {
    private CCOpenBoxResponse() { }
    private static readonly CCOpenBoxResponse defaultInstance = new CCOpenBoxResponse().MakeReadOnly();
    private static readonly string[] _cCOpenBoxResponseFieldNames = new string[] { "result", "ritems", "user_data" };
    private static readonly uint[] _cCOpenBoxResponseFieldTags = new uint[] { 8, 18, 26 };
    public static CCOpenBoxResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOpenBoxResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOpenBoxResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int RitemsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public const int UserDataFieldNumber = 3;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOpenBoxResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], ritems_);
      }
      if (hasUserData) {
        output.WriteMessage(3, field_names[2], UserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, UserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOpenBoxResponse other = obj as CCOpenBoxResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("ritems", ritems_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
    }
    #endregion
    
    public static CCOpenBoxResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOpenBoxResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOpenBoxResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOpenBoxResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOpenBoxResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOpenBoxResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOpenBoxResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOpenBoxResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOpenBoxResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOpenBoxResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOpenBoxResponse MakeReadOnly() {
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOpenBoxResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOpenBoxResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOpenBoxResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOpenBoxResponse result;
      
      private CCOpenBoxResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOpenBoxResponse original = result;
          result = new CCOpenBoxResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOpenBoxResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOpenBoxResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCOpenBoxResponse.DefaultInstance; }
      }
      
      public override CCOpenBoxResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOpenBoxResponse) {
          return MergeFrom((CCOpenBoxResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOpenBoxResponse other) {
        if (other == global::com.golf.proto.CCOpenBoxResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOpenBoxResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOpenBoxResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
    }
    static CCOpenBoxResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeItemRequest : pb::GeneratedMessageLite<CCChangeItemRequest, CCChangeItemRequest.Builder> {
    private CCChangeItemRequest() { }
    private static readonly CCChangeItemRequest defaultInstance = new CCChangeItemRequest().MakeReadOnly();
    private static readonly string[] _cCChangeItemRequestFieldNames = new string[] { "id", "item_id", "value" };
    private static readonly uint[] _cCChangeItemRequestFieldTags = new uint[] { 10, 16, 26 };
    public static CCChangeItemRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeItemRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeItemRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemIdFieldNumber = 2;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public const int ValueFieldNumber = 3;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeItemRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasItemId) {
        output.WriteInt32(2, field_names[1], ItemId);
      }
      if (hasValue) {
        output.WriteString(3, field_names[2], Value);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ItemId);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Value);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItemId) hash ^= itemId_.GetHashCode();
      if (hasValue) hash ^= value_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeItemRequest other = obj as CCChangeItemRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItemId != other.hasItemId || (hasItemId && !itemId_.Equals(other.itemId_))) return false;
      if (hasValue != other.hasValue || (hasValue && !value_.Equals(other.value_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item_id", hasItemId, itemId_, writer);
      PrintField("value", hasValue, value_, writer);
    }
    #endregion
    
    public static CCChangeItemRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeItemRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeItemRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeItemRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeItemRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeItemRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeItemRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeItemRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeItemRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeItemRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeItemRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeItemRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeItemRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeItemRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeItemRequest result;
      
      private CCChangeItemRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeItemRequest original = result;
          result = new CCChangeItemRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeItemRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeItemRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeItemRequest.DefaultInstance; }
      }
      
      public override CCChangeItemRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeItemRequest) {
          return MergeFrom((CCChangeItemRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeItemRequest other) {
        if (other == global::com.golf.proto.CCChangeItemRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeItemRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeItemRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
            case 26: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static CCChangeItemRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCChangeItemResponse : pb::GeneratedMessageLite<CCChangeItemResponse, CCChangeItemResponse.Builder> {
    private CCChangeItemResponse() { }
    private static readonly CCChangeItemResponse defaultInstance = new CCChangeItemResponse().MakeReadOnly();
    private static readonly string[] _cCChangeItemResponseFieldNames = new string[] { "item_id", "result", "user_data", "value" };
    private static readonly uint[] _cCChangeItemResponseFieldTags = new uint[] { 16, 8, 34, 26 };
    public static CCChangeItemResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCChangeItemResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCChangeItemResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ItemIdFieldNumber = 2;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public const int ValueFieldNumber = 3;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public const int UserDataFieldNumber = 4;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCChangeItemResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasItemId) {
        output.WriteInt32(2, field_names[0], ItemId);
      }
      if (hasValue) {
        output.WriteString(3, field_names[3], Value);
      }
      if (hasUserData) {
        output.WriteMessage(4, field_names[2], UserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasItemId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ItemId);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Value);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, UserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasItemId) hash ^= itemId_.GetHashCode();
      if (hasValue) hash ^= value_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCChangeItemResponse other = obj as CCChangeItemResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasItemId != other.hasItemId || (hasItemId && !itemId_.Equals(other.itemId_))) return false;
      if (hasValue != other.hasValue || (hasValue && !value_.Equals(other.value_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("item_id", hasItemId, itemId_, writer);
      PrintField("value", hasValue, value_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
    }
    #endregion
    
    public static CCChangeItemResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeItemResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeItemResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCChangeItemResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCChangeItemResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeItemResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCChangeItemResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCChangeItemResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCChangeItemResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCChangeItemResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCChangeItemResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCChangeItemResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCChangeItemResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCChangeItemResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCChangeItemResponse result;
      
      private CCChangeItemResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCChangeItemResponse original = result;
          result = new CCChangeItemResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCChangeItemResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCChangeItemResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCChangeItemResponse.DefaultInstance; }
      }
      
      public override CCChangeItemResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCChangeItemResponse) {
          return MergeFrom((CCChangeItemResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCChangeItemResponse other) {
        if (other == global::com.golf.proto.CCChangeItemResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCChangeItemResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCChangeItemResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
            case 26: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
            case 34: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
    }
    static CCChangeItemResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetRandomSocialIdsRequest : pb::GeneratedMessageLite<CCGetRandomSocialIdsRequest, CCGetRandomSocialIdsRequest.Builder> {
    private CCGetRandomSocialIdsRequest() { }
    private static readonly CCGetRandomSocialIdsRequest defaultInstance = new CCGetRandomSocialIdsRequest().MakeReadOnly();
    private static readonly string[] _cCGetRandomSocialIdsRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetRandomSocialIdsRequestFieldTags = new uint[] { 10 };
    public static CCGetRandomSocialIdsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetRandomSocialIdsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetRandomSocialIdsRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetRandomSocialIdsRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetRandomSocialIdsRequest other = obj as CCGetRandomSocialIdsRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetRandomSocialIdsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRandomSocialIdsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetRandomSocialIdsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetRandomSocialIdsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetRandomSocialIdsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetRandomSocialIdsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetRandomSocialIdsRequest result;
      
      private CCGetRandomSocialIdsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetRandomSocialIdsRequest original = result;
          result = new CCGetRandomSocialIdsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetRandomSocialIdsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetRandomSocialIdsRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetRandomSocialIdsRequest.DefaultInstance; }
      }
      
      public override CCGetRandomSocialIdsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetRandomSocialIdsRequest) {
          return MergeFrom((CCGetRandomSocialIdsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetRandomSocialIdsRequest other) {
        if (other == global::com.golf.proto.CCGetRandomSocialIdsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetRandomSocialIdsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetRandomSocialIdsRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetRandomSocialIdsRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetRandomSocialIdsResponse : pb::GeneratedMessageLite<CCGetRandomSocialIdsResponse, CCGetRandomSocialIdsResponse.Builder> {
    private CCGetRandomSocialIdsResponse() { }
    private static readonly CCGetRandomSocialIdsResponse defaultInstance = new CCGetRandomSocialIdsResponse().MakeReadOnly();
    private static readonly string[] _cCGetRandomSocialIdsResponseFieldNames = new string[] { "result", "social_ids" };
    private static readonly uint[] _cCGetRandomSocialIdsResponseFieldTags = new uint[] { 8, 18 };
    public static CCGetRandomSocialIdsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetRandomSocialIdsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetRandomSocialIdsResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int SocialIdsFieldNumber = 2;
    private pbc::PopsicleList<string> socialIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> SocialIdsList {
      get { return pbc::Lists.AsReadOnly(socialIds_); }
    }
    public int SocialIdsCount {
      get { return socialIds_.Count; }
    }
    public string GetSocialIds(int index) {
      return socialIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetRandomSocialIdsResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (socialIds_.Count > 0) {
        output.WriteStringArray(2, field_names[1], socialIds_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      {
        int dataSize = 0;
        foreach (string element in SocialIdsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * socialIds_.Count;
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(string i in socialIds_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetRandomSocialIdsResponse other = obj as CCGetRandomSocialIdsResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(socialIds_.Count != other.socialIds_.Count) return false;
      for(int ix=0; ix < socialIds_.Count; ix++)
        if(!socialIds_[ix].Equals(other.socialIds_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("social_ids", socialIds_, writer);
    }
    #endregion
    
    public static CCGetRandomSocialIdsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRandomSocialIdsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetRandomSocialIdsResponse MakeReadOnly() {
      socialIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetRandomSocialIdsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetRandomSocialIdsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetRandomSocialIdsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetRandomSocialIdsResponse result;
      
      private CCGetRandomSocialIdsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetRandomSocialIdsResponse original = result;
          result = new CCGetRandomSocialIdsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetRandomSocialIdsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetRandomSocialIdsResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetRandomSocialIdsResponse.DefaultInstance; }
      }
      
      public override CCGetRandomSocialIdsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetRandomSocialIdsResponse) {
          return MergeFrom((CCGetRandomSocialIdsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetRandomSocialIdsResponse other) {
        if (other == global::com.golf.proto.CCGetRandomSocialIdsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.socialIds_.Count != 0) {
          result.socialIds_.Add(other.socialIds_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetRandomSocialIdsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetRandomSocialIdsResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.socialIds_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> SocialIdsList {
        get { return PrepareBuilder().socialIds_; }
      }
      public int SocialIdsCount {
        get { return result.SocialIdsCount; }
      }
      public string GetSocialIds(int index) {
        return result.GetSocialIds(index);
      }
      public Builder SetSocialIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.socialIds_[index] = value;
        return this;
      }
      public Builder AddSocialIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.socialIds_.Add(value);
        return this;
      }
      public Builder AddRangeSocialIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.socialIds_.Add(values);
        return this;
      }
      public Builder ClearSocialIds() {
        PrepareBuilder();
        result.socialIds_.Clear();
        return this;
      }
    }
    static CCGetRandomSocialIdsResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSettingStatus : pb::GeneratedMessageLite<CCSettingStatus, CCSettingStatus.Builder> {
    private CCSettingStatus() { }
    private static readonly CCSettingStatus defaultInstance = new CCSettingStatus().MakeReadOnly();
    private static readonly string[] _cCSettingStatusFieldNames = new string[] { "notification", "sound", "tutorial_match", "tutorial_open_box", "tutorial_strick" };
    private static readonly uint[] _cCSettingStatusFieldTags = new uint[] { 40, 32, 16, 24, 8 };
    public static CCSettingStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSettingStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSettingStatus ThisMessage {
      get { return this; }
    }
    
    public const int TutorialStrickFieldNumber = 1;
    private bool hasTutorialStrick;
    private bool tutorialStrick_;
    public bool HasTutorialStrick {
      get { return hasTutorialStrick; }
    }
    public bool TutorialStrick {
      get { return tutorialStrick_; }
    }
    
    public const int TutorialMatchFieldNumber = 2;
    private bool hasTutorialMatch;
    private bool tutorialMatch_;
    public bool HasTutorialMatch {
      get { return hasTutorialMatch; }
    }
    public bool TutorialMatch {
      get { return tutorialMatch_; }
    }
    
    public const int TutorialOpenBoxFieldNumber = 3;
    private bool hasTutorialOpenBox;
    private bool tutorialOpenBox_;
    public bool HasTutorialOpenBox {
      get { return hasTutorialOpenBox; }
    }
    public bool TutorialOpenBox {
      get { return tutorialOpenBox_; }
    }
    
    public const int SoundFieldNumber = 4;
    private bool hasSound;
    private bool sound_ = true;
    public bool HasSound {
      get { return hasSound; }
    }
    public bool Sound {
      get { return sound_; }
    }
    
    public const int NotificationFieldNumber = 5;
    private bool hasNotification;
    private bool notification_ = true;
    public bool HasNotification {
      get { return hasNotification; }
    }
    public bool Notification {
      get { return notification_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSettingStatusFieldNames;
      if (hasTutorialStrick) {
        output.WriteBool(1, field_names[4], TutorialStrick);
      }
      if (hasTutorialMatch) {
        output.WriteBool(2, field_names[2], TutorialMatch);
      }
      if (hasTutorialOpenBox) {
        output.WriteBool(3, field_names[3], TutorialOpenBox);
      }
      if (hasSound) {
        output.WriteBool(4, field_names[1], Sound);
      }
      if (hasNotification) {
        output.WriteBool(5, field_names[0], Notification);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTutorialStrick) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, TutorialStrick);
      }
      if (hasTutorialMatch) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, TutorialMatch);
      }
      if (hasTutorialOpenBox) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, TutorialOpenBox);
      }
      if (hasSound) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Sound);
      }
      if (hasNotification) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Notification);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTutorialStrick) hash ^= tutorialStrick_.GetHashCode();
      if (hasTutorialMatch) hash ^= tutorialMatch_.GetHashCode();
      if (hasTutorialOpenBox) hash ^= tutorialOpenBox_.GetHashCode();
      if (hasSound) hash ^= sound_.GetHashCode();
      if (hasNotification) hash ^= notification_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSettingStatus other = obj as CCSettingStatus;
      if (other == null) return false;
      if (hasTutorialStrick != other.hasTutorialStrick || (hasTutorialStrick && !tutorialStrick_.Equals(other.tutorialStrick_))) return false;
      if (hasTutorialMatch != other.hasTutorialMatch || (hasTutorialMatch && !tutorialMatch_.Equals(other.tutorialMatch_))) return false;
      if (hasTutorialOpenBox != other.hasTutorialOpenBox || (hasTutorialOpenBox && !tutorialOpenBox_.Equals(other.tutorialOpenBox_))) return false;
      if (hasSound != other.hasSound || (hasSound && !sound_.Equals(other.sound_))) return false;
      if (hasNotification != other.hasNotification || (hasNotification && !notification_.Equals(other.notification_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("tutorial_strick", hasTutorialStrick, tutorialStrick_, writer);
      PrintField("tutorial_match", hasTutorialMatch, tutorialMatch_, writer);
      PrintField("tutorial_open_box", hasTutorialOpenBox, tutorialOpenBox_, writer);
      PrintField("sound", hasSound, sound_, writer);
      PrintField("notification", hasNotification, notification_, writer);
    }
    #endregion
    
    public static CCSettingStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSettingStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSettingStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSettingStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSettingStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSettingStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSettingStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSettingStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSettingStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSettingStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSettingStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSettingStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSettingStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSettingStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSettingStatus result;
      
      private CCSettingStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSettingStatus original = result;
          result = new CCSettingStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSettingStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSettingStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCSettingStatus.DefaultInstance; }
      }
      
      public override CCSettingStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSettingStatus) {
          return MergeFrom((CCSettingStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSettingStatus other) {
        if (other == global::com.golf.proto.CCSettingStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTutorialStrick) {
          TutorialStrick = other.TutorialStrick;
        }
        if (other.HasTutorialMatch) {
          TutorialMatch = other.TutorialMatch;
        }
        if (other.HasTutorialOpenBox) {
          TutorialOpenBox = other.TutorialOpenBox;
        }
        if (other.HasSound) {
          Sound = other.Sound;
        }
        if (other.HasNotification) {
          Notification = other.Notification;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSettingStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSettingStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTutorialStrick = input.ReadBool(ref result.tutorialStrick_);
              break;
            }
            case 16: {
              result.hasTutorialMatch = input.ReadBool(ref result.tutorialMatch_);
              break;
            }
            case 24: {
              result.hasTutorialOpenBox = input.ReadBool(ref result.tutorialOpenBox_);
              break;
            }
            case 32: {
              result.hasSound = input.ReadBool(ref result.sound_);
              break;
            }
            case 40: {
              result.hasNotification = input.ReadBool(ref result.notification_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasTutorialStrick {
        get { return result.hasTutorialStrick; }
      }
      public bool TutorialStrick {
        get { return result.TutorialStrick; }
        set { SetTutorialStrick(value); }
      }
      public Builder SetTutorialStrick(bool value) {
        PrepareBuilder();
        result.hasTutorialStrick = true;
        result.tutorialStrick_ = value;
        return this;
      }
      public Builder ClearTutorialStrick() {
        PrepareBuilder();
        result.hasTutorialStrick = false;
        result.tutorialStrick_ = false;
        return this;
      }
      
      public bool HasTutorialMatch {
        get { return result.hasTutorialMatch; }
      }
      public bool TutorialMatch {
        get { return result.TutorialMatch; }
        set { SetTutorialMatch(value); }
      }
      public Builder SetTutorialMatch(bool value) {
        PrepareBuilder();
        result.hasTutorialMatch = true;
        result.tutorialMatch_ = value;
        return this;
      }
      public Builder ClearTutorialMatch() {
        PrepareBuilder();
        result.hasTutorialMatch = false;
        result.tutorialMatch_ = false;
        return this;
      }
      
      public bool HasTutorialOpenBox {
        get { return result.hasTutorialOpenBox; }
      }
      public bool TutorialOpenBox {
        get { return result.TutorialOpenBox; }
        set { SetTutorialOpenBox(value); }
      }
      public Builder SetTutorialOpenBox(bool value) {
        PrepareBuilder();
        result.hasTutorialOpenBox = true;
        result.tutorialOpenBox_ = value;
        return this;
      }
      public Builder ClearTutorialOpenBox() {
        PrepareBuilder();
        result.hasTutorialOpenBox = false;
        result.tutorialOpenBox_ = false;
        return this;
      }
      
      public bool HasSound {
        get { return result.hasSound; }
      }
      public bool Sound {
        get { return result.Sound; }
        set { SetSound(value); }
      }
      public Builder SetSound(bool value) {
        PrepareBuilder();
        result.hasSound = true;
        result.sound_ = value;
        return this;
      }
      public Builder ClearSound() {
        PrepareBuilder();
        result.hasSound = false;
        result.sound_ = true;
        return this;
      }
      
      public bool HasNotification {
        get { return result.hasNotification; }
      }
      public bool Notification {
        get { return result.Notification; }
        set { SetNotification(value); }
      }
      public Builder SetNotification(bool value) {
        PrepareBuilder();
        result.hasNotification = true;
        result.notification_ = value;
        return this;
      }
      public Builder ClearNotification() {
        PrepareBuilder();
        result.hasNotification = false;
        result.notification_ = true;
        return this;
      }
    }
    static CCSettingStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUpdateSettingRequest : pb::GeneratedMessageLite<CCUpdateSettingRequest, CCUpdateSettingRequest.Builder> {
    private CCUpdateSettingRequest() { }
    private static readonly CCUpdateSettingRequest defaultInstance = new CCUpdateSettingRequest().MakeReadOnly();
    private static readonly string[] _cCUpdateSettingRequestFieldNames = new string[] { "id", "setting_status" };
    private static readonly uint[] _cCUpdateSettingRequestFieldTags = new uint[] { 10, 18 };
    public static CCUpdateSettingRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUpdateSettingRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUpdateSettingRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SettingStatusFieldNumber = 2;
    private bool hasSettingStatus;
    private global::com.golf.proto.CCSettingStatus settingStatus_;
    public bool HasSettingStatus {
      get { return hasSettingStatus; }
    }
    public global::com.golf.proto.CCSettingStatus SettingStatus {
      get { return settingStatus_ ?? global::com.golf.proto.CCSettingStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUpdateSettingRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSettingStatus) {
        output.WriteMessage(2, field_names[1], SettingStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSettingStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, SettingStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSettingStatus) hash ^= settingStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUpdateSettingRequest other = obj as CCUpdateSettingRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSettingStatus != other.hasSettingStatus || (hasSettingStatus && !settingStatus_.Equals(other.settingStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("setting_status", hasSettingStatus, settingStatus_, writer);
    }
    #endregion
    
    public static CCUpdateSettingRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateSettingRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUpdateSettingRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUpdateSettingRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUpdateSettingRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUpdateSettingRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUpdateSettingRequest result;
      
      private CCUpdateSettingRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUpdateSettingRequest original = result;
          result = new CCUpdateSettingRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUpdateSettingRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUpdateSettingRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCUpdateSettingRequest.DefaultInstance; }
      }
      
      public override CCUpdateSettingRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUpdateSettingRequest) {
          return MergeFrom((CCUpdateSettingRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUpdateSettingRequest other) {
        if (other == global::com.golf.proto.CCUpdateSettingRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSettingStatus) {
          MergeSettingStatus(other.SettingStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUpdateSettingRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUpdateSettingRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCSettingStatus.Builder subBuilder = global::com.golf.proto.CCSettingStatus.CreateBuilder();
              if (result.hasSettingStatus) {
                subBuilder.MergeFrom(SettingStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SettingStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSettingStatus {
       get { return result.hasSettingStatus; }
      }
      public global::com.golf.proto.CCSettingStatus SettingStatus {
        get { return result.SettingStatus; }
        set { SetSettingStatus(value); }
      }
      public Builder SetSettingStatus(global::com.golf.proto.CCSettingStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSettingStatus = true;
        result.settingStatus_ = value;
        return this;
      }
      public Builder SetSettingStatus(global::com.golf.proto.CCSettingStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSettingStatus = true;
        result.settingStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSettingStatus(global::com.golf.proto.CCSettingStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSettingStatus &&
            result.settingStatus_ != global::com.golf.proto.CCSettingStatus.DefaultInstance) {
            result.settingStatus_ = global::com.golf.proto.CCSettingStatus.CreateBuilder(result.settingStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.settingStatus_ = value;
        }
        result.hasSettingStatus = true;
        return this;
      }
      public Builder ClearSettingStatus() {
        PrepareBuilder();
        result.hasSettingStatus = false;
        result.settingStatus_ = null;
        return this;
      }
    }
    static CCUpdateSettingRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUpdateItemStateRequest : pb::GeneratedMessageLite<CCUpdateItemStateRequest, CCUpdateItemStateRequest.Builder> {
    private CCUpdateItemStateRequest() { }
    private static readonly CCUpdateItemStateRequest defaultInstance = new CCUpdateItemStateRequest().MakeReadOnly();
    private static readonly string[] _cCUpdateItemStateRequestFieldNames = new string[] { "id", "item", "state_type", "value" };
    private static readonly uint[] _cCUpdateItemStateRequestFieldTags = new uint[] { 10, 18, 24, 32 };
    public static CCUpdateItemStateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUpdateItemStateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUpdateItemStateRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int ItemFieldNumber = 2;
    private bool hasItem;
    private global::com.golf.proto.CCItem item_;
    public bool HasItem {
      get { return hasItem; }
    }
    public global::com.golf.proto.CCItem Item {
      get { return item_ ?? global::com.golf.proto.CCItem.DefaultInstance; }
    }
    
    public const int StateTypeFieldNumber = 3;
    private bool hasStateType;
    private int stateType_;
    public bool HasStateType {
      get { return hasStateType; }
    }
    public int StateType {
      get { return stateType_; }
    }
    
    public const int ValueFieldNumber = 4;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUpdateItemStateRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasItem) {
        output.WriteMessage(2, field_names[1], Item);
      }
      if (hasStateType) {
        output.WriteInt32(3, field_names[2], StateType);
      }
      if (hasValue) {
        output.WriteInt32(4, field_names[3], Value);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Item);
      }
      if (hasStateType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, StateType);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Value);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasItem) hash ^= item_.GetHashCode();
      if (hasStateType) hash ^= stateType_.GetHashCode();
      if (hasValue) hash ^= value_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUpdateItemStateRequest other = obj as CCUpdateItemStateRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasItem != other.hasItem || (hasItem && !item_.Equals(other.item_))) return false;
      if (hasStateType != other.hasStateType || (hasStateType && !stateType_.Equals(other.stateType_))) return false;
      if (hasValue != other.hasValue || (hasValue && !value_.Equals(other.value_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("item", hasItem, item_, writer);
      PrintField("state_type", hasStateType, stateType_, writer);
      PrintField("value", hasValue, value_, writer);
    }
    #endregion
    
    public static CCUpdateItemStateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateItemStateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUpdateItemStateRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUpdateItemStateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUpdateItemStateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUpdateItemStateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUpdateItemStateRequest result;
      
      private CCUpdateItemStateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUpdateItemStateRequest original = result;
          result = new CCUpdateItemStateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUpdateItemStateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUpdateItemStateRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCUpdateItemStateRequest.DefaultInstance; }
      }
      
      public override CCUpdateItemStateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUpdateItemStateRequest) {
          return MergeFrom((CCUpdateItemStateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUpdateItemStateRequest other) {
        if (other == global::com.golf.proto.CCUpdateItemStateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasItem) {
          MergeItem(other.Item);
        }
        if (other.HasStateType) {
          StateType = other.StateType;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUpdateItemStateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUpdateItemStateRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCItem.Builder subBuilder = global::com.golf.proto.CCItem.CreateBuilder();
              if (result.hasItem) {
                subBuilder.MergeFrom(Item);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Item = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasStateType = input.ReadInt32(ref result.stateType_);
              break;
            }
            case 32: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasItem {
       get { return result.hasItem; }
      }
      public global::com.golf.proto.CCItem Item {
        get { return result.Item; }
        set { SetItem(value); }
      }
      public Builder SetItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder SetItem(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItem = true;
        result.item_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItem(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItem &&
            result.item_ != global::com.golf.proto.CCItem.DefaultInstance) {
            result.item_ = global::com.golf.proto.CCItem.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder ClearItem() {
        PrepareBuilder();
        result.hasItem = false;
        result.item_ = null;
        return this;
      }
      
      public bool HasStateType {
        get { return result.hasStateType; }
      }
      public int StateType {
        get { return result.StateType; }
        set { SetStateType(value); }
      }
      public Builder SetStateType(int value) {
        PrepareBuilder();
        result.hasStateType = true;
        result.stateType_ = value;
        return this;
      }
      public Builder ClearStateType() {
        PrepareBuilder();
        result.hasStateType = false;
        result.stateType_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static CCUpdateItemStateRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSyncUserDataRequest : pb::GeneratedMessageLite<CCSyncUserDataRequest, CCSyncUserDataRequest.Builder> {
    private CCSyncUserDataRequest() { }
    private static readonly CCSyncUserDataRequest defaultInstance = new CCSyncUserDataRequest().MakeReadOnly();
    private static readonly string[] _cCSyncUserDataRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCSyncUserDataRequestFieldTags = new uint[] { 10 };
    public static CCSyncUserDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSyncUserDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSyncUserDataRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSyncUserDataRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSyncUserDataRequest other = obj as CCSyncUserDataRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCSyncUserDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSyncUserDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSyncUserDataRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSyncUserDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSyncUserDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSyncUserDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSyncUserDataRequest result;
      
      private CCSyncUserDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSyncUserDataRequest original = result;
          result = new CCSyncUserDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSyncUserDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSyncUserDataRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSyncUserDataRequest.DefaultInstance; }
      }
      
      public override CCSyncUserDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSyncUserDataRequest) {
          return MergeFrom((CCSyncUserDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSyncUserDataRequest other) {
        if (other == global::com.golf.proto.CCSyncUserDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSyncUserDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSyncUserDataRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCSyncUserDataRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSyncUserDataResponse : pb::GeneratedMessageLite<CCSyncUserDataResponse, CCSyncUserDataResponse.Builder> {
    private CCSyncUserDataResponse() { }
    private static readonly CCSyncUserDataResponse defaultInstance = new CCSyncUserDataResponse().MakeReadOnly();
    private static readonly string[] _cCSyncUserDataResponseFieldNames = new string[] { "result", "user_data" };
    private static readonly uint[] _cCSyncUserDataResponseFieldTags = new uint[] { 8, 18 };
    public static CCSyncUserDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSyncUserDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSyncUserDataResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int UserDataFieldNumber = 2;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSyncUserDataResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasUserData) {
        output.WriteMessage(2, field_names[1], UserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSyncUserDataResponse other = obj as CCSyncUserDataResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
    }
    #endregion
    
    public static CCSyncUserDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSyncUserDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSyncUserDataResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSyncUserDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSyncUserDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSyncUserDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSyncUserDataResponse result;
      
      private CCSyncUserDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSyncUserDataResponse original = result;
          result = new CCSyncUserDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSyncUserDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSyncUserDataResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCSyncUserDataResponse.DefaultInstance; }
      }
      
      public override CCSyncUserDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSyncUserDataResponse) {
          return MergeFrom((CCSyncUserDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSyncUserDataResponse other) {
        if (other == global::com.golf.proto.CCSyncUserDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSyncUserDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSyncUserDataResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
    }
    static CCSyncUserDataResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSupportRequest : pb::GeneratedMessageLite<CCSupportRequest, CCSupportRequest.Builder> {
    private CCSupportRequest() { }
    private static readonly CCSupportRequest defaultInstance = new CCSupportRequest().MakeReadOnly();
    private static readonly string[] _cCSupportRequestFieldNames = new string[] { "content", "email_addr", "id", "title" };
    private static readonly uint[] _cCSupportRequestFieldTags = new uint[] { 34, 18, 10, 26 };
    public static CCSupportRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSupportRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSupportRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int EmailAddrFieldNumber = 2;
    private bool hasEmailAddr;
    private string emailAddr_ = "";
    public bool HasEmailAddr {
      get { return hasEmailAddr; }
    }
    public string EmailAddr {
      get { return emailAddr_; }
    }
    
    public const int TitleFieldNumber = 3;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int ContentFieldNumber = 4;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSupportRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[2], Id);
      }
      if (hasEmailAddr) {
        output.WriteString(2, field_names[1], EmailAddr);
      }
      if (hasTitle) {
        output.WriteString(3, field_names[3], Title);
      }
      if (hasContent) {
        output.WriteString(4, field_names[0], Content);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasEmailAddr) {
        size += pb::CodedOutputStream.ComputeStringSize(2, EmailAddr);
      }
      if (hasTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Title);
      }
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Content);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasEmailAddr) hash ^= emailAddr_.GetHashCode();
      if (hasTitle) hash ^= title_.GetHashCode();
      if (hasContent) hash ^= content_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSupportRequest other = obj as CCSupportRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasEmailAddr != other.hasEmailAddr || (hasEmailAddr && !emailAddr_.Equals(other.emailAddr_))) return false;
      if (hasTitle != other.hasTitle || (hasTitle && !title_.Equals(other.title_))) return false;
      if (hasContent != other.hasContent || (hasContent && !content_.Equals(other.content_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("email_addr", hasEmailAddr, emailAddr_, writer);
      PrintField("title", hasTitle, title_, writer);
      PrintField("content", hasContent, content_, writer);
    }
    #endregion
    
    public static CCSupportRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSupportRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSupportRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSupportRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSupportRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSupportRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSupportRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSupportRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSupportRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSupportRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSupportRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSupportRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSupportRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSupportRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSupportRequest result;
      
      private CCSupportRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSupportRequest original = result;
          result = new CCSupportRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSupportRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSupportRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSupportRequest.DefaultInstance; }
      }
      
      public override CCSupportRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSupportRequest) {
          return MergeFrom((CCSupportRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSupportRequest other) {
        if (other == global::com.golf.proto.CCSupportRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasEmailAddr) {
          EmailAddr = other.EmailAddr;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSupportRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSupportRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasEmailAddr = input.ReadString(ref result.emailAddr_);
              break;
            }
            case 26: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 34: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasEmailAddr {
        get { return result.hasEmailAddr; }
      }
      public string EmailAddr {
        get { return result.EmailAddr; }
        set { SetEmailAddr(value); }
      }
      public Builder SetEmailAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmailAddr = true;
        result.emailAddr_ = value;
        return this;
      }
      public Builder ClearEmailAddr() {
        PrepareBuilder();
        result.hasEmailAddr = false;
        result.emailAddr_ = "";
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
    }
    static CCSupportRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSupportResponse : pb::GeneratedMessageLite<CCSupportResponse, CCSupportResponse.Builder> {
    private CCSupportResponse() { }
    private static readonly CCSupportResponse defaultInstance = new CCSupportResponse().MakeReadOnly();
    private static readonly string[] _cCSupportResponseFieldNames = new string[] { "content", "result" };
    private static readonly uint[] _cCSupportResponseFieldTags = new uint[] { 18, 8 };
    public static CCSupportResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSupportResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSupportResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int ContentFieldNumber = 2;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSupportResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasContent) {
        output.WriteString(2, field_names[0], Content);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Content);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasContent) hash ^= content_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSupportResponse other = obj as CCSupportResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasContent != other.hasContent || (hasContent && !content_.Equals(other.content_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("content", hasContent, content_, writer);
    }
    #endregion
    
    public static CCSupportResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSupportResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSupportResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSupportResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSupportResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSupportResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSupportResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSupportResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSupportResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSupportResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSupportResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSupportResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSupportResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSupportResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSupportResponse result;
      
      private CCSupportResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSupportResponse original = result;
          result = new CCSupportResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSupportResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSupportResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCSupportResponse.DefaultInstance; }
      }
      
      public override CCSupportResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSupportResponse) {
          return MergeFrom((CCSupportResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSupportResponse other) {
        if (other == global::com.golf.proto.CCSupportResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSupportResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSupportResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
    }
    static CCSupportResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCStatLeaveInPlayingRequest : pb::GeneratedMessageLite<CCStatLeaveInPlayingRequest, CCStatLeaveInPlayingRequest.Builder> {
    private CCStatLeaveInPlayingRequest() { }
    private static readonly CCStatLeaveInPlayingRequest defaultInstance = new CCStatLeaveInPlayingRequest().MakeReadOnly();
    private static readonly string[] _cCStatLeaveInPlayingRequestFieldNames = new string[] { "id", "state", "vs_mode_id" };
    private static readonly uint[] _cCStatLeaveInPlayingRequestFieldTags = new uint[] { 10, 24, 16 };
    public static CCStatLeaveInPlayingRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCStatLeaveInPlayingRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCStatLeaveInPlayingRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int VsModeIdFieldNumber = 2;
    private bool hasVsModeId;
    private int vsModeId_;
    public bool HasVsModeId {
      get { return hasVsModeId; }
    }
    public int VsModeId {
      get { return vsModeId_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCStatLeaveInPlayingRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasVsModeId) {
        output.WriteInt32(2, field_names[2], VsModeId);
      }
      if (hasState) {
        output.WriteInt32(3, field_names[1], State);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasVsModeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, VsModeId);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, State);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasVsModeId) hash ^= vsModeId_.GetHashCode();
      if (hasState) hash ^= state_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCStatLeaveInPlayingRequest other = obj as CCStatLeaveInPlayingRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasVsModeId != other.hasVsModeId || (hasVsModeId && !vsModeId_.Equals(other.vsModeId_))) return false;
      if (hasState != other.hasState || (hasState && !state_.Equals(other.state_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("vs_mode_id", hasVsModeId, vsModeId_, writer);
      PrintField("state", hasState, state_, writer);
    }
    #endregion
    
    public static CCStatLeaveInPlayingRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCStatLeaveInPlayingRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCStatLeaveInPlayingRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCStatLeaveInPlayingRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCStatLeaveInPlayingRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCStatLeaveInPlayingRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCStatLeaveInPlayingRequest result;
      
      private CCStatLeaveInPlayingRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCStatLeaveInPlayingRequest original = result;
          result = new CCStatLeaveInPlayingRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCStatLeaveInPlayingRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCStatLeaveInPlayingRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCStatLeaveInPlayingRequest.DefaultInstance; }
      }
      
      public override CCStatLeaveInPlayingRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCStatLeaveInPlayingRequest) {
          return MergeFrom((CCStatLeaveInPlayingRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCStatLeaveInPlayingRequest other) {
        if (other == global::com.golf.proto.CCStatLeaveInPlayingRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasVsModeId) {
          VsModeId = other.VsModeId;
        }
        if (other.HasState) {
          State = other.State;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCStatLeaveInPlayingRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCStatLeaveInPlayingRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasVsModeId = input.ReadInt32(ref result.vsModeId_);
              break;
            }
            case 24: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasVsModeId {
        get { return result.hasVsModeId; }
      }
      public int VsModeId {
        get { return result.VsModeId; }
        set { SetVsModeId(value); }
      }
      public Builder SetVsModeId(int value) {
        PrepareBuilder();
        result.hasVsModeId = true;
        result.vsModeId_ = value;
        return this;
      }
      public Builder ClearVsModeId() {
        PrepareBuilder();
        result.hasVsModeId = false;
        result.vsModeId_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
    }
    static CCStatLeaveInPlayingRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCHistoryRankStatus : pb::GeneratedMessageLite<CCHistoryRankStatus, CCHistoryRankStatus.Builder> {
    private CCHistoryRankStatus() { }
    private static readonly CCHistoryRankStatus defaultInstance = new CCHistoryRankStatus().MakeReadOnly();
    private static readonly string[] _cCHistoryRankStatusFieldNames = new string[] { "tnmt_items", "world_ldbd_items" };
    private static readonly uint[] _cCHistoryRankStatusFieldTags = new uint[] { 18, 10 };
    public static CCHistoryRankStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCHistoryRankStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCHistoryRankStatus ThisMessage {
      get { return this; }
    }
    
    public const int WorldLdbdItemsFieldNumber = 1;
    private pbc::PopsicleList<global::com.golf.proto.CCWorldLdbdHistoryRankItem> worldLdbdItems_ = new pbc::PopsicleList<global::com.golf.proto.CCWorldLdbdHistoryRankItem>();
    public scg::IList<global::com.golf.proto.CCWorldLdbdHistoryRankItem> WorldLdbdItemsList {
      get { return worldLdbdItems_; }
    }
    public int WorldLdbdItemsCount {
      get { return worldLdbdItems_.Count; }
    }
    public global::com.golf.proto.CCWorldLdbdHistoryRankItem GetWorldLdbdItems(int index) {
      return worldLdbdItems_[index];
    }
    
    public const int TnmtItemsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCTnmtHistoryRankItem> tnmtItems_ = new pbc::PopsicleList<global::com.golf.proto.CCTnmtHistoryRankItem>();
    public scg::IList<global::com.golf.proto.CCTnmtHistoryRankItem> TnmtItemsList {
      get { return tnmtItems_; }
    }
    public int TnmtItemsCount {
      get { return tnmtItems_.Count; }
    }
    public global::com.golf.proto.CCTnmtHistoryRankItem GetTnmtItems(int index) {
      return tnmtItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCHistoryRankStatusFieldNames;
      if (worldLdbdItems_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], worldLdbdItems_);
      }
      if (tnmtItems_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], tnmtItems_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::com.golf.proto.CCWorldLdbdHistoryRankItem element in WorldLdbdItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::com.golf.proto.CCTnmtHistoryRankItem element in TnmtItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.golf.proto.CCWorldLdbdHistoryRankItem i in worldLdbdItems_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCTnmtHistoryRankItem i in tnmtItems_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCHistoryRankStatus other = obj as CCHistoryRankStatus;
      if (other == null) return false;
      if(worldLdbdItems_.Count != other.worldLdbdItems_.Count) return false;
      for(int ix=0; ix < worldLdbdItems_.Count; ix++)
        if(!worldLdbdItems_[ix].Equals(other.worldLdbdItems_[ix])) return false;
      if(tnmtItems_.Count != other.tnmtItems_.Count) return false;
      for(int ix=0; ix < tnmtItems_.Count; ix++)
        if(!tnmtItems_[ix].Equals(other.tnmtItems_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("world_ldbd_items", worldLdbdItems_, writer);
      PrintField("tnmt_items", tnmtItems_, writer);
    }
    #endregion
    
    public static CCHistoryRankStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHistoryRankStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHistoryRankStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCHistoryRankStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCHistoryRankStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHistoryRankStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCHistoryRankStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCHistoryRankStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCHistoryRankStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCHistoryRankStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCHistoryRankStatus MakeReadOnly() {
      worldLdbdItems_.MakeReadOnly();
      tnmtItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCHistoryRankStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCHistoryRankStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCHistoryRankStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCHistoryRankStatus result;
      
      private CCHistoryRankStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCHistoryRankStatus original = result;
          result = new CCHistoryRankStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCHistoryRankStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCHistoryRankStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCHistoryRankStatus.DefaultInstance; }
      }
      
      public override CCHistoryRankStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCHistoryRankStatus) {
          return MergeFrom((CCHistoryRankStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCHistoryRankStatus other) {
        if (other == global::com.golf.proto.CCHistoryRankStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.worldLdbdItems_.Count != 0) {
          result.worldLdbdItems_.Add(other.worldLdbdItems_);
        }
        if (other.tnmtItems_.Count != 0) {
          result.tnmtItems_.Add(other.tnmtItems_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCHistoryRankStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCHistoryRankStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.worldLdbdItems_, global::com.golf.proto.CCWorldLdbdHistoryRankItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.tnmtItems_, global::com.golf.proto.CCTnmtHistoryRankItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.golf.proto.CCWorldLdbdHistoryRankItem> WorldLdbdItemsList {
        get { return PrepareBuilder().worldLdbdItems_; }
      }
      public int WorldLdbdItemsCount {
        get { return result.WorldLdbdItemsCount; }
      }
      public global::com.golf.proto.CCWorldLdbdHistoryRankItem GetWorldLdbdItems(int index) {
        return result.GetWorldLdbdItems(index);
      }
      public Builder SetWorldLdbdItems(int index, global::com.golf.proto.CCWorldLdbdHistoryRankItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.worldLdbdItems_[index] = value;
        return this;
      }
      public Builder SetWorldLdbdItems(int index, global::com.golf.proto.CCWorldLdbdHistoryRankItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.worldLdbdItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWorldLdbdItems(global::com.golf.proto.CCWorldLdbdHistoryRankItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.worldLdbdItems_.Add(value);
        return this;
      }
      public Builder AddWorldLdbdItems(global::com.golf.proto.CCWorldLdbdHistoryRankItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.worldLdbdItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWorldLdbdItems(scg::IEnumerable<global::com.golf.proto.CCWorldLdbdHistoryRankItem> values) {
        PrepareBuilder();
        result.worldLdbdItems_.Add(values);
        return this;
      }
      public Builder ClearWorldLdbdItems() {
        PrepareBuilder();
        result.worldLdbdItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCTnmtHistoryRankItem> TnmtItemsList {
        get { return PrepareBuilder().tnmtItems_; }
      }
      public int TnmtItemsCount {
        get { return result.TnmtItemsCount; }
      }
      public global::com.golf.proto.CCTnmtHistoryRankItem GetTnmtItems(int index) {
        return result.GetTnmtItems(index);
      }
      public Builder SetTnmtItems(int index, global::com.golf.proto.CCTnmtHistoryRankItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tnmtItems_[index] = value;
        return this;
      }
      public Builder SetTnmtItems(int index, global::com.golf.proto.CCTnmtHistoryRankItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tnmtItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTnmtItems(global::com.golf.proto.CCTnmtHistoryRankItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tnmtItems_.Add(value);
        return this;
      }
      public Builder AddTnmtItems(global::com.golf.proto.CCTnmtHistoryRankItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tnmtItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTnmtItems(scg::IEnumerable<global::com.golf.proto.CCTnmtHistoryRankItem> values) {
        PrepareBuilder();
        result.tnmtItems_.Add(values);
        return this;
      }
      public Builder ClearTnmtItems() {
        PrepareBuilder();
        result.tnmtItems_.Clear();
        return this;
      }
    }
    static CCHistoryRankStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCWorldLdbdHistoryRankItem : pb::GeneratedMessageLite<CCWorldLdbdHistoryRankItem, CCWorldLdbdHistoryRankItem.Builder> {
    private CCWorldLdbdHistoryRankItem() { }
    private static readonly CCWorldLdbdHistoryRankItem defaultInstance = new CCWorldLdbdHistoryRankItem().MakeReadOnly();
    private static readonly string[] _cCWorldLdbdHistoryRankItemFieldNames = new string[] { "et", "level", "nth_id", "rank", "score", "st", "week_id" };
    private static readonly uint[] _cCWorldLdbdHistoryRankItemFieldTags = new uint[] { 48, 56, 8, 24, 32, 40, 16 };
    public static CCWorldLdbdHistoryRankItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCWorldLdbdHistoryRankItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCWorldLdbdHistoryRankItem ThisMessage {
      get { return this; }
    }
    
    public const int NthIdFieldNumber = 1;
    private bool hasNthId;
    private int nthId_;
    public bool HasNthId {
      get { return hasNthId; }
    }
    public int NthId {
      get { return nthId_; }
    }
    
    public const int WeekIdFieldNumber = 2;
    private bool hasWeekId;
    private int weekId_;
    public bool HasWeekId {
      get { return hasWeekId; }
    }
    public int WeekId {
      get { return weekId_; }
    }
    
    public const int RankFieldNumber = 3;
    private bool hasRank;
    private int rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    public int Rank {
      get { return rank_; }
    }
    
    public const int ScoreFieldNumber = 4;
    private bool hasScore;
    private long score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public long Score {
      get { return score_; }
    }
    
    public const int StFieldNumber = 5;
    private bool hasSt;
    private long st_;
    public bool HasSt {
      get { return hasSt; }
    }
    public long St {
      get { return st_; }
    }
    
    public const int EtFieldNumber = 6;
    private bool hasEt;
    private long et_;
    public bool HasEt {
      get { return hasEt; }
    }
    public long Et {
      get { return et_; }
    }
    
    public const int LevelFieldNumber = 7;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCWorldLdbdHistoryRankItemFieldNames;
      if (hasNthId) {
        output.WriteInt32(1, field_names[2], NthId);
      }
      if (hasWeekId) {
        output.WriteInt32(2, field_names[6], WeekId);
      }
      if (hasRank) {
        output.WriteInt32(3, field_names[3], Rank);
      }
      if (hasScore) {
        output.WriteInt64(4, field_names[4], Score);
      }
      if (hasSt) {
        output.WriteInt64(5, field_names[5], St);
      }
      if (hasEt) {
        output.WriteInt64(6, field_names[0], Et);
      }
      if (hasLevel) {
        output.WriteInt32(7, field_names[1], Level);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNthId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, NthId);
      }
      if (hasWeekId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, WeekId);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Rank);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, Score);
      }
      if (hasSt) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, St);
      }
      if (hasEt) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, Et);
      }
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Level);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasNthId) hash ^= nthId_.GetHashCode();
      if (hasWeekId) hash ^= weekId_.GetHashCode();
      if (hasRank) hash ^= rank_.GetHashCode();
      if (hasScore) hash ^= score_.GetHashCode();
      if (hasSt) hash ^= st_.GetHashCode();
      if (hasEt) hash ^= et_.GetHashCode();
      if (hasLevel) hash ^= level_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCWorldLdbdHistoryRankItem other = obj as CCWorldLdbdHistoryRankItem;
      if (other == null) return false;
      if (hasNthId != other.hasNthId || (hasNthId && !nthId_.Equals(other.nthId_))) return false;
      if (hasWeekId != other.hasWeekId || (hasWeekId && !weekId_.Equals(other.weekId_))) return false;
      if (hasRank != other.hasRank || (hasRank && !rank_.Equals(other.rank_))) return false;
      if (hasScore != other.hasScore || (hasScore && !score_.Equals(other.score_))) return false;
      if (hasSt != other.hasSt || (hasSt && !st_.Equals(other.st_))) return false;
      if (hasEt != other.hasEt || (hasEt && !et_.Equals(other.et_))) return false;
      if (hasLevel != other.hasLevel || (hasLevel && !level_.Equals(other.level_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("nth_id", hasNthId, nthId_, writer);
      PrintField("week_id", hasWeekId, weekId_, writer);
      PrintField("rank", hasRank, rank_, writer);
      PrintField("score", hasScore, score_, writer);
      PrintField("st", hasSt, st_, writer);
      PrintField("et", hasEt, et_, writer);
      PrintField("level", hasLevel, level_, writer);
    }
    #endregion
    
    public static CCWorldLdbdHistoryRankItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWorldLdbdHistoryRankItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCWorldLdbdHistoryRankItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCWorldLdbdHistoryRankItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCWorldLdbdHistoryRankItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCWorldLdbdHistoryRankItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCWorldLdbdHistoryRankItem result;
      
      private CCWorldLdbdHistoryRankItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCWorldLdbdHistoryRankItem original = result;
          result = new CCWorldLdbdHistoryRankItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCWorldLdbdHistoryRankItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCWorldLdbdHistoryRankItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCWorldLdbdHistoryRankItem.DefaultInstance; }
      }
      
      public override CCWorldLdbdHistoryRankItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCWorldLdbdHistoryRankItem) {
          return MergeFrom((CCWorldLdbdHistoryRankItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCWorldLdbdHistoryRankItem other) {
        if (other == global::com.golf.proto.CCWorldLdbdHistoryRankItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNthId) {
          NthId = other.NthId;
        }
        if (other.HasWeekId) {
          WeekId = other.WeekId;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasSt) {
          St = other.St;
        }
        if (other.HasEt) {
          Et = other.Et;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCWorldLdbdHistoryRankItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCWorldLdbdHistoryRankItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNthId = input.ReadInt32(ref result.nthId_);
              break;
            }
            case 16: {
              result.hasWeekId = input.ReadInt32(ref result.weekId_);
              break;
            }
            case 24: {
              result.hasRank = input.ReadInt32(ref result.rank_);
              break;
            }
            case 32: {
              result.hasScore = input.ReadInt64(ref result.score_);
              break;
            }
            case 40: {
              result.hasSt = input.ReadInt64(ref result.st_);
              break;
            }
            case 48: {
              result.hasEt = input.ReadInt64(ref result.et_);
              break;
            }
            case 56: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasNthId {
        get { return result.hasNthId; }
      }
      public int NthId {
        get { return result.NthId; }
        set { SetNthId(value); }
      }
      public Builder SetNthId(int value) {
        PrepareBuilder();
        result.hasNthId = true;
        result.nthId_ = value;
        return this;
      }
      public Builder ClearNthId() {
        PrepareBuilder();
        result.hasNthId = false;
        result.nthId_ = 0;
        return this;
      }
      
      public bool HasWeekId {
        get { return result.hasWeekId; }
      }
      public int WeekId {
        get { return result.WeekId; }
        set { SetWeekId(value); }
      }
      public Builder SetWeekId(int value) {
        PrepareBuilder();
        result.hasWeekId = true;
        result.weekId_ = value;
        return this;
      }
      public Builder ClearWeekId() {
        PrepareBuilder();
        result.hasWeekId = false;
        result.weekId_ = 0;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      public int Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(int value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public long Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(long value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0L;
        return this;
      }
      
      public bool HasSt {
        get { return result.hasSt; }
      }
      public long St {
        get { return result.St; }
        set { SetSt(value); }
      }
      public Builder SetSt(long value) {
        PrepareBuilder();
        result.hasSt = true;
        result.st_ = value;
        return this;
      }
      public Builder ClearSt() {
        PrepareBuilder();
        result.hasSt = false;
        result.st_ = 0L;
        return this;
      }
      
      public bool HasEt {
        get { return result.hasEt; }
      }
      public long Et {
        get { return result.Et; }
        set { SetEt(value); }
      }
      public Builder SetEt(long value) {
        PrepareBuilder();
        result.hasEt = true;
        result.et_ = value;
        return this;
      }
      public Builder ClearEt() {
        PrepareBuilder();
        result.hasEt = false;
        result.et_ = 0L;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static CCWorldLdbdHistoryRankItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTnmtHistoryRankItem : pb::GeneratedMessageLite<CCTnmtHistoryRankItem, CCTnmtHistoryRankItem.Builder> {
    private CCTnmtHistoryRankItem() { }
    private static readonly CCTnmtHistoryRankItem defaultInstance = new CCTnmtHistoryRankItem().MakeReadOnly();
    private static readonly string[] _cCTnmtHistoryRankItemFieldNames = new string[] { "club_cnt", "et", "grade", "level", "nth_id", "period_id", "rank", "score", "st" };
    private static readonly uint[] _cCTnmtHistoryRankItemFieldTags = new uint[] { 48, 64, 24, 72, 8, 16, 32, 40, 56 };
    public static CCTnmtHistoryRankItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTnmtHistoryRankItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTnmtHistoryRankItem ThisMessage {
      get { return this; }
    }
    
    public const int NthIdFieldNumber = 1;
    private bool hasNthId;
    private int nthId_;
    public bool HasNthId {
      get { return hasNthId; }
    }
    public int NthId {
      get { return nthId_; }
    }
    
    public const int PeriodIdFieldNumber = 2;
    private bool hasPeriodId;
    private int periodId_;
    public bool HasPeriodId {
      get { return hasPeriodId; }
    }
    public int PeriodId {
      get { return periodId_; }
    }
    
    public const int GradeFieldNumber = 3;
    private bool hasGrade;
    private int grade_;
    public bool HasGrade {
      get { return hasGrade; }
    }
    public int Grade {
      get { return grade_; }
    }
    
    public const int RankFieldNumber = 4;
    private bool hasRank;
    private int rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    public int Rank {
      get { return rank_; }
    }
    
    public const int ScoreFieldNumber = 5;
    private bool hasScore;
    private long score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public long Score {
      get { return score_; }
    }
    
    public const int ClubCntFieldNumber = 6;
    private bool hasClubCnt;
    private int clubCnt_;
    public bool HasClubCnt {
      get { return hasClubCnt; }
    }
    public int ClubCnt {
      get { return clubCnt_; }
    }
    
    public const int StFieldNumber = 7;
    private bool hasSt;
    private long st_;
    public bool HasSt {
      get { return hasSt; }
    }
    public long St {
      get { return st_; }
    }
    
    public const int EtFieldNumber = 8;
    private bool hasEt;
    private long et_;
    public bool HasEt {
      get { return hasEt; }
    }
    public long Et {
      get { return et_; }
    }
    
    public const int LevelFieldNumber = 9;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTnmtHistoryRankItemFieldNames;
      if (hasNthId) {
        output.WriteInt32(1, field_names[4], NthId);
      }
      if (hasPeriodId) {
        output.WriteInt32(2, field_names[5], PeriodId);
      }
      if (hasGrade) {
        output.WriteInt32(3, field_names[2], Grade);
      }
      if (hasRank) {
        output.WriteInt32(4, field_names[6], Rank);
      }
      if (hasScore) {
        output.WriteInt64(5, field_names[7], Score);
      }
      if (hasClubCnt) {
        output.WriteInt32(6, field_names[0], ClubCnt);
      }
      if (hasSt) {
        output.WriteInt64(7, field_names[8], St);
      }
      if (hasEt) {
        output.WriteInt64(8, field_names[1], Et);
      }
      if (hasLevel) {
        output.WriteInt32(9, field_names[3], Level);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNthId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, NthId);
      }
      if (hasPeriodId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, PeriodId);
      }
      if (hasGrade) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Grade);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Rank);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, Score);
      }
      if (hasClubCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, ClubCnt);
      }
      if (hasSt) {
        size += pb::CodedOutputStream.ComputeInt64Size(7, St);
      }
      if (hasEt) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, Et);
      }
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Level);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasNthId) hash ^= nthId_.GetHashCode();
      if (hasPeriodId) hash ^= periodId_.GetHashCode();
      if (hasGrade) hash ^= grade_.GetHashCode();
      if (hasRank) hash ^= rank_.GetHashCode();
      if (hasScore) hash ^= score_.GetHashCode();
      if (hasClubCnt) hash ^= clubCnt_.GetHashCode();
      if (hasSt) hash ^= st_.GetHashCode();
      if (hasEt) hash ^= et_.GetHashCode();
      if (hasLevel) hash ^= level_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTnmtHistoryRankItem other = obj as CCTnmtHistoryRankItem;
      if (other == null) return false;
      if (hasNthId != other.hasNthId || (hasNthId && !nthId_.Equals(other.nthId_))) return false;
      if (hasPeriodId != other.hasPeriodId || (hasPeriodId && !periodId_.Equals(other.periodId_))) return false;
      if (hasGrade != other.hasGrade || (hasGrade && !grade_.Equals(other.grade_))) return false;
      if (hasRank != other.hasRank || (hasRank && !rank_.Equals(other.rank_))) return false;
      if (hasScore != other.hasScore || (hasScore && !score_.Equals(other.score_))) return false;
      if (hasClubCnt != other.hasClubCnt || (hasClubCnt && !clubCnt_.Equals(other.clubCnt_))) return false;
      if (hasSt != other.hasSt || (hasSt && !st_.Equals(other.st_))) return false;
      if (hasEt != other.hasEt || (hasEt && !et_.Equals(other.et_))) return false;
      if (hasLevel != other.hasLevel || (hasLevel && !level_.Equals(other.level_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("nth_id", hasNthId, nthId_, writer);
      PrintField("period_id", hasPeriodId, periodId_, writer);
      PrintField("grade", hasGrade, grade_, writer);
      PrintField("rank", hasRank, rank_, writer);
      PrintField("score", hasScore, score_, writer);
      PrintField("club_cnt", hasClubCnt, clubCnt_, writer);
      PrintField("st", hasSt, st_, writer);
      PrintField("et", hasEt, et_, writer);
      PrintField("level", hasLevel, level_, writer);
    }
    #endregion
    
    public static CCTnmtHistoryRankItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTnmtHistoryRankItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTnmtHistoryRankItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTnmtHistoryRankItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTnmtHistoryRankItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTnmtHistoryRankItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTnmtHistoryRankItem result;
      
      private CCTnmtHistoryRankItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTnmtHistoryRankItem original = result;
          result = new CCTnmtHistoryRankItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTnmtHistoryRankItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTnmtHistoryRankItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCTnmtHistoryRankItem.DefaultInstance; }
      }
      
      public override CCTnmtHistoryRankItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTnmtHistoryRankItem) {
          return MergeFrom((CCTnmtHistoryRankItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTnmtHistoryRankItem other) {
        if (other == global::com.golf.proto.CCTnmtHistoryRankItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNthId) {
          NthId = other.NthId;
        }
        if (other.HasPeriodId) {
          PeriodId = other.PeriodId;
        }
        if (other.HasGrade) {
          Grade = other.Grade;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasClubCnt) {
          ClubCnt = other.ClubCnt;
        }
        if (other.HasSt) {
          St = other.St;
        }
        if (other.HasEt) {
          Et = other.Et;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTnmtHistoryRankItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTnmtHistoryRankItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasNthId = input.ReadInt32(ref result.nthId_);
              break;
            }
            case 16: {
              result.hasPeriodId = input.ReadInt32(ref result.periodId_);
              break;
            }
            case 24: {
              result.hasGrade = input.ReadInt32(ref result.grade_);
              break;
            }
            case 32: {
              result.hasRank = input.ReadInt32(ref result.rank_);
              break;
            }
            case 40: {
              result.hasScore = input.ReadInt64(ref result.score_);
              break;
            }
            case 48: {
              result.hasClubCnt = input.ReadInt32(ref result.clubCnt_);
              break;
            }
            case 56: {
              result.hasSt = input.ReadInt64(ref result.st_);
              break;
            }
            case 64: {
              result.hasEt = input.ReadInt64(ref result.et_);
              break;
            }
            case 72: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasNthId {
        get { return result.hasNthId; }
      }
      public int NthId {
        get { return result.NthId; }
        set { SetNthId(value); }
      }
      public Builder SetNthId(int value) {
        PrepareBuilder();
        result.hasNthId = true;
        result.nthId_ = value;
        return this;
      }
      public Builder ClearNthId() {
        PrepareBuilder();
        result.hasNthId = false;
        result.nthId_ = 0;
        return this;
      }
      
      public bool HasPeriodId {
        get { return result.hasPeriodId; }
      }
      public int PeriodId {
        get { return result.PeriodId; }
        set { SetPeriodId(value); }
      }
      public Builder SetPeriodId(int value) {
        PrepareBuilder();
        result.hasPeriodId = true;
        result.periodId_ = value;
        return this;
      }
      public Builder ClearPeriodId() {
        PrepareBuilder();
        result.hasPeriodId = false;
        result.periodId_ = 0;
        return this;
      }
      
      public bool HasGrade {
        get { return result.hasGrade; }
      }
      public int Grade {
        get { return result.Grade; }
        set { SetGrade(value); }
      }
      public Builder SetGrade(int value) {
        PrepareBuilder();
        result.hasGrade = true;
        result.grade_ = value;
        return this;
      }
      public Builder ClearGrade() {
        PrepareBuilder();
        result.hasGrade = false;
        result.grade_ = 0;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      public int Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(int value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public long Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(long value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0L;
        return this;
      }
      
      public bool HasClubCnt {
        get { return result.hasClubCnt; }
      }
      public int ClubCnt {
        get { return result.ClubCnt; }
        set { SetClubCnt(value); }
      }
      public Builder SetClubCnt(int value) {
        PrepareBuilder();
        result.hasClubCnt = true;
        result.clubCnt_ = value;
        return this;
      }
      public Builder ClearClubCnt() {
        PrepareBuilder();
        result.hasClubCnt = false;
        result.clubCnt_ = 0;
        return this;
      }
      
      public bool HasSt {
        get { return result.hasSt; }
      }
      public long St {
        get { return result.St; }
        set { SetSt(value); }
      }
      public Builder SetSt(long value) {
        PrepareBuilder();
        result.hasSt = true;
        result.st_ = value;
        return this;
      }
      public Builder ClearSt() {
        PrepareBuilder();
        result.hasSt = false;
        result.st_ = 0L;
        return this;
      }
      
      public bool HasEt {
        get { return result.hasEt; }
      }
      public long Et {
        get { return result.Et; }
        set { SetEt(value); }
      }
      public Builder SetEt(long value) {
        PrepareBuilder();
        result.hasEt = true;
        result.et_ = value;
        return this;
      }
      public Builder ClearEt() {
        PrepareBuilder();
        result.hasEt = false;
        result.et_ = 0L;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static CCTnmtHistoryRankItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCBestHistoryRankStatus : pb::GeneratedMessageLite<CCBestHistoryRankStatus, CCBestHistoryRankStatus.Builder> {
    private CCBestHistoryRankStatus() { }
    private static readonly CCBestHistoryRankStatus defaultInstance = new CCBestHistoryRankStatus().MakeReadOnly();
    private static readonly string[] _cCBestHistoryRankStatusFieldNames = new string[] { "tnmt_items", "world_ldbd_items" };
    private static readonly uint[] _cCBestHistoryRankStatusFieldTags = new uint[] { 18, 10 };
    public static CCBestHistoryRankStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCBestHistoryRankStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCBestHistoryRankStatus ThisMessage {
      get { return this; }
    }
    
    public const int WorldLdbdItemsFieldNumber = 1;
    private pbc::PopsicleList<global::com.golf.proto.CCWoldLdbdBestHistoryRankItem> worldLdbdItems_ = new pbc::PopsicleList<global::com.golf.proto.CCWoldLdbdBestHistoryRankItem>();
    public scg::IList<global::com.golf.proto.CCWoldLdbdBestHistoryRankItem> WorldLdbdItemsList {
      get { return worldLdbdItems_; }
    }
    public int WorldLdbdItemsCount {
      get { return worldLdbdItems_.Count; }
    }
    public global::com.golf.proto.CCWoldLdbdBestHistoryRankItem GetWorldLdbdItems(int index) {
      return worldLdbdItems_[index];
    }
    
    public const int TnmtItemsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCTnmtBestHistoryRankItem> tnmtItems_ = new pbc::PopsicleList<global::com.golf.proto.CCTnmtBestHistoryRankItem>();
    public scg::IList<global::com.golf.proto.CCTnmtBestHistoryRankItem> TnmtItemsList {
      get { return tnmtItems_; }
    }
    public int TnmtItemsCount {
      get { return tnmtItems_.Count; }
    }
    public global::com.golf.proto.CCTnmtBestHistoryRankItem GetTnmtItems(int index) {
      return tnmtItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCBestHistoryRankStatusFieldNames;
      if (worldLdbdItems_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], worldLdbdItems_);
      }
      if (tnmtItems_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], tnmtItems_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::com.golf.proto.CCWoldLdbdBestHistoryRankItem element in WorldLdbdItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::com.golf.proto.CCTnmtBestHistoryRankItem element in TnmtItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::com.golf.proto.CCWoldLdbdBestHistoryRankItem i in worldLdbdItems_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCTnmtBestHistoryRankItem i in tnmtItems_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCBestHistoryRankStatus other = obj as CCBestHistoryRankStatus;
      if (other == null) return false;
      if(worldLdbdItems_.Count != other.worldLdbdItems_.Count) return false;
      for(int ix=0; ix < worldLdbdItems_.Count; ix++)
        if(!worldLdbdItems_[ix].Equals(other.worldLdbdItems_[ix])) return false;
      if(tnmtItems_.Count != other.tnmtItems_.Count) return false;
      for(int ix=0; ix < tnmtItems_.Count; ix++)
        if(!tnmtItems_[ix].Equals(other.tnmtItems_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("world_ldbd_items", worldLdbdItems_, writer);
      PrintField("tnmt_items", tnmtItems_, writer);
    }
    #endregion
    
    public static CCBestHistoryRankStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCBestHistoryRankStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCBestHistoryRankStatus MakeReadOnly() {
      worldLdbdItems_.MakeReadOnly();
      tnmtItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCBestHistoryRankStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCBestHistoryRankStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCBestHistoryRankStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCBestHistoryRankStatus result;
      
      private CCBestHistoryRankStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCBestHistoryRankStatus original = result;
          result = new CCBestHistoryRankStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCBestHistoryRankStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCBestHistoryRankStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCBestHistoryRankStatus.DefaultInstance; }
      }
      
      public override CCBestHistoryRankStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCBestHistoryRankStatus) {
          return MergeFrom((CCBestHistoryRankStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCBestHistoryRankStatus other) {
        if (other == global::com.golf.proto.CCBestHistoryRankStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.worldLdbdItems_.Count != 0) {
          result.worldLdbdItems_.Add(other.worldLdbdItems_);
        }
        if (other.tnmtItems_.Count != 0) {
          result.tnmtItems_.Add(other.tnmtItems_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCBestHistoryRankStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCBestHistoryRankStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.worldLdbdItems_, global::com.golf.proto.CCWoldLdbdBestHistoryRankItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.tnmtItems_, global::com.golf.proto.CCTnmtBestHistoryRankItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::com.golf.proto.CCWoldLdbdBestHistoryRankItem> WorldLdbdItemsList {
        get { return PrepareBuilder().worldLdbdItems_; }
      }
      public int WorldLdbdItemsCount {
        get { return result.WorldLdbdItemsCount; }
      }
      public global::com.golf.proto.CCWoldLdbdBestHistoryRankItem GetWorldLdbdItems(int index) {
        return result.GetWorldLdbdItems(index);
      }
      public Builder SetWorldLdbdItems(int index, global::com.golf.proto.CCWoldLdbdBestHistoryRankItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.worldLdbdItems_[index] = value;
        return this;
      }
      public Builder SetWorldLdbdItems(int index, global::com.golf.proto.CCWoldLdbdBestHistoryRankItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.worldLdbdItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWorldLdbdItems(global::com.golf.proto.CCWoldLdbdBestHistoryRankItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.worldLdbdItems_.Add(value);
        return this;
      }
      public Builder AddWorldLdbdItems(global::com.golf.proto.CCWoldLdbdBestHistoryRankItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.worldLdbdItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWorldLdbdItems(scg::IEnumerable<global::com.golf.proto.CCWoldLdbdBestHistoryRankItem> values) {
        PrepareBuilder();
        result.worldLdbdItems_.Add(values);
        return this;
      }
      public Builder ClearWorldLdbdItems() {
        PrepareBuilder();
        result.worldLdbdItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCTnmtBestHistoryRankItem> TnmtItemsList {
        get { return PrepareBuilder().tnmtItems_; }
      }
      public int TnmtItemsCount {
        get { return result.TnmtItemsCount; }
      }
      public global::com.golf.proto.CCTnmtBestHistoryRankItem GetTnmtItems(int index) {
        return result.GetTnmtItems(index);
      }
      public Builder SetTnmtItems(int index, global::com.golf.proto.CCTnmtBestHistoryRankItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tnmtItems_[index] = value;
        return this;
      }
      public Builder SetTnmtItems(int index, global::com.golf.proto.CCTnmtBestHistoryRankItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tnmtItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTnmtItems(global::com.golf.proto.CCTnmtBestHistoryRankItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tnmtItems_.Add(value);
        return this;
      }
      public Builder AddTnmtItems(global::com.golf.proto.CCTnmtBestHistoryRankItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.tnmtItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTnmtItems(scg::IEnumerable<global::com.golf.proto.CCTnmtBestHistoryRankItem> values) {
        PrepareBuilder();
        result.tnmtItems_.Add(values);
        return this;
      }
      public Builder ClearTnmtItems() {
        PrepareBuilder();
        result.tnmtItems_.Clear();
        return this;
      }
    }
    static CCBestHistoryRankStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCWoldLdbdBestHistoryRankItem : pb::GeneratedMessageLite<CCWoldLdbdBestHistoryRankItem, CCWoldLdbdBestHistoryRankItem.Builder> {
    private CCWoldLdbdBestHistoryRankItem() { }
    private static readonly CCWoldLdbdBestHistoryRankItem defaultInstance = new CCWoldLdbdBestHistoryRankItem().MakeReadOnly();
    private static readonly string[] _cCWoldLdbdBestHistoryRankItemFieldNames = new string[] { "cnt", "level" };
    private static readonly uint[] _cCWoldLdbdBestHistoryRankItemFieldTags = new uint[] { 16, 8 };
    public static CCWoldLdbdBestHistoryRankItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCWoldLdbdBestHistoryRankItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCWoldLdbdBestHistoryRankItem ThisMessage {
      get { return this; }
    }
    
    public const int LevelFieldNumber = 1;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int CntFieldNumber = 2;
    private bool hasCnt;
    private int cnt_;
    public bool HasCnt {
      get { return hasCnt; }
    }
    public int Cnt {
      get { return cnt_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCWoldLdbdBestHistoryRankItemFieldNames;
      if (hasLevel) {
        output.WriteInt32(1, field_names[1], Level);
      }
      if (hasCnt) {
        output.WriteInt32(2, field_names[0], Cnt);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Level);
      }
      if (hasCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Cnt);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasLevel) hash ^= level_.GetHashCode();
      if (hasCnt) hash ^= cnt_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCWoldLdbdBestHistoryRankItem other = obj as CCWoldLdbdBestHistoryRankItem;
      if (other == null) return false;
      if (hasLevel != other.hasLevel || (hasLevel && !level_.Equals(other.level_))) return false;
      if (hasCnt != other.hasCnt || (hasCnt && !cnt_.Equals(other.cnt_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("level", hasLevel, level_, writer);
      PrintField("cnt", hasCnt, cnt_, writer);
    }
    #endregion
    
    public static CCWoldLdbdBestHistoryRankItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCWoldLdbdBestHistoryRankItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCWoldLdbdBestHistoryRankItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCWoldLdbdBestHistoryRankItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCWoldLdbdBestHistoryRankItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCWoldLdbdBestHistoryRankItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCWoldLdbdBestHistoryRankItem result;
      
      private CCWoldLdbdBestHistoryRankItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCWoldLdbdBestHistoryRankItem original = result;
          result = new CCWoldLdbdBestHistoryRankItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCWoldLdbdBestHistoryRankItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCWoldLdbdBestHistoryRankItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCWoldLdbdBestHistoryRankItem.DefaultInstance; }
      }
      
      public override CCWoldLdbdBestHistoryRankItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCWoldLdbdBestHistoryRankItem) {
          return MergeFrom((CCWoldLdbdBestHistoryRankItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCWoldLdbdBestHistoryRankItem other) {
        if (other == global::com.golf.proto.CCWoldLdbdBestHistoryRankItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasCnt) {
          Cnt = other.Cnt;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCWoldLdbdBestHistoryRankItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCWoldLdbdBestHistoryRankItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 16: {
              result.hasCnt = input.ReadInt32(ref result.cnt_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasCnt {
        get { return result.hasCnt; }
      }
      public int Cnt {
        get { return result.Cnt; }
        set { SetCnt(value); }
      }
      public Builder SetCnt(int value) {
        PrepareBuilder();
        result.hasCnt = true;
        result.cnt_ = value;
        return this;
      }
      public Builder ClearCnt() {
        PrepareBuilder();
        result.hasCnt = false;
        result.cnt_ = 0;
        return this;
      }
    }
    static CCWoldLdbdBestHistoryRankItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCTnmtBestHistoryRankItem : pb::GeneratedMessageLite<CCTnmtBestHistoryRankItem, CCTnmtBestHistoryRankItem.Builder> {
    private CCTnmtBestHistoryRankItem() { }
    private static readonly CCTnmtBestHistoryRankItem defaultInstance = new CCTnmtBestHistoryRankItem().MakeReadOnly();
    private static readonly string[] _cCTnmtBestHistoryRankItemFieldNames = new string[] { "cnt", "grade_cnts", "level" };
    private static readonly uint[] _cCTnmtBestHistoryRankItemFieldTags = new uint[] { 16, 24, 8 };
    public static CCTnmtBestHistoryRankItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCTnmtBestHistoryRankItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCTnmtBestHistoryRankItem ThisMessage {
      get { return this; }
    }
    
    public const int LevelFieldNumber = 1;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int CntFieldNumber = 2;
    private bool hasCnt;
    private int cnt_;
    public bool HasCnt {
      get { return hasCnt; }
    }
    public int Cnt {
      get { return cnt_; }
    }
    
    public const int GradeCntsFieldNumber = 3;
    private pbc::PopsicleList<int> gradeCnts_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GradeCntsList {
      get { return pbc::Lists.AsReadOnly(gradeCnts_); }
    }
    public int GradeCntsCount {
      get { return gradeCnts_.Count; }
    }
    public int GetGradeCnts(int index) {
      return gradeCnts_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCTnmtBestHistoryRankItemFieldNames;
      if (hasLevel) {
        output.WriteInt32(1, field_names[2], Level);
      }
      if (hasCnt) {
        output.WriteInt32(2, field_names[0], Cnt);
      }
      if (gradeCnts_.Count > 0) {
        output.WriteInt32Array(3, field_names[1], gradeCnts_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Level);
      }
      if (hasCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Cnt);
      }
      {
        int dataSize = 0;
        foreach (int element in GradeCntsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * gradeCnts_.Count;
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasLevel) hash ^= level_.GetHashCode();
      if (hasCnt) hash ^= cnt_.GetHashCode();
      foreach(int i in gradeCnts_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCTnmtBestHistoryRankItem other = obj as CCTnmtBestHistoryRankItem;
      if (other == null) return false;
      if (hasLevel != other.hasLevel || (hasLevel && !level_.Equals(other.level_))) return false;
      if (hasCnt != other.hasCnt || (hasCnt && !cnt_.Equals(other.cnt_))) return false;
      if(gradeCnts_.Count != other.gradeCnts_.Count) return false;
      for(int ix=0; ix < gradeCnts_.Count; ix++)
        if(!gradeCnts_[ix].Equals(other.gradeCnts_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("level", hasLevel, level_, writer);
      PrintField("cnt", hasCnt, cnt_, writer);
      PrintField("grade_cnts", gradeCnts_, writer);
    }
    #endregion
    
    public static CCTnmtBestHistoryRankItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCTnmtBestHistoryRankItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCTnmtBestHistoryRankItem MakeReadOnly() {
      gradeCnts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCTnmtBestHistoryRankItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCTnmtBestHistoryRankItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCTnmtBestHistoryRankItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCTnmtBestHistoryRankItem result;
      
      private CCTnmtBestHistoryRankItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCTnmtBestHistoryRankItem original = result;
          result = new CCTnmtBestHistoryRankItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCTnmtBestHistoryRankItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCTnmtBestHistoryRankItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCTnmtBestHistoryRankItem.DefaultInstance; }
      }
      
      public override CCTnmtBestHistoryRankItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCTnmtBestHistoryRankItem) {
          return MergeFrom((CCTnmtBestHistoryRankItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCTnmtBestHistoryRankItem other) {
        if (other == global::com.golf.proto.CCTnmtBestHistoryRankItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasCnt) {
          Cnt = other.Cnt;
        }
        if (other.gradeCnts_.Count != 0) {
          result.gradeCnts_.Add(other.gradeCnts_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCTnmtBestHistoryRankItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCTnmtBestHistoryRankItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 16: {
              result.hasCnt = input.ReadInt32(ref result.cnt_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.gradeCnts_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasCnt {
        get { return result.hasCnt; }
      }
      public int Cnt {
        get { return result.Cnt; }
        set { SetCnt(value); }
      }
      public Builder SetCnt(int value) {
        PrepareBuilder();
        result.hasCnt = true;
        result.cnt_ = value;
        return this;
      }
      public Builder ClearCnt() {
        PrepareBuilder();
        result.hasCnt = false;
        result.cnt_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> GradeCntsList {
        get { return PrepareBuilder().gradeCnts_; }
      }
      public int GradeCntsCount {
        get { return result.GradeCntsCount; }
      }
      public int GetGradeCnts(int index) {
        return result.GetGradeCnts(index);
      }
      public Builder SetGradeCnts(int index, int value) {
        PrepareBuilder();
        result.gradeCnts_[index] = value;
        return this;
      }
      public Builder AddGradeCnts(int value) {
        PrepareBuilder();
        result.gradeCnts_.Add(value);
        return this;
      }
      public Builder AddRangeGradeCnts(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gradeCnts_.Add(values);
        return this;
      }
      public Builder ClearGradeCnts() {
        PrepareBuilder();
        result.gradeCnts_.Clear();
        return this;
      }
    }
    static CCTnmtBestHistoryRankItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCClubSuitData : pb::GeneratedMessageLite<CCClubSuitData, CCClubSuitData.Builder> {
    private CCClubSuitData() { }
    private static readonly CCClubSuitData defaultInstance = new CCClubSuitData().MakeReadOnly();
    private static readonly string[] _cCClubSuitDataFieldNames = new string[] { "cur_id", "start_id", "suits" };
    private static readonly uint[] _cCClubSuitDataFieldTags = new uint[] { 8, 24, 18 };
    public static CCClubSuitData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCClubSuitData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCClubSuitData ThisMessage {
      get { return this; }
    }
    
    public const int CurIdFieldNumber = 1;
    private bool hasCurId;
    private int curId_;
    public bool HasCurId {
      get { return hasCurId; }
    }
    public int CurId {
      get { return curId_; }
    }
    
    public const int SuitsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCClubSuitItem> suits_ = new pbc::PopsicleList<global::com.golf.proto.CCClubSuitItem>();
    public scg::IList<global::com.golf.proto.CCClubSuitItem> SuitsList {
      get { return suits_; }
    }
    public int SuitsCount {
      get { return suits_.Count; }
    }
    public global::com.golf.proto.CCClubSuitItem GetSuits(int index) {
      return suits_[index];
    }
    
    public const int StartIdFieldNumber = 3;
    private bool hasStartId;
    private int startId_;
    public bool HasStartId {
      get { return hasStartId; }
    }
    public int StartId {
      get { return startId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCClubSuitDataFieldNames;
      if (hasCurId) {
        output.WriteInt32(1, field_names[0], CurId);
      }
      if (suits_.Count > 0) {
        output.WriteMessageArray(2, field_names[2], suits_);
      }
      if (hasStartId) {
        output.WriteInt32(3, field_names[1], StartId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCurId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CurId);
      }
      foreach (global::com.golf.proto.CCClubSuitItem element in SuitsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasStartId) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, StartId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasCurId) hash ^= curId_.GetHashCode();
      foreach(global::com.golf.proto.CCClubSuitItem i in suits_)
        hash ^= i.GetHashCode();
      if (hasStartId) hash ^= startId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCClubSuitData other = obj as CCClubSuitData;
      if (other == null) return false;
      if (hasCurId != other.hasCurId || (hasCurId && !curId_.Equals(other.curId_))) return false;
      if(suits_.Count != other.suits_.Count) return false;
      for(int ix=0; ix < suits_.Count; ix++)
        if(!suits_[ix].Equals(other.suits_[ix])) return false;
      if (hasStartId != other.hasStartId || (hasStartId && !startId_.Equals(other.startId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("cur_id", hasCurId, curId_, writer);
      PrintField("suits", suits_, writer);
      PrintField("start_id", hasStartId, startId_, writer);
    }
    #endregion
    
    public static CCClubSuitData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClubSuitData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClubSuitData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClubSuitData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCClubSuitData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCClubSuitData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClubSuitData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCClubSuitData MakeReadOnly() {
      suits_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCClubSuitData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCClubSuitData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCClubSuitData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCClubSuitData result;
      
      private CCClubSuitData PrepareBuilder() {
        if (resultIsReadOnly) {
          CCClubSuitData original = result;
          result = new CCClubSuitData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCClubSuitData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCClubSuitData DefaultInstanceForType {
        get { return global::com.golf.proto.CCClubSuitData.DefaultInstance; }
      }
      
      public override CCClubSuitData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCClubSuitData) {
          return MergeFrom((CCClubSuitData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCClubSuitData other) {
        if (other == global::com.golf.proto.CCClubSuitData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurId) {
          CurId = other.CurId;
        }
        if (other.suits_.Count != 0) {
          result.suits_.Add(other.suits_);
        }
        if (other.HasStartId) {
          StartId = other.StartId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCClubSuitDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCClubSuitDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCurId = input.ReadInt32(ref result.curId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.suits_, global::com.golf.proto.CCClubSuitItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 24: {
              result.hasStartId = input.ReadInt32(ref result.startId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasCurId {
        get { return result.hasCurId; }
      }
      public int CurId {
        get { return result.CurId; }
        set { SetCurId(value); }
      }
      public Builder SetCurId(int value) {
        PrepareBuilder();
        result.hasCurId = true;
        result.curId_ = value;
        return this;
      }
      public Builder ClearCurId() {
        PrepareBuilder();
        result.hasCurId = false;
        result.curId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCClubSuitItem> SuitsList {
        get { return PrepareBuilder().suits_; }
      }
      public int SuitsCount {
        get { return result.SuitsCount; }
      }
      public global::com.golf.proto.CCClubSuitItem GetSuits(int index) {
        return result.GetSuits(index);
      }
      public Builder SetSuits(int index, global::com.golf.proto.CCClubSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.suits_[index] = value;
        return this;
      }
      public Builder SetSuits(int index, global::com.golf.proto.CCClubSuitItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.suits_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSuits(global::com.golf.proto.CCClubSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.suits_.Add(value);
        return this;
      }
      public Builder AddSuits(global::com.golf.proto.CCClubSuitItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.suits_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSuits(scg::IEnumerable<global::com.golf.proto.CCClubSuitItem> values) {
        PrepareBuilder();
        result.suits_.Add(values);
        return this;
      }
      public Builder ClearSuits() {
        PrepareBuilder();
        result.suits_.Clear();
        return this;
      }
      
      public bool HasStartId {
        get { return result.hasStartId; }
      }
      public int StartId {
        get { return result.StartId; }
        set { SetStartId(value); }
      }
      public Builder SetStartId(int value) {
        PrepareBuilder();
        result.hasStartId = true;
        result.startId_ = value;
        return this;
      }
      public Builder ClearStartId() {
        PrepareBuilder();
        result.hasStartId = false;
        result.startId_ = 0;
        return this;
      }
    }
    static CCClubSuitData() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCClubSuitItem : pb::GeneratedMessageLite<CCClubSuitItem, CCClubSuitItem.Builder> {
    private CCClubSuitItem() { }
    private static readonly CCClubSuitItem defaultInstance = new CCClubSuitItem().MakeReadOnly();
    private static readonly string[] _cCClubSuitItemFieldNames = new string[] { "club_ids", "club_lvs", "suit_id" };
    private static readonly uint[] _cCClubSuitItemFieldTags = new uint[] { 16, 24, 8 };
    public static CCClubSuitItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCClubSuitItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCClubSuitItem ThisMessage {
      get { return this; }
    }
    
    public const int SuitIdFieldNumber = 1;
    private bool hasSuitId;
    private int suitId_;
    public bool HasSuitId {
      get { return hasSuitId; }
    }
    public int SuitId {
      get { return suitId_; }
    }
    
    public const int ClubIdsFieldNumber = 2;
    private pbc::PopsicleList<int> clubIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ClubIdsList {
      get { return pbc::Lists.AsReadOnly(clubIds_); }
    }
    public int ClubIdsCount {
      get { return clubIds_.Count; }
    }
    public int GetClubIds(int index) {
      return clubIds_[index];
    }
    
    public const int ClubLvsFieldNumber = 3;
    private pbc::PopsicleList<int> clubLvs_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ClubLvsList {
      get { return pbc::Lists.AsReadOnly(clubLvs_); }
    }
    public int ClubLvsCount {
      get { return clubLvs_.Count; }
    }
    public int GetClubLvs(int index) {
      return clubLvs_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCClubSuitItemFieldNames;
      if (hasSuitId) {
        output.WriteInt32(1, field_names[2], SuitId);
      }
      if (clubIds_.Count > 0) {
        output.WriteInt32Array(2, field_names[0], clubIds_);
      }
      if (clubLvs_.Count > 0) {
        output.WriteInt32Array(3, field_names[1], clubLvs_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSuitId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, SuitId);
      }
      {
        int dataSize = 0;
        foreach (int element in ClubIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * clubIds_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in ClubLvsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * clubLvs_.Count;
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSuitId) hash ^= suitId_.GetHashCode();
      foreach(int i in clubIds_)
        hash ^= i.GetHashCode();
      foreach(int i in clubLvs_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCClubSuitItem other = obj as CCClubSuitItem;
      if (other == null) return false;
      if (hasSuitId != other.hasSuitId || (hasSuitId && !suitId_.Equals(other.suitId_))) return false;
      if(clubIds_.Count != other.clubIds_.Count) return false;
      for(int ix=0; ix < clubIds_.Count; ix++)
        if(!clubIds_[ix].Equals(other.clubIds_[ix])) return false;
      if(clubLvs_.Count != other.clubLvs_.Count) return false;
      for(int ix=0; ix < clubLvs_.Count; ix++)
        if(!clubLvs_[ix].Equals(other.clubLvs_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("suit_id", hasSuitId, suitId_, writer);
      PrintField("club_ids", clubIds_, writer);
      PrintField("club_lvs", clubLvs_, writer);
    }
    #endregion
    
    public static CCClubSuitItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClubSuitItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClubSuitItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClubSuitItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCClubSuitItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCClubSuitItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClubSuitItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCClubSuitItem MakeReadOnly() {
      clubIds_.MakeReadOnly();
      clubLvs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCClubSuitItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCClubSuitItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCClubSuitItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCClubSuitItem result;
      
      private CCClubSuitItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CCClubSuitItem original = result;
          result = new CCClubSuitItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCClubSuitItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCClubSuitItem DefaultInstanceForType {
        get { return global::com.golf.proto.CCClubSuitItem.DefaultInstance; }
      }
      
      public override CCClubSuitItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCClubSuitItem) {
          return MergeFrom((CCClubSuitItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCClubSuitItem other) {
        if (other == global::com.golf.proto.CCClubSuitItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSuitId) {
          SuitId = other.SuitId;
        }
        if (other.clubIds_.Count != 0) {
          result.clubIds_.Add(other.clubIds_);
        }
        if (other.clubLvs_.Count != 0) {
          result.clubLvs_.Add(other.clubLvs_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCClubSuitItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCClubSuitItemFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSuitId = input.ReadInt32(ref result.suitId_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.clubIds_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.clubLvs_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSuitId {
        get { return result.hasSuitId; }
      }
      public int SuitId {
        get { return result.SuitId; }
        set { SetSuitId(value); }
      }
      public Builder SetSuitId(int value) {
        PrepareBuilder();
        result.hasSuitId = true;
        result.suitId_ = value;
        return this;
      }
      public Builder ClearSuitId() {
        PrepareBuilder();
        result.hasSuitId = false;
        result.suitId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ClubIdsList {
        get { return PrepareBuilder().clubIds_; }
      }
      public int ClubIdsCount {
        get { return result.ClubIdsCount; }
      }
      public int GetClubIds(int index) {
        return result.GetClubIds(index);
      }
      public Builder SetClubIds(int index, int value) {
        PrepareBuilder();
        result.clubIds_[index] = value;
        return this;
      }
      public Builder AddClubIds(int value) {
        PrepareBuilder();
        result.clubIds_.Add(value);
        return this;
      }
      public Builder AddRangeClubIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.clubIds_.Add(values);
        return this;
      }
      public Builder ClearClubIds() {
        PrepareBuilder();
        result.clubIds_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> ClubLvsList {
        get { return PrepareBuilder().clubLvs_; }
      }
      public int ClubLvsCount {
        get { return result.ClubLvsCount; }
      }
      public int GetClubLvs(int index) {
        return result.GetClubLvs(index);
      }
      public Builder SetClubLvs(int index, int value) {
        PrepareBuilder();
        result.clubLvs_[index] = value;
        return this;
      }
      public Builder AddClubLvs(int value) {
        PrepareBuilder();
        result.clubLvs_.Add(value);
        return this;
      }
      public Builder AddRangeClubLvs(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.clubLvs_.Add(values);
        return this;
      }
      public Builder ClearClubLvs() {
        PrepareBuilder();
        result.clubLvs_.Clear();
        return this;
      }
    }
    static CCClubSuitItem() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSelectClubSuitRequest : pb::GeneratedMessageLite<CCSelectClubSuitRequest, CCSelectClubSuitRequest.Builder> {
    private CCSelectClubSuitRequest() { }
    private static readonly CCSelectClubSuitRequest defaultInstance = new CCSelectClubSuitRequest().MakeReadOnly();
    private static readonly string[] _cCSelectClubSuitRequestFieldNames = new string[] { "id", "suit_id" };
    private static readonly uint[] _cCSelectClubSuitRequestFieldTags = new uint[] { 10, 16 };
    public static CCSelectClubSuitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSelectClubSuitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSelectClubSuitRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SuitIdFieldNumber = 2;
    private bool hasSuitId;
    private int suitId_;
    public bool HasSuitId {
      get { return hasSuitId; }
    }
    public int SuitId {
      get { return suitId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSelectClubSuitRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSuitId) {
        output.WriteInt32(2, field_names[1], SuitId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSuitId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SuitId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSuitId) hash ^= suitId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSelectClubSuitRequest other = obj as CCSelectClubSuitRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSuitId != other.hasSuitId || (hasSuitId && !suitId_.Equals(other.suitId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("suit_id", hasSuitId, suitId_, writer);
    }
    #endregion
    
    public static CCSelectClubSuitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectClubSuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSelectClubSuitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSelectClubSuitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSelectClubSuitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSelectClubSuitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSelectClubSuitRequest result;
      
      private CCSelectClubSuitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSelectClubSuitRequest original = result;
          result = new CCSelectClubSuitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSelectClubSuitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSelectClubSuitRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSelectClubSuitRequest.DefaultInstance; }
      }
      
      public override CCSelectClubSuitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSelectClubSuitRequest) {
          return MergeFrom((CCSelectClubSuitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSelectClubSuitRequest other) {
        if (other == global::com.golf.proto.CCSelectClubSuitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSuitId) {
          SuitId = other.SuitId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSelectClubSuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSelectClubSuitRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasSuitId = input.ReadInt32(ref result.suitId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSuitId {
        get { return result.hasSuitId; }
      }
      public int SuitId {
        get { return result.SuitId; }
        set { SetSuitId(value); }
      }
      public Builder SetSuitId(int value) {
        PrepareBuilder();
        result.hasSuitId = true;
        result.suitId_ = value;
        return this;
      }
      public Builder ClearSuitId() {
        PrepareBuilder();
        result.hasSuitId = false;
        result.suitId_ = 0;
        return this;
      }
    }
    static CCSelectClubSuitRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSelectClubSuitResponse : pb::GeneratedMessageLite<CCSelectClubSuitResponse, CCSelectClubSuitResponse.Builder> {
    private CCSelectClubSuitResponse() { }
    private static readonly CCSelectClubSuitResponse defaultInstance = new CCSelectClubSuitResponse().MakeReadOnly();
    private static readonly string[] _cCSelectClubSuitResponseFieldNames = new string[] { "base_data", "result" };
    private static readonly uint[] _cCSelectClubSuitResponseFieldTags = new uint[] { 18, 8 };
    public static CCSelectClubSuitResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSelectClubSuitResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSelectClubSuitResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int BaseDataFieldNumber = 2;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSelectClubSuitResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasBaseData) {
        output.WriteMessage(2, field_names[0], BaseData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BaseData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSelectClubSuitResponse other = obj as CCSelectClubSuitResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
    }
    #endregion
    
    public static CCSelectClubSuitResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectClubSuitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSelectClubSuitResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSelectClubSuitResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSelectClubSuitResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSelectClubSuitResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSelectClubSuitResponse result;
      
      private CCSelectClubSuitResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSelectClubSuitResponse original = result;
          result = new CCSelectClubSuitResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSelectClubSuitResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSelectClubSuitResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCSelectClubSuitResponse.DefaultInstance; }
      }
      
      public override CCSelectClubSuitResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSelectClubSuitResponse) {
          return MergeFrom((CCSelectClubSuitResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSelectClubSuitResponse other) {
        if (other == global::com.golf.proto.CCSelectClubSuitResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSelectClubSuitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSelectClubSuitResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
    }
    static CCSelectClubSuitResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUpdateClubSuitRequest : pb::GeneratedMessageLite<CCUpdateClubSuitRequest, CCUpdateClubSuitRequest.Builder> {
    private CCUpdateClubSuitRequest() { }
    private static readonly CCUpdateClubSuitRequest defaultInstance = new CCUpdateClubSuitRequest().MakeReadOnly();
    private static readonly string[] _cCUpdateClubSuitRequestFieldNames = new string[] { "id", "suit" };
    private static readonly uint[] _cCUpdateClubSuitRequestFieldTags = new uint[] { 10, 18 };
    public static CCUpdateClubSuitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUpdateClubSuitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUpdateClubSuitRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SuitFieldNumber = 2;
    private bool hasSuit;
    private global::com.golf.proto.CCClubSuitItem suit_;
    public bool HasSuit {
      get { return hasSuit; }
    }
    public global::com.golf.proto.CCClubSuitItem Suit {
      get { return suit_ ?? global::com.golf.proto.CCClubSuitItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUpdateClubSuitRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSuit) {
        output.WriteMessage(2, field_names[1], Suit);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSuit) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Suit);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSuit) hash ^= suit_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUpdateClubSuitRequest other = obj as CCUpdateClubSuitRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSuit != other.hasSuit || (hasSuit && !suit_.Equals(other.suit_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("suit", hasSuit, suit_, writer);
    }
    #endregion
    
    public static CCUpdateClubSuitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateClubSuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUpdateClubSuitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUpdateClubSuitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUpdateClubSuitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUpdateClubSuitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUpdateClubSuitRequest result;
      
      private CCUpdateClubSuitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUpdateClubSuitRequest original = result;
          result = new CCUpdateClubSuitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUpdateClubSuitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUpdateClubSuitRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCUpdateClubSuitRequest.DefaultInstance; }
      }
      
      public override CCUpdateClubSuitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUpdateClubSuitRequest) {
          return MergeFrom((CCUpdateClubSuitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUpdateClubSuitRequest other) {
        if (other == global::com.golf.proto.CCUpdateClubSuitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSuit) {
          MergeSuit(other.Suit);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUpdateClubSuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUpdateClubSuitRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCClubSuitItem.Builder subBuilder = global::com.golf.proto.CCClubSuitItem.CreateBuilder();
              if (result.hasSuit) {
                subBuilder.MergeFrom(Suit);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Suit = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSuit {
       get { return result.hasSuit; }
      }
      public global::com.golf.proto.CCClubSuitItem Suit {
        get { return result.Suit; }
        set { SetSuit(value); }
      }
      public Builder SetSuit(global::com.golf.proto.CCClubSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSuit = true;
        result.suit_ = value;
        return this;
      }
      public Builder SetSuit(global::com.golf.proto.CCClubSuitItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSuit = true;
        result.suit_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSuit(global::com.golf.proto.CCClubSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSuit &&
            result.suit_ != global::com.golf.proto.CCClubSuitItem.DefaultInstance) {
            result.suit_ = global::com.golf.proto.CCClubSuitItem.CreateBuilder(result.suit_).MergeFrom(value).BuildPartial();
        } else {
          result.suit_ = value;
        }
        result.hasSuit = true;
        return this;
      }
      public Builder ClearSuit() {
        PrepareBuilder();
        result.hasSuit = false;
        result.suit_ = null;
        return this;
      }
    }
    static CCUpdateClubSuitRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCUpdateClubSuitResponse : pb::GeneratedMessageLite<CCUpdateClubSuitResponse, CCUpdateClubSuitResponse.Builder> {
    private CCUpdateClubSuitResponse() { }
    private static readonly CCUpdateClubSuitResponse defaultInstance = new CCUpdateClubSuitResponse().MakeReadOnly();
    private static readonly string[] _cCUpdateClubSuitResponseFieldNames = new string[] { "base_data", "result" };
    private static readonly uint[] _cCUpdateClubSuitResponseFieldTags = new uint[] { 18, 8 };
    public static CCUpdateClubSuitResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCUpdateClubSuitResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCUpdateClubSuitResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int BaseDataFieldNumber = 2;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCUpdateClubSuitResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasBaseData) {
        output.WriteMessage(2, field_names[0], BaseData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BaseData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCUpdateClubSuitResponse other = obj as CCUpdateClubSuitResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
    }
    #endregion
    
    public static CCUpdateClubSuitResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCUpdateClubSuitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCUpdateClubSuitResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCUpdateClubSuitResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCUpdateClubSuitResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCUpdateClubSuitResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCUpdateClubSuitResponse result;
      
      private CCUpdateClubSuitResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCUpdateClubSuitResponse original = result;
          result = new CCUpdateClubSuitResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCUpdateClubSuitResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCUpdateClubSuitResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCUpdateClubSuitResponse.DefaultInstance; }
      }
      
      public override CCUpdateClubSuitResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCUpdateClubSuitResponse) {
          return MergeFrom((CCUpdateClubSuitResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCUpdateClubSuitResponse other) {
        if (other == global::com.golf.proto.CCUpdateClubSuitResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCUpdateClubSuitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCUpdateClubSuitResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
    }
    static CCUpdateClubSuitResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSelectClubSuitInGameRequest : pb::GeneratedMessageLite<CCSelectClubSuitInGameRequest, CCSelectClubSuitInGameRequest.Builder> {
    private CCSelectClubSuitInGameRequest() { }
    private static readonly CCSelectClubSuitInGameRequest defaultInstance = new CCSelectClubSuitInGameRequest().MakeReadOnly();
    private static readonly string[] _cCSelectClubSuitInGameRequestFieldNames = new string[] { "id", "suit_id", "time" };
    private static readonly uint[] _cCSelectClubSuitInGameRequestFieldTags = new uint[] { 10, 16, 24 };
    public static CCSelectClubSuitInGameRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSelectClubSuitInGameRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSelectClubSuitInGameRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SuitIdFieldNumber = 2;
    private bool hasSuitId;
    private int suitId_;
    public bool HasSuitId {
      get { return hasSuitId; }
    }
    public int SuitId {
      get { return suitId_; }
    }
    
    public const int TimeFieldNumber = 3;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSelectClubSuitInGameRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSuitId) {
        output.WriteInt32(2, field_names[1], SuitId);
      }
      if (hasTime) {
        output.WriteInt64(3, field_names[2], Time);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSuitId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SuitId);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Time);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSuitId) hash ^= suitId_.GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSelectClubSuitInGameRequest other = obj as CCSelectClubSuitInGameRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSuitId != other.hasSuitId || (hasSuitId && !suitId_.Equals(other.suitId_))) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("suit_id", hasSuitId, suitId_, writer);
      PrintField("time", hasTime, time_, writer);
    }
    #endregion
    
    public static CCSelectClubSuitInGameRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectClubSuitInGameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSelectClubSuitInGameRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSelectClubSuitInGameRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSelectClubSuitInGameRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSelectClubSuitInGameRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSelectClubSuitInGameRequest result;
      
      private CCSelectClubSuitInGameRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSelectClubSuitInGameRequest original = result;
          result = new CCSelectClubSuitInGameRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSelectClubSuitInGameRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSelectClubSuitInGameRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCSelectClubSuitInGameRequest.DefaultInstance; }
      }
      
      public override CCSelectClubSuitInGameRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSelectClubSuitInGameRequest) {
          return MergeFrom((CCSelectClubSuitInGameRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSelectClubSuitInGameRequest other) {
        if (other == global::com.golf.proto.CCSelectClubSuitInGameRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSuitId) {
          SuitId = other.SuitId;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSelectClubSuitInGameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSelectClubSuitInGameRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasSuitId = input.ReadInt32(ref result.suitId_);
              break;
            }
            case 24: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSuitId {
        get { return result.hasSuitId; }
      }
      public int SuitId {
        get { return result.SuitId; }
        set { SetSuitId(value); }
      }
      public Builder SetSuitId(int value) {
        PrepareBuilder();
        result.hasSuitId = true;
        result.suitId_ = value;
        return this;
      }
      public Builder ClearSuitId() {
        PrepareBuilder();
        result.hasSuitId = false;
        result.suitId_ = 0;
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
    }
    static CCSelectClubSuitInGameRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSelectClubSuitInGameResponse : pb::GeneratedMessageLite<CCSelectClubSuitInGameResponse, CCSelectClubSuitInGameResponse.Builder> {
    private CCSelectClubSuitInGameResponse() { }
    private static readonly CCSelectClubSuitInGameResponse defaultInstance = new CCSelectClubSuitInGameResponse().MakeReadOnly();
    private static readonly string[] _cCSelectClubSuitInGameResponseFieldNames = new string[] { "base_data", "result", "room_user_data" };
    private static readonly uint[] _cCSelectClubSuitInGameResponseFieldTags = new uint[] { 18, 8, 26 };
    public static CCSelectClubSuitInGameResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSelectClubSuitInGameResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSelectClubSuitInGameResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int BaseDataFieldNumber = 2;
    private bool hasBaseData;
    private global::com.golf.proto.CCBaseData baseData_;
    public bool HasBaseData {
      get { return hasBaseData; }
    }
    public global::com.golf.proto.CCBaseData BaseData {
      get { return baseData_ ?? global::com.golf.proto.CCBaseData.DefaultInstance; }
    }
    
    public const int RoomUserDataFieldNumber = 3;
    private bool hasRoomUserData;
    private global::com.golf.proto.CCRoomUserData roomUserData_;
    public bool HasRoomUserData {
      get { return hasRoomUserData; }
    }
    public global::com.golf.proto.CCRoomUserData RoomUserData {
      get { return roomUserData_ ?? global::com.golf.proto.CCRoomUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSelectClubSuitInGameResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasBaseData) {
        output.WriteMessage(2, field_names[0], BaseData);
      }
      if (hasRoomUserData) {
        output.WriteMessage(3, field_names[2], RoomUserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasBaseData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, BaseData);
      }
      if (hasRoomUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, RoomUserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasBaseData) hash ^= baseData_.GetHashCode();
      if (hasRoomUserData) hash ^= roomUserData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSelectClubSuitInGameResponse other = obj as CCSelectClubSuitInGameResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasBaseData != other.hasBaseData || (hasBaseData && !baseData_.Equals(other.baseData_))) return false;
      if (hasRoomUserData != other.hasRoomUserData || (hasRoomUserData && !roomUserData_.Equals(other.roomUserData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("base_data", hasBaseData, baseData_, writer);
      PrintField("room_user_data", hasRoomUserData, roomUserData_, writer);
    }
    #endregion
    
    public static CCSelectClubSuitInGameResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSelectClubSuitInGameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSelectClubSuitInGameResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSelectClubSuitInGameResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSelectClubSuitInGameResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSelectClubSuitInGameResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSelectClubSuitInGameResponse result;
      
      private CCSelectClubSuitInGameResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSelectClubSuitInGameResponse original = result;
          result = new CCSelectClubSuitInGameResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSelectClubSuitInGameResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSelectClubSuitInGameResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCSelectClubSuitInGameResponse.DefaultInstance; }
      }
      
      public override CCSelectClubSuitInGameResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSelectClubSuitInGameResponse) {
          return MergeFrom((CCSelectClubSuitInGameResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSelectClubSuitInGameResponse other) {
        if (other == global::com.golf.proto.CCSelectClubSuitInGameResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasBaseData) {
          MergeBaseData(other.BaseData);
        }
        if (other.HasRoomUserData) {
          MergeRoomUserData(other.RoomUserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSelectClubSuitInGameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSelectClubSuitInGameResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCBaseData.Builder subBuilder = global::com.golf.proto.CCBaseData.CreateBuilder();
              if (result.hasBaseData) {
                subBuilder.MergeFrom(BaseData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCRoomUserData.Builder subBuilder = global::com.golf.proto.CCRoomUserData.CreateBuilder();
              if (result.hasRoomUserData) {
                subBuilder.MergeFrom(RoomUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RoomUserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasBaseData {
       get { return result.hasBaseData; }
      }
      public global::com.golf.proto.CCBaseData BaseData {
        get { return result.BaseData; }
        set { SetBaseData(value); }
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = value;
        return this;
      }
      public Builder SetBaseData(global::com.golf.proto.CCBaseData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseData = true;
        result.baseData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseData(global::com.golf.proto.CCBaseData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseData &&
            result.baseData_ != global::com.golf.proto.CCBaseData.DefaultInstance) {
            result.baseData_ = global::com.golf.proto.CCBaseData.CreateBuilder(result.baseData_).MergeFrom(value).BuildPartial();
        } else {
          result.baseData_ = value;
        }
        result.hasBaseData = true;
        return this;
      }
      public Builder ClearBaseData() {
        PrepareBuilder();
        result.hasBaseData = false;
        result.baseData_ = null;
        return this;
      }
      
      public bool HasRoomUserData {
       get { return result.hasRoomUserData; }
      }
      public global::com.golf.proto.CCRoomUserData RoomUserData {
        get { return result.RoomUserData; }
        set { SetRoomUserData(value); }
      }
      public Builder SetRoomUserData(global::com.golf.proto.CCRoomUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomUserData = true;
        result.roomUserData_ = value;
        return this;
      }
      public Builder SetRoomUserData(global::com.golf.proto.CCRoomUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRoomUserData = true;
        result.roomUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRoomUserData(global::com.golf.proto.CCRoomUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRoomUserData &&
            result.roomUserData_ != global::com.golf.proto.CCRoomUserData.DefaultInstance) {
            result.roomUserData_ = global::com.golf.proto.CCRoomUserData.CreateBuilder(result.roomUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.roomUserData_ = value;
        }
        result.hasRoomUserData = true;
        return this;
      }
      public Builder ClearRoomUserData() {
        PrepareBuilder();
        result.hasRoomUserData = false;
        result.roomUserData_ = null;
        return this;
      }
    }
    static CCSelectClubSuitInGameResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCPvpSelectClubSuitInGameResponse : pb::GeneratedMessageLite<CCPvpSelectClubSuitInGameResponse, CCPvpSelectClubSuitInGameResponse.Builder> {
    private CCPvpSelectClubSuitInGameResponse() { }
    private static readonly CCPvpSelectClubSuitInGameResponse defaultInstance = new CCPvpSelectClubSuitInGameResponse().MakeReadOnly();
    private static readonly string[] _cCPvpSelectClubSuitInGameResponseFieldNames = new string[] { "request", "room_user_data" };
    private static readonly uint[] _cCPvpSelectClubSuitInGameResponseFieldTags = new uint[] { 10, 18 };
    public static CCPvpSelectClubSuitInGameResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCPvpSelectClubSuitInGameResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCPvpSelectClubSuitInGameResponse ThisMessage {
      get { return this; }
    }
    
    public const int RequestFieldNumber = 1;
    private bool hasRequest;
    private global::com.golf.proto.CCSelectClubSuitInGameRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::com.golf.proto.CCSelectClubSuitInGameRequest Request {
      get { return request_ ?? global::com.golf.proto.CCSelectClubSuitInGameRequest.DefaultInstance; }
    }
    
    public const int RoomUserDataFieldNumber = 2;
    private bool hasRoomUserData;
    private global::com.golf.proto.CCRoomUserData roomUserData_;
    public bool HasRoomUserData {
      get { return hasRoomUserData; }
    }
    public global::com.golf.proto.CCRoomUserData RoomUserData {
      get { return roomUserData_ ?? global::com.golf.proto.CCRoomUserData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCPvpSelectClubSuitInGameResponseFieldNames;
      if (hasRequest) {
        output.WriteMessage(1, field_names[0], Request);
      }
      if (hasRoomUserData) {
        output.WriteMessage(2, field_names[1], RoomUserData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Request);
      }
      if (hasRoomUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, RoomUserData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRequest) hash ^= request_.GetHashCode();
      if (hasRoomUserData) hash ^= roomUserData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCPvpSelectClubSuitInGameResponse other = obj as CCPvpSelectClubSuitInGameResponse;
      if (other == null) return false;
      if (hasRequest != other.hasRequest || (hasRequest && !request_.Equals(other.request_))) return false;
      if (hasRoomUserData != other.hasRoomUserData || (hasRoomUserData && !roomUserData_.Equals(other.roomUserData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("request", hasRequest, request_, writer);
      PrintField("room_user_data", hasRoomUserData, roomUserData_, writer);
    }
    #endregion
    
    public static CCPvpSelectClubSuitInGameResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCPvpSelectClubSuitInGameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCPvpSelectClubSuitInGameResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCPvpSelectClubSuitInGameResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCPvpSelectClubSuitInGameResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCPvpSelectClubSuitInGameResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCPvpSelectClubSuitInGameResponse result;
      
      private CCPvpSelectClubSuitInGameResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCPvpSelectClubSuitInGameResponse original = result;
          result = new CCPvpSelectClubSuitInGameResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCPvpSelectClubSuitInGameResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCPvpSelectClubSuitInGameResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCPvpSelectClubSuitInGameResponse.DefaultInstance; }
      }
      
      public override CCPvpSelectClubSuitInGameResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCPvpSelectClubSuitInGameResponse) {
          return MergeFrom((CCPvpSelectClubSuitInGameResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCPvpSelectClubSuitInGameResponse other) {
        if (other == global::com.golf.proto.CCPvpSelectClubSuitInGameResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        if (other.HasRoomUserData) {
          MergeRoomUserData(other.RoomUserData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCPvpSelectClubSuitInGameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCPvpSelectClubSuitInGameResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.golf.proto.CCSelectClubSuitInGameRequest.Builder subBuilder = global::com.golf.proto.CCSelectClubSuitInGameRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::com.golf.proto.CCRoomUserData.Builder subBuilder = global::com.golf.proto.CCRoomUserData.CreateBuilder();
              if (result.hasRoomUserData) {
                subBuilder.MergeFrom(RoomUserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RoomUserData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::com.golf.proto.CCSelectClubSuitInGameRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::com.golf.proto.CCSelectClubSuitInGameRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::com.golf.proto.CCSelectClubSuitInGameRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::com.golf.proto.CCSelectClubSuitInGameRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::com.golf.proto.CCSelectClubSuitInGameRequest.DefaultInstance) {
            result.request_ = global::com.golf.proto.CCSelectClubSuitInGameRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
      
      public bool HasRoomUserData {
       get { return result.hasRoomUserData; }
      }
      public global::com.golf.proto.CCRoomUserData RoomUserData {
        get { return result.RoomUserData; }
        set { SetRoomUserData(value); }
      }
      public Builder SetRoomUserData(global::com.golf.proto.CCRoomUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRoomUserData = true;
        result.roomUserData_ = value;
        return this;
      }
      public Builder SetRoomUserData(global::com.golf.proto.CCRoomUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRoomUserData = true;
        result.roomUserData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRoomUserData(global::com.golf.proto.CCRoomUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRoomUserData &&
            result.roomUserData_ != global::com.golf.proto.CCRoomUserData.DefaultInstance) {
            result.roomUserData_ = global::com.golf.proto.CCRoomUserData.CreateBuilder(result.roomUserData_).MergeFrom(value).BuildPartial();
        } else {
          result.roomUserData_ = value;
        }
        result.hasRoomUserData = true;
        return this;
      }
      public Builder ClearRoomUserData() {
        PrepareBuilder();
        result.hasRoomUserData = false;
        result.roomUserData_ = null;
        return this;
      }
    }
    static CCPvpSelectClubSuitInGameResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCClubSuitInGameState : pb::GeneratedMessageLite<CCClubSuitInGameState, CCClubSuitInGameState.Builder> {
    private CCClubSuitInGameState() { }
    private static readonly CCClubSuitInGameState defaultInstance = new CCClubSuitInGameState().MakeReadOnly();
    private static readonly string[] _cCClubSuitInGameStateFieldNames = new string[] { "can_change", "club_suit_data" };
    private static readonly uint[] _cCClubSuitInGameStateFieldTags = new uint[] { 8, 18 };
    public static CCClubSuitInGameState DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCClubSuitInGameState DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCClubSuitInGameState ThisMessage {
      get { return this; }
    }
    
    public const int CanChangeFieldNumber = 1;
    private bool hasCanChange;
    private bool canChange_;
    public bool HasCanChange {
      get { return hasCanChange; }
    }
    public bool CanChange {
      get { return canChange_; }
    }
    
    public const int ClubSuitDataFieldNumber = 2;
    private bool hasClubSuitData;
    private global::com.golf.proto.CCClubSuitData clubSuitData_;
    public bool HasClubSuitData {
      get { return hasClubSuitData; }
    }
    public global::com.golf.proto.CCClubSuitData ClubSuitData {
      get { return clubSuitData_ ?? global::com.golf.proto.CCClubSuitData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCClubSuitInGameStateFieldNames;
      if (hasCanChange) {
        output.WriteBool(1, field_names[0], CanChange);
      }
      if (hasClubSuitData) {
        output.WriteMessage(2, field_names[1], ClubSuitData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCanChange) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, CanChange);
      }
      if (hasClubSuitData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, ClubSuitData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasCanChange) hash ^= canChange_.GetHashCode();
      if (hasClubSuitData) hash ^= clubSuitData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCClubSuitInGameState other = obj as CCClubSuitInGameState;
      if (other == null) return false;
      if (hasCanChange != other.hasCanChange || (hasCanChange && !canChange_.Equals(other.canChange_))) return false;
      if (hasClubSuitData != other.hasClubSuitData || (hasClubSuitData && !clubSuitData_.Equals(other.clubSuitData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("can_change", hasCanChange, canChange_, writer);
      PrintField("club_suit_data", hasClubSuitData, clubSuitData_, writer);
    }
    #endregion
    
    public static CCClubSuitInGameState ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClubSuitInGameState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitInGameState ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCClubSuitInGameState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitInGameState ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClubSuitInGameState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCClubSuitInGameState ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCClubSuitInGameState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCClubSuitInGameState ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCClubSuitInGameState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCClubSuitInGameState MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCClubSuitInGameState prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCClubSuitInGameState, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCClubSuitInGameState cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCClubSuitInGameState result;
      
      private CCClubSuitInGameState PrepareBuilder() {
        if (resultIsReadOnly) {
          CCClubSuitInGameState original = result;
          result = new CCClubSuitInGameState();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCClubSuitInGameState MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCClubSuitInGameState DefaultInstanceForType {
        get { return global::com.golf.proto.CCClubSuitInGameState.DefaultInstance; }
      }
      
      public override CCClubSuitInGameState BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCClubSuitInGameState) {
          return MergeFrom((CCClubSuitInGameState) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCClubSuitInGameState other) {
        if (other == global::com.golf.proto.CCClubSuitInGameState.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCanChange) {
          CanChange = other.CanChange;
        }
        if (other.HasClubSuitData) {
          MergeClubSuitData(other.ClubSuitData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCClubSuitInGameStateFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCClubSuitInGameStateFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCanChange = input.ReadBool(ref result.canChange_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCClubSuitData.Builder subBuilder = global::com.golf.proto.CCClubSuitData.CreateBuilder();
              if (result.hasClubSuitData) {
                subBuilder.MergeFrom(ClubSuitData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClubSuitData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasCanChange {
        get { return result.hasCanChange; }
      }
      public bool CanChange {
        get { return result.CanChange; }
        set { SetCanChange(value); }
      }
      public Builder SetCanChange(bool value) {
        PrepareBuilder();
        result.hasCanChange = true;
        result.canChange_ = value;
        return this;
      }
      public Builder ClearCanChange() {
        PrepareBuilder();
        result.hasCanChange = false;
        result.canChange_ = false;
        return this;
      }
      
      public bool HasClubSuitData {
       get { return result.hasClubSuitData; }
      }
      public global::com.golf.proto.CCClubSuitData ClubSuitData {
        get { return result.ClubSuitData; }
        set { SetClubSuitData(value); }
      }
      public Builder SetClubSuitData(global::com.golf.proto.CCClubSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClubSuitData = true;
        result.clubSuitData_ = value;
        return this;
      }
      public Builder SetClubSuitData(global::com.golf.proto.CCClubSuitData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClubSuitData = true;
        result.clubSuitData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClubSuitData(global::com.golf.proto.CCClubSuitData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClubSuitData &&
            result.clubSuitData_ != global::com.golf.proto.CCClubSuitData.DefaultInstance) {
            result.clubSuitData_ = global::com.golf.proto.CCClubSuitData.CreateBuilder(result.clubSuitData_).MergeFrom(value).BuildPartial();
        } else {
          result.clubSuitData_ = value;
        }
        result.hasClubSuitData = true;
        return this;
      }
      public Builder ClearClubSuitData() {
        PrepareBuilder();
        result.hasClubSuitData = false;
        result.clubSuitData_ = null;
        return this;
      }
    }
    static CCClubSuitInGameState() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetSevenHoleRewardStatusRequest : pb::GeneratedMessageLite<CCGetSevenHoleRewardStatusRequest, CCGetSevenHoleRewardStatusRequest.Builder> {
    private CCGetSevenHoleRewardStatusRequest() { }
    private static readonly CCGetSevenHoleRewardStatusRequest defaultInstance = new CCGetSevenHoleRewardStatusRequest().MakeReadOnly();
    private static readonly string[] _cCGetSevenHoleRewardStatusRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetSevenHoleRewardStatusRequestFieldTags = new uint[] { 10 };
    public static CCGetSevenHoleRewardStatusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetSevenHoleRewardStatusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetSevenHoleRewardStatusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetSevenHoleRewardStatusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetSevenHoleRewardStatusRequest other = obj as CCGetSevenHoleRewardStatusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetSevenHoleRewardStatusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetSevenHoleRewardStatusRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetSevenHoleRewardStatusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetSevenHoleRewardStatusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetSevenHoleRewardStatusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetSevenHoleRewardStatusRequest result;
      
      private CCGetSevenHoleRewardStatusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetSevenHoleRewardStatusRequest original = result;
          result = new CCGetSevenHoleRewardStatusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetSevenHoleRewardStatusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetSevenHoleRewardStatusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetSevenHoleRewardStatusRequest.DefaultInstance; }
      }
      
      public override CCGetSevenHoleRewardStatusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetSevenHoleRewardStatusRequest) {
          return MergeFrom((CCGetSevenHoleRewardStatusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetSevenHoleRewardStatusRequest other) {
        if (other == global::com.golf.proto.CCGetSevenHoleRewardStatusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetSevenHoleRewardStatusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetSevenHoleRewardStatusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetSevenHoleRewardStatusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetSevenHoleRewardStatusResponse : pb::GeneratedMessageLite<CCGetSevenHoleRewardStatusResponse, CCGetSevenHoleRewardStatusResponse.Builder> {
    private CCGetSevenHoleRewardStatusResponse() { }
    private static readonly CCGetSevenHoleRewardStatusResponse defaultInstance = new CCGetSevenHoleRewardStatusResponse().MakeReadOnly();
    private static readonly string[] _cCGetSevenHoleRewardStatusResponseFieldNames = new string[] { "result", "server_push", "status" };
    private static readonly uint[] _cCGetSevenHoleRewardStatusResponseFieldTags = new uint[] { 8, 24, 18 };
    public static CCGetSevenHoleRewardStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetSevenHoleRewardStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetSevenHoleRewardStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCSevenHoleRewardStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCSevenHoleRewardStatus Status {
      get { return status_ ?? global::com.golf.proto.CCSevenHoleRewardStatus.DefaultInstance; }
    }
    
    public const int ServerPushFieldNumber = 3;
    private bool hasServerPush;
    private bool serverPush_;
    public bool HasServerPush {
      get { return hasServerPush; }
    }
    public bool ServerPush {
      get { return serverPush_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetSevenHoleRewardStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[2], Status);
      }
      if (hasServerPush) {
        output.WriteBool(3, field_names[1], ServerPush);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      if (hasServerPush) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, ServerPush);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      if (hasServerPush) hash ^= serverPush_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetSevenHoleRewardStatusResponse other = obj as CCGetSevenHoleRewardStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      if (hasServerPush != other.hasServerPush || (hasServerPush && !serverPush_.Equals(other.serverPush_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", hasStatus, status_, writer);
      PrintField("server_push", hasServerPush, serverPush_, writer);
    }
    #endregion
    
    public static CCGetSevenHoleRewardStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetSevenHoleRewardStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetSevenHoleRewardStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetSevenHoleRewardStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetSevenHoleRewardStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetSevenHoleRewardStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetSevenHoleRewardStatusResponse result;
      
      private CCGetSevenHoleRewardStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetSevenHoleRewardStatusResponse original = result;
          result = new CCGetSevenHoleRewardStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetSevenHoleRewardStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetSevenHoleRewardStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetSevenHoleRewardStatusResponse.DefaultInstance; }
      }
      
      public override CCGetSevenHoleRewardStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetSevenHoleRewardStatusResponse) {
          return MergeFrom((CCGetSevenHoleRewardStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetSevenHoleRewardStatusResponse other) {
        if (other == global::com.golf.proto.CCGetSevenHoleRewardStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        if (other.HasServerPush) {
          ServerPush = other.ServerPush;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetSevenHoleRewardStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetSevenHoleRewardStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCSevenHoleRewardStatus.Builder subBuilder = global::com.golf.proto.CCSevenHoleRewardStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasServerPush = input.ReadBool(ref result.serverPush_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCSevenHoleRewardStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCSevenHoleRewardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCSevenHoleRewardStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCSevenHoleRewardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCSevenHoleRewardStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCSevenHoleRewardStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
      
      public bool HasServerPush {
        get { return result.hasServerPush; }
      }
      public bool ServerPush {
        get { return result.ServerPush; }
        set { SetServerPush(value); }
      }
      public Builder SetServerPush(bool value) {
        PrepareBuilder();
        result.hasServerPush = true;
        result.serverPush_ = value;
        return this;
      }
      public Builder ClearServerPush() {
        PrepareBuilder();
        result.hasServerPush = false;
        result.serverPush_ = false;
        return this;
      }
    }
    static CCGetSevenHoleRewardStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetSevenHoleRewardRequest : pb::GeneratedMessageLite<CCGetSevenHoleRewardRequest, CCGetSevenHoleRewardRequest.Builder> {
    private CCGetSevenHoleRewardRequest() { }
    private static readonly CCGetSevenHoleRewardRequest defaultInstance = new CCGetSevenHoleRewardRequest().MakeReadOnly();
    private static readonly string[] _cCGetSevenHoleRewardRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetSevenHoleRewardRequestFieldTags = new uint[] { 10 };
    public static CCGetSevenHoleRewardRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetSevenHoleRewardRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetSevenHoleRewardRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetSevenHoleRewardRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetSevenHoleRewardRequest other = obj as CCGetSevenHoleRewardRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetSevenHoleRewardRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetSevenHoleRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetSevenHoleRewardRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetSevenHoleRewardRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetSevenHoleRewardRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetSevenHoleRewardRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetSevenHoleRewardRequest result;
      
      private CCGetSevenHoleRewardRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetSevenHoleRewardRequest original = result;
          result = new CCGetSevenHoleRewardRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetSevenHoleRewardRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetSevenHoleRewardRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetSevenHoleRewardRequest.DefaultInstance; }
      }
      
      public override CCGetSevenHoleRewardRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetSevenHoleRewardRequest) {
          return MergeFrom((CCGetSevenHoleRewardRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetSevenHoleRewardRequest other) {
        if (other == global::com.golf.proto.CCGetSevenHoleRewardRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetSevenHoleRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetSevenHoleRewardRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetSevenHoleRewardRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetSevenHoleRewardResponse : pb::GeneratedMessageLite<CCGetSevenHoleRewardResponse, CCGetSevenHoleRewardResponse.Builder> {
    private CCGetSevenHoleRewardResponse() { }
    private static readonly CCGetSevenHoleRewardResponse defaultInstance = new CCGetSevenHoleRewardResponse().MakeReadOnly();
    private static readonly string[] _cCGetSevenHoleRewardResponseFieldNames = new string[] { "result", "ritems", "status", "user_data" };
    private static readonly uint[] _cCGetSevenHoleRewardResponseFieldTags = new uint[] { 8, 34, 18, 26 };
    public static CCGetSevenHoleRewardResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetSevenHoleRewardResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetSevenHoleRewardResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.golf.proto.CCSevenHoleRewardStatus status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.golf.proto.CCSevenHoleRewardStatus Status {
      get { return status_ ?? global::com.golf.proto.CCSevenHoleRewardStatus.DefaultInstance; }
    }
    
    public const int UserDataFieldNumber = 3;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int RitemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> ritems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RitemsList {
      get { return ritems_; }
    }
    public int RitemsCount {
      get { return ritems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRitems(int index) {
      return ritems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetSevenHoleRewardResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasStatus) {
        output.WriteMessage(2, field_names[2], Status);
      }
      if (hasUserData) {
        output.WriteMessage(3, field_names[3], UserData);
      }
      if (ritems_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], ritems_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, UserData);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RitemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasStatus) hash ^= status_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in ritems_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetSevenHoleRewardResponse other = obj as CCGetSevenHoleRewardResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasStatus != other.hasStatus || (hasStatus && !status_.Equals(other.status_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if(ritems_.Count != other.ritems_.Count) return false;
      for(int ix=0; ix < ritems_.Count; ix++)
        if(!ritems_[ix].Equals(other.ritems_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("status", hasStatus, status_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("ritems", ritems_, writer);
    }
    #endregion
    
    public static CCGetSevenHoleRewardResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetSevenHoleRewardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetSevenHoleRewardResponse MakeReadOnly() {
      ritems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetSevenHoleRewardResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetSevenHoleRewardResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetSevenHoleRewardResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetSevenHoleRewardResponse result;
      
      private CCGetSevenHoleRewardResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetSevenHoleRewardResponse original = result;
          result = new CCGetSevenHoleRewardResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetSevenHoleRewardResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetSevenHoleRewardResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetSevenHoleRewardResponse.DefaultInstance; }
      }
      
      public override CCGetSevenHoleRewardResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetSevenHoleRewardResponse) {
          return MergeFrom((CCGetSevenHoleRewardResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetSevenHoleRewardResponse other) {
        if (other == global::com.golf.proto.CCGetSevenHoleRewardResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasStatus) {
          MergeStatus(other.Status);
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.ritems_.Count != 0) {
          result.ritems_.Add(other.ritems_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetSevenHoleRewardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetSevenHoleRewardResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCSevenHoleRewardStatus.Builder subBuilder = global::com.golf.proto.CCSevenHoleRewardStatus.CreateBuilder();
              if (result.hasStatus) {
                subBuilder.MergeFrom(Status);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Status = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.ritems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.golf.proto.CCSevenHoleRewardStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.golf.proto.CCSevenHoleRewardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder SetStatus(global::com.golf.proto.CCSevenHoleRewardStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStatus(global::com.golf.proto.CCSevenHoleRewardStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStatus &&
            result.status_ != global::com.golf.proto.CCSevenHoleRewardStatus.DefaultInstance) {
            result.status_ = global::com.golf.proto.CCSevenHoleRewardStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
        } else {
          result.status_ = value;
        }
        result.hasStatus = true;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = null;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RitemsList {
        get { return PrepareBuilder().ritems_; }
      }
      public int RitemsCount {
        get { return result.RitemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRitems(int index) {
        return result.GetRitems(index);
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_[index] = value;
        return this;
      }
      public Builder SetRitems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ritems_.Add(value);
        return this;
      }
      public Builder AddRitems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ritems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRitems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.ritems_.Add(values);
        return this;
      }
      public Builder ClearRitems() {
        PrepareBuilder();
        result.ritems_.Clear();
        return this;
      }
    }
    static CCGetSevenHoleRewardResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCSevenHoleRewardStatus : pb::GeneratedMessageLite<CCSevenHoleRewardStatus, CCSevenHoleRewardStatus.Builder> {
    private CCSevenHoleRewardStatus() { }
    private static readonly CCSevenHoleRewardStatus defaultInstance = new CCSevenHoleRewardStatus().MakeReadOnly();
    private static readonly string[] _cCSevenHoleRewardStatusFieldNames = new string[] { "max_own_cnt", "own_cnt", "progress", "refresh_time", "target" };
    private static readonly uint[] _cCSevenHoleRewardStatusFieldTags = new uint[] { 32, 24, 8, 16, 40 };
    public static CCSevenHoleRewardStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCSevenHoleRewardStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCSevenHoleRewardStatus ThisMessage {
      get { return this; }
    }
    
    public const int ProgressFieldNumber = 1;
    private bool hasProgress;
    private int progress_;
    public bool HasProgress {
      get { return hasProgress; }
    }
    public int Progress {
      get { return progress_; }
    }
    
    public const int RefreshTimeFieldNumber = 2;
    private bool hasRefreshTime;
    private long refreshTime_;
    public bool HasRefreshTime {
      get { return hasRefreshTime; }
    }
    public long RefreshTime {
      get { return refreshTime_; }
    }
    
    public const int OwnCntFieldNumber = 3;
    private bool hasOwnCnt;
    private int ownCnt_;
    public bool HasOwnCnt {
      get { return hasOwnCnt; }
    }
    public int OwnCnt {
      get { return ownCnt_; }
    }
    
    public const int MaxOwnCntFieldNumber = 4;
    private bool hasMaxOwnCnt;
    private int maxOwnCnt_;
    public bool HasMaxOwnCnt {
      get { return hasMaxOwnCnt; }
    }
    public int MaxOwnCnt {
      get { return maxOwnCnt_; }
    }
    
    public const int TargetFieldNumber = 5;
    private bool hasTarget;
    private int target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public int Target {
      get { return target_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCSevenHoleRewardStatusFieldNames;
      if (hasProgress) {
        output.WriteInt32(1, field_names[2], Progress);
      }
      if (hasRefreshTime) {
        output.WriteInt64(2, field_names[3], RefreshTime);
      }
      if (hasOwnCnt) {
        output.WriteInt32(3, field_names[1], OwnCnt);
      }
      if (hasMaxOwnCnt) {
        output.WriteInt32(4, field_names[0], MaxOwnCnt);
      }
      if (hasTarget) {
        output.WriteInt32(5, field_names[4], Target);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasProgress) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Progress);
      }
      if (hasRefreshTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, RefreshTime);
      }
      if (hasOwnCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, OwnCnt);
      }
      if (hasMaxOwnCnt) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, MaxOwnCnt);
      }
      if (hasTarget) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Target);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasProgress) hash ^= progress_.GetHashCode();
      if (hasRefreshTime) hash ^= refreshTime_.GetHashCode();
      if (hasOwnCnt) hash ^= ownCnt_.GetHashCode();
      if (hasMaxOwnCnt) hash ^= maxOwnCnt_.GetHashCode();
      if (hasTarget) hash ^= target_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCSevenHoleRewardStatus other = obj as CCSevenHoleRewardStatus;
      if (other == null) return false;
      if (hasProgress != other.hasProgress || (hasProgress && !progress_.Equals(other.progress_))) return false;
      if (hasRefreshTime != other.hasRefreshTime || (hasRefreshTime && !refreshTime_.Equals(other.refreshTime_))) return false;
      if (hasOwnCnt != other.hasOwnCnt || (hasOwnCnt && !ownCnt_.Equals(other.ownCnt_))) return false;
      if (hasMaxOwnCnt != other.hasMaxOwnCnt || (hasMaxOwnCnt && !maxOwnCnt_.Equals(other.maxOwnCnt_))) return false;
      if (hasTarget != other.hasTarget || (hasTarget && !target_.Equals(other.target_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("progress", hasProgress, progress_, writer);
      PrintField("refresh_time", hasRefreshTime, refreshTime_, writer);
      PrintField("own_cnt", hasOwnCnt, ownCnt_, writer);
      PrintField("max_own_cnt", hasMaxOwnCnt, maxOwnCnt_, writer);
      PrintField("target", hasTarget, target_, writer);
    }
    #endregion
    
    public static CCSevenHoleRewardStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCSevenHoleRewardStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCSevenHoleRewardStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCSevenHoleRewardStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCSevenHoleRewardStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCSevenHoleRewardStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCSevenHoleRewardStatus result;
      
      private CCSevenHoleRewardStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCSevenHoleRewardStatus original = result;
          result = new CCSevenHoleRewardStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCSevenHoleRewardStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCSevenHoleRewardStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCSevenHoleRewardStatus.DefaultInstance; }
      }
      
      public override CCSevenHoleRewardStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCSevenHoleRewardStatus) {
          return MergeFrom((CCSevenHoleRewardStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCSevenHoleRewardStatus other) {
        if (other == global::com.golf.proto.CCSevenHoleRewardStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasProgress) {
          Progress = other.Progress;
        }
        if (other.HasRefreshTime) {
          RefreshTime = other.RefreshTime;
        }
        if (other.HasOwnCnt) {
          OwnCnt = other.OwnCnt;
        }
        if (other.HasMaxOwnCnt) {
          MaxOwnCnt = other.MaxOwnCnt;
        }
        if (other.HasTarget) {
          Target = other.Target;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCSevenHoleRewardStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCSevenHoleRewardStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasProgress = input.ReadInt32(ref result.progress_);
              break;
            }
            case 16: {
              result.hasRefreshTime = input.ReadInt64(ref result.refreshTime_);
              break;
            }
            case 24: {
              result.hasOwnCnt = input.ReadInt32(ref result.ownCnt_);
              break;
            }
            case 32: {
              result.hasMaxOwnCnt = input.ReadInt32(ref result.maxOwnCnt_);
              break;
            }
            case 40: {
              result.hasTarget = input.ReadInt32(ref result.target_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasProgress {
        get { return result.hasProgress; }
      }
      public int Progress {
        get { return result.Progress; }
        set { SetProgress(value); }
      }
      public Builder SetProgress(int value) {
        PrepareBuilder();
        result.hasProgress = true;
        result.progress_ = value;
        return this;
      }
      public Builder ClearProgress() {
        PrepareBuilder();
        result.hasProgress = false;
        result.progress_ = 0;
        return this;
      }
      
      public bool HasRefreshTime {
        get { return result.hasRefreshTime; }
      }
      public long RefreshTime {
        get { return result.RefreshTime; }
        set { SetRefreshTime(value); }
      }
      public Builder SetRefreshTime(long value) {
        PrepareBuilder();
        result.hasRefreshTime = true;
        result.refreshTime_ = value;
        return this;
      }
      public Builder ClearRefreshTime() {
        PrepareBuilder();
        result.hasRefreshTime = false;
        result.refreshTime_ = 0L;
        return this;
      }
      
      public bool HasOwnCnt {
        get { return result.hasOwnCnt; }
      }
      public int OwnCnt {
        get { return result.OwnCnt; }
        set { SetOwnCnt(value); }
      }
      public Builder SetOwnCnt(int value) {
        PrepareBuilder();
        result.hasOwnCnt = true;
        result.ownCnt_ = value;
        return this;
      }
      public Builder ClearOwnCnt() {
        PrepareBuilder();
        result.hasOwnCnt = false;
        result.ownCnt_ = 0;
        return this;
      }
      
      public bool HasMaxOwnCnt {
        get { return result.hasMaxOwnCnt; }
      }
      public int MaxOwnCnt {
        get { return result.MaxOwnCnt; }
        set { SetMaxOwnCnt(value); }
      }
      public Builder SetMaxOwnCnt(int value) {
        PrepareBuilder();
        result.hasMaxOwnCnt = true;
        result.maxOwnCnt_ = value;
        return this;
      }
      public Builder ClearMaxOwnCnt() {
        PrepareBuilder();
        result.hasMaxOwnCnt = false;
        result.maxOwnCnt_ = 0;
        return this;
      }
      
      public bool HasTarget {
        get { return result.hasTarget; }
      }
      public int Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(int value) {
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = 0;
        return this;
      }
    }
    static CCSevenHoleRewardStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetItemChangeDetailsRequest : pb::GeneratedMessageLite<CCGetItemChangeDetailsRequest, CCGetItemChangeDetailsRequest.Builder> {
    private CCGetItemChangeDetailsRequest() { }
    private static readonly CCGetItemChangeDetailsRequest defaultInstance = new CCGetItemChangeDetailsRequest().MakeReadOnly();
    private static readonly string[] _cCGetItemChangeDetailsRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetItemChangeDetailsRequestFieldTags = new uint[] { 10 };
    public static CCGetItemChangeDetailsRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetItemChangeDetailsRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetItemChangeDetailsRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetItemChangeDetailsRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetItemChangeDetailsRequest other = obj as CCGetItemChangeDetailsRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetItemChangeDetailsRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetItemChangeDetailsRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetItemChangeDetailsRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetItemChangeDetailsRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetItemChangeDetailsRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetItemChangeDetailsRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetItemChangeDetailsRequest result;
      
      private CCGetItemChangeDetailsRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetItemChangeDetailsRequest original = result;
          result = new CCGetItemChangeDetailsRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetItemChangeDetailsRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetItemChangeDetailsRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetItemChangeDetailsRequest.DefaultInstance; }
      }
      
      public override CCGetItemChangeDetailsRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetItemChangeDetailsRequest) {
          return MergeFrom((CCGetItemChangeDetailsRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetItemChangeDetailsRequest other) {
        if (other == global::com.golf.proto.CCGetItemChangeDetailsRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetItemChangeDetailsRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetItemChangeDetailsRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetItemChangeDetailsRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetItemChangeDetailsResponse : pb::GeneratedMessageLite<CCGetItemChangeDetailsResponse, CCGetItemChangeDetailsResponse.Builder> {
    private CCGetItemChangeDetailsResponse() { }
    private static readonly CCGetItemChangeDetailsResponse defaultInstance = new CCGetItemChangeDetailsResponse().MakeReadOnly();
    private static readonly string[] _cCGetItemChangeDetailsResponseFieldNames = new string[] { "details", "result" };
    private static readonly uint[] _cCGetItemChangeDetailsResponseFieldTags = new uint[] { 18, 8 };
    public static CCGetItemChangeDetailsResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetItemChangeDetailsResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetItemChangeDetailsResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int DetailsFieldNumber = 2;
    private pbc::PopsicleList<global::com.golf.proto.CCItemDetail> details_ = new pbc::PopsicleList<global::com.golf.proto.CCItemDetail>();
    public scg::IList<global::com.golf.proto.CCItemDetail> DetailsList {
      get { return details_; }
    }
    public int DetailsCount {
      get { return details_.Count; }
    }
    public global::com.golf.proto.CCItemDetail GetDetails(int index) {
      return details_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetItemChangeDetailsResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (details_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], details_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      foreach (global::com.golf.proto.CCItemDetail element in DetailsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      foreach(global::com.golf.proto.CCItemDetail i in details_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetItemChangeDetailsResponse other = obj as CCGetItemChangeDetailsResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if(details_.Count != other.details_.Count) return false;
      for(int ix=0; ix < details_.Count; ix++)
        if(!details_[ix].Equals(other.details_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("details", details_, writer);
    }
    #endregion
    
    public static CCGetItemChangeDetailsResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetItemChangeDetailsResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetItemChangeDetailsResponse MakeReadOnly() {
      details_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetItemChangeDetailsResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetItemChangeDetailsResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetItemChangeDetailsResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetItemChangeDetailsResponse result;
      
      private CCGetItemChangeDetailsResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetItemChangeDetailsResponse original = result;
          result = new CCGetItemChangeDetailsResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetItemChangeDetailsResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetItemChangeDetailsResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetItemChangeDetailsResponse.DefaultInstance; }
      }
      
      public override CCGetItemChangeDetailsResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetItemChangeDetailsResponse) {
          return MergeFrom((CCGetItemChangeDetailsResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetItemChangeDetailsResponse other) {
        if (other == global::com.golf.proto.CCGetItemChangeDetailsResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.details_.Count != 0) {
          result.details_.Add(other.details_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetItemChangeDetailsResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetItemChangeDetailsResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.details_, global::com.golf.proto.CCItemDetail.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCItemDetail> DetailsList {
        get { return PrepareBuilder().details_; }
      }
      public int DetailsCount {
        get { return result.DetailsCount; }
      }
      public global::com.golf.proto.CCItemDetail GetDetails(int index) {
        return result.GetDetails(index);
      }
      public Builder SetDetails(int index, global::com.golf.proto.CCItemDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.details_[index] = value;
        return this;
      }
      public Builder SetDetails(int index, global::com.golf.proto.CCItemDetail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.details_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDetails(global::com.golf.proto.CCItemDetail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.details_.Add(value);
        return this;
      }
      public Builder AddDetails(global::com.golf.proto.CCItemDetail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.details_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDetails(scg::IEnumerable<global::com.golf.proto.CCItemDetail> values) {
        PrepareBuilder();
        result.details_.Add(values);
        return this;
      }
      public Builder ClearDetails() {
        PrepareBuilder();
        result.details_.Clear();
        return this;
      }
    }
    static CCGetItemChangeDetailsResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCItemDetail : pb::GeneratedMessageLite<CCItemDetail, CCItemDetail.Builder> {
    private CCItemDetail() { }
    private static readonly CCItemDetail defaultInstance = new CCItemDetail().MakeReadOnly();
    private static readonly string[] _cCItemDetailFieldNames = new string[] { "behavior", "cost_items", "get_items", "time" };
    private static readonly uint[] _cCItemDetailFieldTags = new uint[] { 16, 26, 34, 8 };
    public static CCItemDetail DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCItemDetail DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCItemDetail ThisMessage {
      get { return this; }
    }
    
    public const int TimeFieldNumber = 1;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public const int BehaviorFieldNumber = 2;
    private bool hasBehavior;
    private int behavior_;
    public bool HasBehavior {
      get { return hasBehavior; }
    }
    public int Behavior {
      get { return behavior_; }
    }
    
    public const int CostItemsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCItem> costItems_ = new pbc::PopsicleList<global::com.golf.proto.CCItem>();
    public scg::IList<global::com.golf.proto.CCItem> CostItemsList {
      get { return costItems_; }
    }
    public int CostItemsCount {
      get { return costItems_.Count; }
    }
    public global::com.golf.proto.CCItem GetCostItems(int index) {
      return costItems_[index];
    }
    
    public const int GetItemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.golf.proto.CCItem> getItems_ = new pbc::PopsicleList<global::com.golf.proto.CCItem>();
    public scg::IList<global::com.golf.proto.CCItem> GetItemsList {
      get { return getItems_; }
    }
    public int GetItemsCount {
      get { return getItems_.Count; }
    }
    public global::com.golf.proto.CCItem GetGetItems(int index) {
      return getItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCItemDetailFieldNames;
      if (hasTime) {
        output.WriteInt64(1, field_names[3], Time);
      }
      if (hasBehavior) {
        output.WriteInt32(2, field_names[0], Behavior);
      }
      if (costItems_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], costItems_);
      }
      if (getItems_.Count > 0) {
        output.WriteMessageArray(4, field_names[2], getItems_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, Time);
      }
      if (hasBehavior) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Behavior);
      }
      foreach (global::com.golf.proto.CCItem element in CostItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::com.golf.proto.CCItem element in GetItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTime) hash ^= time_.GetHashCode();
      if (hasBehavior) hash ^= behavior_.GetHashCode();
      foreach(global::com.golf.proto.CCItem i in costItems_)
        hash ^= i.GetHashCode();
      foreach(global::com.golf.proto.CCItem i in getItems_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCItemDetail other = obj as CCItemDetail;
      if (other == null) return false;
      if (hasTime != other.hasTime || (hasTime && !time_.Equals(other.time_))) return false;
      if (hasBehavior != other.hasBehavior || (hasBehavior && !behavior_.Equals(other.behavior_))) return false;
      if(costItems_.Count != other.costItems_.Count) return false;
      for(int ix=0; ix < costItems_.Count; ix++)
        if(!costItems_[ix].Equals(other.costItems_[ix])) return false;
      if(getItems_.Count != other.getItems_.Count) return false;
      for(int ix=0; ix < getItems_.Count; ix++)
        if(!getItems_[ix].Equals(other.getItems_[ix])) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("time", hasTime, time_, writer);
      PrintField("behavior", hasBehavior, behavior_, writer);
      PrintField("cost_items", costItems_, writer);
      PrintField("get_items", getItems_, writer);
    }
    #endregion
    
    public static CCItemDetail ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCItemDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCItemDetail ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCItemDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCItemDetail ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCItemDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCItemDetail ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCItemDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCItemDetail ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCItemDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCItemDetail MakeReadOnly() {
      costItems_.MakeReadOnly();
      getItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCItemDetail prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCItemDetail, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCItemDetail cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCItemDetail result;
      
      private CCItemDetail PrepareBuilder() {
        if (resultIsReadOnly) {
          CCItemDetail original = result;
          result = new CCItemDetail();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCItemDetail MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCItemDetail DefaultInstanceForType {
        get { return global::com.golf.proto.CCItemDetail.DefaultInstance; }
      }
      
      public override CCItemDetail BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCItemDetail) {
          return MergeFrom((CCItemDetail) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCItemDetail other) {
        if (other == global::com.golf.proto.CCItemDetail.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasBehavior) {
          Behavior = other.Behavior;
        }
        if (other.costItems_.Count != 0) {
          result.costItems_.Add(other.costItems_);
        }
        if (other.getItems_.Count != 0) {
          result.getItems_.Add(other.getItems_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCItemDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCItemDetailFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTime = input.ReadInt64(ref result.time_);
              break;
            }
            case 16: {
              result.hasBehavior = input.ReadInt32(ref result.behavior_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.costItems_, global::com.golf.proto.CCItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.getItems_, global::com.golf.proto.CCItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
      
      public bool HasBehavior {
        get { return result.hasBehavior; }
      }
      public int Behavior {
        get { return result.Behavior; }
        set { SetBehavior(value); }
      }
      public Builder SetBehavior(int value) {
        PrepareBuilder();
        result.hasBehavior = true;
        result.behavior_ = value;
        return this;
      }
      public Builder ClearBehavior() {
        PrepareBuilder();
        result.hasBehavior = false;
        result.behavior_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCItem> CostItemsList {
        get { return PrepareBuilder().costItems_; }
      }
      public int CostItemsCount {
        get { return result.CostItemsCount; }
      }
      public global::com.golf.proto.CCItem GetCostItems(int index) {
        return result.GetCostItems(index);
      }
      public Builder SetCostItems(int index, global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.costItems_[index] = value;
        return this;
      }
      public Builder SetCostItems(int index, global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.costItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCostItems(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.costItems_.Add(value);
        return this;
      }
      public Builder AddCostItems(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.costItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCostItems(scg::IEnumerable<global::com.golf.proto.CCItem> values) {
        PrepareBuilder();
        result.costItems_.Add(values);
        return this;
      }
      public Builder ClearCostItems() {
        PrepareBuilder();
        result.costItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCItem> GetItemsList {
        get { return PrepareBuilder().getItems_; }
      }
      public int GetItemsCount {
        get { return result.GetItemsCount; }
      }
      public global::com.golf.proto.CCItem GetGetItems(int index) {
        return result.GetGetItems(index);
      }
      public Builder SetGetItems(int index, global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.getItems_[index] = value;
        return this;
      }
      public Builder SetGetItems(int index, global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.getItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGetItems(global::com.golf.proto.CCItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.getItems_.Add(value);
        return this;
      }
      public Builder AddGetItems(global::com.golf.proto.CCItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.getItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGetItems(scg::IEnumerable<global::com.golf.proto.CCItem> values) {
        PrepareBuilder();
        result.getItems_.Add(values);
        return this;
      }
      public Builder ClearGetItems() {
        PrepareBuilder();
        result.getItems_.Clear();
        return this;
      }
    }
    static CCItemDetail() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCNewSelectSuitRequest : pb::GeneratedMessageLite<CCNewSelectSuitRequest, CCNewSelectSuitRequest.Builder> {
    private CCNewSelectSuitRequest() { }
    private static readonly CCNewSelectSuitRequest defaultInstance = new CCNewSelectSuitRequest().MakeReadOnly();
    private static readonly string[] _cCNewSelectSuitRequestFieldNames = new string[] { "id", "suit_id" };
    private static readonly uint[] _cCNewSelectSuitRequestFieldTags = new uint[] { 10, 16 };
    public static CCNewSelectSuitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCNewSelectSuitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCNewSelectSuitRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SuitIdFieldNumber = 2;
    private bool hasSuitId;
    private int suitId_;
    public bool HasSuitId {
      get { return hasSuitId; }
    }
    public int SuitId {
      get { return suitId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCNewSelectSuitRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSuitId) {
        output.WriteInt32(2, field_names[1], SuitId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSuitId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, SuitId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSuitId) hash ^= suitId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCNewSelectSuitRequest other = obj as CCNewSelectSuitRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSuitId != other.hasSuitId || (hasSuitId && !suitId_.Equals(other.suitId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("suit_id", hasSuitId, suitId_, writer);
    }
    #endregion
    
    public static CCNewSelectSuitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNewSelectSuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCNewSelectSuitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCNewSelectSuitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCNewSelectSuitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCNewSelectSuitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCNewSelectSuitRequest result;
      
      private CCNewSelectSuitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCNewSelectSuitRequest original = result;
          result = new CCNewSelectSuitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCNewSelectSuitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCNewSelectSuitRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCNewSelectSuitRequest.DefaultInstance; }
      }
      
      public override CCNewSelectSuitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCNewSelectSuitRequest) {
          return MergeFrom((CCNewSelectSuitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCNewSelectSuitRequest other) {
        if (other == global::com.golf.proto.CCNewSelectSuitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSuitId) {
          SuitId = other.SuitId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCNewSelectSuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCNewSelectSuitRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasSuitId = input.ReadInt32(ref result.suitId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSuitId {
        get { return result.hasSuitId; }
      }
      public int SuitId {
        get { return result.SuitId; }
        set { SetSuitId(value); }
      }
      public Builder SetSuitId(int value) {
        PrepareBuilder();
        result.hasSuitId = true;
        result.suitId_ = value;
        return this;
      }
      public Builder ClearSuitId() {
        PrepareBuilder();
        result.hasSuitId = false;
        result.suitId_ = 0;
        return this;
      }
    }
    static CCNewSelectSuitRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCNewUpdateSuitRequest : pb::GeneratedMessageLite<CCNewUpdateSuitRequest, CCNewUpdateSuitRequest.Builder> {
    private CCNewUpdateSuitRequest() { }
    private static readonly CCNewUpdateSuitRequest defaultInstance = new CCNewUpdateSuitRequest().MakeReadOnly();
    private static readonly string[] _cCNewUpdateSuitRequestFieldNames = new string[] { "id", "suit" };
    private static readonly uint[] _cCNewUpdateSuitRequestFieldTags = new uint[] { 10, 18 };
    public static CCNewUpdateSuitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCNewUpdateSuitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCNewUpdateSuitRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int SuitFieldNumber = 2;
    private bool hasSuit;
    private global::com.golf.proto.CCSuitItem suit_;
    public bool HasSuit {
      get { return hasSuit; }
    }
    public global::com.golf.proto.CCSuitItem Suit {
      get { return suit_ ?? global::com.golf.proto.CCSuitItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCNewUpdateSuitRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasSuit) {
        output.WriteMessage(2, field_names[1], Suit);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasSuit) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Suit);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasSuit) hash ^= suit_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCNewUpdateSuitRequest other = obj as CCNewUpdateSuitRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasSuit != other.hasSuit || (hasSuit && !suit_.Equals(other.suit_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("suit", hasSuit, suit_, writer);
    }
    #endregion
    
    public static CCNewUpdateSuitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNewUpdateSuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCNewUpdateSuitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCNewUpdateSuitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCNewUpdateSuitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCNewUpdateSuitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCNewUpdateSuitRequest result;
      
      private CCNewUpdateSuitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCNewUpdateSuitRequest original = result;
          result = new CCNewUpdateSuitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCNewUpdateSuitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCNewUpdateSuitRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCNewUpdateSuitRequest.DefaultInstance; }
      }
      
      public override CCNewUpdateSuitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCNewUpdateSuitRequest) {
          return MergeFrom((CCNewUpdateSuitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCNewUpdateSuitRequest other) {
        if (other == global::com.golf.proto.CCNewUpdateSuitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasSuit) {
          MergeSuit(other.Suit);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCNewUpdateSuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCNewUpdateSuitRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCSuitItem.Builder subBuilder = global::com.golf.proto.CCSuitItem.CreateBuilder();
              if (result.hasSuit) {
                subBuilder.MergeFrom(Suit);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Suit = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasSuit {
       get { return result.hasSuit; }
      }
      public global::com.golf.proto.CCSuitItem Suit {
        get { return result.Suit; }
        set { SetSuit(value); }
      }
      public Builder SetSuit(global::com.golf.proto.CCSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSuit = true;
        result.suit_ = value;
        return this;
      }
      public Builder SetSuit(global::com.golf.proto.CCSuitItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSuit = true;
        result.suit_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSuit(global::com.golf.proto.CCSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSuit &&
            result.suit_ != global::com.golf.proto.CCSuitItem.DefaultInstance) {
            result.suit_ = global::com.golf.proto.CCSuitItem.CreateBuilder(result.suit_).MergeFrom(value).BuildPartial();
        } else {
          result.suit_ = value;
        }
        result.hasSuit = true;
        return this;
      }
      public Builder ClearSuit() {
        PrepareBuilder();
        result.hasSuit = false;
        result.suit_ = null;
        return this;
      }
    }
    static CCNewUpdateSuitRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCNewUpdateSuitResponse : pb::GeneratedMessageLite<CCNewUpdateSuitResponse, CCNewUpdateSuitResponse.Builder> {
    private CCNewUpdateSuitResponse() { }
    private static readonly CCNewUpdateSuitResponse defaultInstance = new CCNewUpdateSuitResponse().MakeReadOnly();
    private static readonly string[] _cCNewUpdateSuitResponseFieldNames = new string[] { "result", "suit" };
    private static readonly uint[] _cCNewUpdateSuitResponseFieldTags = new uint[] { 8, 18 };
    public static CCNewUpdateSuitResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCNewUpdateSuitResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCNewUpdateSuitResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int SuitFieldNumber = 2;
    private bool hasSuit;
    private global::com.golf.proto.CCSuitItem suit_;
    public bool HasSuit {
      get { return hasSuit; }
    }
    public global::com.golf.proto.CCSuitItem Suit {
      get { return suit_ ?? global::com.golf.proto.CCSuitItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCNewUpdateSuitResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasSuit) {
        output.WriteMessage(2, field_names[1], Suit);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasSuit) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Suit);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasSuit) hash ^= suit_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCNewUpdateSuitResponse other = obj as CCNewUpdateSuitResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasSuit != other.hasSuit || (hasSuit && !suit_.Equals(other.suit_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("suit", hasSuit, suit_, writer);
    }
    #endregion
    
    public static CCNewUpdateSuitResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCNewUpdateSuitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCNewUpdateSuitResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCNewUpdateSuitResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCNewUpdateSuitResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCNewUpdateSuitResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCNewUpdateSuitResponse result;
      
      private CCNewUpdateSuitResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCNewUpdateSuitResponse original = result;
          result = new CCNewUpdateSuitResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCNewUpdateSuitResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCNewUpdateSuitResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCNewUpdateSuitResponse.DefaultInstance; }
      }
      
      public override CCNewUpdateSuitResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCNewUpdateSuitResponse) {
          return MergeFrom((CCNewUpdateSuitResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCNewUpdateSuitResponse other) {
        if (other == global::com.golf.proto.CCNewUpdateSuitResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasSuit) {
          MergeSuit(other.Suit);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCNewUpdateSuitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCNewUpdateSuitResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCSuitItem.Builder subBuilder = global::com.golf.proto.CCSuitItem.CreateBuilder();
              if (result.hasSuit) {
                subBuilder.MergeFrom(Suit);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Suit = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasSuit {
       get { return result.hasSuit; }
      }
      public global::com.golf.proto.CCSuitItem Suit {
        get { return result.Suit; }
        set { SetSuit(value); }
      }
      public Builder SetSuit(global::com.golf.proto.CCSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSuit = true;
        result.suit_ = value;
        return this;
      }
      public Builder SetSuit(global::com.golf.proto.CCSuitItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSuit = true;
        result.suit_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSuit(global::com.golf.proto.CCSuitItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSuit &&
            result.suit_ != global::com.golf.proto.CCSuitItem.DefaultInstance) {
            result.suit_ = global::com.golf.proto.CCSuitItem.CreateBuilder(result.suit_).MergeFrom(value).BuildPartial();
        } else {
          result.suit_ = value;
        }
        result.hasSuit = true;
        return this;
      }
      public Builder ClearSuit() {
        PrepareBuilder();
        result.hasSuit = false;
        result.suit_ = null;
        return this;
      }
    }
    static CCNewUpdateSuitResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetRsVersionRequest : pb::GeneratedMessageLite<CCGetRsVersionRequest, CCGetRsVersionRequest.Builder> {
    private CCGetRsVersionRequest() { }
    private static readonly CCGetRsVersionRequest defaultInstance = new CCGetRsVersionRequest().MakeReadOnly();
    private static readonly string[] _cCGetRsVersionRequestFieldNames = new string[] { "client_version", "os_type" };
    private static readonly uint[] _cCGetRsVersionRequestFieldTags = new uint[] { 10, 16 };
    public static CCGetRsVersionRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetRsVersionRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetRsVersionRequest ThisMessage {
      get { return this; }
    }
    
    public const int ClientVersionFieldNumber = 1;
    private bool hasClientVersion;
    private string clientVersion_ = "";
    public bool HasClientVersion {
      get { return hasClientVersion; }
    }
    public string ClientVersion {
      get { return clientVersion_; }
    }
    
    public const int OsTypeFieldNumber = 2;
    private bool hasOsType;
    private int osType_;
    public bool HasOsType {
      get { return hasOsType; }
    }
    public int OsType {
      get { return osType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetRsVersionRequestFieldNames;
      if (hasClientVersion) {
        output.WriteString(1, field_names[0], ClientVersion);
      }
      if (hasOsType) {
        output.WriteInt32(2, field_names[1], OsType);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClientVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ClientVersion);
      }
      if (hasOsType) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, OsType);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasClientVersion) hash ^= clientVersion_.GetHashCode();
      if (hasOsType) hash ^= osType_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetRsVersionRequest other = obj as CCGetRsVersionRequest;
      if (other == null) return false;
      if (hasClientVersion != other.hasClientVersion || (hasClientVersion && !clientVersion_.Equals(other.clientVersion_))) return false;
      if (hasOsType != other.hasOsType || (hasOsType && !osType_.Equals(other.osType_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("client_version", hasClientVersion, clientVersion_, writer);
      PrintField("os_type", hasOsType, osType_, writer);
    }
    #endregion
    
    public static CCGetRsVersionRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRsVersionRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetRsVersionRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetRsVersionRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetRsVersionRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetRsVersionRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetRsVersionRequest result;
      
      private CCGetRsVersionRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetRsVersionRequest original = result;
          result = new CCGetRsVersionRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetRsVersionRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetRsVersionRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetRsVersionRequest.DefaultInstance; }
      }
      
      public override CCGetRsVersionRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetRsVersionRequest) {
          return MergeFrom((CCGetRsVersionRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetRsVersionRequest other) {
        if (other == global::com.golf.proto.CCGetRsVersionRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClientVersion) {
          ClientVersion = other.ClientVersion;
        }
        if (other.HasOsType) {
          OsType = other.OsType;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetRsVersionRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetRsVersionRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasClientVersion = input.ReadString(ref result.clientVersion_);
              break;
            }
            case 16: {
              result.hasOsType = input.ReadInt32(ref result.osType_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasClientVersion {
        get { return result.hasClientVersion; }
      }
      public string ClientVersion {
        get { return result.ClientVersion; }
        set { SetClientVersion(value); }
      }
      public Builder SetClientVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientVersion = true;
        result.clientVersion_ = value;
        return this;
      }
      public Builder ClearClientVersion() {
        PrepareBuilder();
        result.hasClientVersion = false;
        result.clientVersion_ = "";
        return this;
      }
      
      public bool HasOsType {
        get { return result.hasOsType; }
      }
      public int OsType {
        get { return result.OsType; }
        set { SetOsType(value); }
      }
      public Builder SetOsType(int value) {
        PrepareBuilder();
        result.hasOsType = true;
        result.osType_ = value;
        return this;
      }
      public Builder ClearOsType() {
        PrepareBuilder();
        result.hasOsType = false;
        result.osType_ = 0;
        return this;
      }
    }
    static CCGetRsVersionRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetRsVersionResponse : pb::GeneratedMessageLite<CCGetRsVersionResponse, CCGetRsVersionResponse.Builder> {
    private CCGetRsVersionResponse() { }
    private static readonly CCGetRsVersionResponse defaultInstance = new CCGetRsVersionResponse().MakeReadOnly();
    private static readonly string[] _cCGetRsVersionResponseFieldNames = new string[] { "result", "rs_version" };
    private static readonly uint[] _cCGetRsVersionResponseFieldTags = new uint[] { 8, 18 };
    public static CCGetRsVersionResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetRsVersionResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetRsVersionResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int RsVersionFieldNumber = 2;
    private bool hasRsVersion;
    private string rsVersion_ = "";
    public bool HasRsVersion {
      get { return hasRsVersion; }
    }
    public string RsVersion {
      get { return rsVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetRsVersionResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
      if (hasRsVersion) {
        output.WriteString(2, field_names[1], RsVersion);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasRsVersion) {
        size += pb::CodedOutputStream.ComputeStringSize(2, RsVersion);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasRsVersion) hash ^= rsVersion_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetRsVersionResponse other = obj as CCGetRsVersionResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasRsVersion != other.hasRsVersion || (hasRsVersion && !rsVersion_.Equals(other.rsVersion_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("rs_version", hasRsVersion, rsVersion_, writer);
    }
    #endregion
    
    public static CCGetRsVersionResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetRsVersionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetRsVersionResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetRsVersionResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetRsVersionResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetRsVersionResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetRsVersionResponse result;
      
      private CCGetRsVersionResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetRsVersionResponse original = result;
          result = new CCGetRsVersionResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetRsVersionResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetRsVersionResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetRsVersionResponse.DefaultInstance; }
      }
      
      public override CCGetRsVersionResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetRsVersionResponse) {
          return MergeFrom((CCGetRsVersionResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetRsVersionResponse other) {
        if (other == global::com.golf.proto.CCGetRsVersionResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasRsVersion) {
          RsVersion = other.RsVersion;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetRsVersionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetRsVersionResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              result.hasRsVersion = input.ReadString(ref result.rsVersion_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasRsVersion {
        get { return result.hasRsVersion; }
      }
      public string RsVersion {
        get { return result.RsVersion; }
        set { SetRsVersion(value); }
      }
      public Builder SetRsVersion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRsVersion = true;
        result.rsVersion_ = value;
        return this;
      }
      public Builder ClearRsVersion() {
        PrepareBuilder();
        result.hasRsVersion = false;
        result.rsVersion_ = "";
        return this;
      }
    }
    static CCGetRsVersionResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCDelayStatRequest : pb::GeneratedMessageLite<CCDelayStatRequest, CCDelayStatRequest.Builder> {
    private CCDelayStatRequest() { }
    private static readonly CCDelayStatRequest defaultInstance = new CCDelayStatRequest().MakeReadOnly();
    private static readonly string[] _cCDelayStatRequestFieldNames = new string[] { "avg", "fail", "id", "media", "total" };
    private static readonly uint[] _cCDelayStatRequestFieldTags = new uint[] { 32, 24, 10, 40, 16 };
    public static CCDelayStatRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCDelayStatRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCDelayStatRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TotalFieldNumber = 2;
    private bool hasTotal;
    private int total_;
    public bool HasTotal {
      get { return hasTotal; }
    }
    public int Total {
      get { return total_; }
    }
    
    public const int FailFieldNumber = 3;
    private bool hasFail;
    private int fail_;
    public bool HasFail {
      get { return hasFail; }
    }
    public int Fail {
      get { return fail_; }
    }
    
    public const int AvgFieldNumber = 4;
    private bool hasAvg;
    private int avg_;
    public bool HasAvg {
      get { return hasAvg; }
    }
    public int Avg {
      get { return avg_; }
    }
    
    public const int MediaFieldNumber = 5;
    private bool hasMedia;
    private int media_;
    public bool HasMedia {
      get { return hasMedia; }
    }
    public int Media {
      get { return media_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCDelayStatRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[2], Id);
      }
      if (hasTotal) {
        output.WriteInt32(2, field_names[4], Total);
      }
      if (hasFail) {
        output.WriteInt32(3, field_names[1], Fail);
      }
      if (hasAvg) {
        output.WriteInt32(4, field_names[0], Avg);
      }
      if (hasMedia) {
        output.WriteInt32(5, field_names[3], Media);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasTotal) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Total);
      }
      if (hasFail) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Fail);
      }
      if (hasAvg) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Avg);
      }
      if (hasMedia) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Media);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasTotal) hash ^= total_.GetHashCode();
      if (hasFail) hash ^= fail_.GetHashCode();
      if (hasAvg) hash ^= avg_.GetHashCode();
      if (hasMedia) hash ^= media_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCDelayStatRequest other = obj as CCDelayStatRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasTotal != other.hasTotal || (hasTotal && !total_.Equals(other.total_))) return false;
      if (hasFail != other.hasFail || (hasFail && !fail_.Equals(other.fail_))) return false;
      if (hasAvg != other.hasAvg || (hasAvg && !avg_.Equals(other.avg_))) return false;
      if (hasMedia != other.hasMedia || (hasMedia && !media_.Equals(other.media_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("total", hasTotal, total_, writer);
      PrintField("fail", hasFail, fail_, writer);
      PrintField("avg", hasAvg, avg_, writer);
      PrintField("media", hasMedia, media_, writer);
    }
    #endregion
    
    public static CCDelayStatRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCDelayStatRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCDelayStatRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCDelayStatRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCDelayStatRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCDelayStatRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCDelayStatRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCDelayStatRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCDelayStatRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCDelayStatRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCDelayStatRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCDelayStatRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCDelayStatRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCDelayStatRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCDelayStatRequest result;
      
      private CCDelayStatRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCDelayStatRequest original = result;
          result = new CCDelayStatRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCDelayStatRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCDelayStatRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCDelayStatRequest.DefaultInstance; }
      }
      
      public override CCDelayStatRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCDelayStatRequest) {
          return MergeFrom((CCDelayStatRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCDelayStatRequest other) {
        if (other == global::com.golf.proto.CCDelayStatRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTotal) {
          Total = other.Total;
        }
        if (other.HasFail) {
          Fail = other.Fail;
        }
        if (other.HasAvg) {
          Avg = other.Avg;
        }
        if (other.HasMedia) {
          Media = other.Media;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCDelayStatRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCDelayStatRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasTotal = input.ReadInt32(ref result.total_);
              break;
            }
            case 24: {
              result.hasFail = input.ReadInt32(ref result.fail_);
              break;
            }
            case 32: {
              result.hasAvg = input.ReadInt32(ref result.avg_);
              break;
            }
            case 40: {
              result.hasMedia = input.ReadInt32(ref result.media_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTotal {
        get { return result.hasTotal; }
      }
      public int Total {
        get { return result.Total; }
        set { SetTotal(value); }
      }
      public Builder SetTotal(int value) {
        PrepareBuilder();
        result.hasTotal = true;
        result.total_ = value;
        return this;
      }
      public Builder ClearTotal() {
        PrepareBuilder();
        result.hasTotal = false;
        result.total_ = 0;
        return this;
      }
      
      public bool HasFail {
        get { return result.hasFail; }
      }
      public int Fail {
        get { return result.Fail; }
        set { SetFail(value); }
      }
      public Builder SetFail(int value) {
        PrepareBuilder();
        result.hasFail = true;
        result.fail_ = value;
        return this;
      }
      public Builder ClearFail() {
        PrepareBuilder();
        result.hasFail = false;
        result.fail_ = 0;
        return this;
      }
      
      public bool HasAvg {
        get { return result.hasAvg; }
      }
      public int Avg {
        get { return result.Avg; }
        set { SetAvg(value); }
      }
      public Builder SetAvg(int value) {
        PrepareBuilder();
        result.hasAvg = true;
        result.avg_ = value;
        return this;
      }
      public Builder ClearAvg() {
        PrepareBuilder();
        result.hasAvg = false;
        result.avg_ = 0;
        return this;
      }
      
      public bool HasMedia {
        get { return result.hasMedia; }
      }
      public int Media {
        get { return result.Media; }
        set { SetMedia(value); }
      }
      public Builder SetMedia(int value) {
        PrepareBuilder();
        result.hasMedia = true;
        result.media_ = value;
        return this;
      }
      public Builder ClearMedia() {
        PrepareBuilder();
        result.hasMedia = false;
        result.media_ = 0;
        return this;
      }
    }
    static CCDelayStatRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetMaxClubTradeStatusRequest : pb::GeneratedMessageLite<CCGetMaxClubTradeStatusRequest, CCGetMaxClubTradeStatusRequest.Builder> {
    private CCGetMaxClubTradeStatusRequest() { }
    private static readonly CCGetMaxClubTradeStatusRequest defaultInstance = new CCGetMaxClubTradeStatusRequest().MakeReadOnly();
    private static readonly string[] _cCGetMaxClubTradeStatusRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGetMaxClubTradeStatusRequestFieldTags = new uint[] { 10 };
    public static CCGetMaxClubTradeStatusRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetMaxClubTradeStatusRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetMaxClubTradeStatusRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetMaxClubTradeStatusRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetMaxClubTradeStatusRequest other = obj as CCGetMaxClubTradeStatusRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGetMaxClubTradeStatusRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetMaxClubTradeStatusRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetMaxClubTradeStatusRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetMaxClubTradeStatusRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetMaxClubTradeStatusRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetMaxClubTradeStatusRequest result;
      
      private CCGetMaxClubTradeStatusRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetMaxClubTradeStatusRequest original = result;
          result = new CCGetMaxClubTradeStatusRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetMaxClubTradeStatusRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetMaxClubTradeStatusRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetMaxClubTradeStatusRequest.DefaultInstance; }
      }
      
      public override CCGetMaxClubTradeStatusRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetMaxClubTradeStatusRequest) {
          return MergeFrom((CCGetMaxClubTradeStatusRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetMaxClubTradeStatusRequest other) {
        if (other == global::com.golf.proto.CCGetMaxClubTradeStatusRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetMaxClubTradeStatusRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetMaxClubTradeStatusRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGetMaxClubTradeStatusRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetMaxClubTradeStatusResponse : pb::GeneratedMessageLite<CCGetMaxClubTradeStatusResponse, CCGetMaxClubTradeStatusResponse.Builder> {
    private CCGetMaxClubTradeStatusResponse() { }
    private static readonly CCGetMaxClubTradeStatusResponse defaultInstance = new CCGetMaxClubTradeStatusResponse().MakeReadOnly();
    private static readonly string[] _cCGetMaxClubTradeStatusResponseFieldNames = new string[] { "max_club_trade_status", "result" };
    private static readonly uint[] _cCGetMaxClubTradeStatusResponseFieldTags = new uint[] { 18, 8 };
    public static CCGetMaxClubTradeStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetMaxClubTradeStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetMaxClubTradeStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int MaxClubTradeStatusFieldNumber = 2;
    private bool hasMaxClubTradeStatus;
    private global::com.golf.proto.CCMaxClubTradeStatus maxClubTradeStatus_;
    public bool HasMaxClubTradeStatus {
      get { return hasMaxClubTradeStatus; }
    }
    public global::com.golf.proto.CCMaxClubTradeStatus MaxClubTradeStatus {
      get { return maxClubTradeStatus_ ?? global::com.golf.proto.CCMaxClubTradeStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetMaxClubTradeStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasMaxClubTradeStatus) {
        output.WriteMessage(2, field_names[0], MaxClubTradeStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasMaxClubTradeStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, MaxClubTradeStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasMaxClubTradeStatus) hash ^= maxClubTradeStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetMaxClubTradeStatusResponse other = obj as CCGetMaxClubTradeStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasMaxClubTradeStatus != other.hasMaxClubTradeStatus || (hasMaxClubTradeStatus && !maxClubTradeStatus_.Equals(other.maxClubTradeStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("max_club_trade_status", hasMaxClubTradeStatus, maxClubTradeStatus_, writer);
    }
    #endregion
    
    public static CCGetMaxClubTradeStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetMaxClubTradeStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetMaxClubTradeStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetMaxClubTradeStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetMaxClubTradeStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetMaxClubTradeStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetMaxClubTradeStatusResponse result;
      
      private CCGetMaxClubTradeStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetMaxClubTradeStatusResponse original = result;
          result = new CCGetMaxClubTradeStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetMaxClubTradeStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetMaxClubTradeStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetMaxClubTradeStatusResponse.DefaultInstance; }
      }
      
      public override CCGetMaxClubTradeStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetMaxClubTradeStatusResponse) {
          return MergeFrom((CCGetMaxClubTradeStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetMaxClubTradeStatusResponse other) {
        if (other == global::com.golf.proto.CCGetMaxClubTradeStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasMaxClubTradeStatus) {
          MergeMaxClubTradeStatus(other.MaxClubTradeStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetMaxClubTradeStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetMaxClubTradeStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCMaxClubTradeStatus.Builder subBuilder = global::com.golf.proto.CCMaxClubTradeStatus.CreateBuilder();
              if (result.hasMaxClubTradeStatus) {
                subBuilder.MergeFrom(MaxClubTradeStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MaxClubTradeStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasMaxClubTradeStatus {
       get { return result.hasMaxClubTradeStatus; }
      }
      public global::com.golf.proto.CCMaxClubTradeStatus MaxClubTradeStatus {
        get { return result.MaxClubTradeStatus; }
        set { SetMaxClubTradeStatus(value); }
      }
      public Builder SetMaxClubTradeStatus(global::com.golf.proto.CCMaxClubTradeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaxClubTradeStatus = true;
        result.maxClubTradeStatus_ = value;
        return this;
      }
      public Builder SetMaxClubTradeStatus(global::com.golf.proto.CCMaxClubTradeStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMaxClubTradeStatus = true;
        result.maxClubTradeStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMaxClubTradeStatus(global::com.golf.proto.CCMaxClubTradeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMaxClubTradeStatus &&
            result.maxClubTradeStatus_ != global::com.golf.proto.CCMaxClubTradeStatus.DefaultInstance) {
            result.maxClubTradeStatus_ = global::com.golf.proto.CCMaxClubTradeStatus.CreateBuilder(result.maxClubTradeStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.maxClubTradeStatus_ = value;
        }
        result.hasMaxClubTradeStatus = true;
        return this;
      }
      public Builder ClearMaxClubTradeStatus() {
        PrepareBuilder();
        result.hasMaxClubTradeStatus = false;
        result.maxClubTradeStatus_ = null;
        return this;
      }
    }
    static CCGetMaxClubTradeStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMaxClubTradeRequest : pb::GeneratedMessageLite<CCMaxClubTradeRequest, CCMaxClubTradeRequest.Builder> {
    private CCMaxClubTradeRequest() { }
    private static readonly CCMaxClubTradeRequest defaultInstance = new CCMaxClubTradeRequest().MakeReadOnly();
    private static readonly string[] _cCMaxClubTradeRequestFieldNames = new string[] { "cost_card_id", "id", "target_type", "trade_id" };
    private static readonly uint[] _cCMaxClubTradeRequestFieldTags = new uint[] { 32, 10, 24, 16 };
    public static CCMaxClubTradeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMaxClubTradeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMaxClubTradeRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TradeIdFieldNumber = 2;
    private bool hasTradeId;
    private int tradeId_;
    public bool HasTradeId {
      get { return hasTradeId; }
    }
    public int TradeId {
      get { return tradeId_; }
    }
    
    public const int TargetTypeFieldNumber = 3;
    private bool hasTargetType;
    private int targetType_;
    public bool HasTargetType {
      get { return hasTargetType; }
    }
    public int TargetType {
      get { return targetType_; }
    }
    
    public const int CostCardIdFieldNumber = 4;
    private bool hasCostCardId;
    private int costCardId_;
    public bool HasCostCardId {
      get { return hasCostCardId; }
    }
    public int CostCardId {
      get { return costCardId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMaxClubTradeRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasTradeId) {
        output.WriteInt32(2, field_names[3], TradeId);
      }
      if (hasTargetType) {
        output.WriteInt32(3, field_names[2], TargetType);
      }
      if (hasCostCardId) {
        output.WriteInt32(4, field_names[0], CostCardId);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasTradeId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, TradeId);
      }
      if (hasTargetType) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, TargetType);
      }
      if (hasCostCardId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, CostCardId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasTradeId) hash ^= tradeId_.GetHashCode();
      if (hasTargetType) hash ^= targetType_.GetHashCode();
      if (hasCostCardId) hash ^= costCardId_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMaxClubTradeRequest other = obj as CCMaxClubTradeRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasTradeId != other.hasTradeId || (hasTradeId && !tradeId_.Equals(other.tradeId_))) return false;
      if (hasTargetType != other.hasTargetType || (hasTargetType && !targetType_.Equals(other.targetType_))) return false;
      if (hasCostCardId != other.hasCostCardId || (hasCostCardId && !costCardId_.Equals(other.costCardId_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
      PrintField("trade_id", hasTradeId, tradeId_, writer);
      PrintField("target_type", hasTargetType, targetType_, writer);
      PrintField("cost_card_id", hasCostCardId, costCardId_, writer);
    }
    #endregion
    
    public static CCMaxClubTradeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMaxClubTradeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMaxClubTradeRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMaxClubTradeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMaxClubTradeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMaxClubTradeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMaxClubTradeRequest result;
      
      private CCMaxClubTradeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMaxClubTradeRequest original = result;
          result = new CCMaxClubTradeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMaxClubTradeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMaxClubTradeRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCMaxClubTradeRequest.DefaultInstance; }
      }
      
      public override CCMaxClubTradeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMaxClubTradeRequest) {
          return MergeFrom((CCMaxClubTradeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMaxClubTradeRequest other) {
        if (other == global::com.golf.proto.CCMaxClubTradeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTradeId) {
          TradeId = other.TradeId;
        }
        if (other.HasTargetType) {
          TargetType = other.TargetType;
        }
        if (other.HasCostCardId) {
          CostCardId = other.CostCardId;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMaxClubTradeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMaxClubTradeRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasTradeId = input.ReadInt32(ref result.tradeId_);
              break;
            }
            case 24: {
              result.hasTargetType = input.ReadInt32(ref result.targetType_);
              break;
            }
            case 32: {
              result.hasCostCardId = input.ReadInt32(ref result.costCardId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTradeId {
        get { return result.hasTradeId; }
      }
      public int TradeId {
        get { return result.TradeId; }
        set { SetTradeId(value); }
      }
      public Builder SetTradeId(int value) {
        PrepareBuilder();
        result.hasTradeId = true;
        result.tradeId_ = value;
        return this;
      }
      public Builder ClearTradeId() {
        PrepareBuilder();
        result.hasTradeId = false;
        result.tradeId_ = 0;
        return this;
      }
      
      public bool HasTargetType {
        get { return result.hasTargetType; }
      }
      public int TargetType {
        get { return result.TargetType; }
        set { SetTargetType(value); }
      }
      public Builder SetTargetType(int value) {
        PrepareBuilder();
        result.hasTargetType = true;
        result.targetType_ = value;
        return this;
      }
      public Builder ClearTargetType() {
        PrepareBuilder();
        result.hasTargetType = false;
        result.targetType_ = 0;
        return this;
      }
      
      public bool HasCostCardId {
        get { return result.hasCostCardId; }
      }
      public int CostCardId {
        get { return result.CostCardId; }
        set { SetCostCardId(value); }
      }
      public Builder SetCostCardId(int value) {
        PrepareBuilder();
        result.hasCostCardId = true;
        result.costCardId_ = value;
        return this;
      }
      public Builder ClearCostCardId() {
        PrepareBuilder();
        result.hasCostCardId = false;
        result.costCardId_ = 0;
        return this;
      }
    }
    static CCMaxClubTradeRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMaxClubTradeResponse : pb::GeneratedMessageLite<CCMaxClubTradeResponse, CCMaxClubTradeResponse.Builder> {
    private CCMaxClubTradeResponse() { }
    private static readonly CCMaxClubTradeResponse defaultInstance = new CCMaxClubTradeResponse().MakeReadOnly();
    private static readonly string[] _cCMaxClubTradeResponseFieldNames = new string[] { "max_club_trade_status", "result", "reward_items", "user_data" };
    private static readonly uint[] _cCMaxClubTradeResponseFieldTags = new uint[] { 34, 8, 26, 18 };
    public static CCMaxClubTradeResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMaxClubTradeResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMaxClubTradeResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int UserDataFieldNumber = 2;
    private bool hasUserData;
    private global::com.golf.proto.CCUserData userData_;
    public bool HasUserData {
      get { return hasUserData; }
    }
    public global::com.golf.proto.CCUserData UserData {
      get { return userData_ ?? global::com.golf.proto.CCUserData.DefaultInstance; }
    }
    
    public const int RewardItemsFieldNumber = 3;
    private pbc::PopsicleList<global::com.golf.proto.CCRewardItem> rewardItems_ = new pbc::PopsicleList<global::com.golf.proto.CCRewardItem>();
    public scg::IList<global::com.golf.proto.CCRewardItem> RewardItemsList {
      get { return rewardItems_; }
    }
    public int RewardItemsCount {
      get { return rewardItems_.Count; }
    }
    public global::com.golf.proto.CCRewardItem GetRewardItems(int index) {
      return rewardItems_[index];
    }
    
    public const int MaxClubTradeStatusFieldNumber = 4;
    private bool hasMaxClubTradeStatus;
    private global::com.golf.proto.CCMaxClubTradeStatus maxClubTradeStatus_;
    public bool HasMaxClubTradeStatus {
      get { return hasMaxClubTradeStatus; }
    }
    public global::com.golf.proto.CCMaxClubTradeStatus MaxClubTradeStatus {
      get { return maxClubTradeStatus_ ?? global::com.golf.proto.CCMaxClubTradeStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMaxClubTradeResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasUserData) {
        output.WriteMessage(2, field_names[3], UserData);
      }
      if (rewardItems_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], rewardItems_);
      }
      if (hasMaxClubTradeStatus) {
        output.WriteMessage(4, field_names[0], MaxClubTradeStatus);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasUserData) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserData);
      }
      foreach (global::com.golf.proto.CCRewardItem element in RewardItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasMaxClubTradeStatus) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, MaxClubTradeStatus);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasUserData) hash ^= userData_.GetHashCode();
      foreach(global::com.golf.proto.CCRewardItem i in rewardItems_)
        hash ^= i.GetHashCode();
      if (hasMaxClubTradeStatus) hash ^= maxClubTradeStatus_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMaxClubTradeResponse other = obj as CCMaxClubTradeResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasUserData != other.hasUserData || (hasUserData && !userData_.Equals(other.userData_))) return false;
      if(rewardItems_.Count != other.rewardItems_.Count) return false;
      for(int ix=0; ix < rewardItems_.Count; ix++)
        if(!rewardItems_[ix].Equals(other.rewardItems_[ix])) return false;
      if (hasMaxClubTradeStatus != other.hasMaxClubTradeStatus || (hasMaxClubTradeStatus && !maxClubTradeStatus_.Equals(other.maxClubTradeStatus_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("user_data", hasUserData, userData_, writer);
      PrintField("reward_items", rewardItems_, writer);
      PrintField("max_club_trade_status", hasMaxClubTradeStatus, maxClubTradeStatus_, writer);
    }
    #endregion
    
    public static CCMaxClubTradeResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMaxClubTradeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMaxClubTradeResponse MakeReadOnly() {
      rewardItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMaxClubTradeResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMaxClubTradeResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMaxClubTradeResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMaxClubTradeResponse result;
      
      private CCMaxClubTradeResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMaxClubTradeResponse original = result;
          result = new CCMaxClubTradeResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMaxClubTradeResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMaxClubTradeResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCMaxClubTradeResponse.DefaultInstance; }
      }
      
      public override CCMaxClubTradeResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMaxClubTradeResponse) {
          return MergeFrom((CCMaxClubTradeResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMaxClubTradeResponse other) {
        if (other == global::com.golf.proto.CCMaxClubTradeResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasUserData) {
          MergeUserData(other.UserData);
        }
        if (other.rewardItems_.Count != 0) {
          result.rewardItems_.Add(other.rewardItems_);
        }
        if (other.HasMaxClubTradeStatus) {
          MergeMaxClubTradeStatus(other.MaxClubTradeStatus);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMaxClubTradeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMaxClubTradeResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 18: {
              global::com.golf.proto.CCUserData.Builder subBuilder = global::com.golf.proto.CCUserData.CreateBuilder();
              if (result.hasUserData) {
                subBuilder.MergeFrom(UserData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserData = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.rewardItems_, global::com.golf.proto.CCRewardItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              global::com.golf.proto.CCMaxClubTradeStatus.Builder subBuilder = global::com.golf.proto.CCMaxClubTradeStatus.CreateBuilder();
              if (result.hasMaxClubTradeStatus) {
                subBuilder.MergeFrom(MaxClubTradeStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MaxClubTradeStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasUserData {
       get { return result.hasUserData; }
      }
      public global::com.golf.proto.CCUserData UserData {
        get { return result.UserData; }
        set { SetUserData(value); }
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = value;
        return this;
      }
      public Builder SetUserData(global::com.golf.proto.CCUserData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserData = true;
        result.userData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserData(global::com.golf.proto.CCUserData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserData &&
            result.userData_ != global::com.golf.proto.CCUserData.DefaultInstance) {
            result.userData_ = global::com.golf.proto.CCUserData.CreateBuilder(result.userData_).MergeFrom(value).BuildPartial();
        } else {
          result.userData_ = value;
        }
        result.hasUserData = true;
        return this;
      }
      public Builder ClearUserData() {
        PrepareBuilder();
        result.hasUserData = false;
        result.userData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.golf.proto.CCRewardItem> RewardItemsList {
        get { return PrepareBuilder().rewardItems_; }
      }
      public int RewardItemsCount {
        get { return result.RewardItemsCount; }
      }
      public global::com.golf.proto.CCRewardItem GetRewardItems(int index) {
        return result.GetRewardItems(index);
      }
      public Builder SetRewardItems(int index, global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rewardItems_[index] = value;
        return this;
      }
      public Builder SetRewardItems(int index, global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rewardItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRewardItems(global::com.golf.proto.CCRewardItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rewardItems_.Add(value);
        return this;
      }
      public Builder AddRewardItems(global::com.golf.proto.CCRewardItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rewardItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRewardItems(scg::IEnumerable<global::com.golf.proto.CCRewardItem> values) {
        PrepareBuilder();
        result.rewardItems_.Add(values);
        return this;
      }
      public Builder ClearRewardItems() {
        PrepareBuilder();
        result.rewardItems_.Clear();
        return this;
      }
      
      public bool HasMaxClubTradeStatus {
       get { return result.hasMaxClubTradeStatus; }
      }
      public global::com.golf.proto.CCMaxClubTradeStatus MaxClubTradeStatus {
        get { return result.MaxClubTradeStatus; }
        set { SetMaxClubTradeStatus(value); }
      }
      public Builder SetMaxClubTradeStatus(global::com.golf.proto.CCMaxClubTradeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaxClubTradeStatus = true;
        result.maxClubTradeStatus_ = value;
        return this;
      }
      public Builder SetMaxClubTradeStatus(global::com.golf.proto.CCMaxClubTradeStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMaxClubTradeStatus = true;
        result.maxClubTradeStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMaxClubTradeStatus(global::com.golf.proto.CCMaxClubTradeStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMaxClubTradeStatus &&
            result.maxClubTradeStatus_ != global::com.golf.proto.CCMaxClubTradeStatus.DefaultInstance) {
            result.maxClubTradeStatus_ = global::com.golf.proto.CCMaxClubTradeStatus.CreateBuilder(result.maxClubTradeStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.maxClubTradeStatus_ = value;
        }
        result.hasMaxClubTradeStatus = true;
        return this;
      }
      public Builder ClearMaxClubTradeStatus() {
        PrepareBuilder();
        result.hasMaxClubTradeStatus = false;
        result.maxClubTradeStatus_ = null;
        return this;
      }
    }
    static CCMaxClubTradeResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCMaxClubTradeStatus : pb::GeneratedMessageLite<CCMaxClubTradeStatus, CCMaxClubTradeStatus.Builder> {
    private CCMaxClubTradeStatus() { }
    private static readonly CCMaxClubTradeStatus defaultInstance = new CCMaxClubTradeStatus().MakeReadOnly();
    private static readonly string[] _cCMaxClubTradeStatusFieldNames = new string[] { "refresh_time", "traded" };
    private static readonly uint[] _cCMaxClubTradeStatusFieldTags = new uint[] { 8, 16 };
    public static CCMaxClubTradeStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCMaxClubTradeStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCMaxClubTradeStatus ThisMessage {
      get { return this; }
    }
    
    public const int RefreshTimeFieldNumber = 1;
    private bool hasRefreshTime;
    private long refreshTime_;
    public bool HasRefreshTime {
      get { return hasRefreshTime; }
    }
    public long RefreshTime {
      get { return refreshTime_; }
    }
    
    public const int TradedFieldNumber = 2;
    private bool hasTraded;
    private bool traded_;
    public bool HasTraded {
      get { return hasTraded; }
    }
    public bool Traded {
      get { return traded_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCMaxClubTradeStatusFieldNames;
      if (hasRefreshTime) {
        output.WriteInt64(1, field_names[0], RefreshTime);
      }
      if (hasTraded) {
        output.WriteBool(2, field_names[1], Traded);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRefreshTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, RefreshTime);
      }
      if (hasTraded) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Traded);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasRefreshTime) hash ^= refreshTime_.GetHashCode();
      if (hasTraded) hash ^= traded_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCMaxClubTradeStatus other = obj as CCMaxClubTradeStatus;
      if (other == null) return false;
      if (hasRefreshTime != other.hasRefreshTime || (hasRefreshTime && !refreshTime_.Equals(other.refreshTime_))) return false;
      if (hasTraded != other.hasTraded || (hasTraded && !traded_.Equals(other.traded_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("refresh_time", hasRefreshTime, refreshTime_, writer);
      PrintField("traded", hasTraded, traded_, writer);
    }
    #endregion
    
    public static CCMaxClubTradeStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCMaxClubTradeStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCMaxClubTradeStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCMaxClubTradeStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCMaxClubTradeStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCMaxClubTradeStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCMaxClubTradeStatus result;
      
      private CCMaxClubTradeStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          CCMaxClubTradeStatus original = result;
          result = new CCMaxClubTradeStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCMaxClubTradeStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCMaxClubTradeStatus DefaultInstanceForType {
        get { return global::com.golf.proto.CCMaxClubTradeStatus.DefaultInstance; }
      }
      
      public override CCMaxClubTradeStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCMaxClubTradeStatus) {
          return MergeFrom((CCMaxClubTradeStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCMaxClubTradeStatus other) {
        if (other == global::com.golf.proto.CCMaxClubTradeStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRefreshTime) {
          RefreshTime = other.RefreshTime;
        }
        if (other.HasTraded) {
          Traded = other.Traded;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCMaxClubTradeStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCMaxClubTradeStatusFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRefreshTime = input.ReadInt64(ref result.refreshTime_);
              break;
            }
            case 16: {
              result.hasTraded = input.ReadBool(ref result.traded_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasRefreshTime {
        get { return result.hasRefreshTime; }
      }
      public long RefreshTime {
        get { return result.RefreshTime; }
        set { SetRefreshTime(value); }
      }
      public Builder SetRefreshTime(long value) {
        PrepareBuilder();
        result.hasRefreshTime = true;
        result.refreshTime_ = value;
        return this;
      }
      public Builder ClearRefreshTime() {
        PrepareBuilder();
        result.hasRefreshTime = false;
        result.refreshTime_ = 0L;
        return this;
      }
      
      public bool HasTraded {
        get { return result.hasTraded; }
      }
      public bool Traded {
        get { return result.Traded; }
        set { SetTraded(value); }
      }
      public Builder SetTraded(bool value) {
        PrepareBuilder();
        result.hasTraded = true;
        result.traded_ = value;
        return this;
      }
      public Builder ClearTraded() {
        PrepareBuilder();
        result.hasTraded = false;
        result.traded_ = false;
        return this;
      }
    }
    static CCMaxClubTradeStatus() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGameStartPrepareRequest : pb::GeneratedMessageLite<CCGameStartPrepareRequest, CCGameStartPrepareRequest.Builder> {
    private CCGameStartPrepareRequest() { }
    private static readonly CCGameStartPrepareRequest defaultInstance = new CCGameStartPrepareRequest().MakeReadOnly();
    private static readonly string[] _cCGameStartPrepareRequestFieldNames = new string[] { "id" };
    private static readonly uint[] _cCGameStartPrepareRequestFieldTags = new uint[] { 10 };
    public static CCGameStartPrepareRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGameStartPrepareRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGameStartPrepareRequest ThisMessage {
      get { return this; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGameStartPrepareRequestFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGameStartPrepareRequest other = obj as CCGameStartPrepareRequest;
      if (other == null) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("id", hasId, id_, writer);
    }
    #endregion
    
    public static CCGameStartPrepareRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameStartPrepareRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGameStartPrepareRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGameStartPrepareRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGameStartPrepareRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGameStartPrepareRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGameStartPrepareRequest result;
      
      private CCGameStartPrepareRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGameStartPrepareRequest original = result;
          result = new CCGameStartPrepareRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGameStartPrepareRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGameStartPrepareRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGameStartPrepareRequest.DefaultInstance; }
      }
      
      public override CCGameStartPrepareRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGameStartPrepareRequest) {
          return MergeFrom((CCGameStartPrepareRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGameStartPrepareRequest other) {
        if (other == global::com.golf.proto.CCGameStartPrepareRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGameStartPrepareRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGameStartPrepareRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
    }
    static CCGameStartPrepareRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGameStartPrepareResponse : pb::GeneratedMessageLite<CCGameStartPrepareResponse, CCGameStartPrepareResponse.Builder> {
    private CCGameStartPrepareResponse() { }
    private static readonly CCGameStartPrepareResponse defaultInstance = new CCGameStartPrepareResponse().MakeReadOnly();
    private static readonly string[] _cCGameStartPrepareResponseFieldNames = new string[] { "game_cancle_end_time", "result", "round_end_time", "round_op_end_time", "round_start_time" };
    private static readonly uint[] _cCGameStartPrepareResponseFieldTags = new uint[] { 40, 8, 16, 32, 24 };
    public static CCGameStartPrepareResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGameStartPrepareResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGameStartPrepareResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int RoundEndTimeFieldNumber = 2;
    private bool hasRoundEndTime;
    private long roundEndTime_;
    public bool HasRoundEndTime {
      get { return hasRoundEndTime; }
    }
    public long RoundEndTime {
      get { return roundEndTime_; }
    }
    
    public const int RoundStartTimeFieldNumber = 3;
    private bool hasRoundStartTime;
    private long roundStartTime_;
    public bool HasRoundStartTime {
      get { return hasRoundStartTime; }
    }
    public long RoundStartTime {
      get { return roundStartTime_; }
    }
    
    public const int RoundOpEndTimeFieldNumber = 4;
    private bool hasRoundOpEndTime;
    private long roundOpEndTime_;
    public bool HasRoundOpEndTime {
      get { return hasRoundOpEndTime; }
    }
    public long RoundOpEndTime {
      get { return roundOpEndTime_; }
    }
    
    public const int GameCancleEndTimeFieldNumber = 5;
    private bool hasGameCancleEndTime;
    private long gameCancleEndTime_;
    public bool HasGameCancleEndTime {
      get { return hasGameCancleEndTime; }
    }
    public long GameCancleEndTime {
      get { return gameCancleEndTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGameStartPrepareResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasRoundEndTime) {
        output.WriteInt64(2, field_names[2], RoundEndTime);
      }
      if (hasRoundStartTime) {
        output.WriteInt64(3, field_names[4], RoundStartTime);
      }
      if (hasRoundOpEndTime) {
        output.WriteInt64(4, field_names[3], RoundOpEndTime);
      }
      if (hasGameCancleEndTime) {
        output.WriteInt64(5, field_names[0], GameCancleEndTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasRoundEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, RoundEndTime);
      }
      if (hasRoundStartTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, RoundStartTime);
      }
      if (hasRoundOpEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(4, RoundOpEndTime);
      }
      if (hasGameCancleEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, GameCancleEndTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasRoundEndTime) hash ^= roundEndTime_.GetHashCode();
      if (hasRoundStartTime) hash ^= roundStartTime_.GetHashCode();
      if (hasRoundOpEndTime) hash ^= roundOpEndTime_.GetHashCode();
      if (hasGameCancleEndTime) hash ^= gameCancleEndTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGameStartPrepareResponse other = obj as CCGameStartPrepareResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasRoundEndTime != other.hasRoundEndTime || (hasRoundEndTime && !roundEndTime_.Equals(other.roundEndTime_))) return false;
      if (hasRoundStartTime != other.hasRoundStartTime || (hasRoundStartTime && !roundStartTime_.Equals(other.roundStartTime_))) return false;
      if (hasRoundOpEndTime != other.hasRoundOpEndTime || (hasRoundOpEndTime && !roundOpEndTime_.Equals(other.roundOpEndTime_))) return false;
      if (hasGameCancleEndTime != other.hasGameCancleEndTime || (hasGameCancleEndTime && !gameCancleEndTime_.Equals(other.gameCancleEndTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("round_end_time", hasRoundEndTime, roundEndTime_, writer);
      PrintField("round_start_time", hasRoundStartTime, roundStartTime_, writer);
      PrintField("round_op_end_time", hasRoundOpEndTime, roundOpEndTime_, writer);
      PrintField("game_cancle_end_time", hasGameCancleEndTime, gameCancleEndTime_, writer);
    }
    #endregion
    
    public static CCGameStartPrepareResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameStartPrepareResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGameStartPrepareResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGameStartPrepareResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGameStartPrepareResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGameStartPrepareResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGameStartPrepareResponse result;
      
      private CCGameStartPrepareResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGameStartPrepareResponse original = result;
          result = new CCGameStartPrepareResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGameStartPrepareResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGameStartPrepareResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGameStartPrepareResponse.DefaultInstance; }
      }
      
      public override CCGameStartPrepareResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGameStartPrepareResponse) {
          return MergeFrom((CCGameStartPrepareResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGameStartPrepareResponse other) {
        if (other == global::com.golf.proto.CCGameStartPrepareResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasRoundEndTime) {
          RoundEndTime = other.RoundEndTime;
        }
        if (other.HasRoundStartTime) {
          RoundStartTime = other.RoundStartTime;
        }
        if (other.HasRoundOpEndTime) {
          RoundOpEndTime = other.RoundOpEndTime;
        }
        if (other.HasGameCancleEndTime) {
          GameCancleEndTime = other.GameCancleEndTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGameStartPrepareResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGameStartPrepareResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasRoundEndTime = input.ReadInt64(ref result.roundEndTime_);
              break;
            }
            case 24: {
              result.hasRoundStartTime = input.ReadInt64(ref result.roundStartTime_);
              break;
            }
            case 32: {
              result.hasRoundOpEndTime = input.ReadInt64(ref result.roundOpEndTime_);
              break;
            }
            case 40: {
              result.hasGameCancleEndTime = input.ReadInt64(ref result.gameCancleEndTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasRoundEndTime {
        get { return result.hasRoundEndTime; }
      }
      public long RoundEndTime {
        get { return result.RoundEndTime; }
        set { SetRoundEndTime(value); }
      }
      public Builder SetRoundEndTime(long value) {
        PrepareBuilder();
        result.hasRoundEndTime = true;
        result.roundEndTime_ = value;
        return this;
      }
      public Builder ClearRoundEndTime() {
        PrepareBuilder();
        result.hasRoundEndTime = false;
        result.roundEndTime_ = 0L;
        return this;
      }
      
      public bool HasRoundStartTime {
        get { return result.hasRoundStartTime; }
      }
      public long RoundStartTime {
        get { return result.RoundStartTime; }
        set { SetRoundStartTime(value); }
      }
      public Builder SetRoundStartTime(long value) {
        PrepareBuilder();
        result.hasRoundStartTime = true;
        result.roundStartTime_ = value;
        return this;
      }
      public Builder ClearRoundStartTime() {
        PrepareBuilder();
        result.hasRoundStartTime = false;
        result.roundStartTime_ = 0L;
        return this;
      }
      
      public bool HasRoundOpEndTime {
        get { return result.hasRoundOpEndTime; }
      }
      public long RoundOpEndTime {
        get { return result.RoundOpEndTime; }
        set { SetRoundOpEndTime(value); }
      }
      public Builder SetRoundOpEndTime(long value) {
        PrepareBuilder();
        result.hasRoundOpEndTime = true;
        result.roundOpEndTime_ = value;
        return this;
      }
      public Builder ClearRoundOpEndTime() {
        PrepareBuilder();
        result.hasRoundOpEndTime = false;
        result.roundOpEndTime_ = 0L;
        return this;
      }
      
      public bool HasGameCancleEndTime {
        get { return result.hasGameCancleEndTime; }
      }
      public long GameCancleEndTime {
        get { return result.GameCancleEndTime; }
        set { SetGameCancleEndTime(value); }
      }
      public Builder SetGameCancleEndTime(long value) {
        PrepareBuilder();
        result.hasGameCancleEndTime = true;
        result.gameCancleEndTime_ = value;
        return this;
      }
      public Builder ClearGameCancleEndTime() {
        PrepareBuilder();
        result.hasGameCancleEndTime = false;
        result.gameCancleEndTime_ = 0L;
        return this;
      }
    }
    static CCGameStartPrepareResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGameCancelResponse : pb::GeneratedMessageLite<CCGameCancelResponse, CCGameCancelResponse.Builder> {
    private CCGameCancelResponse() { }
    private static readonly CCGameCancelResponse defaultInstance = new CCGameCancelResponse().MakeReadOnly();
    private static readonly string[] _cCGameCancelResponseFieldNames = new string[] { "result" };
    private static readonly uint[] _cCGameCancelResponseFieldTags = new uint[] { 8 };
    public static CCGameCancelResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGameCancelResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGameCancelResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGameCancelResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[0], Result);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGameCancelResponse other = obj as CCGameCancelResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
    }
    #endregion
    
    public static CCGameCancelResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameCancelResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameCancelResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGameCancelResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGameCancelResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameCancelResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGameCancelResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGameCancelResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGameCancelResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGameCancelResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGameCancelResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGameCancelResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGameCancelResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGameCancelResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGameCancelResponse result;
      
      private CCGameCancelResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGameCancelResponse original = result;
          result = new CCGameCancelResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGameCancelResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGameCancelResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCGameCancelResponse.DefaultInstance; }
      }
      
      public override CCGameCancelResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGameCancelResponse) {
          return MergeFrom((CCGameCancelResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGameCancelResponse other) {
        if (other == global::com.golf.proto.CCGameCancelResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGameCancelResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGameCancelResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static CCGameCancelResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCOppoNetStatusResponse : pb::GeneratedMessageLite<CCOppoNetStatusResponse, CCOppoNetStatusResponse.Builder> {
    private CCOppoNetStatusResponse() { }
    private static readonly CCOppoNetStatusResponse defaultInstance = new CCOppoNetStatusResponse().MakeReadOnly();
    private static readonly string[] _cCOppoNetStatusResponseFieldNames = new string[] { "offline_end_time", "result" };
    private static readonly uint[] _cCOppoNetStatusResponseFieldTags = new uint[] { 16, 8 };
    public static CCOppoNetStatusResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCOppoNetStatusResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCOppoNetStatusResponse ThisMessage {
      get { return this; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public const int OfflineEndTimeFieldNumber = 2;
    private bool hasOfflineEndTime;
    private long offlineEndTime_;
    public bool HasOfflineEndTime {
      get { return hasOfflineEndTime; }
    }
    public long OfflineEndTime {
      get { return offlineEndTime_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCOppoNetStatusResponseFieldNames;
      if (hasResult) {
        output.WriteInt32(1, field_names[1], Result);
      }
      if (hasOfflineEndTime) {
        output.WriteInt64(2, field_names[0], OfflineEndTime);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
      }
      if (hasOfflineEndTime) {
        size += pb::CodedOutputStream.ComputeInt64Size(2, OfflineEndTime);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasResult) hash ^= result_.GetHashCode();
      if (hasOfflineEndTime) hash ^= offlineEndTime_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCOppoNetStatusResponse other = obj as CCOppoNetStatusResponse;
      if (other == null) return false;
      if (hasResult != other.hasResult || (hasResult && !result_.Equals(other.result_))) return false;
      if (hasOfflineEndTime != other.hasOfflineEndTime || (hasOfflineEndTime && !offlineEndTime_.Equals(other.offlineEndTime_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("result", hasResult, result_, writer);
      PrintField("offline_end_time", hasOfflineEndTime, offlineEndTime_, writer);
    }
    #endregion
    
    public static CCOppoNetStatusResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCOppoNetStatusResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCOppoNetStatusResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCOppoNetStatusResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCOppoNetStatusResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCOppoNetStatusResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCOppoNetStatusResponse result;
      
      private CCOppoNetStatusResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCOppoNetStatusResponse original = result;
          result = new CCOppoNetStatusResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCOppoNetStatusResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCOppoNetStatusResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCOppoNetStatusResponse.DefaultInstance; }
      }
      
      public override CCOppoNetStatusResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCOppoNetStatusResponse) {
          return MergeFrom((CCOppoNetStatusResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCOppoNetStatusResponse other) {
        if (other == global::com.golf.proto.CCOppoNetStatusResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasOfflineEndTime) {
          OfflineEndTime = other.OfflineEndTime;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCOppoNetStatusResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCOppoNetStatusResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
            case 16: {
              result.hasOfflineEndTime = input.ReadInt64(ref result.offlineEndTime_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
      
      public bool HasOfflineEndTime {
        get { return result.hasOfflineEndTime; }
      }
      public long OfflineEndTime {
        get { return result.OfflineEndTime; }
        set { SetOfflineEndTime(value); }
      }
      public Builder SetOfflineEndTime(long value) {
        PrepareBuilder();
        result.hasOfflineEndTime = true;
        result.offlineEndTime_ = value;
        return this;
      }
      public Builder ClearOfflineEndTime() {
        PrepareBuilder();
        result.hasOfflineEndTime = false;
        result.offlineEndTime_ = 0L;
        return this;
      }
    }
    static CCOppoNetStatusResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRoomHeartbeatRequest : pb::GeneratedMessageLite<CCRoomHeartbeatRequest, CCRoomHeartbeatRequest.Builder> {
    private CCRoomHeartbeatRequest() { }
    private static readonly CCRoomHeartbeatRequest defaultInstance = new CCRoomHeartbeatRequest().MakeReadOnly();
    private static readonly string[] _cCRoomHeartbeatRequestFieldNames = new string[] {  };
    private static readonly uint[] _cCRoomHeartbeatRequestFieldTags = new uint[] {  };
    public static CCRoomHeartbeatRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRoomHeartbeatRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRoomHeartbeatRequest ThisMessage {
      get { return this; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRoomHeartbeatRequestFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRoomHeartbeatRequest other = obj as CCRoomHeartbeatRequest;
      if (other == null) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
    }
    #endregion
    
    public static CCRoomHeartbeatRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoomHeartbeatRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRoomHeartbeatRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRoomHeartbeatRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRoomHeartbeatRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRoomHeartbeatRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRoomHeartbeatRequest result;
      
      private CCRoomHeartbeatRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRoomHeartbeatRequest original = result;
          result = new CCRoomHeartbeatRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRoomHeartbeatRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRoomHeartbeatRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCRoomHeartbeatRequest.DefaultInstance; }
      }
      
      public override CCRoomHeartbeatRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRoomHeartbeatRequest) {
          return MergeFrom((CCRoomHeartbeatRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRoomHeartbeatRequest other) {
        if (other == global::com.golf.proto.CCRoomHeartbeatRequest.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRoomHeartbeatRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRoomHeartbeatRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static CCRoomHeartbeatRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCRoomHeartbeatResponse : pb::GeneratedMessageLite<CCRoomHeartbeatResponse, CCRoomHeartbeatResponse.Builder> {
    private CCRoomHeartbeatResponse() { }
    private static readonly CCRoomHeartbeatResponse defaultInstance = new CCRoomHeartbeatResponse().MakeReadOnly();
    private static readonly string[] _cCRoomHeartbeatResponseFieldNames = new string[] {  };
    private static readonly uint[] _cCRoomHeartbeatResponseFieldTags = new uint[] {  };
    public static CCRoomHeartbeatResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCRoomHeartbeatResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCRoomHeartbeatResponse ThisMessage {
      get { return this; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCRoomHeartbeatResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCRoomHeartbeatResponse other = obj as CCRoomHeartbeatResponse;
      if (other == null) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
    }
    #endregion
    
    public static CCRoomHeartbeatResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCRoomHeartbeatResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCRoomHeartbeatResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCRoomHeartbeatResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCRoomHeartbeatResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCRoomHeartbeatResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCRoomHeartbeatResponse result;
      
      private CCRoomHeartbeatResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CCRoomHeartbeatResponse original = result;
          result = new CCRoomHeartbeatResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCRoomHeartbeatResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCRoomHeartbeatResponse DefaultInstanceForType {
        get { return global::com.golf.proto.CCRoomHeartbeatResponse.DefaultInstance; }
      }
      
      public override CCRoomHeartbeatResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCRoomHeartbeatResponse) {
          return MergeFrom((CCRoomHeartbeatResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCRoomHeartbeatResponse other) {
        if (other == global::com.golf.proto.CCRoomHeartbeatResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCRoomHeartbeatResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCRoomHeartbeatResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static CCRoomHeartbeatResponse() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CCGetVerifyServerRoundResultRequest : pb::GeneratedMessageLite<CCGetVerifyServerRoundResultRequest, CCGetVerifyServerRoundResultRequest.Builder> {
    private CCGetVerifyServerRoundResultRequest() { }
    private static readonly CCGetVerifyServerRoundResultRequest defaultInstance = new CCGetVerifyServerRoundResultRequest().MakeReadOnly();
    private static readonly string[] _cCGetVerifyServerRoundResultRequestFieldNames = new string[] { "hole_pos", "scene_id", "scene_name", "strick_data" };
    private static readonly uint[] _cCGetVerifyServerRoundResultRequestFieldTags = new uint[] { 26, 8, 18, 34 };
    public static CCGetVerifyServerRoundResultRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CCGetVerifyServerRoundResultRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CCGetVerifyServerRoundResultRequest ThisMessage {
      get { return this; }
    }
    
    public const int SceneIdFieldNumber = 1;
    private bool hasSceneId;
    private int sceneId_;
    public bool HasSceneId {
      get { return hasSceneId; }
    }
    public int SceneId {
      get { return sceneId_; }
    }
    
    public const int SceneNameFieldNumber = 2;
    private bool hasSceneName;
    private string sceneName_ = "";
    public bool HasSceneName {
      get { return hasSceneName; }
    }
    public string SceneName {
      get { return sceneName_; }
    }
    
    public const int HolePosFieldNumber = 3;
    private bool hasHolePos;
    private global::com.golf.proto.CCVec3FloatToLong holePos_;
    public bool HasHolePos {
      get { return hasHolePos; }
    }
    public global::com.golf.proto.CCVec3FloatToLong HolePos {
      get { return holePos_ ?? global::com.golf.proto.CCVec3FloatToLong.DefaultInstance; }
    }
    
    public const int StrickDataFieldNumber = 4;
    private bool hasStrickData;
    private global::com.golf.proto.CCStrickData strickData_;
    public bool HasStrickData {
      get { return hasStrickData; }
    }
    public global::com.golf.proto.CCStrickData StrickData {
      get { return strickData_ ?? global::com.golf.proto.CCStrickData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cCGetVerifyServerRoundResultRequestFieldNames;
      if (hasSceneId) {
        output.WriteInt32(1, field_names[1], SceneId);
      }
      if (hasSceneName) {
        output.WriteString(2, field_names[2], SceneName);
      }
      if (hasHolePos) {
        output.WriteMessage(3, field_names[0], HolePos);
      }
      if (hasStrickData) {
        output.WriteMessage(4, field_names[3], StrickData);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSceneId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, SceneId);
      }
      if (hasSceneName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, SceneName);
      }
      if (hasHolePos) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, HolePos);
      }
      if (hasStrickData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, StrickData);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSceneId) hash ^= sceneId_.GetHashCode();
      if (hasSceneName) hash ^= sceneName_.GetHashCode();
      if (hasHolePos) hash ^= holePos_.GetHashCode();
      if (hasStrickData) hash ^= strickData_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CCGetVerifyServerRoundResultRequest other = obj as CCGetVerifyServerRoundResultRequest;
      if (other == null) return false;
      if (hasSceneId != other.hasSceneId || (hasSceneId && !sceneId_.Equals(other.sceneId_))) return false;
      if (hasSceneName != other.hasSceneName || (hasSceneName && !sceneName_.Equals(other.sceneName_))) return false;
      if (hasHolePos != other.hasHolePos || (hasHolePos && !holePos_.Equals(other.holePos_))) return false;
      if (hasStrickData != other.hasStrickData || (hasStrickData && !strickData_.Equals(other.strickData_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("scene_id", hasSceneId, sceneId_, writer);
      PrintField("scene_name", hasSceneName, sceneName_, writer);
      PrintField("hole_pos", hasHolePos, holePos_, writer);
      PrintField("strick_data", hasStrickData, strickData_, writer);
    }
    #endregion
    
    public static CCGetVerifyServerRoundResultRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CCGetVerifyServerRoundResultRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CCGetVerifyServerRoundResultRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CCGetVerifyServerRoundResultRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<CCGetVerifyServerRoundResultRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CCGetVerifyServerRoundResultRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CCGetVerifyServerRoundResultRequest result;
      
      private CCGetVerifyServerRoundResultRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CCGetVerifyServerRoundResultRequest original = result;
          result = new CCGetVerifyServerRoundResultRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CCGetVerifyServerRoundResultRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CCGetVerifyServerRoundResultRequest DefaultInstanceForType {
        get { return global::com.golf.proto.CCGetVerifyServerRoundResultRequest.DefaultInstance; }
      }
      
      public override CCGetVerifyServerRoundResultRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CCGetVerifyServerRoundResultRequest) {
          return MergeFrom((CCGetVerifyServerRoundResultRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CCGetVerifyServerRoundResultRequest other) {
        if (other == global::com.golf.proto.CCGetVerifyServerRoundResultRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSceneId) {
          SceneId = other.SceneId;
        }
        if (other.HasSceneName) {
          SceneName = other.SceneName;
        }
        if (other.HasHolePos) {
          MergeHolePos(other.HolePos);
        }
        if (other.HasStrickData) {
          MergeStrickData(other.StrickData);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cCGetVerifyServerRoundResultRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cCGetVerifyServerRoundResultRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSceneId = input.ReadInt32(ref result.sceneId_);
              break;
            }
            case 18: {
              result.hasSceneName = input.ReadString(ref result.sceneName_);
              break;
            }
            case 26: {
              global::com.golf.proto.CCVec3FloatToLong.Builder subBuilder = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder();
              if (result.hasHolePos) {
                subBuilder.MergeFrom(HolePos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              HolePos = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::com.golf.proto.CCStrickData.Builder subBuilder = global::com.golf.proto.CCStrickData.CreateBuilder();
              if (result.hasStrickData) {
                subBuilder.MergeFrom(StrickData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StrickData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSceneId {
        get { return result.hasSceneId; }
      }
      public int SceneId {
        get { return result.SceneId; }
        set { SetSceneId(value); }
      }
      public Builder SetSceneId(int value) {
        PrepareBuilder();
        result.hasSceneId = true;
        result.sceneId_ = value;
        return this;
      }
      public Builder ClearSceneId() {
        PrepareBuilder();
        result.hasSceneId = false;
        result.sceneId_ = 0;
        return this;
      }
      
      public bool HasSceneName {
        get { return result.hasSceneName; }
      }
      public string SceneName {
        get { return result.SceneName; }
        set { SetSceneName(value); }
      }
      public Builder SetSceneName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSceneName = true;
        result.sceneName_ = value;
        return this;
      }
      public Builder ClearSceneName() {
        PrepareBuilder();
        result.hasSceneName = false;
        result.sceneName_ = "";
        return this;
      }
      
      public bool HasHolePos {
       get { return result.hasHolePos; }
      }
      public global::com.golf.proto.CCVec3FloatToLong HolePos {
        get { return result.HolePos; }
        set { SetHolePos(value); }
      }
      public Builder SetHolePos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHolePos = true;
        result.holePos_ = value;
        return this;
      }
      public Builder SetHolePos(global::com.golf.proto.CCVec3FloatToLong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHolePos = true;
        result.holePos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHolePos(global::com.golf.proto.CCVec3FloatToLong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHolePos &&
            result.holePos_ != global::com.golf.proto.CCVec3FloatToLong.DefaultInstance) {
            result.holePos_ = global::com.golf.proto.CCVec3FloatToLong.CreateBuilder(result.holePos_).MergeFrom(value).BuildPartial();
        } else {
          result.holePos_ = value;
        }
        result.hasHolePos = true;
        return this;
      }
      public Builder ClearHolePos() {
        PrepareBuilder();
        result.hasHolePos = false;
        result.holePos_ = null;
        return this;
      }
      
      public bool HasStrickData {
       get { return result.hasStrickData; }
      }
      public global::com.golf.proto.CCStrickData StrickData {
        get { return result.StrickData; }
        set { SetStrickData(value); }
      }
      public Builder SetStrickData(global::com.golf.proto.CCStrickData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrickData = true;
        result.strickData_ = value;
        return this;
      }
      public Builder SetStrickData(global::com.golf.proto.CCStrickData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStrickData = true;
        result.strickData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStrickData(global::com.golf.proto.CCStrickData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStrickData &&
            result.strickData_ != global::com.golf.proto.CCStrickData.DefaultInstance) {
            result.strickData_ = global::com.golf.proto.CCStrickData.CreateBuilder(result.strickData_).MergeFrom(value).BuildPartial();
        } else {
          result.strickData_ = value;
        }
        result.hasStrickData = true;
        return this;
      }
      public Builder ClearStrickData() {
        PrepareBuilder();
        result.hasStrickData = false;
        result.strickData_ = null;
        return this;
      }
    }
    static CCGetVerifyServerRoundResultRequest() {
      object.ReferenceEquals(global::com.golf.proto.GolfProto.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
